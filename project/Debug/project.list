
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c8bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001be4  0800ca8c  0800ca8c  0001ca8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800e670  0800e670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800e67c  0800e67c  0001e67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800e680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000acd8  20000078  0800e6f8  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ad50  0800e6f8  0002ad50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   00056d8f  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a4db  00000000  00000000  00076e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001bad0  00000000  00000000  00081312  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001ed8  00000000  00000000  0009cde8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002c40  00000000  00000000  0009ecc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000151e9  00000000  00000000  000a1900  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000b518  00000000  00000000  000b6ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000c2001  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006390  00000000  00000000  000c2080  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ca74 	.word	0x0800ca74

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800ca74 	.word	0x0800ca74

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f82c 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f00b f935 	bl	800b838 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005ce:	f00b f85d 	bl	800b68c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005d2:	2000      	movs	r0, #0
 80005d4:	bd08      	pop	{r3, pc}
	...

080005d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x10>)
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_IncTick+0x14>)
 80005dc:	6811      	ldr	r1, [r2, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	440b      	add	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20003f98 	.word	0x20003f98
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20003f98 	.word	0x20003f98

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
 8000604:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000608:	bf1e      	ittt	ne
 800060a:	4b04      	ldrne	r3, [pc, #16]	; (800061c <HAL_Delay+0x20>)
 800060c:	781b      	ldrbne	r3, [r3, #0]
 800060e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000610:	f7ff ffee 	bl	80005f0 <HAL_GetTick>
 8000614:	1b40      	subs	r0, r0, r5
 8000616:	4284      	cmp	r4, r0
 8000618:	d8fa      	bhi.n	8000610 <HAL_Delay+0x14>
  {
  }
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000622:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800062e:	041b      	lsls	r3, r3, #16
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800063a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800063c:	60d3      	str	r3, [r2, #12]
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	68dc      	ldr	r4, [r3, #12]
 800064a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	2b04      	cmp	r3, #4
 8000656:	bf28      	it	cs
 8000658:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000670:	ea01 0103 	and.w	r1, r1, r3
 8000674:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	fa05 f404 	lsl.w	r4, r5, r4
 800067c:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000680:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	ea42 0201 	orr.w	r2, r2, r1
 8000688:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800068c:	da05      	bge.n	800069a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	f000 000f 	and.w	r0, r0, #15
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_NVIC_SetPriority+0x6c>)
 8000696:	541a      	strb	r2, [r3, r0]
 8000698:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006a4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000ed14 	.word	0xe000ed14

080006b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b4:	0942      	lsrs	r2, r0, #5
 80006b6:	2301      	movs	r3, #1
 80006b8:	f000 001f 	and.w	r0, r0, #31
 80006bc:	fa03 f000 	lsl.w	r0, r3, r0
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <HAL_NVIC_EnableIRQ+0x14>)
 80006c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	21f0      	movs	r1, #240	; 0xf0
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006fa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	bf0c      	ite	eq
 8000700:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000704:	f022 0204 	bicne.w	r2, r2, #4
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	e000e010 	.word	0xe000e010

08000710 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8000710:	2300      	movs	r3, #0
{
 8000712:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000714:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000718:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800071a:	6803      	ldr	r3, [r0, #0]
{
 800071c:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800071e:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000720:	591a      	ldr	r2, [r3, r4]
 8000722:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000726:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000728:	591b      	ldr	r3, [r3, r4]
 800072a:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800072c:	f7ff ff66 	bl	80005fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	9a01      	ldr	r2, [sp, #4]
 8000734:	511a      	str	r2, [r3, r4]
}
 8000736:	b003      	add	sp, #12
 8000738:	bd30      	pop	{r4, r5, pc}
	...

0800073c <ETH_MACDMAConfig>:
{
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000740:	b129      	cbz	r1, 800074e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000746:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800074e:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000750:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000752:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000754:	68e0      	ldr	r0, [r4, #12]
 8000756:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000758:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800075a:	bf08      	it	eq
 800075c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000760:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000764:	482e      	ldr	r0, [pc, #184]	; (8000820 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000766:	bf18      	it	ne
 8000768:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800076a:	4028      	ands	r0, r5
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000774:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000776:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000778:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800077a:	f7ff ff3f 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800077e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000780:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000782:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000784:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000786:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000788:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800078a:	f7ff ff37 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800078e:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000790:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000792:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000794:	2500      	movs	r5, #0
 8000796:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800079a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800079c:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007a0:	0412      	lsls	r2, r2, #16
 80007a2:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007a8:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007aa:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ac:	f7ff ff26 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007b0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007b4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007b6:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007b8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ba:	f7ff ff1f 	bl	80005fc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007be:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c0:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007c4:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007c6:	f241 0518 	movw	r5, #4120	; 0x1018
 80007ca:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007cc:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007ce:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007d2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80007d6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80007d8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	f7ff ff0f 	bl	80005fc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80007de:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80007e4:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80007ec:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ee:	f7ff ff05 	bl	80005fc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80007f2:	6822      	ldr	r2, [r4, #0]
 80007f4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007f8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007fa:	69a3      	ldr	r3, [r4, #24]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d107      	bne.n	8000810 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000800:	f241 011c 	movw	r1, #4124	; 0x101c
 8000804:	5853      	ldr	r3, [r2, r1]
 8000806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000810:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000812:	4a06      	ldr	r2, [pc, #24]	; (800082c <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000814:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000816:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000818:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <ETH_MACDMAConfig+0xf4>)
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	ff20810f 	.word	0xff20810f
 8000824:	f8de3f23 	.word	0xf8de3f23
 8000828:	02c12080 	.word	0x02c12080
 800082c:	40028040 	.word	0x40028040
 8000830:	40028044 	.word	0x40028044

08000834 <HAL_ETH_DMATxDescListInit>:
{
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000836:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800083a:	2c01      	cmp	r4, #1
 800083c:	f04f 0402 	mov.w	r4, #2
 8000840:	d033      	beq.n	80008aa <HAL_ETH_DMATxDescListInit+0x76>
 8000842:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000844:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000848:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800084c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000850:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000854:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000858:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800085a:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->TxDesc = DMATxDescTab;
 800085e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000860:	429d      	cmp	r5, r3
 8000862:	d10b      	bne.n	800087c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	f241 0310 	movw	r3, #4112	; 0x1010
 800086a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800086c:	2301      	movs	r3, #1
 800086e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000872:	2300      	movs	r3, #0
 8000874:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000878:	4618      	mov	r0, r3
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087c:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000880:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000884:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000888:	69c6      	ldr	r6, [r0, #28]
 800088a:	b92e      	cbnz	r6, 8000898 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800088c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000890:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000894:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000898:	4565      	cmp	r5, ip
 800089a:	bf2c      	ite	cs
 800089c:	460e      	movcs	r6, r1
 800089e:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 80008a0:	3501      	adds	r5, #1
 80008a2:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80008a4:	f844 6c34 	str.w	r6, [r4, #-52]
 80008a8:	e7da      	b.n	8000860 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008aa:	4620      	mov	r0, r4
}
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ae <HAL_ETH_DMARxDescListInit>:
{
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80008b2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008b6:	2c01      	cmp	r4, #1
 80008b8:	f04f 0402 	mov.w	r4, #2
 80008bc:	d030      	beq.n	8000920 <HAL_ETH_DMARxDescListInit+0x72>
 80008be:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008c0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80008c8:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80008cc:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008d0:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80008d4:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008d6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80008da:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
  heth->RxDesc = DMARxDescTab; 
 80008de:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80008e0:	429d      	cmp	r5, r3
 80008e2:	d10c      	bne.n	80008fe <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80008e4:	6802      	ldr	r2, [r0, #0]
 80008e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80008ea:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008f2:	2300      	movs	r3, #0
 80008f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008f8:	4618      	mov	r0, r3
 80008fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008fe:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000902:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000906:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800090a:	4565      	cmp	r5, ip
 800090c:	bf2c      	ite	cs
 800090e:	4688      	movcs	r8, r1
 8000910:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000912:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8000916:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000918:	f844 8c14 	str.w	r8, [r4, #-20]
 800091c:	3420      	adds	r4, #32
 800091e:	e7df      	b.n	80008e0 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000920:	4620      	mov	r0, r4
}
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000928 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000928:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800092c:	2b01      	cmp	r3, #1
 800092e:	f04f 0302 	mov.w	r3, #2
{
 8000932:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000934:	d066      	beq.n	8000a04 <HAL_ETH_TransmitFrame+0xdc>
 8000936:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000938:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800093c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000940:	b929      	cbnz	r1, 800094e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000942:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000946:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800094a:	4610      	mov	r0, r2
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800094e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000950:	681c      	ldr	r4, [r3, #0]
 8000952:	2c00      	cmp	r4, #0
 8000954:	da06      	bge.n	8000964 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000956:	2312      	movs	r3, #18
 8000958:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800095c:	2300      	movs	r3, #0
 800095e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000962:	e7f2      	b.n	800094a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000964:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000968:	42a1      	cmp	r1, r4
 800096a:	d92c      	bls.n	80009c6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800096c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000970:	fb04 1412 	mls	r4, r4, r2, r1
 8000974:	b32c      	cbz	r4, 80009c2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000976:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000978:	4c23      	ldr	r4, [pc, #140]	; (8000a08 <HAL_ETH_TransmitFrame+0xe0>)
 800097a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800097e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000982:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000984:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000988:	2400      	movs	r4, #0
 800098a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800098e:	681d      	ldr	r5, [r3, #0]
 8000990:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000994:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000996:	b91c      	cbnz	r4, 80009a0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000998:	681d      	ldr	r5, [r3, #0]
 800099a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800099e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 80009a0:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009a2:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80009a4:	d104      	bne.n	80009b0 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009a6:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009a8:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80009ae:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009b0:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 80009b2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009b4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80009b8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ba:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009bc:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80009be:	d1e6      	bne.n	800098e <HAL_ETH_TransmitFrame+0x66>
 80009c0:	e00d      	b.n	80009de <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 80009c2:	2a01      	cmp	r2, #1
 80009c4:	d1d8      	bne.n	8000978 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009c6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009c8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009cc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009d0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009d2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009da:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009e0:	f241 0214 	movw	r2, #4116	; 0x1014
 80009e4:	6803      	ldr	r3, [r0, #0]
 80009e6:	5899      	ldr	r1, [r3, r2]
 80009e8:	0749      	lsls	r1, r1, #29
 80009ea:	d505      	bpl.n	80009f8 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009ec:	2104      	movs	r1, #4
 80009ee:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80009f0:	2100      	movs	r1, #0
 80009f2:	f241 0204 	movw	r2, #4100	; 0x1004
 80009f6:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009fe:	2300      	movs	r3, #0
 8000a00:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a04:	4618      	mov	r0, r3
}
 8000a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a08:	fffffa0c 	.word	0xfffffa0c

08000a0c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a0c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f04f 0302 	mov.w	r3, #2
{
 8000a16:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000a18:	d03b      	beq.n	8000a92 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a1a:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a1c:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000a1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000a22:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000a24:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	db01      	blt.n	8000a34 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a30:	3c01      	subs	r4, #1
 8000a32:	d106      	bne.n	8000a42 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a34:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a36:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a3c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a40:	e027      	b.n	8000a92 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68dd      	ldr	r5, [r3, #12]
 8000a46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a4e:	d103      	bne.n	8000a58 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a50:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000a52:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a54:	6285      	str	r5, [r0, #40]	; 0x28
 8000a56:	e7e7      	b.n	8000a28 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a60:	d102      	bne.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000a62:	3201      	adds	r2, #1
 8000a64:	6382      	str	r2, [r0, #56]	; 0x38
 8000a66:	e7f5      	b.n	8000a54 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000a68:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a6a:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000a6c:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000a6e:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a70:	bf08      	it	eq
 8000a72:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a80:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a82:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a84:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd30      	pop	{r4, r5, pc}

08000a96 <HAL_ETH_TxCpltCallback>:
 8000a96:	4770      	bx	lr

08000a98 <HAL_ETH_ErrorCallback>:
{
 8000a98:	4770      	bx	lr

08000a9a <HAL_ETH_IRQHandler>:
{
 8000a9a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a9c:	6802      	ldr	r2, [r0, #0]
 8000a9e:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000aa2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000aa4:	5995      	ldr	r5, [r2, r6]
 8000aa6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000aaa:	d021      	beq.n	8000af0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000aac:	f00a f8a6 	bl	800abfc <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000abc:	2300      	movs	r3, #0
 8000abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	f241 0514 	movw	r5, #4116	; 0x1014
 8000ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000acc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000ace:	595b      	ldr	r3, [r3, r5]
 8000ad0:	041b      	lsls	r3, r3, #16
 8000ad2:	d50c      	bpl.n	8000aee <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f7ff ffdf 	bl	8000a98 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000af0:	5993      	ldr	r3, [r2, r6]
 8000af2:	07da      	lsls	r2, r3, #31
 8000af4:	d5e5      	bpl.n	8000ac2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000af6:	f7ff ffce 	bl	8000a96 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000afa:	2301      	movs	r3, #1
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b04:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000b08:	e7db      	b.n	8000ac2 <HAL_ETH_IRQHandler+0x28>

08000b0a <HAL_ETH_ReadPHYRegister>:
{
 8000b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b0c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b10:	4605      	mov	r5, r0
 8000b12:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b14:	2b82      	cmp	r3, #130	; 0x82
 8000b16:	d030      	beq.n	8000b7a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b18:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b1a:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b1c:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b22:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b24:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b28:	f003 011c 	and.w	r1, r3, #28
 8000b2c:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b2e:	8a04      	ldrh	r4, [r0, #16]
 8000b30:	02e4      	lsls	r4, r4, #11
 8000b32:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b34:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b36:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b3a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b3c:	f7ff fd58 	bl	80005f0 <HAL_GetTick>
 8000b40:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b42:	f014 0001 	ands.w	r0, r4, #1
 8000b46:	d107      	bne.n	8000b58 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b58:	f7ff fd4a 	bl	80005f0 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b62:	d307      	bcc.n	8000b74 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b64:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000b68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	691c      	ldr	r4, [r3, #16]
 8000b78:	e7e3      	b.n	8000b42 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b7a:	2002      	movs	r0, #2
}
 8000b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b7e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b82:	2b42      	cmp	r3, #66	; 0x42
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b88:	d02e      	beq.n	8000be8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b8a:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b8c:	018c      	lsls	r4, r1, #6
 8000b8e:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b90:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b94:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	f044 0403 	orr.w	r4, r4, #3
 8000b9e:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000ba0:	f000 001c 	and.w	r0, r0, #28
 8000ba4:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ba6:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000ba8:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000baa:	02e4      	lsls	r4, r4, #11
 8000bac:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000bae:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000bb0:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000bb2:	f7ff fd1d 	bl	80005f0 <HAL_GetTick>
 8000bb6:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb8:	f014 0001 	ands.w	r0, r4, #1
 8000bbc:	d103      	bne.n	8000bc6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bc6:	f7ff fd13 	bl	80005f0 <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bd0:	d307      	bcc.n	8000be2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bd2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bd4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bd6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	691c      	ldr	r4, [r3, #16]
 8000be6:	e7e7      	b.n	8000bb8 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000be8:	2002      	movs	r0, #2
}
 8000bea:	bd70      	pop	{r4, r5, r6, pc}

08000bec <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000bec:	2300      	movs	r3, #0
{
 8000bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000bf0:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000bf2:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	f000 80dc 	beq.w	8000db2 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bfa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c02:	b91b      	cbnz	r3, 8000c0c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c04:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c08:	f009 ff92 	bl	800ab30 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_ETH_Init+0x1cc>)
 8000c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
 8000c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c20:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <HAL_ETH_Init+0x1d0>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c28:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	6a21      	ldr	r1, [r4, #32]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c40:	f7ff fcd6 	bl	80005f0 <HAL_GetTick>
 8000c44:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	07d0      	lsls	r0, r2, #31
 8000c50:	d41d      	bmi.n	8000c8e <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c52:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c54:	f000 fcdc 	bl	8001610 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c58:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <HAL_ETH_Init+0x1d4>)
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c5c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c60:	4403      	add	r3, r0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d822      	bhi.n	8000cac <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c66:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c6a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c70:	2100      	movs	r1, #0
 8000c72:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c74:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c76:	f7ff ff82 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	b368      	cbz	r0, 8000cda <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000c7e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c80:	2101      	movs	r1, #1
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fd5a 	bl	800073c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c88:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c8c:	e00b      	b.n	8000ca6 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c8e:	f7ff fcaf 	bl	80005f0 <HAL_GetTick>
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c98:	d9d5      	bls.n	8000c46 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c9a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c9c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c9e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	b003      	add	sp, #12
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_ETH_Init+0x1dc>)
 8000cae:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <HAL_ETH_Init+0x1e0>)
 8000cb0:	4403      	add	r3, r0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d802      	bhi.n	8000cbc <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cb6:	f045 050c 	orr.w	r5, r5, #12
 8000cba:	e7d6      	b.n	8000c6a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000cbc:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_ETH_Init+0x1e4>)
 8000cbe:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_ETH_Init+0x1e8>)
 8000cc0:	4403      	add	r3, r0
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d9d1      	bls.n	8000c6a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ETH_Init+0x1ec>)
 8000cc8:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <HAL_ETH_Init+0x1f0>)
 8000cca:	4403      	add	r3, r0
 8000ccc:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cce:	bf94      	ite	ls
 8000cd0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cd4:	f045 0510 	orrhi.w	r5, r5, #16
 8000cd8:	e7c7      	b.n	8000c6a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	f7ff fc8e 	bl	80005fc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d053      	beq.n	8000d8e <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fc83 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cea:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cee:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff ff08 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cfa:	f7ff fc79 	bl	80005f0 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	42b8      	cmp	r0, r7
 8000d02:	d90b      	bls.n	8000d1c <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d04:	2101      	movs	r1, #1
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fd18 	bl	800073c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d0c:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d0e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d14:	2300      	movs	r3, #0
 8000d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d1a:	e7c4      	b.n	8000ca6 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d1c:	9b00      	ldr	r3, [sp, #0]
 8000d1e:	0759      	lsls	r1, r3, #29
 8000d20:	d5e6      	bpl.n	8000cf0 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d26:	2100      	movs	r1, #0
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff ff28 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d1a5      	bne.n	8000c7e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d32:	f7ff fc5d 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d36:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d3a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fee2 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d46:	f7ff fc53 	bl	80005f0 <HAL_GetTick>
 8000d4a:	1b80      	subs	r0, r0, r6
 8000d4c:	42b8      	cmp	r0, r7
 8000d4e:	d8d9      	bhi.n	8000d04 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d50:	9b00      	ldr	r3, [sp, #0]
 8000d52:	069a      	lsls	r2, r3, #26
 8000d54:	d5f2      	bpl.n	8000d3c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d56:	466a      	mov	r2, sp
 8000d58:	2110      	movs	r1, #16
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fed5 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d18c      	bne.n	8000c7e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d64:	9b00      	ldr	r3, [sp, #0]
 8000d66:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d6a:	bf18      	it	ne
 8000d6c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d70:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d72:	bf4c      	ite	mi
 8000d74:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d76:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d7a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d7c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fcdb 	bl	800073c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d8c:	e78b      	b.n	8000ca6 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d8e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d90:	4629      	mov	r1, r5
 8000d92:	68e2      	ldr	r2, [r4, #12]
 8000d94:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d96:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d98:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	f7ff feee 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	f47f af6b 	bne.w	8000c7e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000da8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000dac:	f7ff fc26 	bl	80005fc <HAL_Delay>
 8000db0:	e7e5      	b.n	8000d7e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000db2:	2501      	movs	r5, #1
 8000db4:	e777      	b.n	8000ca6 <HAL_ETH_Init+0xba>
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	feced300 	.word	0xfeced300
 8000dc4:	00e4e1bf 	.word	0x00e4e1bf
 8000dc8:	fde9f140 	.word	0xfde9f140
 8000dcc:	017d783f 	.word	0x017d783f
 8000dd0:	fc6c7900 	.word	0xfc6c7900
 8000dd4:	026259ff 	.word	0x026259ff
 8000dd8:	fa0a1f00 	.word	0xfa0a1f00
 8000ddc:	02faf07f 	.word	0x02faf07f

08000de0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000de0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000de4:	2b01      	cmp	r3, #1
{  
 8000de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de8:	4605      	mov	r5, r0
 8000dea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dee:	d033      	beq.n	8000e58 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000df0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000df2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000df4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000df8:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000dfa:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dfc:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dfe:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e00:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e04:	f042 0208 	orr.w	r2, r2, #8
 8000e08:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e0e:	f7ff fbf5 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e12:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e14:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000e1a:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f042 0204 	orr.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e28:	f7ff fbe8 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e2c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e2e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000e30:	9a00      	ldr	r2, [sp, #0]
 8000e32:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e34:	f7ff fc6c 	bl	8000710 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e38:	682a      	ldr	r2, [r5, #0]
 8000e3a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e3e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e40:	58d1      	ldr	r1, [r2, r3]
 8000e42:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e46:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e48:	58d1      	ldr	r1, [r2, r3]
 8000e4a:	f041 0102 	orr.w	r1, r1, #2
 8000e4e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e50:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e54:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e60:	680b      	ldr	r3, [r1, #0]
{
 8000e62:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001028 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e68:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6c:	4a6c      	ldr	r2, [pc, #432]	; (8001020 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e6e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800102c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e72:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e78:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e80:	45b6      	cmp	lr, r6
 8000e82:	f040 80b3 	bne.w	8000fec <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	684c      	ldr	r4, [r1, #4]
 8000e88:	f024 0710 	bic.w	r7, r4, #16
 8000e8c:	2f02      	cmp	r7, #2
 8000e8e:	d116      	bne.n	8000ebe <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e90:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e94:	f003 0b07 	and.w	fp, r3, #7
 8000e98:	f04f 0c0f 	mov.w	ip, #15
 8000e9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000ea0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000eac:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000eb0:	690d      	ldr	r5, [r1, #16]
 8000eb2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eb6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000eba:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ebe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ec4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ecc:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ed6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eda:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ede:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ee2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	d811      	bhi.n	8000f0c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ee8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eea:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eee:	68cf      	ldr	r7, [r1, #12]
 8000ef0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ef4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ef8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000efa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f00:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f04:	409f      	lsls	r7, r3
 8000f06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f0a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f0c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f10:	688f      	ldr	r7, [r1, #8]
 8000f12:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f16:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f18:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1a:	00e5      	lsls	r5, r4, #3
 8000f1c:	d566      	bpl.n	8000fec <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f22:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f26:	f003 0e03 	and.w	lr, r3, #3
 8000f2a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f36:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f3e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f42:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f46:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f4a:	9503      	str	r5, [sp, #12]
 8000f4c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f4e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f52:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f56:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f5a:	4d32      	ldr	r5, [pc, #200]	; (8001024 <HAL_GPIO_Init+0x1c8>)
 8000f5c:	42a8      	cmp	r0, r5
 8000f5e:	d04c      	beq.n	8000ffa <HAL_GPIO_Init+0x19e>
 8000f60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f64:	42a8      	cmp	r0, r5
 8000f66:	d04a      	beq.n	8000ffe <HAL_GPIO_Init+0x1a2>
 8000f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	d048      	beq.n	8001002 <HAL_GPIO_Init+0x1a6>
 8000f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f74:	42a8      	cmp	r0, r5
 8000f76:	d046      	beq.n	8001006 <HAL_GPIO_Init+0x1aa>
 8000f78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	d044      	beq.n	800100a <HAL_GPIO_Init+0x1ae>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d044      	beq.n	800100e <HAL_GPIO_Init+0x1b2>
 8000f84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f88:	42a8      	cmp	r0, r5
 8000f8a:	d042      	beq.n	8001012 <HAL_GPIO_Init+0x1b6>
 8000f8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f90:	42a8      	cmp	r0, r5
 8000f92:	d040      	beq.n	8001016 <HAL_GPIO_Init+0x1ba>
 8000f94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	d03e      	beq.n	800101a <HAL_GPIO_Init+0x1be>
 8000f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa0:	42a8      	cmp	r0, r5
 8000fa2:	bf14      	ite	ne
 8000fa4:	250a      	movne	r5, #10
 8000fa6:	2509      	moveq	r5, #9
 8000fa8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fb4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000fba:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	bf0c      	ite	eq
 8000fbe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fc0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000fc6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fc8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	bf0c      	ite	eq
 8000fcc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fce:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fd4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fd6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	bf0c      	ite	eq
 8000fda:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fdc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fde:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fe0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fe2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	bf54      	ite	pl
 8000fe6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fe8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fea:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fec:	3301      	adds	r3, #1
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	f47f af3f 	bne.w	8000e72 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ff4:	b005      	add	sp, #20
 8000ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7d4      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8000ffe:	2501      	movs	r5, #1
 8001000:	e7d2      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001002:	2502      	movs	r5, #2
 8001004:	e7d0      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001006:	2503      	movs	r5, #3
 8001008:	e7ce      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800100a:	2504      	movs	r5, #4
 800100c:	e7cc      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800100e:	2505      	movs	r5, #5
 8001010:	e7ca      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001012:	2506      	movs	r5, #6
 8001014:	e7c8      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001016:	2507      	movs	r5, #7
 8001018:	e7c6      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800101a:	2508      	movs	r5, #8
 800101c:	e7c4      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800101e:	bf00      	nop
 8001020:	40013c00 	.word	0x40013c00
 8001024:	40020000 	.word	0x40020000
 8001028:	40023800 	.word	0x40023800
 800102c:	40021400 	.word	0x40021400

08001030 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	b10a      	cbz	r2, 8001036 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001032:	6181      	str	r1, [r0, #24]
 8001034:	4770      	bx	lr
 8001036:	0409      	lsls	r1, r1, #16
 8001038:	e7fb      	b.n	8001032 <HAL_GPIO_WritePin+0x2>

0800103a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800103a:	6943      	ldr	r3, [r0, #20]
 800103c:	4059      	eors	r1, r3
 800103e:	6141      	str	r1, [r0, #20]
 8001040:	4770      	bx	lr

08001042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001046:	4604      	mov	r4, r0
{
 8001048:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 800104a:	2800      	cmp	r0, #0
 800104c:	d06b      	beq.n	8001126 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800104e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001056:	b91b      	cbnz	r3, 8001060 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001058:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105c:	f00a fbb4 	bl	800b7c8 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001060:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001062:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001064:	466e      	mov	r6, sp
 8001066:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 800106a:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800106e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8001072:	f001 fbf4 	bl	800285e <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800107e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001082:	f104 0510 	add.w	r5, r4, #16
 8001086:	e886 0003 	stmia.w	r6, {r0, r1}
 800108a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800108e:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001090:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001092:	f001 fba9 	bl	80027e8 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001096:	2100      	movs	r1, #0
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	f001 fbe6 	bl	800286a <USB_SetCurrentMode>
 800109e:	2100      	movs	r1, #0
 80010a0:	4622      	mov	r2, r4
 80010a2:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80010a6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80010aa:	331c      	adds	r3, #28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ac:	84d9      	strh	r1, [r3, #38]	; 0x26
 80010ae:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 80010b0:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
  for (i = 0U; i < 15U; i++)
 80010b4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b6:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ba:	6298      	str	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010bc:	62d8      	str	r0, [r3, #44]	; 0x2c
    hpcd->IN_ep[i].xfer_len = 0U;
 80010be:	6358      	str	r0, [r3, #52]	; 0x34
  for (i = 0U; i < 15U; i++)
 80010c0:	d1f1      	bne.n	80010a6 <HAL_PCD_Init+0x64>
 80010c2:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c4:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80010c6:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80010ca:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80010cc:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 80010d0:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 80010d2:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d4:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d8:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010dc:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e0:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 80010e4:	d1ef      	bne.n	80010c6 <HAL_PCD_Init+0x84>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e8:	466e      	mov	r6, sp
 80010ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80010f8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	f001 fbf5 	bl	80028ec <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001102:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001104:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001108:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800110c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001112:	4620      	mov	r0, r4
 8001114:	f000 f809 	bl	800112a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	f001 fc9f 	bl	8002a5c <USB_DevDisconnect>

  return HAL_OK;
 800111e:	2000      	movs	r0, #0
}
 8001120:	b00a      	add	sp, #40	; 0x28
 8001122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001126:	2001      	movs	r0, #1
 8001128:	e7fa      	b.n	8001120 <HAL_PCD_Init+0xde>

0800112a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 800112a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112c:	6802      	ldr	r2, [r0, #0]
{
 800112e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001130:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 8001134:	2000      	movs	r0, #0
 8001136:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800113a:	6993      	ldr	r3, [r2, #24]
 800113c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001140:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001142:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	f043 0303 	orr.w	r3, r3, #3
 800114c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800114e:	4770      	bx	lr

08001150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	4604      	mov	r4, r0
 8001156:	b918      	cbnz	r0, 8001160 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800115a:	b002      	add	sp, #8
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001160:	6803      	ldr	r3, [r0, #0]
 8001162:	07d8      	lsls	r0, r3, #31
 8001164:	d410      	bmi.n	8001188 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	0799      	lsls	r1, r3, #30
 800116a:	d45e      	bmi.n	800122a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	0719      	lsls	r1, r3, #28
 8001170:	f100 80a3 	bmi.w	80012ba <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	075a      	lsls	r2, r3, #29
 8001178:	f100 80c4 	bmi.w	8001304 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117c:	69a2      	ldr	r2, [r4, #24]
 800117e:	2a00      	cmp	r2, #0
 8001180:	f040 812e 	bne.w	80013e0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001184:	2000      	movs	r0, #0
 8001186:	e7e8      	b.n	800115a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	f002 020c 	and.w	r2, r2, #12
 8001190:	2a04      	cmp	r2, #4
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	f002 020c 	and.w	r2, r2, #12
 800119a:	2a08      	cmp	r2, #8
 800119c:	d10a      	bne.n	80011b4 <HAL_RCC_OscConfig+0x64>
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	025a      	lsls	r2, r3, #9
 80011a2:	d507      	bpl.n	80011b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	039b      	lsls	r3, r3, #14
 80011aa:	d5dc      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1d9      	bne.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011b2:	e7d1      	b.n	8001158 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	4d88      	ldr	r5, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d111      	bne.n	80011e2 <HAL_RCC_OscConfig+0x92>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa13 	bl	80005f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4d83      	ldr	r5, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	039f      	lsls	r7, r3, #14
 80011d2:	d4c8      	bmi.n	8001166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fa0c 	bl	80005f0 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2864      	cmp	r0, #100	; 0x64
 80011dc:	d9f7      	bls.n	80011ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	e7bb      	b.n	800115a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e2:	b99b      	cbnz	r3, 800120c <HAL_RCC_OscConfig+0xbc>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff f9fc 	bl	80005f0 <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	0398      	lsls	r0, r3, #14
 80011fe:	d5b2      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff f9f6 	bl	80005f0 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	2864      	cmp	r0, #100	; 0x64
 8001208:	d9f7      	bls.n	80011fa <HAL_RCC_OscConfig+0xaa>
 800120a:	e7e8      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	d103      	bne.n	800121c <HAL_RCC_OscConfig+0xcc>
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	602b      	str	r3, [r5, #0]
 800121a:	e7d0      	b.n	80011be <HAL_RCC_OscConfig+0x6e>
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	e7cc      	b.n	80011c4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122a:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f012 0f0c 	tst.w	r2, #12
 8001232:	d007      	beq.n	8001244 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	f002 020c 	and.w	r2, r2, #12
 800123a:	2a08      	cmp	r2, #8
 800123c:	d111      	bne.n	8001262 <HAL_RCC_OscConfig+0x112>
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0259      	lsls	r1, r3, #9
 8001242:	d40e      	bmi.n	8001262 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	0792      	lsls	r2, r2, #30
 800124a:	d502      	bpl.n	8001252 <HAL_RCC_OscConfig+0x102>
 800124c:	68e2      	ldr	r2, [r4, #12]
 800124e:	2a01      	cmp	r2, #1
 8001250:	d182      	bne.n	8001158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6921      	ldr	r1, [r4, #16]
 8001256:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800125a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800125e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e784      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	4d5c      	ldr	r5, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001266:	b1bb      	cbz	r3, 8001298 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff f9be 	bl	80005f0 <HAL_GetTick>
 8001274:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	079f      	lsls	r7, r3, #30
 800127a:	d507      	bpl.n	800128c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	6922      	ldr	r2, [r4, #16]
 8001280:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001284:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001288:	602b      	str	r3, [r5, #0]
 800128a:	e76f      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff f9b0 	bl	80005f0 <HAL_GetTick>
 8001290:	1b80      	subs	r0, r0, r6
 8001292:	2802      	cmp	r0, #2
 8001294:	d9ef      	bls.n	8001276 <HAL_RCC_OscConfig+0x126>
 8001296:	e7a2      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012a0:	f7ff f9a6 	bl	80005f0 <HAL_GetTick>
 80012a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	0798      	lsls	r0, r3, #30
 80012aa:	f57f af5f 	bpl.w	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff f99f 	bl	80005f0 <HAL_GetTick>
 80012b2:	1b80      	subs	r0, r0, r6
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d9f6      	bls.n	80012a6 <HAL_RCC_OscConfig+0x156>
 80012b8:	e791      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ba:	6963      	ldr	r3, [r4, #20]
 80012bc:	4d46      	ldr	r5, [pc, #280]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80012be:	b183      	cbz	r3, 80012e2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80012c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012c8:	f7ff f992 	bl	80005f0 <HAL_GetTick>
 80012cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d0:	079b      	lsls	r3, r3, #30
 80012d2:	f53f af4f 	bmi.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff f98b 	bl	80005f0 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9f6      	bls.n	80012ce <HAL_RCC_OscConfig+0x17e>
 80012e0:	e77d      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012ea:	f7ff f981 	bl	80005f0 <HAL_GetTick>
 80012ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012f2:	079f      	lsls	r7, r3, #30
 80012f4:	f57f af3e 	bpl.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff f97a 	bl	80005f0 <HAL_GetTick>
 80012fc:	1b80      	subs	r0, r0, r6
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f6      	bls.n	80012f0 <HAL_RCC_OscConfig+0x1a0>
 8001302:	e76c      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	00d0      	lsls	r0, r2, #3
 800130a:	d427      	bmi.n	800135c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800130e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001320:	4d2e      	ldr	r5, [pc, #184]	; (80013dc <HAL_RCC_OscConfig+0x28c>)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	05d9      	lsls	r1, r3, #23
 8001326:	d51b      	bpl.n	8001360 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	68a3      	ldr	r3, [r4, #8]
 800132a:	4d2b      	ldr	r5, [pc, #172]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800132c:	2b01      	cmp	r3, #1
 800132e:	d127      	bne.n	8001380 <HAL_RCC_OscConfig+0x230>
 8001330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800133c:	f7ff f958 	bl	80005f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4f25      	ldr	r7, [pc, #148]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001342:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001346:	079b      	lsls	r3, r3, #30
 8001348:	d53f      	bpl.n	80013ca <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800134a:	2e00      	cmp	r6, #0
 800134c:	f43f af16 	beq.w	800117c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001352:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	e70f      	b.n	800117c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800135c:	2600      	movs	r6, #0
 800135e:	e7df      	b.n	8001320 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001368:	f7ff f942 	bl	80005f0 <HAL_GetTick>
 800136c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	05da      	lsls	r2, r3, #23
 8001372:	d4d9      	bmi.n	8001328 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001374:	f7ff f93c 	bl	80005f0 <HAL_GetTick>
 8001378:	1bc0      	subs	r0, r0, r7
 800137a:	2864      	cmp	r0, #100	; 0x64
 800137c:	d9f7      	bls.n	800136e <HAL_RCC_OscConfig+0x21e>
 800137e:	e72e      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	b9ab      	cbnz	r3, 80013ae <HAL_RCC_OscConfig+0x25e>
 8001382:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	672b      	str	r3, [r5, #112]	; 0x70
 800138e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001396:	f7ff f92b 	bl	80005f0 <HAL_GetTick>
 800139a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139e:	0798      	lsls	r0, r3, #30
 80013a0:	d5d3      	bpl.n	800134a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff f925 	bl	80005f0 <HAL_GetTick>
 80013a6:	1bc0      	subs	r0, r0, r7
 80013a8:	4540      	cmp	r0, r8
 80013aa:	d9f7      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
 80013ac:	e717      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b2:	d103      	bne.n	80013bc <HAL_RCC_OscConfig+0x26c>
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	672b      	str	r3, [r5, #112]	; 0x70
 80013ba:	e7b9      	b.n	8001330 <HAL_RCC_OscConfig+0x1e0>
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	672b      	str	r3, [r5, #112]	; 0x70
 80013c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	e7b5      	b.n	8001336 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f911 	bl	80005f0 <HAL_GetTick>
 80013ce:	eba0 0008 	sub.w	r0, r0, r8
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	d9b6      	bls.n	8001344 <HAL_RCC_OscConfig+0x1f4>
 80013d6:	e702      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e0:	4d24      	ldr	r5, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x324>)
 80013e2:	68ab      	ldr	r3, [r5, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	f43f aeb5 	beq.w	8001158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80013ee:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f8:	d12e      	bne.n	8001458 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80013fa:	f7ff f8f9 	bl	80005f0 <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	0199      	lsls	r1, r3, #6
 8001404:	d422      	bmi.n	800144c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001406:	6a22      	ldr	r2, [r4, #32]
 8001408:	69e3      	ldr	r3, [r4, #28]
 800140a:	4313      	orrs	r3, r2
 800140c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800140e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001412:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800141c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4c15      	ldr	r4, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	3a01      	subs	r2, #1
 8001424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001428:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800142a:	682b      	ldr	r3, [r5, #0]
 800142c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001430:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001432:	f7ff f8dd 	bl	80005f0 <HAL_GetTick>
 8001436:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	019a      	lsls	r2, r3, #6
 800143c:	f53f aea2 	bmi.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff f8d6 	bl	80005f0 <HAL_GetTick>
 8001444:	1b40      	subs	r0, r0, r5
 8001446:	2802      	cmp	r0, #2
 8001448:	d9f6      	bls.n	8001438 <HAL_RCC_OscConfig+0x2e8>
 800144a:	e6c8      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f8d0 	bl	80005f0 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	2802      	cmp	r0, #2
 8001454:	d9d4      	bls.n	8001400 <HAL_RCC_OscConfig+0x2b0>
 8001456:	e6c2      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001458:	f7ff f8ca 	bl	80005f0 <HAL_GetTick>
 800145c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	f57f ae8f 	bpl.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff f8c3 	bl	80005f0 <HAL_GetTick>
 800146a:	1b00      	subs	r0, r0, r4
 800146c:	2802      	cmp	r0, #2
 800146e:	d9f6      	bls.n	800145e <HAL_RCC_OscConfig+0x30e>
 8001470:	e6b5      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001478:	4913      	ldr	r1, [pc, #76]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800147a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147c:	688b      	ldr	r3, [r1, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d003      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x16>
 8001486:	2b08      	cmp	r3, #8
 8001488:	d003      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800148c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001490:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001492:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001494:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001498:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800149c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014a4:	bf1a      	itte	ne
 80014a6:	480a      	ldrne	r0, [pc, #40]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x58>)
 80014a8:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014aa:	4808      	ldreq	r0, [pc, #32]	; (80014cc <HAL_RCC_GetSysClockFreq+0x54>)
 80014ac:	fba1 0100 	umull	r0, r1, r1, r0
 80014b0:	f7fe fefe 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014bc:	3301      	adds	r3, #1
 80014be:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c4:	bd08      	pop	{r3, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	00f42400 	.word	0x00f42400
 80014d0:	007a1200 	.word	0x007a1200

080014d4 <HAL_RCC_ClockConfig>:
{
 80014d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014da:	4604      	mov	r4, r0
 80014dc:	b910      	cbnz	r0, 80014e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014de:	2001      	movs	r0, #1
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_RCC_ClockConfig+0x12c>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	428b      	cmp	r3, r1
 80014ee:	d328      	bcc.n	8001542 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	6821      	ldr	r1, [r4, #0]
 80014f2:	078f      	lsls	r7, r1, #30
 80014f4:	d430      	bmi.n	8001558 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	07c8      	lsls	r0, r1, #31
 80014f8:	d443      	bmi.n	8001582 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014fa:	4a41      	ldr	r2, [pc, #260]	; (8001600 <HAL_RCC_ClockConfig+0x12c>)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	429d      	cmp	r5, r3
 8001504:	d367      	bcc.n	80015d6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	0751      	lsls	r1, r2, #29
 800150a:	d470      	bmi.n	80015ee <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	0713      	lsls	r3, r2, #28
 800150e:	d507      	bpl.n	8001520 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001510:	4a3c      	ldr	r2, [pc, #240]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001512:	6921      	ldr	r1, [r4, #16]
 8001514:	6893      	ldr	r3, [r2, #8]
 8001516:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800151a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800151e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001520:	f7ff ffaa 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001526:	4a38      	ldr	r2, [pc, #224]	; (8001608 <HAL_RCC_ClockConfig+0x134>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	40d8      	lsrs	r0, r3
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x138>)
 8001534:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f00a f97e 	bl	800b838 <HAL_InitTick>
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
 800153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	430b      	orrs	r3, r1
 800154a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154c:	6813      	ldr	r3, [r2, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4299      	cmp	r1, r3
 8001554:	d1c3      	bne.n	80014de <HAL_RCC_ClockConfig+0xa>
 8001556:	e7cb      	b.n	80014f0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	f011 0f04 	tst.w	r1, #4
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 800155e:	d003      	beq.n	8001568 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001566:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	070e      	lsls	r6, r1, #28
 800156a:	d503      	bpl.n	8001574 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001572:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68a0      	ldr	r0, [r4, #8]
 8001578:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800157c:	4302      	orrs	r2, r0
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e7b9      	b.n	80014f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	6861      	ldr	r1, [r4, #4]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001586:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001588:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	d11c      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	d0a5      	beq.n	80014de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001598:	4e1a      	ldr	r6, [pc, #104]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159a:	f022 0203 	bic.w	r2, r2, #3
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015a2:	f7ff f825 	bl	80005f0 <HAL_GetTick>
 80015a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a8:	68b3      	ldr	r3, [r6, #8]
 80015aa:	6862      	ldr	r2, [r4, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015b4:	d0a1      	beq.n	80014fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff f81b 	bl	80005f0 <HAL_GetTick>
 80015ba:	1bc0      	subs	r0, r0, r7
 80015bc:	4540      	cmp	r0, r8
 80015be:	d9f3      	bls.n	80015a8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80015c0:	2003      	movs	r0, #3
}
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c6:	2902      	cmp	r1, #2
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015ce:	e7df      	b.n	8001590 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	f012 0f02 	tst.w	r2, #2
 80015d4:	e7dc      	b.n	8001590 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f023 030f 	bic.w	r3, r3, #15
 80015dc:	432b      	orrs	r3, r5
 80015de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	429d      	cmp	r5, r3
 80015e8:	f47f af79 	bne.w	80014de <HAL_RCC_ClockConfig+0xa>
 80015ec:	e78b      	b.n	8001506 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ee:	4905      	ldr	r1, [pc, #20]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 80015f0:	68e0      	ldr	r0, [r4, #12]
 80015f2:	688b      	ldr	r3, [r1, #8]
 80015f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015f8:	4303      	orrs	r3, r0
 80015fa:	608b      	str	r3, [r1, #8]
 80015fc:	e786      	b.n	800150c <HAL_RCC_ClockConfig+0x38>
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00
 8001604:	40023800 	.word	0x40023800
 8001608:	0800e5cf 	.word	0x0800e5cf
 800160c:	20000010 	.word	0x20000010

08001610 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <HAL_RCC_GetHCLKFreq+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000010 	.word	0x20000010

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x14>)
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800162a:	6810      	ldr	r0, [r2, #0]
}
 800162c:	40d8      	lsrs	r0, r3
 800162e:	4770      	bx	lr
 8001630:	40023800 	.word	0x40023800
 8001634:	0800e5df 	.word	0x0800e5df
 8001638:	20000010 	.word	0x20000010

0800163c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x14>)
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800164a:	6810      	ldr	r0, [r2, #0]
}
 800164c:	40d8      	lsrs	r0, r3
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800
 8001654:	0800e5df 	.word	0x0800e5df
 8001658:	20000010 	.word	0x20000010

0800165c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800165c:	230f      	movs	r3, #15
 800165e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_GetClockConfig+0x34>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001670:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001678:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001682:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_GetClockConfig+0x38>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	600b      	str	r3, [r1, #0]
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800169c:	6802      	ldr	r2, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016a0:	f012 0601 	ands.w	r6, r2, #1
 80016a4:	d00b      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016a6:	4bb8      	ldr	r3, [pc, #736]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80016ae:	6099      	str	r1, [r3, #8]
 80016b0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016b6:	fab6 f686 	clz	r6, r6
 80016ba:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016bc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016be:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80016c2:	d012      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016c4:	49b0      	ldr	r1, [pc, #704]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016c6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80016c8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016cc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80016d4:	bf08      	it	eq
 80016d6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016d8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016dc:	bf16      	itet	ne
 80016de:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80016e2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016e4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016ea:	02d1      	lsls	r1, r2, #11
 80016ec:	d510      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016ee:	48a6      	ldr	r0, [pc, #664]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016f2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016f6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016fe:	ea43 0301 	orr.w	r3, r3, r1
 8001702:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001706:	f000 8185 	beq.w	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800170a:	2900      	cmp	r1, #0
 800170c:	bf08      	it	eq
 800170e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001710:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001714:	bf18      	it	ne
 8001716:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001718:	0692      	lsls	r2, r2, #26
 800171a:	d531      	bpl.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b9a      	ldr	r3, [pc, #616]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800171e:	4f9b      	ldr	r7, [pc, #620]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800173a:	f7fe ff59 	bl	80005f0 <HAL_GetTick>
 800173e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	f140 8168 	bpl.w	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001748:	4f8f      	ldr	r7, [pc, #572]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800174a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800174c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001750:	f040 816d 	bne.w	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001756:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800175a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001760:	f040 818b 	bne.w	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001764:	6891      	ldr	r1, [r2, #8]
 8001766:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800176a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800176e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001772:	4301      	orrs	r1, r0
 8001774:	6091      	str	r1, [r2, #8]
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800177c:	430b      	orrs	r3, r1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	06da      	lsls	r2, r3, #27
 8001784:	d50c      	bpl.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001786:	4a80      	ldr	r2, [pc, #512]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001788:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800178c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001790:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001794:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001798:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800179a:	4301      	orrs	r1, r0
 800179c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a0:	045f      	lsls	r7, r3, #17
 80017a2:	d508      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017a4:	4978      	ldr	r1, [pc, #480]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017a6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80017a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017b0:	4302      	orrs	r2, r0
 80017b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017b6:	0418      	lsls	r0, r3, #16
 80017b8:	d508      	bpl.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017ba:	4973      	ldr	r1, [pc, #460]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017bc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80017be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017c2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80017c6:	4302      	orrs	r2, r0
 80017c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017cc:	03d9      	lsls	r1, r3, #15
 80017ce:	d508      	bpl.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017d0:	496d      	ldr	r1, [pc, #436]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017d8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017dc:	4302      	orrs	r2, r0
 80017de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017e2:	039a      	lsls	r2, r3, #14
 80017e4:	d508      	bpl.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017e6:	4968      	ldr	r1, [pc, #416]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80017ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80017f2:	4302      	orrs	r2, r0
 80017f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017f8:	065f      	lsls	r7, r3, #25
 80017fa:	d508      	bpl.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017fc:	4962      	ldr	r1, [pc, #392]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001800:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001804:	f022 0203 	bic.w	r2, r2, #3
 8001808:	4302      	orrs	r2, r0
 800180a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800180e:	0618      	lsls	r0, r3, #24
 8001810:	d508      	bpl.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001812:	495d      	ldr	r1, [pc, #372]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001814:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001816:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800181a:	f022 020c 	bic.w	r2, r2, #12
 800181e:	4302      	orrs	r2, r0
 8001820:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001824:	05d9      	lsls	r1, r3, #23
 8001826:	d508      	bpl.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001828:	4957      	ldr	r1, [pc, #348]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800182a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800182c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001830:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001834:	4302      	orrs	r2, r0
 8001836:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800183a:	059a      	lsls	r2, r3, #22
 800183c:	d508      	bpl.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800183e:	4952      	ldr	r1, [pc, #328]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001840:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001842:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001846:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800184a:	4302      	orrs	r2, r0
 800184c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001850:	055f      	lsls	r7, r3, #21
 8001852:	d508      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001854:	494c      	ldr	r1, [pc, #304]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001858:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800185c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001860:	4302      	orrs	r2, r0
 8001862:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001866:	0518      	lsls	r0, r3, #20
 8001868:	d508      	bpl.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800186a:	4947      	ldr	r1, [pc, #284]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800186c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800186e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001872:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001876:	4302      	orrs	r2, r0
 8001878:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800187c:	04d9      	lsls	r1, r3, #19
 800187e:	d508      	bpl.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001880:	4941      	ldr	r1, [pc, #260]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001882:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001884:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001888:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800188c:	4302      	orrs	r2, r0
 800188e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001892:	049a      	lsls	r2, r3, #18
 8001894:	d508      	bpl.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001896:	493c      	ldr	r1, [pc, #240]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001898:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800189a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800189e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80018a2:	4302      	orrs	r2, r0
 80018a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018a8:	025f      	lsls	r7, r3, #9
 80018aa:	d508      	bpl.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018ae:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80018b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018b4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018b8:	4302      	orrs	r2, r0
 80018ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018be:	0298      	lsls	r0, r3, #10
 80018c0:	d50c      	bpl.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018c2:	4831      	ldr	r0, [pc, #196]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80018c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80018ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018ce:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80018d2:	bf08      	it	eq
 80018d4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018d6:	430a      	orrs	r2, r1
 80018d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80018dc:	f013 0f08 	tst.w	r3, #8
 80018e0:	bf18      	it	ne
 80018e2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018e4:	0359      	lsls	r1, r3, #13
 80018e6:	d508      	bpl.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018e8:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80018ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f4:	4302      	orrs	r2, r0
 80018f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80018fa:	021a      	lsls	r2, r3, #8
 80018fc:	d509      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018fe:	4922      	ldr	r1, [pc, #136]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001900:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001904:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001908:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800190c:	4302      	orrs	r2, r0
 800190e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001912:	2e01      	cmp	r6, #1
 8001914:	f000 80b5 	beq.w	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001920:	2d01      	cmp	r5, #1
 8001922:	d175      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001924:	4d18      	ldr	r5, [pc, #96]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192e:	f7fe fe5f 	bl	80005f0 <HAL_GetTick>
 8001932:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	009f      	lsls	r7, r3, #2
 8001938:	f100 8127 	bmi.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800193c:	6821      	ldr	r1, [r4, #0]
 800193e:	030e      	lsls	r6, r1, #12
 8001940:	d501      	bpl.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001944:	b11b      	cbz	r3, 800194e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001946:	02cd      	lsls	r5, r1, #11
 8001948:	d522      	bpl.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800194a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800194c:	bb03      	cbnz	r3, 8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001950:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001954:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001960:	4303      	orrs	r3, r0
 8001962:	6960      	ldr	r0, [r4, #20]
 8001964:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001968:	69a0      	ldr	r0, [r4, #24]
 800196a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800196e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001972:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001978:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800197c:	3801      	subs	r0, #1
 800197e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001986:	e003      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001990:	0288      	lsls	r0, r1, #10
 8001992:	d515      	bpl.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001994:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800199a:	d111      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800199c:	4a82      	ldr	r2, [pc, #520]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800199e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80019a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019ae:	4303      	orrs	r3, r0
 80019b0:	6960      	ldr	r0, [r4, #20]
 80019b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019b6:	6a20      	ldr	r0, [r4, #32]
 80019b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019c0:	070a      	lsls	r2, r1, #28
 80019c2:	d519      	bpl.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019c4:	4978      	ldr	r1, [pc, #480]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80019c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019ce:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80019d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d6:	4313      	orrs	r3, r2
 80019d8:	6962      	ldr	r2, [r4, #20]
 80019da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019de:	69e2      	ldr	r2, [r4, #28]
 80019e0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80019e8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80019ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80019f8:	4c6b      	ldr	r4, [pc, #428]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a02:	f7fe fdf5 	bl	80005f0 <HAL_GetTick>
 8001a06:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f140 80c4 	bpl.w	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
 8001a12:	e009      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8001a14:	2601      	movs	r6, #1
 8001a16:	e67b      	b.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7fe fdea 	bl	80005f0 <HAL_GetTick>
 8001a1c:	eba0 0008 	sub.w	r0, r0, r8
 8001a20:	2864      	cmp	r0, #100	; 0x64
 8001a22:	f67f ae8d 	bls.w	8001740 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
}
 8001a28:	b003      	add	sp, #12
 8001a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a30:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f43f ae8d 	beq.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a46:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a4e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a54:	07d8      	lsls	r0, r3, #31
 8001a56:	f57f ae7d 	bpl.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001a5a:	f7fe fdc9 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a62:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a66:	0799      	lsls	r1, r3, #30
 8001a68:	f53f ae74 	bmi.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7fe fdc0 	bl	80005f0 <HAL_GetTick>
 8001a70:	eba0 0008 	sub.w	r0, r0, r8
 8001a74:	4548      	cmp	r0, r9
 8001a76:	d9f5      	bls.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001a78:	e7d5      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a7a:	6891      	ldr	r1, [r2, #8]
 8001a7c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a80:	e678      	b.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a82:	4e49      	ldr	r6, [pc, #292]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a8a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fdb0 	bl	80005f0 <HAL_GetTick>
 8001a90:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a92:	6833      	ldr	r3, [r6, #0]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	d472      	bmi.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	07d7      	lsls	r7, r2, #31
 8001a9c:	d512      	bpl.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aa0:	b983      	cbnz	r3, 8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001aa2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001aa6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aae:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6861      	ldr	r1, [r4, #4]
 8001ab6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001aba:	68a1      	ldr	r1, [r4, #8]
 8001abc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ac0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ac4:	0316      	lsls	r6, r2, #12
 8001ac6:	d503      	bpl.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8001ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ace:	d005      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x444>
 8001ad0:	02d0      	lsls	r0, r2, #11
 8001ad2:	d51e      	bpl.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ada:	d11a      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001adc:	4932      	ldr	r1, [pc, #200]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001ade:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ae2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001aee:	4303      	orrs	r3, r0
 8001af0:	6860      	ldr	r0, [r4, #4]
 8001af2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001af6:	68e0      	ldr	r0, [r4, #12]
 8001af8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b00:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b06:	f020 001f 	bic.w	r0, r0, #31
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4303      	orrs	r3, r0
 8001b0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b12:	01d1      	lsls	r1, r2, #7
 8001b14:	d511      	bpl.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b16:	4924      	ldr	r1, [pc, #144]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b18:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b1c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b20:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b24:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b28:	4303      	orrs	r3, r0
 8001b2a:	6860      	ldr	r0, [r4, #4]
 8001b2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b30:	6920      	ldr	r0, [r4, #16]
 8001b32:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b3a:	0192      	lsls	r2, r2, #6
 8001b3c:	d50d      	bpl.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	6862      	ldr	r2, [r4, #4]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b48:	68e2      	ldr	r2, [r4, #12]
 8001b4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b4e:	68a2      	ldr	r2, [r4, #8]
 8001b50:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b5a:	4e13      	ldr	r6, [pc, #76]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b5c:	6833      	ldr	r3, [r6, #0]
 8001b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b62:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b64:	f7fe fd44 	bl	80005f0 <HAL_GetTick>
 8001b68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b6a:	6833      	ldr	r3, [r6, #0]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	f53f aed7 	bmi.w	8001920 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b72:	f7fe fd3d 	bl	80005f0 <HAL_GetTick>
 8001b76:	1bc0      	subs	r0, r0, r7
 8001b78:	2864      	cmp	r0, #100	; 0x64
 8001b7a:	d9f6      	bls.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001b7c:	e753      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b7e:	f7fe fd37 	bl	80005f0 <HAL_GetTick>
 8001b82:	1bc0      	subs	r0, r0, r7
 8001b84:	2864      	cmp	r0, #100	; 0x64
 8001b86:	d984      	bls.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8001b88:	e74d      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b8a:	f7fe fd31 	bl	80005f0 <HAL_GetTick>
 8001b8e:	1b80      	subs	r0, r0, r6
 8001b90:	2864      	cmp	r0, #100	; 0x64
 8001b92:	f67f aecf 	bls.w	8001934 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8001b96:	e746      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b98:	f7fe fd2a 	bl	80005f0 <HAL_GetTick>
 8001b9c:	1b40      	subs	r0, r0, r5
 8001b9e:	2864      	cmp	r0, #100	; 0x64
 8001ba0:	f67f af32 	bls.w	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001ba4:	e73f      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001bac:	6803      	ldr	r3, [r0, #0]
 8001bae:	685a      	ldr	r2, [r3, #4]
 8001bb0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bb6:	6842      	ldr	r2, [r0, #4]
 8001bb8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001bbc:	d10a      	bne.n	8001bd4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 8001bbe:	6882      	ldr	r2, [r0, #8]
 8001bc0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bc4:	d002      	beq.n	8001bcc <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bc6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001bca:	d103      	bne.n	8001bd4 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bd4:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001bd6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001bda:	d109      	bne.n	8001bf0 <SPI_WaitFifoStateUntilTimeout.part.1+0x44>
        {
          SPI_RESET_CRC(hspi);
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001be2:	0412      	lsls	r2, r2, #16
 8001be4:	0c12      	lsrs	r2, r2, #16
 8001be6:	601a      	str	r2, [r3, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bee:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	4770      	bx	lr

08001c00 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
 8001c00:	b570      	push	{r4, r5, r6, lr}
 8001c02:	4605      	mov	r5, r0
 8001c04:	460c      	mov	r4, r1
 8001c06:	4616      	mov	r6, r2
  while ((hspi->Instance->SR & Flag) != State)
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	6898      	ldr	r0, [r3, #8]
 8001c0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001c10:	d100      	bne.n	8001c14 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001c14:	1c62      	adds	r2, r4, #1
 8001c16:	d0f8      	beq.n	8001c0a <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001c18:	b924      	cbnz	r4, 8001c24 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x24>
 8001c1a:	4628      	mov	r0, r5
}
 8001c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001c20:	f7ff bfc4 	b.w	8001bac <SPI_WaitFifoStateUntilTimeout.part.1>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001c24:	f7fe fce4 	bl	80005f0 <HAL_GetTick>
 8001c28:	1b80      	subs	r0, r0, r6
 8001c2a:	4284      	cmp	r4, r0
 8001c2c:	d8ec      	bhi.n	8001c08 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8001c2e:	e7f4      	b.n	8001c1a <SPI_WaitFlagStateUntilTimeout.constprop.10+0x1a>

08001c30 <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8001c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001c32:	4606      	mov	r6, r0
 8001c34:	460c      	mov	r4, r1
 8001c36:	4615      	mov	r5, r2
 8001c38:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8001c3a:	6831      	ldr	r1, [r6, #0]
 8001c3c:	6888      	ldr	r0, [r1, #8]
 8001c3e:	4020      	ands	r0, r4
 8001c40:	d00e      	beq.n	8001c60 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x30>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001c42:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 8001c46:	d105      	bne.n	8001c54 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x24>
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001c48:	7b0a      	ldrb	r2, [r1, #12]
 8001c4a:	b2d2      	uxtb	r2, r2
 8001c4c:	f88d 2007 	strb.w	r2, [sp, #7]
      UNUSED(tmpreg);
 8001c50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    if (Timeout != HAL_MAX_DELAY)
 8001c54:	1c6b      	adds	r3, r5, #1
 8001c56:	d0f1      	beq.n	8001c3c <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001c58:	b925      	cbnz	r5, 8001c64 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x34>
 8001c5a:	4630      	mov	r0, r6
 8001c5c:	f7ff ffa6 	bl	8001bac <SPI_WaitFifoStateUntilTimeout.part.1>
}
 8001c60:	b003      	add	sp, #12
 8001c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8001c64:	f7fe fcc4 	bl	80005f0 <HAL_GetTick>
 8001c68:	1bc0      	subs	r0, r0, r7
 8001c6a:	4285      	cmp	r5, r0
 8001c6c:	d8e5      	bhi.n	8001c3a <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8001c6e:	e7f4      	b.n	8001c5a <SPI_WaitFifoStateUntilTimeout.constprop.11+0x2a>

08001c70 <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c70:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c72:	4613      	mov	r3, r2
{
 8001c74:	460d      	mov	r5, r1
 8001c76:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c78:	460a      	mov	r2, r1
 8001c7a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 8001c7e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001c80:	f7ff ffd6 	bl	8001c30 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001c84:	b128      	cbz	r0, 8001c92 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c86:	6e23      	ldr	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 8001c88:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c8a:	f043 0320 	orr.w	r3, r3, #32
 8001c8e:	6623      	str	r3, [r4, #96]	; 0x60
 8001c90:	e00f      	b.n	8001cb2 <SPI_EndRxTxTransaction+0x42>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c92:	4632      	mov	r2, r6
 8001c94:	4629      	mov	r1, r5
 8001c96:	4620      	mov	r0, r4
 8001c98:	f7ff ffb2 	bl	8001c00 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d1f2      	bne.n	8001c86 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001ca0:	4633      	mov	r3, r6
 8001ca2:	462a      	mov	r2, r5
 8001ca4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ffc1 	bl	8001c30 <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d1e9      	bne.n	8001c86 <SPI_EndRxTxTransaction+0x16>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }
  return HAL_OK;
}
 8001cb2:	bd70      	pop	{r4, r5, r6, pc}

08001cb4 <HAL_SPI_Init>:
{
 8001cb4:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d04e      	beq.n	8001d5a <HAL_SPI_Init+0xa6>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001cc0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001cc4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001cc8:	b91b      	cbnz	r3, 8001cd2 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8001cca:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 8001cce:	f009 fd23 	bl	800b718 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cd2:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8001cd4:	6821      	ldr	r1, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cd6:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001cd8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001cdc:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cde:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001ce2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ce6:	600b      	str	r3, [r1, #0]
 8001ce8:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cec:	d932      	bls.n	8001d54 <HAL_SPI_Init+0xa0>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001cee:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001cf0:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf4:	bf18      	it	ne
 8001cf6:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001cf8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001cfa:	b92b      	cbnz	r3, 8001d08 <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001cfc:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001d00:	bf8c      	ite	hi
 8001d02:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001d04:	2301      	movls	r3, #1
 8001d06:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d08:	68a6      	ldr	r6, [r4, #8]
 8001d0a:	6863      	ldr	r3, [r4, #4]
 8001d0c:	69a5      	ldr	r5, [r4, #24]
 8001d0e:	4333      	orrs	r3, r6
 8001d10:	6926      	ldr	r6, [r4, #16]
 8001d12:	4333      	orrs	r3, r6
 8001d14:	6966      	ldr	r6, [r4, #20]
 8001d16:	4333      	orrs	r3, r6
 8001d18:	69e6      	ldr	r6, [r4, #28]
 8001d1a:	4333      	orrs	r3, r6
 8001d1c:	6a26      	ldr	r6, [r4, #32]
 8001d1e:	4333      	orrs	r3, r6
 8001d20:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d22:	4333      	orrs	r3, r6
 8001d24:	f405 7600 	and.w	r6, r5, #512	; 0x200
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d28:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d2a:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d2c:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001d30:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d34:	431a      	orrs	r2, r3
 8001d36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d38:	431a      	orrs	r2, r3
 8001d3a:	432a      	orrs	r2, r5
 8001d3c:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d3e:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001d40:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001d42:	69cb      	ldr	r3, [r1, #28]
 8001d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001d48:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001d4a:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d4c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001d4e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 8001d52:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001d54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d58:	e7cc      	b.n	8001cf4 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001d5a:	2001      	movs	r0, #1
}
 8001d5c:	bd70      	pop	{r4, r5, r6, pc}

08001d5e <HAL_SPI_Transmit>:
{
 8001d5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001d62:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001d64:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001d68:	4604      	mov	r4, r0
 8001d6a:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8001d6c:	2b01      	cmp	r3, #1
{
 8001d6e:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001d70:	f000 8097 	beq.w	8001ea2 <HAL_SPI_Transmit+0x144>
 8001d74:	2301      	movs	r3, #1
 8001d76:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001d7a:	f7fe fc39 	bl	80005f0 <HAL_GetTick>
 8001d7e:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d80:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 8001d84:	b2c0      	uxtb	r0, r0
 8001d86:	2801      	cmp	r0, #1
 8001d88:	f040 8089 	bne.w	8001e9e <HAL_SPI_Transmit+0x140>
  if ((pData == NULL) || (Size == 0U))
 8001d8c:	2d00      	cmp	r5, #0
 8001d8e:	d060      	beq.n	8001e52 <HAL_SPI_Transmit+0xf4>
 8001d90:	f1b8 0f00 	cmp.w	r8, #0
 8001d94:	d05d      	beq.n	8001e52 <HAL_SPI_Transmit+0xf4>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d96:	2303      	movs	r3, #3
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d98:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001d9a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d9e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001da2:	2300      	movs	r3, #0
 8001da4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001da6:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001da8:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferSize  = 0U;
 8001dac:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8001db0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001db4:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8001db6:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001db8:	68a3      	ldr	r3, [r4, #8]
 8001dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	d103      	bne.n	8001dca <HAL_SPI_Transmit+0x6c>
    SPI_1LINE_TX(hspi);
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001dc8:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	0652      	lsls	r2, r2, #25
 8001dce:	d403      	bmi.n	8001dd8 <HAL_SPI_Transmit+0x7a>
    __HAL_SPI_ENABLE(hspi);
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001dd6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001dd8:	68e3      	ldr	r3, [r4, #12]
 8001dda:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001dde:	d81d      	bhi.n	8001e1c <HAL_SPI_Transmit+0xbe>
    while (hspi->TxXferCount > 0U)
 8001de0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001de2:	b29b      	uxth	r3, r3
 8001de4:	b1f3      	cbz	r3, 8001e24 <HAL_SPI_Transmit+0xc6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	0792      	lsls	r2, r2, #30
 8001dec:	d54a      	bpl.n	8001e84 <HAL_SPI_Transmit+0x126>
        if (hspi->TxXferCount > 1U)
 8001dee:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001df0:	b292      	uxth	r2, r2
 8001df2:	2a01      	cmp	r2, #1
 8001df4:	d93e      	bls.n	8001e74 <HAL_SPI_Transmit+0x116>
          hspi->Instance->DR = *((uint16_t *)pData);
 8001df6:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001dfa:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8001dfc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dfe:	3b02      	subs	r3, #2
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e04:	e7ec      	b.n	8001de0 <HAL_SPI_Transmit+0x82>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e06:	6823      	ldr	r3, [r4, #0]
 8001e08:	689a      	ldr	r2, [r3, #8]
 8001e0a:	0790      	lsls	r0, r2, #30
 8001e0c:	d51f      	bpl.n	8001e4e <HAL_SPI_Transmit+0xf0>
        hspi->Instance->DR = *((uint16_t *)pData);
 8001e0e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001e12:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001e14:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e16:	3b01      	subs	r3, #1
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8001e1c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_SPI_Transmit+0xa8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e24:	463a      	mov	r2, r7
 8001e26:	4631      	mov	r1, r6
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff ff21 	bl	8001c70 <SPI_EndRxTxTransaction>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d132      	bne.n	8001e98 <HAL_SPI_Transmit+0x13a>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e32:	68a3      	ldr	r3, [r4, #8]
 8001e34:	b933      	cbnz	r3, 8001e44 <HAL_SPI_Transmit+0xe6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e36:	9301      	str	r3, [sp, #4]
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	9201      	str	r2, [sp, #4]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	9301      	str	r3, [sp, #4]
 8001e42:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e44:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001e46:	3000      	adds	r0, #0
 8001e48:	bf18      	it	ne
 8001e4a:	2001      	movne	r0, #1
 8001e4c:	e001      	b.n	8001e52 <HAL_SPI_Transmit+0xf4>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001e4e:	b94e      	cbnz	r6, 8001e64 <HAL_SPI_Transmit+0x106>
          errorcode = HAL_TIMEOUT;
 8001e50:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e52:	2301      	movs	r3, #1
 8001e54:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8001e5e:	b002      	add	sp, #8
 8001e60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001e64:	1c71      	adds	r1, r6, #1
 8001e66:	d0d9      	beq.n	8001e1c <HAL_SPI_Transmit+0xbe>
 8001e68:	f7fe fbc2 	bl	80005f0 <HAL_GetTick>
 8001e6c:	1bc0      	subs	r0, r0, r7
 8001e6e:	4286      	cmp	r6, r0
 8001e70:	d8d4      	bhi.n	8001e1c <HAL_SPI_Transmit+0xbe>
 8001e72:	e7ed      	b.n	8001e50 <HAL_SPI_Transmit+0xf2>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8001e74:	782a      	ldrb	r2, [r5, #0]
 8001e76:	3501      	adds	r5, #1
 8001e78:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 8001e7a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8001e82:	e7ad      	b.n	8001de0 <HAL_SPI_Transmit+0x82>
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8001e84:	2e00      	cmp	r6, #0
 8001e86:	d0e3      	beq.n	8001e50 <HAL_SPI_Transmit+0xf2>
 8001e88:	1c73      	adds	r3, r6, #1
 8001e8a:	d0a9      	beq.n	8001de0 <HAL_SPI_Transmit+0x82>
 8001e8c:	f7fe fbb0 	bl	80005f0 <HAL_GetTick>
 8001e90:	1bc0      	subs	r0, r0, r7
 8001e92:	4286      	cmp	r6, r0
 8001e94:	d8a4      	bhi.n	8001de0 <HAL_SPI_Transmit+0x82>
 8001e96:	e7db      	b.n	8001e50 <HAL_SPI_Transmit+0xf2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e98:	2320      	movs	r3, #32
 8001e9a:	6623      	str	r3, [r4, #96]	; 0x60
 8001e9c:	e7c9      	b.n	8001e32 <HAL_SPI_Transmit+0xd4>
    errorcode = HAL_BUSY;
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	e7d7      	b.n	8001e52 <HAL_SPI_Transmit+0xf4>
  __HAL_LOCK(hspi);
 8001ea2:	2002      	movs	r0, #2
 8001ea4:	e7db      	b.n	8001e5e <HAL_SPI_Transmit+0x100>

08001ea6 <HAL_SPI_TransmitReceive>:
{
 8001ea6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001eaa:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8001eac:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8001eb0:	4604      	mov	r4, r0
 8001eb2:	460d      	mov	r5, r1
  __HAL_LOCK(hspi);
 8001eb4:	2b01      	cmp	r3, #1
{
 8001eb6:	4616      	mov	r6, r2
 8001eb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
  __HAL_LOCK(hspi);
 8001ebc:	f000 8111 	beq.w	80020e2 <HAL_SPI_TransmitReceive+0x23c>
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8001ec6:	f7fe fb93 	bl	80005f0 <HAL_GetTick>
  tmp  = hspi->State;
 8001eca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 8001ece:	4681      	mov	r9, r0
  tmp1 = hspi->Init.Mode;
 8001ed0:	6861      	ldr	r1, [r4, #4]
  tmp  = hspi->State;
 8001ed2:	b2db      	uxtb	r3, r3
  if (!((tmp == HAL_SPI_STATE_READY) || \
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d00a      	beq.n	8001eee <HAL_SPI_TransmitReceive+0x48>
 8001ed8:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8001edc:	f040 80fd 	bne.w	80020da <HAL_SPI_TransmitReceive+0x234>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8001ee0:	68a2      	ldr	r2, [r4, #8]
 8001ee2:	2a00      	cmp	r2, #0
 8001ee4:	f040 80f9 	bne.w	80020da <HAL_SPI_TransmitReceive+0x234>
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	f040 80f6 	bne.w	80020da <HAL_SPI_TransmitReceive+0x234>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eee:	2d00      	cmp	r5, #0
 8001ef0:	f000 80f5 	beq.w	80020de <HAL_SPI_TransmitReceive+0x238>
 8001ef4:	2e00      	cmp	r6, #0
 8001ef6:	f000 80f2 	beq.w	80020de <HAL_SPI_TransmitReceive+0x238>
 8001efa:	2f00      	cmp	r7, #0
 8001efc:	f000 80ef 	beq.w	80020de <HAL_SPI_TransmitReceive+0x238>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001f00:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d002      	beq.n	8001f0e <HAL_SPI_TransmitReceive+0x68>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001f08:	2305      	movs	r3, #5
 8001f0a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8001f0e:	68e0      	ldr	r0, [r4, #12]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f10:	2300      	movs	r3, #0
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001f12:	6426      	str	r6, [r4, #64]	; 0x40
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8001f14:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f18:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->RxISR       = NULL;
 8001f1a:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8001f1c:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->TxISR       = NULL;
 8001f20:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 8001f22:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001f26:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001f28:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8001f2a:	87a7      	strh	r7, [r4, #60]	; 0x3c
 8001f2c:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1))
 8001f2e:	d804      	bhi.n	8001f3a <HAL_SPI_TransmitReceive+0x94>
 8001f30:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8001f34:	b292      	uxth	r2, r2
 8001f36:	2a01      	cmp	r2, #1
 8001f38:	d92e      	bls.n	8001f98 <HAL_SPI_TransmitReceive+0xf2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f40:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	0657      	lsls	r7, r2, #25
 8001f46:	d403      	bmi.n	8001f50 <HAL_SPI_TransmitReceive+0xaa>
    __HAL_SPI_ENABLE(hspi);
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001f4e:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f50:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8001f54:	d958      	bls.n	8002008 <HAL_SPI_TransmitReceive+0x162>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8001f56:	b119      	cbz	r1, 8001f60 <HAL_SPI_TransmitReceive+0xba>
 8001f58:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001f5a:	b292      	uxth	r2, r2
 8001f5c:	2a01      	cmp	r2, #1
 8001f5e:	d106      	bne.n	8001f6e <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8001f60:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f64:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f66:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001f6e:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f70:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	b9a3      	cbnz	r3, 8001fa0 <HAL_SPI_TransmitReceive+0xfa>
 8001f76:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	b983      	cbnz	r3, 8001fa0 <HAL_SPI_TransmitReceive+0xfa>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f7e:	464a      	mov	r2, r9
 8001f80:	4641      	mov	r1, r8
 8001f82:	4620      	mov	r0, r4
 8001f84:	f7ff fe74 	bl	8001c70 <SPI_EndRxTxTransaction>
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	f040 80a3 	bne.w	80020d4 <HAL_SPI_TransmitReceive+0x22e>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001f8e:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8001f90:	3000      	adds	r0, #0
 8001f92:	bf18      	it	ne
 8001f94:	2001      	movne	r0, #1
 8001f96:	e02f      	b.n	8001ff8 <HAL_SPI_TransmitReceive+0x152>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f9e:	e7cf      	b.n	8001f40 <HAL_SPI_TransmitReceive+0x9a>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8001fa0:	b177      	cbz	r7, 8001fc0 <HAL_SPI_TransmitReceive+0x11a>
 8001fa2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b15b      	cbz	r3, 8001fc0 <HAL_SPI_TransmitReceive+0x11a>
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	0792      	lsls	r2, r2, #30
 8001fae:	d507      	bpl.n	8001fc0 <HAL_SPI_TransmitReceive+0x11a>
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fb0:	f835 2b02 	ldrh.w	r2, [r5], #2
        txallowed = 0U;
 8001fb4:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8001fb6:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8001fb8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8001fc0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	b16b      	cbz	r3, 8001fe4 <HAL_SPI_TransmitReceive+0x13e>
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	07d0      	lsls	r0, r2, #31
 8001fce:	d509      	bpl.n	8001fe4 <HAL_SPI_TransmitReceive+0x13e>
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001fd0:	68db      	ldr	r3, [r3, #12]
        txallowed = 1U;
 8001fd2:	2701      	movs	r7, #1
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8001fd4:	f826 3b02 	strh.w	r3, [r6], #2
        hspi->RxXferCount--;
 8001fd8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8001fe4:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001fe8:	d0c2      	beq.n	8001f70 <HAL_SPI_TransmitReceive+0xca>
 8001fea:	f7fe fb01 	bl	80005f0 <HAL_GetTick>
 8001fee:	eba0 0009 	sub.w	r0, r0, r9
 8001ff2:	4580      	cmp	r8, r0
 8001ff4:	d8bc      	bhi.n	8001f70 <HAL_SPI_TransmitReceive+0xca>
        errorcode = HAL_TIMEOUT;
 8001ff6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8001ffe:	2300      	movs	r3, #0
 8002000:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8002004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8002008:	b119      	cbz	r1, 8002012 <HAL_SPI_TransmitReceive+0x16c>
 800200a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800200c:	b292      	uxth	r2, r2
 800200e:	2a01      	cmp	r2, #1
 8002010:	d106      	bne.n	8002020 <HAL_SPI_TransmitReceive+0x17a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*pTxData);
 8002012:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002016:	731a      	strb	r2, [r3, #12]
      hspi->TxXferCount--;
 8002018:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800201a:	3b01      	subs	r3, #1
 800201c:	b29b      	uxth	r3, r3
 800201e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8002020:	2701      	movs	r7, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002022:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002024:	b29b      	uxth	r3, r3
 8002026:	b923      	cbnz	r3, 8002032 <HAL_SPI_TransmitReceive+0x18c>
 8002028:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800202c:	b29b      	uxth	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0a5      	beq.n	8001f7e <HAL_SPI_TransmitReceive+0xd8>
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8002032:	b197      	cbz	r7, 800205a <HAL_SPI_TransmitReceive+0x1b4>
 8002034:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002036:	b29b      	uxth	r3, r3
 8002038:	b17b      	cbz	r3, 800205a <HAL_SPI_TransmitReceive+0x1b4>
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	689a      	ldr	r2, [r3, #8]
 800203e:	0791      	lsls	r1, r2, #30
 8002040:	d50b      	bpl.n	800205a <HAL_SPI_TransmitReceive+0x1b4>
        if (hspi->TxXferCount > 1U)
 8002042:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002044:	b292      	uxth	r2, r2
 8002046:	2a01      	cmp	r2, #1
 8002048:	d931      	bls.n	80020ae <HAL_SPI_TransmitReceive+0x208>
          hspi->Instance->DR = *((uint16_t *)pTxData);
 800204a:	f835 2b02 	ldrh.w	r2, [r5], #2
 800204e:	60da      	str	r2, [r3, #12]
          hspi->TxXferCount -= 2U;
 8002050:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002052:	3b02      	subs	r3, #2
 8002054:	b29b      	uxth	r3, r3
 8002056:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002058:	2700      	movs	r7, #0
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 800205a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800205e:	b29b      	uxth	r3, r3
 8002060:	b1db      	cbz	r3, 800209a <HAL_SPI_TransmitReceive+0x1f4>
 8002062:	6823      	ldr	r3, [r4, #0]
 8002064:	689a      	ldr	r2, [r3, #8]
 8002066:	07d2      	lsls	r2, r2, #31
 8002068:	d517      	bpl.n	800209a <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 800206a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800206e:	b292      	uxth	r2, r2
 8002070:	2a01      	cmp	r2, #1
 8002072:	d924      	bls.n	80020be <HAL_SPI_TransmitReceive+0x218>
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8002074:	68da      	ldr	r2, [r3, #12]
 8002076:	f826 2b02 	strh.w	r2, [r6], #2
          hspi->RxXferCount -= 2U;
 800207a:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800207e:	3a02      	subs	r2, #2
 8002080:	b292      	uxth	r2, r2
 8002082:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002086:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800208a:	b292      	uxth	r2, r2
 800208c:	2a01      	cmp	r2, #1
 800208e:	d803      	bhi.n	8002098 <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002096:	605a      	str	r2, [r3, #4]
        txallowed = 1U;
 8002098:	2701      	movs	r7, #1
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 800209a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 800209e:	d0c0      	beq.n	8002022 <HAL_SPI_TransmitReceive+0x17c>
 80020a0:	f7fe faa6 	bl	80005f0 <HAL_GetTick>
 80020a4:	eba0 0009 	sub.w	r0, r0, r9
 80020a8:	4580      	cmp	r8, r0
 80020aa:	d8ba      	bhi.n	8002022 <HAL_SPI_TransmitReceive+0x17c>
 80020ac:	e7a3      	b.n	8001ff6 <HAL_SPI_TransmitReceive+0x150>
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 80020ae:	782a      	ldrb	r2, [r5, #0]
 80020b0:	3501      	adds	r5, #1
 80020b2:	731a      	strb	r2, [r3, #12]
          hspi->TxXferCount--;
 80020b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80020b6:	3b01      	subs	r3, #1
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	87e3      	strh	r3, [r4, #62]	; 0x3e
 80020bc:	e7cc      	b.n	8002058 <HAL_SPI_TransmitReceive+0x1b2>
          (*pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 80020be:	7b1b      	ldrb	r3, [r3, #12]
 80020c0:	3601      	adds	r6, #1
 80020c2:	f806 3c01 	strb.w	r3, [r6, #-1]
          hspi->RxXferCount--;
 80020c6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 80020d2:	e7e1      	b.n	8002098 <HAL_SPI_TransmitReceive+0x1f2>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80020d4:	2320      	movs	r3, #32
 80020d6:	6623      	str	r3, [r4, #96]	; 0x60
 80020d8:	e759      	b.n	8001f8e <HAL_SPI_TransmitReceive+0xe8>
    errorcode = HAL_BUSY;
 80020da:	2002      	movs	r0, #2
 80020dc:	e78c      	b.n	8001ff8 <HAL_SPI_TransmitReceive+0x152>
    errorcode = HAL_ERROR;
 80020de:	2001      	movs	r0, #1
 80020e0:	e78a      	b.n	8001ff8 <HAL_SPI_TransmitReceive+0x152>
  __HAL_LOCK(hspi);
 80020e2:	2002      	movs	r0, #2
}
 80020e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080020e8 <HAL_TIM_Base_MspInit>:
 80020e8:	4770      	bx	lr

080020ea <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ea:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 80020ec:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	f042 0201 	orr.w	r2, r2, #1
 80020f4:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_OC_DelayElapsedCallback>:
 8002100:	4770      	bx	lr

08002102 <HAL_TIM_IC_CaptureCallback>:
 8002102:	4770      	bx	lr

08002104 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002104:	4770      	bx	lr

08002106 <HAL_TIM_TriggerCallback>:
 8002106:	4770      	bx	lr

08002108 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002108:	6803      	ldr	r3, [r0, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	0791      	lsls	r1, r2, #30
{
 800210e:	b510      	push	{r4, lr}
 8002110:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002112:	d50f      	bpl.n	8002134 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	0792      	lsls	r2, r2, #30
 8002118:	d50c      	bpl.n	8002134 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800211a:	f06f 0202 	mvn.w	r2, #2
 800211e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002120:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002122:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002124:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8002126:	0799      	lsls	r1, r3, #30
 8002128:	f000 8085 	beq.w	8002236 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800212c:	f7ff ffe9 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002130:	2300      	movs	r3, #0
 8002132:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002134:	6823      	ldr	r3, [r4, #0]
 8002136:	691a      	ldr	r2, [r3, #16]
 8002138:	0752      	lsls	r2, r2, #29
 800213a:	d510      	bpl.n	800215e <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	0750      	lsls	r0, r2, #29
 8002140:	d50d      	bpl.n	800215e <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002142:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002146:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002148:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214a:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 800214c:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800214e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8002150:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002154:	d075      	beq.n	8002242 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002156:	f7ff ffd4 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215a:	2300      	movs	r3, #0
 800215c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800215e:	6823      	ldr	r3, [r4, #0]
 8002160:	691a      	ldr	r2, [r3, #16]
 8002162:	0711      	lsls	r1, r2, #28
 8002164:	d50f      	bpl.n	8002186 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002166:	68da      	ldr	r2, [r3, #12]
 8002168:	0712      	lsls	r2, r2, #28
 800216a:	d50c      	bpl.n	8002186 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800216c:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002170:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002172:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002174:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8002176:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002178:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 800217a:	079b      	lsls	r3, r3, #30
 800217c:	d067      	beq.n	800224e <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 800217e:	f7ff ffc0 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	2300      	movs	r3, #0
 8002184:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002186:	6823      	ldr	r3, [r4, #0]
 8002188:	691a      	ldr	r2, [r3, #16]
 800218a:	06d0      	lsls	r0, r2, #27
 800218c:	d510      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	06d1      	lsls	r1, r2, #27
 8002192:	d50d      	bpl.n	80021b0 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002194:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002198:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800219a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800219c:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 800219e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021a0:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 80021a2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80021a6:	d058      	beq.n	800225a <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80021a8:	f7ff ffab 	bl	8002102 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ac:	2300      	movs	r3, #0
 80021ae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	691a      	ldr	r2, [r3, #16]
 80021b4:	07d2      	lsls	r2, r2, #31
 80021b6:	d508      	bpl.n	80021ca <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80021b8:	68da      	ldr	r2, [r3, #12]
 80021ba:	07d0      	lsls	r0, r2, #31
 80021bc:	d505      	bpl.n	80021ca <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021be:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021c4:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80021c6:	f008 ffa7 	bl	800b118 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021ca:	6823      	ldr	r3, [r4, #0]
 80021cc:	691a      	ldr	r2, [r3, #16]
 80021ce:	0611      	lsls	r1, r2, #24
 80021d0:	d508      	bpl.n	80021e4 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	0612      	lsls	r2, r2, #24
 80021d6:	d505      	bpl.n	80021e4 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021dc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021de:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021e0:	f000 f8c5 	bl	800236e <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	691a      	ldr	r2, [r3, #16]
 80021e8:	05d0      	lsls	r0, r2, #23
 80021ea:	d508      	bpl.n	80021fe <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	0611      	lsls	r1, r2, #24
 80021f0:	d505      	bpl.n	80021fe <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f2:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021f6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021f8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80021fa:	f000 f8b8 	bl	800236e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021fe:	6823      	ldr	r3, [r4, #0]
 8002200:	691a      	ldr	r2, [r3, #16]
 8002202:	0652      	lsls	r2, r2, #25
 8002204:	d508      	bpl.n	8002218 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002206:	68da      	ldr	r2, [r3, #12]
 8002208:	0650      	lsls	r0, r2, #25
 800220a:	d505      	bpl.n	8002218 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800220c:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002210:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002212:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002214:	f7ff ff77 	bl	8002106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002218:	6823      	ldr	r3, [r4, #0]
 800221a:	691a      	ldr	r2, [r3, #16]
 800221c:	0691      	lsls	r1, r2, #26
 800221e:	d522      	bpl.n	8002266 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002220:	68da      	ldr	r2, [r3, #12]
 8002222:	0692      	lsls	r2, r2, #26
 8002224:	d51f      	bpl.n	8002266 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002226:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 800222a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800222c:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800222e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002232:	f000 b89b 	b.w	800236c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002236:	f7ff ff63 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800223a:	4620      	mov	r0, r4
 800223c:	f7ff ff62 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
 8002240:	e776      	b.n	8002130 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002242:	f7ff ff5d 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002246:	4620      	mov	r0, r4
 8002248:	f7ff ff5c 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
 800224c:	e785      	b.n	800215a <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800224e:	f7ff ff57 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002252:	4620      	mov	r0, r4
 8002254:	f7ff ff56 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
 8002258:	e793      	b.n	8002182 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800225a:	f7ff ff51 	bl	8002100 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff ff50 	bl	8002104 <HAL_TIM_PWM_PulseFinishedCallback>
 8002264:	e7a2      	b.n	80021ac <HAL_TIM_IRQHandler+0xa4>
 8002266:	bd10      	pop	{r4, pc}

08002268 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002268:	4a30      	ldr	r2, [pc, #192]	; (800232c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 800226a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800226c:	4290      	cmp	r0, r2
 800226e:	d012      	beq.n	8002296 <TIM_Base_SetConfig+0x2e>
 8002270:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002274:	d00f      	beq.n	8002296 <TIM_Base_SetConfig+0x2e>
 8002276:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800227a:	4290      	cmp	r0, r2
 800227c:	d00b      	beq.n	8002296 <TIM_Base_SetConfig+0x2e>
 800227e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002282:	4290      	cmp	r0, r2
 8002284:	d007      	beq.n	8002296 <TIM_Base_SetConfig+0x2e>
 8002286:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800228a:	4290      	cmp	r0, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0x2e>
 800228e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002292:	4290      	cmp	r0, r2
 8002294:	d11d      	bne.n	80022d2 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002296:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800229c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800229e:	4a23      	ldr	r2, [pc, #140]	; (800232c <TIM_Base_SetConfig+0xc4>)
 80022a0:	4290      	cmp	r0, r2
 80022a2:	d104      	bne.n	80022ae <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022a8:	68ca      	ldr	r2, [r1, #12]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	e028      	b.n	8002300 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80022ae:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80022b2:	d0f7      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022b4:	4a1e      	ldr	r2, [pc, #120]	; (8002330 <TIM_Base_SetConfig+0xc8>)
 80022b6:	4290      	cmp	r0, r2
 80022b8:	d0f4      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022ba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022be:	4290      	cmp	r0, r2
 80022c0:	d0f0      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022c6:	4290      	cmp	r0, r2
 80022c8:	d0ec      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022ca:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80022ce:	4290      	cmp	r0, r2
 80022d0:	d0e8      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022d2:	4a18      	ldr	r2, [pc, #96]	; (8002334 <TIM_Base_SetConfig+0xcc>)
 80022d4:	4290      	cmp	r0, r2
 80022d6:	d0e5      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022dc:	4290      	cmp	r0, r2
 80022de:	d0e1      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022e0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022e4:	4290      	cmp	r0, r2
 80022e6:	d0dd      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022e8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80022ec:	4290      	cmp	r0, r2
 80022ee:	d0d9      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022f4:	4290      	cmp	r0, r2
 80022f6:	d0d5      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
 80022f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80022fc:	4290      	cmp	r0, r2
 80022fe:	d0d1      	beq.n	80022a4 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002300:	694a      	ldr	r2, [r1, #20]
 8002302:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002306:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002308:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800230a:	688b      	ldr	r3, [r1, #8]
 800230c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800230e:	680b      	ldr	r3, [r1, #0]
 8002310:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002312:	4b06      	ldr	r3, [pc, #24]	; (800232c <TIM_Base_SetConfig+0xc4>)
 8002314:	4298      	cmp	r0, r3
 8002316:	d006      	beq.n	8002326 <TIM_Base_SetConfig+0xbe>
 8002318:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800231c:	4298      	cmp	r0, r3
 800231e:	d002      	beq.n	8002326 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002320:	2301      	movs	r3, #1
 8002322:	6143      	str	r3, [r0, #20]
}
 8002324:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8002326:	690b      	ldr	r3, [r1, #16]
 8002328:	6303      	str	r3, [r0, #48]	; 0x30
 800232a:	e7f9      	b.n	8002320 <TIM_Base_SetConfig+0xb8>
 800232c:	40010000 	.word	0x40010000
 8002330:	40000400 	.word	0x40000400
 8002334:	40014000 	.word	0x40014000

08002338 <HAL_TIM_Base_Init>:
{ 
 8002338:	b510      	push	{r4, lr}
  if(htim == NULL)
 800233a:	4604      	mov	r4, r0
 800233c:	b1a0      	cbz	r0, 8002368 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800233e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002342:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002346:	b91b      	cbnz	r3, 8002350 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002348:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800234c:	f7ff fecc 	bl	80020e8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002350:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002352:	6820      	ldr	r0, [r4, #0]
 8002354:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8002356:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800235a:	f7ff ff85 	bl	8002268 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800235e:	2301      	movs	r3, #1
  return HAL_OK;
 8002360:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8002362:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002366:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002368:	2001      	movs	r0, #1
}
 800236a:	bd10      	pop	{r4, pc}

0800236c <HAL_TIMEx_CommutationCallback>:
 800236c:	4770      	bx	lr

0800236e <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800236e:	4770      	bx	lr

08002370 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002374:	9d06      	ldr	r5, [sp, #24]
 8002376:	4604      	mov	r4, r0
 8002378:	460f      	mov	r7, r1
 800237a:	4616      	mov	r6, r2
 800237c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800237e:	6821      	ldr	r1, [r4, #0]
 8002380:	69ca      	ldr	r2, [r1, #28]
 8002382:	ea37 0302 	bics.w	r3, r7, r2
 8002386:	bf0c      	ite	eq
 8002388:	2201      	moveq	r2, #1
 800238a:	2200      	movne	r2, #0
 800238c:	42b2      	cmp	r2, r6
 800238e:	d002      	beq.n	8002396 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002390:	2000      	movs	r0, #0
}
 8002392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8002396:	1c6b      	adds	r3, r5, #1
 8002398:	d0f2      	beq.n	8002380 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 800239a:	b99d      	cbnz	r5, 80023c4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800239c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 800239e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80023a6:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80023b0:	2320      	movs	r3, #32
 80023b2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80023b6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80023ba:	2300      	movs	r3, #0
 80023bc:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80023c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 80023c4:	f7fe f914 	bl	80005f0 <HAL_GetTick>
 80023c8:	eba0 0008 	sub.w	r0, r0, r8
 80023cc:	4285      	cmp	r5, r0
 80023ce:	d8d6      	bhi.n	800237e <UART_WaitOnFlagUntilTimeout+0xe>
 80023d0:	e7e4      	b.n	800239c <UART_WaitOnFlagUntilTimeout+0x2c>
	...

080023d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023d4:	b538      	push	{r3, r4, r5, lr}
 80023d6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023d8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023da:	69c3      	ldr	r3, [r0, #28]
 80023dc:	6921      	ldr	r1, [r4, #16]
 80023de:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023e0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023e2:	430a      	orrs	r2, r1
 80023e4:	6961      	ldr	r1, [r4, #20]
 80023e6:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023e8:	4993      	ldr	r1, [pc, #588]	; (8002638 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023ea:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023ec:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80023ee:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023f0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f2:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80023f4:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023f6:	686a      	ldr	r2, [r5, #4]
 80023f8:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80023fc:	430a      	orrs	r2, r1
 80023fe:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002400:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002402:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002404:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002406:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800240a:	430a      	orrs	r2, r1
 800240c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800240e:	4a8b      	ldr	r2, [pc, #556]	; (800263c <UART_SetConfig+0x268>)
 8002410:	4295      	cmp	r5, r2
 8002412:	d119      	bne.n	8002448 <UART_SetConfig+0x74>
 8002414:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8002418:	4989      	ldr	r1, [pc, #548]	; (8002640 <UART_SetConfig+0x26c>)
 800241a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800241e:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002422:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002426:	5c8a      	ldrb	r2, [r1, r2]
 8002428:	f040 80b3 	bne.w	8002592 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 800242c:	2a08      	cmp	r2, #8
 800242e:	f200 80ad 	bhi.w	800258c <UART_SetConfig+0x1b8>
 8002432:	e8df f012 	tbh	[pc, r2, lsl #1]
 8002436:	0026      	.short	0x0026
 8002438:	00e9007b 	.word	0x00e9007b
 800243c:	00f500ab 	.word	0x00f500ab
 8002440:	00ab00ab 	.word	0x00ab00ab
 8002444:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002448:	4a7e      	ldr	r2, [pc, #504]	; (8002644 <UART_SetConfig+0x270>)
 800244a:	4295      	cmp	r5, r2
 800244c:	d107      	bne.n	800245e <UART_SetConfig+0x8a>
 800244e:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8002452:	497d      	ldr	r1, [pc, #500]	; (8002648 <UART_SetConfig+0x274>)
 8002454:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002458:	f002 020c 	and.w	r2, r2, #12
 800245c:	e7e1      	b.n	8002422 <UART_SetConfig+0x4e>
 800245e:	4a7b      	ldr	r2, [pc, #492]	; (800264c <UART_SetConfig+0x278>)
 8002460:	4295      	cmp	r5, r2
 8002462:	d12b      	bne.n	80024bc <UART_SetConfig+0xe8>
 8002464:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8002468:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800246c:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8002470:	2a10      	cmp	r2, #16
 8002472:	f000 80d2 	beq.w	800261a <UART_SetConfig+0x246>
 8002476:	d816      	bhi.n	80024a6 <UART_SetConfig+0xd2>
 8002478:	b9da      	cbnz	r2, 80024b2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800247a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800247e:	f040 809f 	bne.w	80025c0 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002482:	f7ff f8cb 	bl	800161c <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002486:	6861      	ldr	r1, [r4, #4]
 8002488:	084a      	lsrs	r2, r1, #1
 800248a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800248e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002492:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002494:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002496:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800249a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800249e:	6821      	ldr	r1, [r4, #0]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
 80024a4:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024a6:	2a20      	cmp	r2, #32
 80024a8:	f000 80ab 	beq.w	8002602 <UART_SetConfig+0x22e>
 80024ac:	2a30      	cmp	r2, #48	; 0x30
 80024ae:	f000 80ba 	beq.w	8002626 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024b6:	d069      	beq.n	800258c <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 80024b8:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 80024ba:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024bc:	4a64      	ldr	r2, [pc, #400]	; (8002650 <UART_SetConfig+0x27c>)
 80024be:	4295      	cmp	r5, r2
 80024c0:	d10e      	bne.n	80024e0 <UART_SetConfig+0x10c>
 80024c2:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 80024c6:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024ca:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 80024ce:	2a40      	cmp	r2, #64	; 0x40
 80024d0:	f000 80a3 	beq.w	800261a <UART_SetConfig+0x246>
 80024d4:	d9d0      	bls.n	8002478 <UART_SetConfig+0xa4>
 80024d6:	2a80      	cmp	r2, #128	; 0x80
 80024d8:	f000 8093 	beq.w	8002602 <UART_SetConfig+0x22e>
 80024dc:	2ac0      	cmp	r2, #192	; 0xc0
 80024de:	e7e6      	b.n	80024ae <UART_SetConfig+0xda>
 80024e0:	4a5c      	ldr	r2, [pc, #368]	; (8002654 <UART_SetConfig+0x280>)
 80024e2:	4295      	cmp	r5, r2
 80024e4:	d110      	bne.n	8002508 <UART_SetConfig+0x134>
 80024e6:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 80024ea:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80024ee:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80024f2:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80024f6:	f000 8090 	beq.w	800261a <UART_SetConfig+0x246>
 80024fa:	d9bd      	bls.n	8002478 <UART_SetConfig+0xa4>
 80024fc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002500:	d07f      	beq.n	8002602 <UART_SetConfig+0x22e>
 8002502:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002506:	e7d2      	b.n	80024ae <UART_SetConfig+0xda>
 8002508:	4a53      	ldr	r2, [pc, #332]	; (8002658 <UART_SetConfig+0x284>)
 800250a:	4295      	cmp	r5, r2
 800250c:	d117      	bne.n	800253e <UART_SetConfig+0x16a>
 800250e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002512:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002516:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800251a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800251e:	d07c      	beq.n	800261a <UART_SetConfig+0x246>
 8002520:	d807      	bhi.n	8002532 <UART_SetConfig+0x15e>
 8002522:	2a00      	cmp	r2, #0
 8002524:	d1c5      	bne.n	80024b2 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002526:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800252a:	d154      	bne.n	80025d6 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800252c:	f7ff f886 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 8002530:	e7a9      	b.n	8002486 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002532:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8002536:	d064      	beq.n	8002602 <UART_SetConfig+0x22e>
 8002538:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800253c:	e7b7      	b.n	80024ae <UART_SetConfig+0xda>
 800253e:	4a47      	ldr	r2, [pc, #284]	; (800265c <UART_SetConfig+0x288>)
 8002540:	4295      	cmp	r5, r2
 8002542:	d10f      	bne.n	8002564 <UART_SetConfig+0x190>
 8002544:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 8002548:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800254c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8002550:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8002554:	d061      	beq.n	800261a <UART_SetConfig+0x246>
 8002556:	d98f      	bls.n	8002478 <UART_SetConfig+0xa4>
 8002558:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800255c:	d051      	beq.n	8002602 <UART_SetConfig+0x22e>
 800255e:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 8002562:	e7a4      	b.n	80024ae <UART_SetConfig+0xda>
 8002564:	4a3e      	ldr	r2, [pc, #248]	; (8002660 <UART_SetConfig+0x28c>)
 8002566:	4295      	cmp	r5, r2
 8002568:	d1a3      	bne.n	80024b2 <UART_SetConfig+0xde>
 800256a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 800256e:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002572:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8002576:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800257a:	d04e      	beq.n	800261a <UART_SetConfig+0x246>
 800257c:	f67f af7c 	bls.w	8002478 <UART_SetConfig+0xa4>
 8002580:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002584:	d03d      	beq.n	8002602 <UART_SetConfig+0x22e>
 8002586:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 800258a:	e790      	b.n	80024ae <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 800258c:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 800258e:	2300      	movs	r3, #0
 8002590:	e781      	b.n	8002496 <UART_SetConfig+0xc2>
    switch (clocksource)
 8002592:	2a08      	cmp	r2, #8
 8002594:	d890      	bhi.n	80024b8 <UART_SetConfig+0xe4>
 8002596:	a301      	add	r3, pc, #4	; (adr r3, 800259c <UART_SetConfig+0x1c8>)
 8002598:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800259c:	080025c1 	.word	0x080025c1
 80025a0:	080025d7 	.word	0x080025d7
 80025a4:	080025dd 	.word	0x080025dd
 80025a8:	080024b9 	.word	0x080024b9
 80025ac:	080025f3 	.word	0x080025f3
 80025b0:	080024b9 	.word	0x080024b9
 80025b4:	080024b9 	.word	0x080024b9
 80025b8:	080024b9 	.word	0x080024b9
 80025bc:	080025f9 	.word	0x080025f9
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80025c0:	f7ff f82c 	bl	800161c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80025ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80025ce:	b280      	uxth	r0, r0
 80025d0:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d2:	2000      	movs	r0, #0
      break;
 80025d4:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80025d6:	f7ff f831 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 80025da:	e7f3      	b.n	80025c4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80025dc:	6862      	ldr	r2, [r4, #4]
 80025de:	0853      	lsrs	r3, r2, #1
 80025e0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80025e4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	60eb      	str	r3, [r5, #12]
 80025f0:	e7ef      	b.n	80025d2 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80025f2:	f7fe ff41 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 80025f6:	e7e5      	b.n	80025c4 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80025f8:	6862      	ldr	r2, [r4, #4]
 80025fa:	0853      	lsrs	r3, r2, #1
 80025fc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002600:	e7f2      	b.n	80025e8 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002602:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002606:	d1e9      	bne.n	80025dc <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002608:	6860      	ldr	r0, [r4, #4]
 800260a:	0843      	lsrs	r3, r0, #1
 800260c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002610:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002614:	fbb3 f3f0 	udiv	r3, r3, r0
 8002618:	e73b      	b.n	8002492 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800261a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261e:	d1e8      	bne.n	80025f2 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002620:	f7fe ff2a 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8002624:	e72f      	b.n	8002486 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800262a:	d1e5      	bne.n	80025f8 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800262c:	6860      	ldr	r0, [r4, #4]
 800262e:	0843      	lsrs	r3, r0, #1
 8002630:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002634:	e7ee      	b.n	8002614 <UART_SetConfig+0x240>
 8002636:	bf00      	nop
 8002638:	efff69f3 	.word	0xefff69f3
 800263c:	40011000 	.word	0x40011000
 8002640:	0800cab4 	.word	0x0800cab4
 8002644:	40004400 	.word	0x40004400
 8002648:	0800cab8 	.word	0x0800cab8
 800264c:	40004800 	.word	0x40004800
 8002650:	40004c00 	.word	0x40004c00
 8002654:	40005000 	.word	0x40005000
 8002658:	40011400 	.word	0x40011400
 800265c:	40007800 	.word	0x40007800
 8002660:	40007c00 	.word	0x40007c00

08002664 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002664:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002666:	07da      	lsls	r2, r3, #31
{
 8002668:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800266a:	d506      	bpl.n	800267a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800266c:	6801      	ldr	r1, [r0, #0]
 800266e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002670:	684a      	ldr	r2, [r1, #4]
 8002672:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002676:	4322      	orrs	r2, r4
 8002678:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800267a:	079c      	lsls	r4, r3, #30
 800267c:	d506      	bpl.n	800268c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800267e:	6801      	ldr	r1, [r0, #0]
 8002680:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002682:	684a      	ldr	r2, [r1, #4]
 8002684:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002688:	4322      	orrs	r2, r4
 800268a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800268c:	0759      	lsls	r1, r3, #29
 800268e:	d506      	bpl.n	800269e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002690:	6801      	ldr	r1, [r0, #0]
 8002692:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002694:	684a      	ldr	r2, [r1, #4]
 8002696:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800269a:	4322      	orrs	r2, r4
 800269c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800269e:	071a      	lsls	r2, r3, #28
 80026a0:	d506      	bpl.n	80026b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026a2:	6801      	ldr	r1, [r0, #0]
 80026a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80026a6:	684a      	ldr	r2, [r1, #4]
 80026a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026ac:	4322      	orrs	r2, r4
 80026ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026b0:	06dc      	lsls	r4, r3, #27
 80026b2:	d506      	bpl.n	80026c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026b4:	6801      	ldr	r1, [r0, #0]
 80026b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80026b8:	688a      	ldr	r2, [r1, #8]
 80026ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026be:	4322      	orrs	r2, r4
 80026c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026c2:	0699      	lsls	r1, r3, #26
 80026c4:	d506      	bpl.n	80026d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026c6:	6801      	ldr	r1, [r0, #0]
 80026c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80026ca:	688a      	ldr	r2, [r1, #8]
 80026cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026d0:	4322      	orrs	r2, r4
 80026d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026d4:	065a      	lsls	r2, r3, #25
 80026d6:	d510      	bpl.n	80026fa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026d8:	6801      	ldr	r1, [r0, #0]
 80026da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80026dc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026de:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026e2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80026e6:	ea42 0204 	orr.w	r2, r2, r4
 80026ea:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026ec:	d105      	bne.n	80026fa <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026ee:	684a      	ldr	r2, [r1, #4]
 80026f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80026f2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80026f6:	4322      	orrs	r2, r4
 80026f8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	d506      	bpl.n	800270c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026fe:	6802      	ldr	r2, [r0, #0]
 8002700:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002702:	6853      	ldr	r3, [r2, #4]
 8002704:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002708:	430b      	orrs	r3, r1
 800270a:	6053      	str	r3, [r2, #4]
 800270c:	bd10      	pop	{r4, pc}

0800270e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800270e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002710:	2500      	movs	r5, #0
{
 8002712:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002714:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002716:	f7fd ff6b 	bl	80005f0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800271a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800271c:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800271e:	6812      	ldr	r2, [r2, #0]
 8002720:	0712      	lsls	r2, r2, #28
 8002722:	d409      	bmi.n	8002738 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002724:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002726:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002728:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800272c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 8002730:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 8002734:	b003      	add	sp, #12
 8002736:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002738:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800273c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002740:	4620      	mov	r0, r4
 8002742:	9200      	str	r2, [sp, #0]
 8002744:	462a      	mov	r2, r5
 8002746:	f7ff fe13 	bl	8002370 <UART_WaitOnFlagUntilTimeout>
 800274a:	2800      	cmp	r0, #0
 800274c:	d0ea      	beq.n	8002724 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800274e:	2003      	movs	r0, #3
 8002750:	e7f0      	b.n	8002734 <UART_CheckIdleState+0x26>

08002752 <HAL_UART_Init>:
{
 8002752:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002754:	4604      	mov	r4, r0
 8002756:	b360      	cbz	r0, 80027b2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8002758:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800275c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002760:	b91b      	cbnz	r3, 800276a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002762:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8002766:	f009 f809 	bl	800b77c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800276a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800276c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 800276e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8002770:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8002774:	6813      	ldr	r3, [r2, #0]
 8002776:	f023 0301 	bic.w	r3, r3, #1
 800277a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800277c:	f7ff fe2a 	bl	80023d4 <UART_SetConfig>
 8002780:	2801      	cmp	r0, #1
 8002782:	d016      	beq.n	80027b2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002786:	b113      	cbz	r3, 800278e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff ff6b 	bl	8002664 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800278e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002790:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002798:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80027a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	f042 0201 	orr.w	r2, r2, #1
}
 80027a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80027ac:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80027ae:	f7ff bfae 	b.w	800270e <UART_CheckIdleState>
}
 80027b2:	2001      	movs	r0, #1
 80027b4:	bd10      	pop	{r4, pc}
	...

080027b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80027b8:	4b0a      	ldr	r3, [pc, #40]	; (80027e4 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80027ba:	3b01      	subs	r3, #1
 80027bc:	d101      	bne.n	80027c2 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 80027be:	2003      	movs	r0, #3
 80027c0:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80027c2:	6902      	ldr	r2, [r0, #16]
 80027c4:	2a00      	cmp	r2, #0
 80027c6:	daf8      	bge.n	80027ba <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80027c8:	6903      	ldr	r3, [r0, #16]
 80027ca:	4a06      	ldr	r2, [pc, #24]	; (80027e4 <USB_CoreReset+0x2c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 80027d2:	3a01      	subs	r2, #1
 80027d4:	d0f3      	beq.n	80027be <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80027d6:	6903      	ldr	r3, [r0, #16]
 80027d8:	f013 0301 	ands.w	r3, r3, #1
 80027dc:	d1f9      	bne.n	80027d2 <USB_CoreReset+0x1a>

  return HAL_OK;
 80027de:	4618      	mov	r0, r3
}
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	00030d41 	.word	0x00030d41

080027e8 <USB_CoreInit>:
{
 80027e8:	b084      	sub	sp, #16
 80027ea:	b538      	push	{r3, r4, r5, lr}
 80027ec:	ad05      	add	r5, sp, #20
 80027ee:	4604      	mov	r4, r0
 80027f0:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80027f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d127      	bne.n	800284a <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80027fa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80027fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002800:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002802:	68c3      	ldr	r3, [r0, #12]
 8002804:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800280c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800280e:	68c3      	ldr	r3, [r0, #12]
 8002810:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002814:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002816:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002818:	2b01      	cmp	r3, #1
 800281a:	d103      	bne.n	8002824 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800281c:	68c3      	ldr	r3, [r0, #12]
 800281e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002822:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002824:	4620      	mov	r0, r4
 8002826:	f7ff ffc7 	bl	80027b8 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 800282a:	9b08      	ldr	r3, [sp, #32]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002830:	68a3      	ldr	r3, [r4, #8]
 8002832:	f043 0306 	orr.w	r3, r3, #6
 8002836:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002838:	68a3      	ldr	r3, [r4, #8]
 800283a:	f043 0320 	orr.w	r3, r3, #32
 800283e:	60a3      	str	r3, [r4, #8]
}
 8002840:	2000      	movs	r0, #0
 8002842:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002846:	b004      	add	sp, #16
 8002848:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800284a:	68c3      	ldr	r3, [r0, #12]
 800284c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002850:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002852:	f7ff ffb1 	bl	80027b8 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 8002856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800285a:	63a3      	str	r3, [r4, #56]	; 0x38
 800285c:	e7e5      	b.n	800282a <USB_CoreInit+0x42>

0800285e <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800285e:	6883      	ldr	r3, [r0, #8]
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6083      	str	r3, [r0, #8]
}
 8002866:	2000      	movs	r0, #0
 8002868:	4770      	bx	lr

0800286a <USB_SetCurrentMode>:
{
 800286a:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800286c:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 800286e:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002870:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002874:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002876:	d108      	bne.n	800288a <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002878:	68c3      	ldr	r3, [r0, #12]
 800287a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800287e:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002880:	2032      	movs	r0, #50	; 0x32
 8002882:	f7fd febb 	bl	80005fc <HAL_Delay>
  return HAL_OK;
 8002886:	2000      	movs	r0, #0
 8002888:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 800288a:	b919      	cbnz	r1, 8002894 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800288c:	68c3      	ldr	r3, [r0, #12]
 800288e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002892:	e7f4      	b.n	800287e <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002894:	2001      	movs	r0, #1
}
 8002896:	bd08      	pop	{r3, pc}

08002898 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002898:	0189      	lsls	r1, r1, #6
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <USB_FlushTxFifo+0x20>)
 800289c:	f041 0120 	orr.w	r1, r1, #32
 80028a0:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80028a2:	3a01      	subs	r2, #1
 80028a4:	d005      	beq.n	80028b2 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80028a6:	6903      	ldr	r3, [r0, #16]
 80028a8:	f013 0320 	ands.w	r3, r3, #32
 80028ac:	d1f9      	bne.n	80028a2 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 80028ae:	4618      	mov	r0, r3
 80028b0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028b2:	2003      	movs	r0, #3
}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	00030d41 	.word	0x00030d41

080028bc <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80028bc:	2310      	movs	r3, #16
 80028be:	4a06      	ldr	r2, [pc, #24]	; (80028d8 <USB_FlushRxFifo+0x1c>)
 80028c0:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 80028c2:	3a01      	subs	r2, #1
 80028c4:	d005      	beq.n	80028d2 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80028c6:	6903      	ldr	r3, [r0, #16]
 80028c8:	f013 0310 	ands.w	r3, r3, #16
 80028cc:	d1f9      	bne.n	80028c2 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 80028ce:	4618      	mov	r0, r3
 80028d0:	4770      	bx	lr
      return HAL_TIMEOUT;
 80028d2:	2003      	movs	r0, #3
}
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	00030d41 	.word	0x00030d41

080028dc <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 80028dc:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 80028e0:	4319      	orrs	r1, r3
 80028e2:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 80028e6:	2000      	movs	r0, #0
 80028e8:	4770      	bx	lr
	...

080028ec <USB_DevInit>:
{
 80028ec:	b084      	sub	sp, #16
 80028ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80028f2:	4604      	mov	r4, r0
 80028f4:	a809      	add	r0, sp, #36	; 0x24
 80028f6:	4688      	mov	r8, r1
 80028f8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80028fc:	2300      	movs	r3, #0
 80028fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002900:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002902:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002904:	461d      	mov	r5, r3
 8002906:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002908:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800290c:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800290e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002912:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002914:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002916:	d1f7      	bne.n	8002908 <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002918:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800291a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800291e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002920:	b95e      	cbnz	r6, 800293a <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002922:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002928:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800292a:	6823      	ldr	r3, [r4, #0]
 800292c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002930:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002932:	6823      	ldr	r3, [r4, #0]
 8002934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002938:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 800293a:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 800293c:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800293e:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 8002942:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002946:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 800294a:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 800294e:	d158      	bne.n	8002a02 <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 8002950:	2a00      	cmp	r2, #0
 8002952:	d154      	bne.n	80029fe <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 8002954:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 8002956:	4620      	mov	r0, r4
 8002958:	f7ff ffc0 	bl	80028dc <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800295c:	2110      	movs	r1, #16
 800295e:	4620      	mov	r0, r4
 8002960:	f7ff ff9a 	bl	8002898 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002964:	4620      	mov	r0, r4
 8002966:	f7ff ffa9 	bl	80028bc <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 800296a:	2300      	movs	r3, #0
 800296c:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002970:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8002974:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002976:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800297a:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 800297e:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002980:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002982:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002984:	4543      	cmp	r3, r8
 8002986:	d140      	bne.n	8002a0a <USB_DevInit+0x11e>
 8002988:	2100      	movs	r1, #0
 800298a:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800298e:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002992:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002996:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002998:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800299c:	428b      	cmp	r3, r1
 800299e:	d146      	bne.n	8002a2e <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80029a0:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80029a2:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80029a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029a8:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 80029aa:	d107      	bne.n	80029bc <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80029ac:	4b29      	ldr	r3, [pc, #164]	; (8002a54 <USB_DevInit+0x168>)
 80029ae:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80029b0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b6:	f043 0303 	orr.w	r3, r3, #3
 80029ba:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80029c0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 80029c4:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80029c6:	b91f      	cbnz	r7, 80029d0 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80029c8:	69a3      	ldr	r3, [r4, #24]
 80029ca:	f043 0310 	orr.w	r3, r3, #16
 80029ce:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80029d0:	69a2      	ldr	r2, [r4, #24]
 80029d2:	4b21      	ldr	r3, [pc, #132]	; (8002a58 <USB_DevInit+0x16c>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 80029d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80029da:	b11b      	cbz	r3, 80029e4 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80029dc:	69a3      	ldr	r3, [r4, #24]
 80029de:	f043 0308 	orr.w	r3, r3, #8
 80029e2:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80029e4:	2e01      	cmp	r6, #1
 80029e6:	d105      	bne.n	80029f4 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80029e8:	69a3      	ldr	r3, [r4, #24]
 80029ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029ee:	f043 0304 	orr.w	r3, r3, #4
 80029f2:	61a3      	str	r3, [r4, #24]
}
 80029f4:	2000      	movs	r0, #0
 80029f6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80029fa:	b004      	add	sp, #16
 80029fc:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80029fe:	2101      	movs	r1, #1
 8002a00:	e7a9      	b.n	8002956 <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002a02:	2903      	cmp	r1, #3
 8002a04:	d0a4      	beq.n	8002950 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 8002a06:	2103      	movs	r1, #3
 8002a08:	e7a5      	b.n	8002956 <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002a0a:	f8d2 9000 	ldr.w	r9, [r2]
 8002a0e:	f1b9 0f00 	cmp.w	r9, #0
 8002a12:	da0a      	bge.n	8002a2a <USB_DevInit+0x13e>
      if (i == 0U)
 8002a14:	b93b      	cbnz	r3, 8002a26 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002a16:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002a1a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a1c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002a1e:	f8c2 c008 	str.w	ip, [r2, #8]
 8002a22:	3220      	adds	r2, #32
 8002a24:	e7ae      	b.n	8002984 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002a26:	6010      	str	r0, [r2, #0]
 8002a28:	e7f7      	b.n	8002a1a <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8002a2a:	6011      	str	r1, [r2, #0]
 8002a2c:	e7f5      	b.n	8002a1a <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002a2e:	f8d2 9000 	ldr.w	r9, [r2]
 8002a32:	f1b9 0f00 	cmp.w	r9, #0
 8002a36:	da0b      	bge.n	8002a50 <USB_DevInit+0x164>
      if (i == 0U)
 8002a38:	b939      	cbnz	r1, 8002a4a <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002a3a:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002a3e:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002a40:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002a42:	f8c2 8008 	str.w	r8, [r2, #8]
 8002a46:	3220      	adds	r2, #32
 8002a48:	e7a8      	b.n	800299c <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002a4a:	f8c2 e000 	str.w	lr, [r2]
 8002a4e:	e7f6      	b.n	8002a3e <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002a50:	6010      	str	r0, [r2, #0]
 8002a52:	e7f4      	b.n	8002a3e <USB_DevInit+0x152>
 8002a54:	00800100 	.word	0x00800100
 8002a58:	803c3800 	.word	0x803c3800

08002a5c <USB_DevDisconnect>:
{
 8002a5c:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002a5e:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 8002a62:	f043 0302 	orr.w	r3, r3, #2
 8002a66:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8002a6a:	2003      	movs	r0, #3
 8002a6c:	f7fd fdc6 	bl	80005fc <HAL_Delay>
}
 8002a70:	2000      	movs	r0, #0
 8002a72:	bd08      	pop	{r3, pc}

08002a74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002a74:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002a76:	f001 f8ab 	bl	8003bd0 <vTaskStartScheduler>
  
  return osOK;
}
 8002a7a:	2000      	movs	r0, #0
 8002a7c:	bd08      	pop	{r3, pc}

08002a7e <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a7e:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8002a82:	b10b      	cbz	r3, 8002a88 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8002a84:	f001 b8f2 	b.w	8003c6c <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8002a88:	f001 b8ea 	b.w	8003c60 <xTaskGetTickCount>

08002a8c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002a8c:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a8e:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8002a92:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a94:	8a02      	ldrh	r2, [r0, #16]
{
 8002a96:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8002a98:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002a9a:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 8002a9e:	bf14      	ite	ne
 8002aa0:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002aa2:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002aa4:	a803      	add	r0, sp, #12
 8002aa6:	9400      	str	r4, [sp, #0]
 8002aa8:	9001      	str	r0, [sp, #4]
 8002aaa:	4628      	mov	r0, r5
 8002aac:	f000 ffc0 	bl	8003a30 <xTaskCreate>
 8002ab0:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002ab2:	bf0c      	ite	eq
 8002ab4:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002ab6:	2000      	movne	r0, #0
}
 8002ab8:	b005      	add	sp, #20
 8002aba:	bd30      	pop	{r4, r5, pc}

08002abc <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002abc:	2800      	cmp	r0, #0
 8002abe:	bf08      	it	eq
 8002ac0:	2001      	moveq	r0, #1
{
 8002ac2:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002ac4:	f001 f9e8 	bl	8003e98 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bd08      	pop	{r3, pc}

08002acc <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8002acc:	2001      	movs	r0, #1
 8002ace:	f000 bd51 	b.w	8003574 <xQueueCreateMutex>
	...

08002ad4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002ad4:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ad6:	2400      	movs	r4, #0
{
 8002ad8:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 8002ada:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8002adc:	b1e8      	cbz	r0, 8002b1a <osMutexWait+0x46>
 8002ade:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002ae2:	b1a3      	cbz	r3, 8002b0e <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002ae4:	aa01      	add	r2, sp, #4
 8002ae6:	4621      	mov	r1, r4
 8002ae8:	f000 fee8 	bl	80038bc <xQueueReceiveFromISR>
 8002aec:	2801      	cmp	r0, #1
 8002aee:	d002      	beq.n	8002af6 <osMutexWait+0x22>
      return osErrorOS;
 8002af0:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002af2:	b002      	add	sp, #8
 8002af4:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002af6:	9b01      	ldr	r3, [sp, #4]
 8002af8:	b13b      	cbz	r3, 8002b0a <osMutexWait+0x36>
 8002afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002afe:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <osMutexWait+0x4c>)
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	f3bf 8f4f 	dsb	sy
 8002b06:	f3bf 8f6f 	isb	sy
  return osOK;
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e7f1      	b.n	8002af2 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f000 fe0a 	bl	8003728 <xQueueGenericReceive>
 8002b14:	2801      	cmp	r0, #1
 8002b16:	d1eb      	bne.n	8002af0 <osMutexWait+0x1c>
 8002b18:	e7f7      	b.n	8002b0a <osMutexWait+0x36>
    return osErrorParameter;
 8002b1a:	2080      	movs	r0, #128	; 0x80
 8002b1c:	e7e9      	b.n	8002af2 <osMutexWait+0x1e>
 8002b1e:	bf00      	nop
 8002b20:	e000ed04 	.word	0xe000ed04

08002b24 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002b24:	2901      	cmp	r1, #1
{ 
 8002b26:	4608      	mov	r0, r1
 8002b28:	b510      	push	{r4, lr}
  if (count == 1) {
 8002b2a:	d10c      	bne.n	8002b46 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	2100      	movs	r1, #0
 8002b30:	f000 fc3e 	bl	80033b0 <xQueueGenericCreate>
 8002b34:	4604      	mov	r4, r0
 8002b36:	b120      	cbz	r0, 8002b42 <osSemaphoreCreate+0x1e>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	f000 fc5b 	bl	80033f8 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 8002b42:	4620      	mov	r0, r4
 8002b44:	bd10      	pop	{r4, pc}
    return NULL;
 8002b46:	2400      	movs	r4, #0
 8002b48:	e7fb      	b.n	8002b42 <osSemaphoreCreate+0x1e>
	...

08002b4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002b4c:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b4e:	2400      	movs	r4, #0
{
 8002b50:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 8002b52:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8002b54:	b1e8      	cbz	r0, 8002b92 <osSemaphoreWait+0x46>
 8002b56:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002b5a:	b1a3      	cbz	r3, 8002b86 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002b5c:	aa01      	add	r2, sp, #4
 8002b5e:	4621      	mov	r1, r4
 8002b60:	f000 feac 	bl	80038bc <xQueueReceiveFromISR>
 8002b64:	2801      	cmp	r0, #1
 8002b66:	d002      	beq.n	8002b6e <osSemaphoreWait+0x22>
      return osErrorOS;
 8002b68:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002b6a:	b002      	add	sp, #8
 8002b6c:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002b6e:	9b01      	ldr	r3, [sp, #4]
 8002b70:	b13b      	cbz	r3, 8002b82 <osSemaphoreWait+0x36>
 8002b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b76:	4b08      	ldr	r3, [pc, #32]	; (8002b98 <osSemaphoreWait+0x4c>)
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	f3bf 8f6f 	isb	sy
  return osOK;
 8002b82:	2000      	movs	r0, #0
 8002b84:	e7f1      	b.n	8002b6a <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8002b86:	4619      	mov	r1, r3
 8002b88:	f000 fdce 	bl	8003728 <xQueueGenericReceive>
 8002b8c:	2801      	cmp	r0, #1
 8002b8e:	d1eb      	bne.n	8002b68 <osSemaphoreWait+0x1c>
 8002b90:	e7f7      	b.n	8002b82 <osSemaphoreWait+0x36>
    return osErrorParameter;
 8002b92:	2080      	movs	r0, #128	; 0x80
 8002b94:	e7e9      	b.n	8002b6a <osSemaphoreWait+0x1e>
 8002b96:	bf00      	nop
 8002b98:	e000ed04 	.word	0xe000ed04

08002b9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8002b9c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8002b9e:	2400      	movs	r4, #0
 8002ba0:	9401      	str	r4, [sp, #4]
 8002ba2:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8002ba6:	b193      	cbz	r3, 8002bce <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002ba8:	a901      	add	r1, sp, #4
 8002baa:	f000 fd5f 	bl	800366c <xQueueGiveFromISR>
 8002bae:	2801      	cmp	r0, #1
 8002bb0:	d113      	bne.n	8002bda <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002bb2:	9b01      	ldr	r3, [sp, #4]
 8002bb4:	b913      	cbnz	r3, 8002bbc <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8002bb6:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002bb8:	b002      	add	sp, #8
 8002bba:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002bbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bc0:	4b07      	ldr	r3, [pc, #28]	; (8002be0 <osSemaphoreRelease+0x44>)
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f3bf 8f4f 	dsb	sy
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	e7f3      	b.n	8002bb6 <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8002bce:	461a      	mov	r2, r3
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f000 fc11 	bl	80033f8 <xQueueGenericSend>
 8002bd6:	2801      	cmp	r0, #1
 8002bd8:	d0ed      	beq.n	8002bb6 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 8002bda:	20ff      	movs	r0, #255	; 0xff
 8002bdc:	e7ec      	b.n	8002bb8 <osSemaphoreRelease+0x1c>
 8002bde:	bf00      	nop
 8002be0:	e000ed04 	.word	0xe000ed04

08002be4 <osMutexRelease>:
 8002be4:	f7ff bfda 	b.w	8002b9c <osSemaphoreRelease>

08002be8 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002be8:	2200      	movs	r2, #0
 8002bea:	c803      	ldmia	r0, {r0, r1}
 8002bec:	f000 bbe0 	b.w	80033b0 <xQueueGenericCreate>

08002bf0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002bf0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8002bf2:	2400      	movs	r4, #0
{
 8002bf4:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002bf6:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8002bf8:	42a2      	cmp	r2, r4
 8002bfa:	bf08      	it	eq
 8002bfc:	2201      	moveq	r2, #1
 8002bfe:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8002c02:	b1ab      	cbz	r3, 8002c30 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002c04:	4623      	mov	r3, r4
 8002c06:	aa03      	add	r2, sp, #12
 8002c08:	a901      	add	r1, sp, #4
 8002c0a:	f000 fcc5 	bl	8003598 <xQueueGenericSendFromISR>
 8002c0e:	2801      	cmp	r0, #1
 8002c10:	d002      	beq.n	8002c18 <osMessagePut+0x28>
      return osErrorOS;
 8002c12:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002c14:	b004      	add	sp, #16
 8002c16:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	b13b      	cbz	r3, 8002c2c <osMessagePut+0x3c>
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	4b06      	ldr	r3, [pc, #24]	; (8002c3c <osMessagePut+0x4c>)
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	f3bf 8f4f 	dsb	sy
 8002c28:	f3bf 8f6f 	isb	sy
  return osOK;
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	e7f1      	b.n	8002c14 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002c30:	a901      	add	r1, sp, #4
 8002c32:	f000 fbe1 	bl	80033f8 <xQueueGenericSend>
 8002c36:	2801      	cmp	r0, #1
 8002c38:	d1eb      	bne.n	8002c12 <osMessagePut+0x22>
 8002c3a:	e7f7      	b.n	8002c2c <osMessagePut+0x3c>
 8002c3c:	e000ed04 	.word	0xe000ed04

08002c40 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002c42:	2600      	movs	r6, #0
{
 8002c44:	b085      	sub	sp, #20
 8002c46:	4604      	mov	r4, r0
 8002c48:	4617      	mov	r7, r2
 8002c4a:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002c4c:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002c4e:	9602      	str	r6, [sp, #8]
 8002c50:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 8002c52:	b911      	cbnz	r1, 8002c5a <osMessageGet+0x1a>
    event.status = osErrorParameter;
 8002c54:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002c56:	9301      	str	r3, [sp, #4]
 8002c58:	e016      	b.n	8002c88 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 8002c5a:	9600      	str	r6, [sp, #0]
 8002c5c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8002c60:	b1cb      	cbz	r3, 8002c96 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002c62:	466a      	mov	r2, sp
 8002c64:	a902      	add	r1, sp, #8
 8002c66:	f000 fe29 	bl	80038bc <xQueueReceiveFromISR>
 8002c6a:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 8002c6c:	bf0a      	itet	eq
 8002c6e:	2310      	moveq	r3, #16
      event.status = osOK;
 8002c70:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 8002c72:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002c74:	9b00      	ldr	r3, [sp, #0]
 8002c76:	b13b      	cbz	r3, 8002c88 <osMessageGet+0x48>
 8002c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <osMessageGet+0x70>)
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 8002c88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002c8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002c90:	4620      	mov	r0, r4
 8002c92:	b005      	add	sp, #20
 8002c94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002c96:	a902      	add	r1, sp, #8
 8002c98:	f000 fd46 	bl	8003728 <xQueueGenericReceive>
 8002c9c:	2801      	cmp	r0, #1
 8002c9e:	d101      	bne.n	8002ca4 <osMessageGet+0x64>
      event.status = osEventMessage;
 8002ca0:	2310      	movs	r3, #16
 8002ca2:	e7d8      	b.n	8002c56 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002ca4:	2f00      	cmp	r7, #0
 8002ca6:	bf0c      	ite	eq
 8002ca8:	2300      	moveq	r3, #0
 8002caa:	2340      	movne	r3, #64	; 0x40
 8002cac:	e7d3      	b.n	8002c56 <osMessageGet+0x16>
 8002cae:	bf00      	nop
 8002cb0:	e000ed04 	.word	0xe000ed04

08002cb4 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002cb4:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002cb6:	f001 fa3f 	bl	8004138 <xTaskGetSchedulerState>
 8002cba:	2801      	cmp	r0, #1
 8002cbc:	d003      	beq.n	8002cc6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 8002cbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002cc2:	f000 b90f 	b.w	8002ee4 <xPortSysTickHandler>
 8002cc6:	bd08      	pop	{r3, pc}

08002cc8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cc8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd0:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd2:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cd6:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cd8:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cda:	6003      	str	r3, [r0, #0]
 8002cdc:	4770      	bx	lr

08002cde <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	6103      	str	r3, [r0, #16]
 8002ce2:	4770      	bx	lr

08002ce4 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce4:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002ce6:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002ce8:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cea:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cf0:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002cf2:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cf4:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	6003      	str	r3, [r0, #0]
 8002cfa:	4770      	bx	lr

08002cfc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002cfc:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002cfe:	1c53      	adds	r3, r2, #1
{
 8002d00:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002d02:	d10a      	bne.n	8002d1a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d04:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d06:	685a      	ldr	r2, [r3, #4]
 8002d08:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d0a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d0c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d0e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d10:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d12:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002d14:	3301      	adds	r3, #1
 8002d16:	6003      	str	r3, [r0, #0]
 8002d18:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d1a:	f100 0308 	add.w	r3, r0, #8
 8002d1e:	685c      	ldr	r4, [r3, #4]
 8002d20:	6825      	ldr	r5, [r4, #0]
 8002d22:	42aa      	cmp	r2, r5
 8002d24:	d3ef      	bcc.n	8002d06 <vListInsert+0xa>
 8002d26:	4623      	mov	r3, r4
 8002d28:	e7f9      	b.n	8002d1e <vListInsert+0x22>

08002d2a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d2a:	6841      	ldr	r1, [r0, #4]
 8002d2c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d2e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d30:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d32:	6882      	ldr	r2, [r0, #8]
 8002d34:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d36:	6859      	ldr	r1, [r3, #4]
 8002d38:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d3a:	bf08      	it	eq
 8002d3c:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d3e:	2200      	movs	r2, #0
 8002d40:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	3801      	subs	r0, #1
 8002d46:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 8002d48:	4770      	bx	lr
	...

08002d4c <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <prvTaskExitError+0x34>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	3301      	adds	r3, #1
 8002d52:	d00a      	beq.n	8002d6a <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	b672      	cpsid	i
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	b662      	cpsie	i
 8002d68:	e7fe      	b.n	8002d68 <prvTaskExitError+0x1c>
 8002d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d6e:	b672      	cpsid	i
 8002d70:	f383 8811 	msr	BASEPRI, r3
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	f3bf 8f4f 	dsb	sy
 8002d7c:	b662      	cpsie	i
 8002d7e:	e7fe      	b.n	8002d7e <prvTaskExitError+0x32>
 8002d80:	20000004 	.word	0x20000004

08002d84 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002d84:	4806      	ldr	r0, [pc, #24]	; (8002da0 <prvPortStartFirstTask+0x1c>)
 8002d86:	6800      	ldr	r0, [r0, #0]
 8002d88:	6800      	ldr	r0, [r0, #0]
 8002d8a:	f380 8808 	msr	MSP, r0
 8002d8e:	b662      	cpsie	i
 8002d90:	b661      	cpsie	f
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	df00      	svc	0
 8002d9c:	bf00      	nop
 8002d9e:	0000      	.short	0x0000
 8002da0:	e000ed08 	.word	0xe000ed08

08002da4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002da4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002db4 <vPortEnableVFP+0x10>
 8002da8:	6801      	ldr	r1, [r0, #0]
 8002daa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002dae:	6001      	str	r1, [r0, #0]
 8002db0:	4770      	bx	lr
 8002db2:	0000      	.short	0x0000
 8002db4:	e000ed88 	.word	0xe000ed88

08002db8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002db8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002dbc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002dc0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002dc4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002dc6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002dca:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002dcc:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 8002dce:	f06f 0302 	mvn.w	r3, #2
 8002dd2:	6203      	str	r3, [r0, #32]
}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	08002d4d 	.word	0x08002d4d
 8002ddc:	00000000 	.word	0x00000000

08002de0 <SVC_Handler>:
	__asm volatile (
 8002de0:	4b07      	ldr	r3, [pc, #28]	; (8002e00 <pxCurrentTCBConst2>)
 8002de2:	6819      	ldr	r1, [r3, #0]
 8002de4:	6808      	ldr	r0, [r1, #0]
 8002de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002dea:	f380 8809 	msr	PSP, r0
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	f380 8811 	msr	BASEPRI, r0
 8002dfa:	4770      	bx	lr
 8002dfc:	f3af 8000 	nop.w

08002e00 <pxCurrentTCBConst2>:
 8002e00:	20003cb4 	.word	0x20003cb4

08002e04 <vPortEnterCritical>:
 8002e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e08:	b672      	cpsid	i
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	b662      	cpsie	i
	uxCriticalNesting++;
 8002e18:	4a0b      	ldr	r2, [pc, #44]	; (8002e48 <vPortEnterCritical+0x44>)
 8002e1a:	6813      	ldr	r3, [r2, #0]
 8002e1c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8002e1e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002e20:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002e22:	d10f      	bne.n	8002e44 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002e24:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <vPortEnterCritical+0x48>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002e2c:	d00a      	beq.n	8002e44 <vPortEnterCritical+0x40>
 8002e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e32:	b672      	cpsid	i
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	b662      	cpsie	i
 8002e42:	e7fe      	b.n	8002e42 <vPortEnterCritical+0x3e>
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000004 	.word	0x20000004
 8002e4c:	e000ed04 	.word	0xe000ed04

08002e50 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8002e50:	4a09      	ldr	r2, [pc, #36]	; (8002e78 <vPortExitCritical+0x28>)
 8002e52:	6813      	ldr	r3, [r2, #0]
 8002e54:	b953      	cbnz	r3, 8002e6c <vPortExitCritical+0x1c>
 8002e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e5a:	b672      	cpsid	i
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	b662      	cpsie	i
 8002e6a:	e7fe      	b.n	8002e6a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8002e6c:	3b01      	subs	r3, #1
 8002e6e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002e70:	b90b      	cbnz	r3, 8002e76 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	4770      	bx	lr
 8002e78:	20000004 	.word	0x20000004
 8002e7c:	00000000 	.word	0x00000000

08002e80 <PendSV_Handler>:
	__asm volatile
 8002e80:	f3ef 8009 	mrs	r0, PSP
 8002e84:	f3bf 8f6f 	isb	sy
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <pxCurrentTCBConst>)
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	f01e 0f10 	tst.w	lr, #16
 8002e90:	bf08      	it	eq
 8002e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e9a:	6010      	str	r0, [r2, #0]
 8002e9c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002ea4:	b672      	cpsid	i
 8002ea6:	f380 8811 	msr	BASEPRI, r0
 8002eaa:	f3bf 8f4f 	dsb	sy
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	b662      	cpsie	i
 8002eb4:	f001 f850 	bl	8003f58 <vTaskSwitchContext>
 8002eb8:	f04f 0000 	mov.w	r0, #0
 8002ebc:	f380 8811 	msr	BASEPRI, r0
 8002ec0:	bc08      	pop	{r3}
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	6808      	ldr	r0, [r1, #0]
 8002ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eca:	f01e 0f10 	tst.w	lr, #16
 8002ece:	bf08      	it	eq
 8002ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002ed4:	f380 8809 	msr	PSP, r0
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop

08002ee0 <pxCurrentTCBConst>:
 8002ee0:	20003cb4 	.word	0x20003cb4

08002ee4 <xPortSysTickHandler>:
{
 8002ee4:	b508      	push	{r3, lr}
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eea:	b672      	cpsid	i
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8002efa:	f000 febf 	bl	8003c7c <xTaskIncrementTick>
 8002efe:	b118      	cbz	r0, 8002f08 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f04:	4b02      	ldr	r3, [pc, #8]	; (8002f10 <xPortSysTickHandler+0x2c>)
 8002f06:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	bd08      	pop	{r3, pc}
 8002f10:	e000ed04 	.word	0xe000ed04

08002f14 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002f14:	4b06      	ldr	r3, [pc, #24]	; (8002f30 <vPortSetupTimerInterrupt+0x1c>)
 8002f16:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <vPortSetupTimerInterrupt+0x20>)
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002f26:	2207      	movs	r2, #7
 8002f28:	4b03      	ldr	r3, [pc, #12]	; (8002f38 <vPortSetupTimerInterrupt+0x24>)
 8002f2a:	601a      	str	r2, [r3, #0]
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	20000010 	.word	0x20000010
 8002f34:	e000e014 	.word	0xe000e014
 8002f38:	e000e010 	.word	0xe000e010

08002f3c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f3c:	4b23      	ldr	r3, [pc, #140]	; (8002fcc <xPortStartScheduler+0x90>)
{
 8002f3e:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f40:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f42:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002f48:	22ff      	movs	r2, #255	; 0xff
 8002f4a:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f4c:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f4e:	4a20      	ldr	r2, [pc, #128]	; (8002fd0 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002f56:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002f5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002f5e:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002f60:	2207      	movs	r2, #7
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <xPortStartScheduler+0x98>)
 8002f64:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002f66:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002f6a:	1e54      	subs	r4, r2, #1
 8002f6c:	0600      	lsls	r0, r0, #24
 8002f6e:	d423      	bmi.n	8002fb8 <xPortStartScheduler+0x7c>
 8002f70:	b101      	cbz	r1, 8002f74 <xPortStartScheduler+0x38>
 8002f72:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f78:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002f7c:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f7e:	9b01      	ldr	r3, [sp, #4]
 8002f80:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <xPortStartScheduler+0x90>)
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002f86:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <xPortStartScheduler+0x9c>)
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002f8e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002f96:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002f98:	f7ff ffbc 	bl	8002f14 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4b0f      	ldr	r3, [pc, #60]	; (8002fdc <xPortStartScheduler+0xa0>)
 8002fa0:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002fa2:	f7ff feff 	bl	8002da4 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002fa6:	4a0e      	ldr	r2, [pc, #56]	; (8002fe0 <xPortStartScheduler+0xa4>)
 8002fa8:	6813      	ldr	r3, [r2, #0]
 8002faa:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002fae:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002fb0:	f7ff fee8 	bl	8002d84 <prvPortStartFirstTask>
	prvTaskExitError();
 8002fb4:	f7ff feca 	bl	8002d4c <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002fb8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002fbc:	2101      	movs	r1, #1
 8002fbe:	0052      	lsls	r2, r2, #1
 8002fc0:	b2d2      	uxtb	r2, r2
 8002fc2:	f88d 2003 	strb.w	r2, [sp, #3]
 8002fc6:	4622      	mov	r2, r4
 8002fc8:	e7cd      	b.n	8002f66 <xPortStartScheduler+0x2a>
 8002fca:	bf00      	nop
 8002fcc:	e000e400 	.word	0xe000e400
 8002fd0:	20000094 	.word	0x20000094
 8002fd4:	20000098 	.word	0x20000098
 8002fd8:	e000ed20 	.word	0xe000ed20
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	e000ef34 	.word	0xe000ef34

08002fe4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002fe4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002fe8:	2b0f      	cmp	r3, #15
 8002fea:	d910      	bls.n	800300e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002fec:	4a12      	ldr	r2, [pc, #72]	; (8003038 <vPortValidateInterruptPriority+0x54>)
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002ff0:	4a12      	ldr	r2, [pc, #72]	; (800303c <vPortValidateInterruptPriority+0x58>)
 8002ff2:	7812      	ldrb	r2, [r2, #0]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d90a      	bls.n	800300e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8002ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ffc:	b672      	cpsid	i
 8002ffe:	f383 8811 	msr	BASEPRI, r3
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	f3bf 8f4f 	dsb	sy
 800300a:	b662      	cpsie	i
 800300c:	e7fe      	b.n	800300c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800300e:	4b0c      	ldr	r3, [pc, #48]	; (8003040 <vPortValidateInterruptPriority+0x5c>)
 8003010:	4a0c      	ldr	r2, [pc, #48]	; (8003044 <vPortValidateInterruptPriority+0x60>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800301a:	4293      	cmp	r3, r2
 800301c:	d90a      	bls.n	8003034 <vPortValidateInterruptPriority+0x50>
 800301e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003022:	b672      	cpsid	i
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	b662      	cpsie	i
 8003032:	e7fe      	b.n	8003032 <vPortValidateInterruptPriority+0x4e>
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000e3f0 	.word	0xe000e3f0
 800303c:	20000094 	.word	0x20000094
 8003040:	e000ed0c 	.word	0xe000ed0c
 8003044:	20000098 	.word	0x20000098

08003048 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003048:	4b0f      	ldr	r3, [pc, #60]	; (8003088 <prvInsertBlockIntoFreeList+0x40>)
{
 800304a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	4282      	cmp	r2, r0
 8003050:	d318      	bcc.n	8003084 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003052:	685c      	ldr	r4, [r3, #4]
 8003054:	1919      	adds	r1, r3, r4
 8003056:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003058:	bf01      	itttt	eq
 800305a:	6841      	ldreq	r1, [r0, #4]
 800305c:	4618      	moveq	r0, r3
 800305e:	1909      	addeq	r1, r1, r4
 8003060:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003062:	6844      	ldr	r4, [r0, #4]
 8003064:	1901      	adds	r1, r0, r4
 8003066:	428a      	cmp	r2, r1
 8003068:	d107      	bne.n	800307a <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800306a:	4908      	ldr	r1, [pc, #32]	; (800308c <prvInsertBlockIntoFreeList+0x44>)
 800306c:	6809      	ldr	r1, [r1, #0]
 800306e:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003070:	bf1f      	itttt	ne
 8003072:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003074:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003076:	1909      	addne	r1, r1, r4
 8003078:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800307a:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800307c:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800307e:	bf18      	it	ne
 8003080:	6018      	strne	r0, [r3, #0]
 8003082:	bd10      	pop	{r4, pc}
 8003084:	4613      	mov	r3, r2
 8003086:	e7e1      	b.n	800304c <prvInsertBlockIntoFreeList+0x4>
 8003088:	20003cac 	.word	0x20003cac
 800308c:	2000009c 	.word	0x2000009c

08003090 <pvPortMalloc>:
{
 8003090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003094:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003096:	f000 fddb 	bl	8003c50 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800309a:	4940      	ldr	r1, [pc, #256]	; (800319c <pvPortMalloc+0x10c>)
 800309c:	4d40      	ldr	r5, [pc, #256]	; (80031a0 <pvPortMalloc+0x110>)
 800309e:	680b      	ldr	r3, [r1, #0]
 80030a0:	bb0b      	cbnz	r3, 80030e6 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80030a2:	4a40      	ldr	r2, [pc, #256]	; (80031a4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80030a4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030a6:	4e40      	ldr	r6, [pc, #256]	; (80031a8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80030a8:	bf1b      	ittet	ne
 80030aa:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030ac:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80030b0:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030b4:	f020 0007 	bicne.w	r0, r0, #7
 80030b8:	bf1c      	itt	ne
 80030ba:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80030bc:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 80030be:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030c0:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030c2:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030c4:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 80030c6:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030c8:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 80030cc:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 80030ce:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030d0:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 80030d2:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030d4:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030d8:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030da:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030dc:	4b34      	ldr	r3, [pc, #208]	; (80031b0 <pvPortMalloc+0x120>)
 80030de:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80030e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80030e4:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80030e6:	682f      	ldr	r7, [r5, #0]
 80030e8:	4227      	tst	r7, r4
 80030ea:	d116      	bne.n	800311a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 80030ec:	2c00      	cmp	r4, #0
 80030ee:	d042      	beq.n	8003176 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80030f0:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80030f4:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80030f6:	bf1c      	itt	ne
 80030f8:	f023 0307 	bicne.w	r3, r3, #7
 80030fc:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80030fe:	b163      	cbz	r3, 800311a <pvPortMalloc+0x8a>
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <pvPortMalloc+0x120>)
 8003102:	6816      	ldr	r6, [r2, #0]
 8003104:	4690      	mov	r8, r2
 8003106:	42b3      	cmp	r3, r6
 8003108:	d807      	bhi.n	800311a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800310a:	4a27      	ldr	r2, [pc, #156]	; (80031a8 <pvPortMalloc+0x118>)
 800310c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800310e:	6868      	ldr	r0, [r5, #4]
 8003110:	4283      	cmp	r3, r0
 8003112:	d804      	bhi.n	800311e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8003114:	6809      	ldr	r1, [r1, #0]
 8003116:	428d      	cmp	r5, r1
 8003118:	d107      	bne.n	800312a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800311a:	2400      	movs	r4, #0
 800311c:	e02b      	b.n	8003176 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800311e:	682c      	ldr	r4, [r5, #0]
 8003120:	2c00      	cmp	r4, #0
 8003122:	d0f7      	beq.n	8003114 <pvPortMalloc+0x84>
 8003124:	462a      	mov	r2, r5
 8003126:	4625      	mov	r5, r4
 8003128:	e7f1      	b.n	800310e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800312a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800312c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800312e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003130:	1ac2      	subs	r2, r0, r3
 8003132:	2a10      	cmp	r2, #16
 8003134:	d911      	bls.n	800315a <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003136:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003138:	0741      	lsls	r1, r0, #29
 800313a:	d00a      	beq.n	8003152 <pvPortMalloc+0xc2>
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	b672      	cpsid	i
 8003142:	f383 8811 	msr	BASEPRI, r3
 8003146:	f3bf 8f6f 	isb	sy
 800314a:	f3bf 8f4f 	dsb	sy
 800314e:	b662      	cpsie	i
 8003150:	e7fe      	b.n	8003150 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003152:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003154:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003156:	f7ff ff77 	bl	8003048 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800315a:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800315c:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800315e:	4913      	ldr	r1, [pc, #76]	; (80031ac <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003160:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003162:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003164:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8003166:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003168:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800316c:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800316e:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003170:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003172:	bf38      	it	cc
 8003174:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8003176:	f000 fe15 	bl	8003da4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800317a:	0763      	lsls	r3, r4, #29
 800317c:	d00a      	beq.n	8003194 <pvPortMalloc+0x104>
 800317e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003182:	b672      	cpsid	i
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	b662      	cpsie	i
 8003192:	e7fe      	b.n	8003192 <pvPortMalloc+0x102>
}
 8003194:	4620      	mov	r0, r4
 8003196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800319a:	bf00      	nop
 800319c:	2000009c 	.word	0x2000009c
 80031a0:	20003ca0 	.word	0x20003ca0
 80031a4:	200000a0 	.word	0x200000a0
 80031a8:	20003cac 	.word	0x20003cac
 80031ac:	20003ca8 	.word	0x20003ca8
 80031b0:	20003ca4 	.word	0x20003ca4

080031b4 <vPortFree>:
{
 80031b4:	b510      	push	{r4, lr}
	if( pv != NULL )
 80031b6:	4604      	mov	r4, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	d032      	beq.n	8003222 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80031bc:	4a19      	ldr	r2, [pc, #100]	; (8003224 <vPortFree+0x70>)
 80031be:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80031c2:	6812      	ldr	r2, [r2, #0]
 80031c4:	4213      	tst	r3, r2
 80031c6:	d10a      	bne.n	80031de <vPortFree+0x2a>
 80031c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031cc:	b672      	cpsid	i
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	b662      	cpsie	i
 80031dc:	e7fe      	b.n	80031dc <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80031de:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80031e2:	b151      	cbz	r1, 80031fa <vPortFree+0x46>
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	b672      	cpsid	i
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	b662      	cpsie	i
 80031f8:	e7fe      	b.n	80031f8 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80031fa:	ea23 0302 	bic.w	r3, r3, r2
 80031fe:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003202:	f000 fd25 	bl	8003c50 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003206:	4a08      	ldr	r2, [pc, #32]	; (8003228 <vPortFree+0x74>)
 8003208:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800320c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003210:	6811      	ldr	r1, [r2, #0]
 8003212:	440b      	add	r3, r1
 8003214:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003216:	f7ff ff17 	bl	8003048 <prvInsertBlockIntoFreeList>
}
 800321a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800321e:	f000 bdc1 	b.w	8003da4 <xTaskResumeAll>
 8003222:	bd10      	pop	{r4, pc}
 8003224:	20003ca0 	.word	0x20003ca0
 8003228:	20003ca4 	.word	0x20003ca4

0800322c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800322c:	b570      	push	{r4, r5, r6, lr}
 800322e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003230:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003232:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003234:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003236:	b942      	cbnz	r2, 800324a <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003238:	6805      	ldr	r5, [r0, #0]
 800323a:	b99d      	cbnz	r5, 8003264 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800323c:	6840      	ldr	r0, [r0, #4]
 800323e:	f000 ffd1 	bl	80041e4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8003242:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8003244:	3601      	adds	r6, #1
 8003246:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8003248:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800324a:	b96d      	cbnz	r5, 8003268 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800324c:	6880      	ldr	r0, [r0, #8]
 800324e:	f008 fccc 	bl	800bbea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003252:	68a3      	ldr	r3, [r4, #8]
 8003254:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003256:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003258:	6862      	ldr	r2, [r4, #4]
 800325a:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800325c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800325e:	d301      	bcc.n	8003264 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003260:	6823      	ldr	r3, [r4, #0]
 8003262:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8003264:	2000      	movs	r0, #0
 8003266:	e7ed      	b.n	8003244 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003268:	68c0      	ldr	r0, [r0, #12]
 800326a:	f008 fcbe 	bl	800bbea <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800326e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003270:	68e2      	ldr	r2, [r4, #12]
 8003272:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003274:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003276:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003278:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800327a:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800327c:	bf3e      	ittt	cc
 800327e:	6862      	ldrcc	r2, [r4, #4]
 8003280:	189b      	addcc	r3, r3, r2
 8003282:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8003284:	2d02      	cmp	r5, #2
 8003286:	d1ed      	bne.n	8003264 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003288:	b10e      	cbz	r6, 800328e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800328a:	3e01      	subs	r6, #1
 800328c:	e7ea      	b.n	8003264 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800328e:	4630      	mov	r0, r6
 8003290:	e7d8      	b.n	8003244 <prvCopyDataToQueue+0x18>

08003292 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003292:	4603      	mov	r3, r0
 8003294:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003298:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800329a:	b162      	cbz	r2, 80032b6 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800329c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800329e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032a0:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032a2:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80032a4:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 80032a6:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80032aa:	bf24      	itt	cs
 80032ac:	6819      	ldrcs	r1, [r3, #0]
 80032ae:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80032b0:	68d9      	ldr	r1, [r3, #12]
 80032b2:	f008 bc9a 	b.w	800bbea <memcpy>
}
 80032b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032c0:	f7ff fda0 	bl	8002e04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032c4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032c8:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 80032cc:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032ce:	2d00      	cmp	r5, #0
 80032d0:	dc14      	bgt.n	80032fc <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80032d2:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032d4:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 80032d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80032dc:	f7ff fdb8 	bl	8002e50 <vPortExitCritical>
	taskENTER_CRITICAL();
 80032e0:	f7ff fd90 	bl	8002e04 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 80032e4:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 80032e8:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80032ea:	2d00      	cmp	r5, #0
 80032ec:	dc12      	bgt.n	8003314 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80032ee:	23ff      	movs	r3, #255	; 0xff
 80032f0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80032f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80032f8:	f7ff bdaa 	b.w	8002e50 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d0e7      	beq.n	80032d2 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003302:	4630      	mov	r0, r6
 8003304:	f000 fe80 	bl	8004008 <xTaskRemoveFromEventList>
 8003308:	b108      	cbz	r0, 800330e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800330a:	f000 ff0f 	bl	800412c <vTaskMissedYield>
 800330e:	3d01      	subs	r5, #1
 8003310:	b26d      	sxtb	r5, r5
 8003312:	e7dc      	b.n	80032ce <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003314:	6923      	ldr	r3, [r4, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0e9      	beq.n	80032ee <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800331a:	4630      	mov	r0, r6
 800331c:	f000 fe74 	bl	8004008 <xTaskRemoveFromEventList>
 8003320:	b108      	cbz	r0, 8003326 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8003322:	f000 ff03 	bl	800412c <vTaskMissedYield>
 8003326:	3d01      	subs	r5, #1
 8003328:	b26d      	sxtb	r5, r5
 800332a:	e7de      	b.n	80032ea <prvUnlockQueue+0x2e>

0800332c <xQueueGenericReset>:
{
 800332c:	b538      	push	{r3, r4, r5, lr}
 800332e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003330:	4604      	mov	r4, r0
 8003332:	b950      	cbnz	r0, 800334a <xQueueGenericReset+0x1e>
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	b672      	cpsid	i
 800333a:	f383 8811 	msr	BASEPRI, r3
 800333e:	f3bf 8f6f 	isb	sy
 8003342:	f3bf 8f4f 	dsb	sy
 8003346:	b662      	cpsie	i
 8003348:	e7fe      	b.n	8003348 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 800334a:	f7ff fd5b 	bl	8002e04 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800334e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8003350:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003352:	6822      	ldr	r2, [r4, #0]
 8003354:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003356:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003358:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800335a:	1a1b      	subs	r3, r3, r0
 800335c:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800335e:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003360:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003362:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003364:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003366:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8003368:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800336c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8003370:	b995      	cbnz	r5, 8003398 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003372:	6923      	ldr	r3, [r4, #16]
 8003374:	b163      	cbz	r3, 8003390 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003376:	f104 0010 	add.w	r0, r4, #16
 800337a:	f000 fe45 	bl	8004008 <xTaskRemoveFromEventList>
 800337e:	b138      	cbz	r0, 8003390 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8003380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <xQueueGenericReset+0x80>)
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8003390:	f7ff fd5e 	bl	8002e50 <vPortExitCritical>
}
 8003394:	2001      	movs	r0, #1
 8003396:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003398:	f104 0010 	add.w	r0, r4, #16
 800339c:	f7ff fc94 	bl	8002cc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80033a0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80033a4:	f7ff fc90 	bl	8002cc8 <vListInitialise>
 80033a8:	e7f2      	b.n	8003390 <xQueueGenericReset+0x64>
 80033aa:	bf00      	nop
 80033ac:	e000ed04 	.word	0xe000ed04

080033b0 <xQueueGenericCreate>:
	{
 80033b0:	b570      	push	{r4, r5, r6, lr}
 80033b2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80033b4:	4606      	mov	r6, r0
 80033b6:	b950      	cbnz	r0, 80033ce <xQueueGenericCreate+0x1e>
 80033b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033bc:	b672      	cpsid	i
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	b662      	cpsie	i
 80033cc:	e7fe      	b.n	80033cc <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ce:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80033d0:	3048      	adds	r0, #72	; 0x48
 80033d2:	f7ff fe5d 	bl	8003090 <pvPortMalloc>
		if( pxNewQueue != NULL )
 80033d6:	4604      	mov	r4, r0
 80033d8:	b138      	cbz	r0, 80033ea <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 80033da:	b945      	cbnz	r5, 80033ee <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80033dc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 80033de:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033e0:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 80033e2:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80033e4:	4620      	mov	r0, r4
 80033e6:	f7ff ffa1 	bl	800332c <xQueueGenericReset>
	}
 80033ea:	4620      	mov	r0, r4
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80033ee:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80033f2:	6003      	str	r3, [r0, #0]
 80033f4:	e7f3      	b.n	80033de <xQueueGenericCreate+0x2e>
	...

080033f8 <xQueueGenericSend>:
{
 80033f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033fc:	4689      	mov	r9, r1
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003402:	4604      	mov	r4, r0
 8003404:	b950      	cbnz	r0, 800341c <xQueueGenericSend+0x24>
 8003406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800340a:	b672      	cpsid	i
 800340c:	f383 8811 	msr	BASEPRI, r3
 8003410:	f3bf 8f6f 	isb	sy
 8003414:	f3bf 8f4f 	dsb	sy
 8003418:	b662      	cpsie	i
 800341a:	e7fe      	b.n	800341a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800341c:	2900      	cmp	r1, #0
 800341e:	f040 808c 	bne.w	800353a <xQueueGenericSend+0x142>
 8003422:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8088 	beq.w	800353a <xQueueGenericSend+0x142>
 800342a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800342e:	b672      	cpsid	i
 8003430:	f383 8811 	msr	BASEPRI, r3
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	f3bf 8f4f 	dsb	sy
 800343c:	b662      	cpsie	i
 800343e:	e7fe      	b.n	800343e <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003440:	9e01      	ldr	r6, [sp, #4]
 8003442:	2e00      	cmp	r6, #0
 8003444:	f000 8084 	beq.w	8003550 <xQueueGenericSend+0x158>
 8003448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800344c:	b672      	cpsid	i
 800344e:	f383 8811 	msr	BASEPRI, r3
 8003452:	f3bf 8f6f 	isb	sy
 8003456:	f3bf 8f4f 	dsb	sy
 800345a:	b662      	cpsie	i
 800345c:	e7fe      	b.n	800345c <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 800345e:	9d01      	ldr	r5, [sp, #4]
 8003460:	b91d      	cbnz	r5, 800346a <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8003462:	f7ff fcf5 	bl	8002e50 <vPortExitCritical>
			return errQUEUE_FULL;
 8003466:	2000      	movs	r0, #0
 8003468:	e058      	b.n	800351c <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 800346a:	b916      	cbnz	r6, 8003472 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 800346c:	a802      	add	r0, sp, #8
 800346e:	f000 fe0f 	bl	8004090 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003472:	f7ff fced 	bl	8002e50 <vPortExitCritical>
		vTaskSuspendAll();
 8003476:	f000 fbeb 	bl	8003c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800347a:	f7ff fcc3 	bl	8002e04 <vPortEnterCritical>
 800347e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003482:	2bff      	cmp	r3, #255	; 0xff
 8003484:	d101      	bne.n	800348a <xQueueGenericSend+0x92>
 8003486:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 800348a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800348e:	2bff      	cmp	r3, #255	; 0xff
 8003490:	d101      	bne.n	8003496 <xQueueGenericSend+0x9e>
 8003492:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003496:	f7ff fcdb 	bl	8002e50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800349a:	a901      	add	r1, sp, #4
 800349c:	a802      	add	r0, sp, #8
 800349e:	f000 fe07 	bl	80040b0 <xTaskCheckForTimeOut>
 80034a2:	2800      	cmp	r0, #0
 80034a4:	d143      	bne.n	800352e <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80034a6:	f7ff fcad 	bl	8002e04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034aa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80034ac:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80034ae:	f7ff fccf 	bl	8002e50 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80034b2:	42ae      	cmp	r6, r5
 80034b4:	d135      	bne.n	8003522 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80034b6:	9901      	ldr	r1, [sp, #4]
 80034b8:	f104 0010 	add.w	r0, r4, #16
 80034bc:	f000 fd88 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80034c0:	4620      	mov	r0, r4
 80034c2:	f7ff fefb 	bl	80032bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80034c6:	f000 fc6d 	bl	8003da4 <xTaskResumeAll>
 80034ca:	b938      	cbnz	r0, 80034dc <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 80034cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80034d0:	f8ca 3000 	str.w	r3, [sl]
 80034d4:	f3bf 8f4f 	dsb	sy
 80034d8:	f3bf 8f6f 	isb	sy
 80034dc:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80034de:	f7ff fc91 	bl	8002e04 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80034e2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80034e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d301      	bcc.n	80034ee <xQueueGenericSend+0xf6>
 80034ea:	2f02      	cmp	r7, #2
 80034ec:	d1b7      	bne.n	800345e <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80034ee:	463a      	mov	r2, r7
 80034f0:	4649      	mov	r1, r9
 80034f2:	4620      	mov	r0, r4
 80034f4:	f7ff fe9a 	bl	800322c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80034fa:	b11b      	cbz	r3, 8003504 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034fc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003500:	f000 fd82 	bl	8004008 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003504:	b138      	cbz	r0, 8003516 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8003506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800350a:	4b19      	ldr	r3, [pc, #100]	; (8003570 <xQueueGenericSend+0x178>)
 800350c:	601a      	str	r2, [r3, #0]
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003516:	f7ff fc9b 	bl	8002e50 <vPortExitCritical>
				return pdPASS;
 800351a:	2001      	movs	r0, #1
}
 800351c:	b004      	add	sp, #16
 800351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff feca 	bl	80032bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003528:	f000 fc3c 	bl	8003da4 <xTaskResumeAll>
 800352c:	e7d6      	b.n	80034dc <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800352e:	4620      	mov	r0, r4
 8003530:	f7ff fec4 	bl	80032bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003534:	f000 fc36 	bl	8003da4 <xTaskResumeAll>
 8003538:	e795      	b.n	8003466 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800353a:	2f02      	cmp	r7, #2
 800353c:	d102      	bne.n	8003544 <xQueueGenericSend+0x14c>
 800353e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10a      	bne.n	800355a <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003544:	f000 fdf8 	bl	8004138 <xTaskGetSchedulerState>
 8003548:	2800      	cmp	r0, #0
 800354a:	f43f af79 	beq.w	8003440 <xQueueGenericSend+0x48>
 800354e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003550:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8003554:	f8df a018 	ldr.w	sl, [pc, #24]	; 8003570 <xQueueGenericSend+0x178>
 8003558:	e7c1      	b.n	80034de <xQueueGenericSend+0xe6>
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	b672      	cpsid	i
 8003560:	f383 8811 	msr	BASEPRI, r3
 8003564:	f3bf 8f6f 	isb	sy
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	b662      	cpsie	i
 800356e:	e7fe      	b.n	800356e <xQueueGenericSend+0x176>
 8003570:	e000ed04 	.word	0xe000ed04

08003574 <xQueueCreateMutex>:
	{
 8003574:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003576:	4602      	mov	r2, r0
 8003578:	2100      	movs	r1, #0
 800357a:	2001      	movs	r0, #1
 800357c:	f7ff ff18 	bl	80033b0 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 8003580:	4604      	mov	r4, r0
 8003582:	b138      	cbz	r0, 8003594 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 8003584:	2300      	movs	r3, #0
 8003586:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003588:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800358a:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800358c:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800358e:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003590:	f7ff ff32 	bl	80033f8 <xQueueGenericSend>
	}
 8003594:	4620      	mov	r0, r4
 8003596:	bd10      	pop	{r4, pc}

08003598 <xQueueGenericSendFromISR>:
{
 8003598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800359c:	4688      	mov	r8, r1
 800359e:	4691      	mov	r9, r2
 80035a0:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80035a2:	4604      	mov	r4, r0
 80035a4:	b950      	cbnz	r0, 80035bc <xQueueGenericSendFromISR+0x24>
 80035a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035aa:	b672      	cpsid	i
 80035ac:	f383 8811 	msr	BASEPRI, r3
 80035b0:	f3bf 8f6f 	isb	sy
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	b662      	cpsie	i
 80035ba:	e7fe      	b.n	80035ba <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035bc:	bb19      	cbnz	r1, 8003606 <xQueueGenericSendFromISR+0x6e>
 80035be:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80035c0:	b30b      	cbz	r3, 8003606 <xQueueGenericSendFromISR+0x6e>
 80035c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c6:	b672      	cpsid	i
 80035c8:	f383 8811 	msr	BASEPRI, r3
 80035cc:	f3bf 8f6f 	isb	sy
 80035d0:	f3bf 8f4f 	dsb	sy
 80035d4:	b662      	cpsie	i
 80035d6:	e7fe      	b.n	80035d6 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035d8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80035dc:	f000 fd14 	bl	8004008 <xTaskRemoveFromEventList>
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d036      	beq.n	8003652 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 80035e4:	f1b9 0f00 	cmp.w	r9, #0
 80035e8:	d033      	beq.n	8003652 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80035ea:	2001      	movs	r0, #1
 80035ec:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 80035f0:	f386 8811 	msr	BASEPRI, r6
}
 80035f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80035f8:	3501      	adds	r5, #1
 80035fa:	b26d      	sxtb	r5, r5
 80035fc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003600:	e027      	b.n	8003652 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8003602:	2000      	movs	r0, #0
 8003604:	e7f4      	b.n	80035f0 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003606:	2f02      	cmp	r7, #2
 8003608:	d102      	bne.n	8003610 <xQueueGenericSendFromISR+0x78>
 800360a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800360c:	2b01      	cmp	r3, #1
 800360e:	d122      	bne.n	8003656 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003610:	f7ff fce8 	bl	8002fe4 <vPortValidateInterruptPriority>
	__asm volatile
 8003614:	f3ef 8611 	mrs	r6, BASEPRI
 8003618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361c:	b672      	cpsid	i
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800362c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800362e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003630:	429a      	cmp	r2, r3
 8003632:	d301      	bcc.n	8003638 <xQueueGenericSendFromISR+0xa0>
 8003634:	2f02      	cmp	r7, #2
 8003636:	d1e4      	bne.n	8003602 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003638:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800363c:	463a      	mov	r2, r7
 800363e:	4641      	mov	r1, r8
 8003640:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003642:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003644:	f7ff fdf2 	bl	800322c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8003648:	1c6b      	adds	r3, r5, #1
 800364a:	d1d5      	bne.n	80035f8 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800364c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800364e:	2b00      	cmp	r3, #0
 8003650:	d1c2      	bne.n	80035d8 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8003652:	2001      	movs	r0, #1
 8003654:	e7cc      	b.n	80035f0 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8003656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800365a:	b672      	cpsid	i
 800365c:	f383 8811 	msr	BASEPRI, r3
 8003660:	f3bf 8f6f 	isb	sy
 8003664:	f3bf 8f4f 	dsb	sy
 8003668:	b662      	cpsie	i
 800366a:	e7fe      	b.n	800366a <xQueueGenericSendFromISR+0xd2>

0800366c <xQueueGiveFromISR>:
{
 800366c:	b570      	push	{r4, r5, r6, lr}
 800366e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8003670:	4604      	mov	r4, r0
 8003672:	b950      	cbnz	r0, 800368a <xQueueGiveFromISR+0x1e>
 8003674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003678:	b672      	cpsid	i
 800367a:	f383 8811 	msr	BASEPRI, r3
 800367e:	f3bf 8f6f 	isb	sy
 8003682:	f3bf 8f4f 	dsb	sy
 8003686:	b662      	cpsie	i
 8003688:	e7fe      	b.n	8003688 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 800368a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800368c:	b153      	cbz	r3, 80036a4 <xQueueGiveFromISR+0x38>
 800368e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003692:	b672      	cpsid	i
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	b662      	cpsie	i
 80036a2:	e7fe      	b.n	80036a2 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80036a4:	6803      	ldr	r3, [r0, #0]
 80036a6:	b913      	cbnz	r3, 80036ae <xQueueGiveFromISR+0x42>
 80036a8:	6843      	ldr	r3, [r0, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d130      	bne.n	8003710 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80036ae:	f7ff fc99 	bl	8002fe4 <vPortValidateInterruptPriority>
	__asm volatile
 80036b2:	f3ef 8611 	mrs	r6, BASEPRI
 80036b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ba:	b672      	cpsid	i
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80036ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80036cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d301      	bcc.n	80036d6 <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 80036d2:	2000      	movs	r0, #0
 80036d4:	e014      	b.n	8003700 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 80036d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80036da:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 80036dc:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 80036de:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 80036e0:	1c5a      	adds	r2, r3, #1
 80036e2:	d110      	bne.n	8003706 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036e6:	b90b      	cbnz	r3, 80036ec <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 80036e8:	2001      	movs	r0, #1
 80036ea:	e009      	b.n	8003700 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036ec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036f0:	f000 fc8a 	bl	8004008 <xTaskRemoveFromEventList>
 80036f4:	2800      	cmp	r0, #0
 80036f6:	d0f7      	beq.n	80036e8 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 80036f8:	2d00      	cmp	r5, #0
 80036fa:	d0f5      	beq.n	80036e8 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80036fc:	2001      	movs	r0, #1
 80036fe:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003700:	f386 8811 	msr	BASEPRI, r6
}
 8003704:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003706:	3301      	adds	r3, #1
 8003708:	b25b      	sxtb	r3, r3
 800370a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800370e:	e7eb      	b.n	80036e8 <xQueueGiveFromISR+0x7c>
	__asm volatile
 8003710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003714:	b672      	cpsid	i
 8003716:	f383 8811 	msr	BASEPRI, r3
 800371a:	f3bf 8f6f 	isb	sy
 800371e:	f3bf 8f4f 	dsb	sy
 8003722:	b662      	cpsie	i
 8003724:	e7fe      	b.n	8003724 <xQueueGiveFromISR+0xb8>
	...

08003728 <xQueueGenericReceive>:
{
 8003728:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800372c:	4688      	mov	r8, r1
 800372e:	9201      	str	r2, [sp, #4]
 8003730:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 8003732:	4604      	mov	r4, r0
 8003734:	b950      	cbnz	r0, 800374c <xQueueGenericReceive+0x24>
 8003736:	f04f 0350 	mov.w	r3, #80	; 0x50
 800373a:	b672      	cpsid	i
 800373c:	f383 8811 	msr	BASEPRI, r3
 8003740:	f3bf 8f6f 	isb	sy
 8003744:	f3bf 8f4f 	dsb	sy
 8003748:	b662      	cpsie	i
 800374a:	e7fe      	b.n	800374a <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800374c:	2900      	cmp	r1, #0
 800374e:	f040 80a9 	bne.w	80038a4 <xQueueGenericReceive+0x17c>
 8003752:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80a5 	beq.w	80038a4 <xQueueGenericReceive+0x17c>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	b672      	cpsid	i
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	b662      	cpsie	i
 800376e:	e7fe      	b.n	800376e <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003770:	9e01      	ldr	r6, [sp, #4]
 8003772:	2e00      	cmp	r6, #0
 8003774:	f000 809c 	beq.w	80038b0 <xQueueGenericReceive+0x188>
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	b672      	cpsid	i
 800377e:	f383 8811 	msr	BASEPRI, r3
 8003782:	f3bf 8f6f 	isb	sy
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	b662      	cpsie	i
 800378c:	e7fe      	b.n	800378c <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800378e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003790:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003792:	2b00      	cmp	r3, #0
 8003794:	d06d      	beq.n	8003872 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003796:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800379a:	e05f      	b.n	800385c <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800379c:	9d01      	ldr	r5, [sp, #4]
 800379e:	b91d      	cbnz	r5, 80037a8 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 80037a0:	f7ff fb56 	bl	8002e50 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80037a4:	4628      	mov	r0, r5
 80037a6:	e067      	b.n	8003878 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 80037a8:	b916      	cbnz	r6, 80037b0 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 80037aa:	a802      	add	r0, sp, #8
 80037ac:	f000 fc70 	bl	8004090 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 80037b0:	f7ff fb4e 	bl	8002e50 <vPortExitCritical>
		vTaskSuspendAll();
 80037b4:	f000 fa4c 	bl	8003c50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037b8:	f7ff fb24 	bl	8002e04 <vPortEnterCritical>
 80037bc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80037c0:	2bff      	cmp	r3, #255	; 0xff
 80037c2:	d101      	bne.n	80037c8 <xQueueGenericReceive+0xa0>
 80037c4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80037c8:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80037cc:	2bff      	cmp	r3, #255	; 0xff
 80037ce:	d101      	bne.n	80037d4 <xQueueGenericReceive+0xac>
 80037d0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80037d4:	f7ff fb3c 	bl	8002e50 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037d8:	a901      	add	r1, sp, #4
 80037da:	a802      	add	r0, sp, #8
 80037dc:	f000 fc68 	bl	80040b0 <xTaskCheckForTimeOut>
 80037e0:	2800      	cmp	r0, #0
 80037e2:	d152      	bne.n	800388a <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 80037e4:	f7ff fb0e 	bl	8002e04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80037e8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 80037ea:	f7ff fb31 	bl	8002e50 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	d145      	bne.n	800387e <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	b933      	cbnz	r3, 8003804 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 80037f6:	f7ff fb05 	bl	8002e04 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80037fa:	6860      	ldr	r0, [r4, #4]
 80037fc:	f000 fcac 	bl	8004158 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003800:	f7ff fb26 	bl	8002e50 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003804:	9901      	ldr	r1, [sp, #4]
 8003806:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800380a:	f000 fbe1 	bl	8003fd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800380e:	4620      	mov	r0, r4
 8003810:	f7ff fd54 	bl	80032bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003814:	f000 fac6 	bl	8003da4 <xTaskResumeAll>
 8003818:	b938      	cbnz	r0, 800382a <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 800381a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800381e:	f8ca 3000 	str.w	r3, [sl]
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800382c:	f7ff faea 	bl	8002e04 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003830:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003832:	2d00      	cmp	r5, #0
 8003834:	d0b2      	beq.n	800379c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003836:	4641      	mov	r1, r8
 8003838:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800383a:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800383c:	f7ff fd29 	bl	8003292 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 8003840:	f1b9 0f00 	cmp.w	r9, #0
 8003844:	d1a3      	bne.n	800378e <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003846:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003848:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800384a:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800384c:	b913      	cbnz	r3, 8003854 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800384e:	f000 fd1d 	bl	800428c <pvTaskIncrementMutexHeldCount>
 8003852:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003854:	6923      	ldr	r3, [r4, #16]
 8003856:	b163      	cbz	r3, 8003872 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003858:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800385c:	f000 fbd4 	bl	8004008 <xTaskRemoveFromEventList>
 8003860:	b138      	cbz	r0, 8003872 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 8003862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003866:	4b14      	ldr	r3, [pc, #80]	; (80038b8 <xQueueGenericReceive+0x190>)
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f3bf 8f4f 	dsb	sy
 800386e:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003872:	f7ff faed 	bl	8002e50 <vPortExitCritical>
				return pdPASS;
 8003876:	2001      	movs	r0, #1
}
 8003878:	b004      	add	sp, #16
 800387a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fd1c 	bl	80032bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003884:	f000 fa8e 	bl	8003da4 <xTaskResumeAll>
 8003888:	e7cf      	b.n	800382a <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fd16 	bl	80032bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003890:	f000 fa88 	bl	8003da4 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003894:	f7ff fab6 	bl	8002e04 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003898:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800389a:	f7ff fad9 	bl	8002e50 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800389e:	2d00      	cmp	r5, #0
 80038a0:	d1c3      	bne.n	800382a <xQueueGenericReceive+0x102>
 80038a2:	e77f      	b.n	80037a4 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038a4:	f000 fc48 	bl	8004138 <xTaskGetSchedulerState>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	f43f af61 	beq.w	8003770 <xQueueGenericReceive+0x48>
 80038ae:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80038b0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80038b2:	f8df a004 	ldr.w	sl, [pc, #4]	; 80038b8 <xQueueGenericReceive+0x190>
 80038b6:	e7b9      	b.n	800382c <xQueueGenericReceive+0x104>
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <xQueueReceiveFromISR>:
{
 80038bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038c0:	4689      	mov	r9, r1
 80038c2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80038c4:	4605      	mov	r5, r0
 80038c6:	b950      	cbnz	r0, 80038de <xQueueReceiveFromISR+0x22>
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	b672      	cpsid	i
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	b662      	cpsie	i
 80038dc:	e7fe      	b.n	80038dc <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80038de:	bb81      	cbnz	r1, 8003942 <xQueueReceiveFromISR+0x86>
 80038e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80038e2:	b373      	cbz	r3, 8003942 <xQueueReceiveFromISR+0x86>
 80038e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e8:	b672      	cpsid	i
 80038ea:	f383 8811 	msr	BASEPRI, r3
 80038ee:	f3bf 8f6f 	isb	sy
 80038f2:	f3bf 8f4f 	dsb	sy
 80038f6:	b662      	cpsie	i
 80038f8:	e7fe      	b.n	80038f8 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 80038fa:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80038fe:	4649      	mov	r1, r9
 8003900:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003902:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003904:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003906:	f7ff fcc4 	bl	8003292 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800390a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800390c:	1c73      	adds	r3, r6, #1
 800390e:	d113      	bne.n	8003938 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003910:	692b      	ldr	r3, [r5, #16]
 8003912:	b90b      	cbnz	r3, 8003918 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8003914:	2001      	movs	r0, #1
 8003916:	e00b      	b.n	8003930 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003918:	f105 0010 	add.w	r0, r5, #16
 800391c:	f000 fb74 	bl	8004008 <xTaskRemoveFromEventList>
 8003920:	2800      	cmp	r0, #0
 8003922:	d0f7      	beq.n	8003914 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8003924:	f1b8 0f00 	cmp.w	r8, #0
 8003928:	d0f4      	beq.n	8003914 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800392a:	2001      	movs	r0, #1
 800392c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8003930:	f387 8811 	msr	BASEPRI, r7
}
 8003934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003938:	3601      	adds	r6, #1
 800393a:	b276      	sxtb	r6, r6
 800393c:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8003940:	e7e8      	b.n	8003914 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003942:	f7ff fb4f 	bl	8002fe4 <vPortValidateInterruptPriority>
	__asm volatile
 8003946:	f3ef 8711 	mrs	r7, BASEPRI
 800394a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800394e:	b672      	cpsid	i
 8003950:	f383 8811 	msr	BASEPRI, r3
 8003954:	f3bf 8f6f 	isb	sy
 8003958:	f3bf 8f4f 	dsb	sy
 800395c:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800395e:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003960:	2c00      	cmp	r4, #0
 8003962:	d1ca      	bne.n	80038fa <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8003964:	4620      	mov	r0, r4
 8003966:	e7e3      	b.n	8003930 <xQueueReceiveFromISR+0x74>

08003968 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003968:	4a06      	ldr	r2, [pc, #24]	; (8003984 <prvResetNextTaskUnblockTime+0x1c>)
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	6819      	ldr	r1, [r3, #0]
 800396e:	4b06      	ldr	r3, [pc, #24]	; (8003988 <prvResetNextTaskUnblockTime+0x20>)
 8003970:	b919      	cbnz	r1, 800397a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003972:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003976:	601a      	str	r2, [r3, #0]
 8003978:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800397e:	68d2      	ldr	r2, [r2, #12]
 8003980:	6852      	ldr	r2, [r2, #4]
 8003982:	e7f8      	b.n	8003976 <prvResetNextTaskUnblockTime+0xe>
 8003984:	20003cb8 	.word	0x20003cb8
 8003988:	20003d90 	.word	0x20003d90

0800398c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800398e:	4b1b      	ldr	r3, [pc, #108]	; (80039fc <prvAddCurrentTaskToDelayedList+0x70>)
{
 8003990:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003992:	4e1b      	ldr	r6, [pc, #108]	; (8003a00 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8003994:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8003996:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003998:	6830      	ldr	r0, [r6, #0]
 800399a:	3004      	adds	r0, #4
 800399c:	f7ff f9c5 	bl	8002d2a <uxListRemove>
 80039a0:	4633      	mov	r3, r6
 80039a2:	b940      	cbnz	r0, 80039b6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80039a4:	6831      	ldr	r1, [r6, #0]
 80039a6:	2001      	movs	r0, #1
 80039a8:	4e16      	ldr	r6, [pc, #88]	; (8003a04 <prvAddCurrentTaskToDelayedList+0x78>)
 80039aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80039ac:	6832      	ldr	r2, [r6, #0]
 80039ae:	4088      	lsls	r0, r1
 80039b0:	ea22 0200 	bic.w	r2, r2, r0
 80039b4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039b6:	1c62      	adds	r2, r4, #1
 80039b8:	d107      	bne.n	80039ca <prvAddCurrentTaskToDelayedList+0x3e>
 80039ba:	b137      	cbz	r7, 80039ca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039bc:	6819      	ldr	r1, [r3, #0]
 80039be:	4812      	ldr	r0, [pc, #72]	; (8003a08 <prvAddCurrentTaskToDelayedList+0x7c>)
 80039c0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80039c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039c6:	f7ff b98d 	b.w	8002ce4 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80039ca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039cc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80039ce:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039d0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80039d2:	d907      	bls.n	80039e4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039d4:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <prvAddCurrentTaskToDelayedList+0x80>)
 80039d6:	6810      	ldr	r0, [r2, #0]
 80039d8:	6819      	ldr	r1, [r3, #0]
}
 80039da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039de:	3104      	adds	r1, #4
 80039e0:	f7ff b98c 	b.w	8002cfc <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <prvAddCurrentTaskToDelayedList+0x84>)
 80039e6:	6810      	ldr	r0, [r2, #0]
 80039e8:	6819      	ldr	r1, [r3, #0]
 80039ea:	3104      	adds	r1, #4
 80039ec:	f7ff f986 	bl	8002cfc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <prvAddCurrentTaskToDelayedList+0x88>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	4294      	cmp	r4, r2
 80039f6:	d200      	bcs.n	80039fa <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 80039f8:	601c      	str	r4, [r3, #0]
 80039fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039fc:	20003dd8 	.word	0x20003dd8
 8003a00:	20003cb4 	.word	0x20003cb4
 8003a04:	20003d60 	.word	0x20003d60
 8003a08:	20003db0 	.word	0x20003db0
 8003a0c:	20003cbc 	.word	0x20003cbc
 8003a10:	20003cb8 	.word	0x20003cb8
 8003a14:	20003d90 	.word	0x20003d90

08003a18 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8003a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a1c:	b672      	cpsid	i
 8003a1e:	f383 8811 	msr	BASEPRI, r3
 8003a22:	f3bf 8f6f 	isb	sy
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	b662      	cpsie	i
 8003a2c:	e7fe      	b.n	8003a2c <prvTaskIsTaskSuspended.part.0+0x14>
	...

08003a30 <xTaskCreate>:
	{
 8003a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a34:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 8003a38:	4680      	mov	r8, r0
 8003a3a:	460f      	mov	r7, r1
 8003a3c:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a3e:	4650      	mov	r0, sl
	{
 8003a40:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a42:	f7ff fb25 	bl	8003090 <pvPortMalloc>
			if( pxStack != NULL )
 8003a46:	4605      	mov	r5, r0
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f000 8096 	beq.w	8003b7a <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a4e:	2054      	movs	r0, #84	; 0x54
 8003a50:	f7ff fb1e 	bl	8003090 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003a54:	4604      	mov	r4, r0
 8003a56:	2800      	cmp	r0, #0
 8003a58:	f000 808c 	beq.w	8003b74 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a5c:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 8003a60:	6305      	str	r5, [r0, #48]	; 0x30
 8003a62:	1e7b      	subs	r3, r7, #1
 8003a64:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a68:	4455      	add	r5, sl
 8003a6a:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a6c:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a70:	7859      	ldrb	r1, [r3, #1]
 8003a72:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8003a76:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003a7a:	b109      	cbz	r1, 8003a80 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a7c:	42bb      	cmp	r3, r7
 8003a7e:	d1f7      	bne.n	8003a70 <xTaskCreate+0x40>
 8003a80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a82:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a86:	1d27      	adds	r7, r4, #4
 8003a88:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a8a:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a8e:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8003a90:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8003a94:	bf28      	it	cs
 8003a96:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003a98:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003a9a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a9c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003aa0:	f7ff f91d 	bl	8002cde <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003aa4:	f104 0018 	add.w	r0, r4, #24
 8003aa8:	f7ff f919 	bl	8002cde <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8003aac:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ab0:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ab2:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ab4:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ab6:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003ab8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003aba:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003abc:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003ac0:	f7ff f97a 	bl	8002db8 <pxPortInitialiseStack>
 8003ac4:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003ac6:	b106      	cbz	r6, 8003aca <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ac8:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 8003aca:	f7ff f99b 	bl	8002e04 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8003ace:	4b32      	ldr	r3, [pc, #200]	; (8003b98 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003ad0:	4e32      	ldr	r6, [pc, #200]	; (8003b9c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003bc8 <xTaskCreate+0x198>
 8003ad8:	3201      	adds	r2, #1
 8003ada:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8003adc:	6835      	ldr	r5, [r6, #0]
 8003ade:	2d00      	cmp	r5, #0
 8003ae0:	d14e      	bne.n	8003b80 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8003ae2:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	2b01      	cmp	r3, #1
 8003ae8:	d11d      	bne.n	8003b26 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003aea:	eb08 0005 	add.w	r0, r8, r5
 8003aee:	3514      	adds	r5, #20
 8003af0:	f7ff f8ea 	bl	8002cc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003af4:	2d8c      	cmp	r5, #140	; 0x8c
 8003af6:	d1f8      	bne.n	8003aea <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003af8:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8003bcc <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 8003afc:	4d28      	ldr	r5, [pc, #160]	; (8003ba0 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 8003afe:	4648      	mov	r0, r9
 8003b00:	f7ff f8e2 	bl	8002cc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b04:	4628      	mov	r0, r5
 8003b06:	f7ff f8df 	bl	8002cc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b0a:	4826      	ldr	r0, [pc, #152]	; (8003ba4 <xTaskCreate+0x174>)
 8003b0c:	f7ff f8dc 	bl	8002cc8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003b10:	4825      	ldr	r0, [pc, #148]	; (8003ba8 <xTaskCreate+0x178>)
 8003b12:	f7ff f8d9 	bl	8002cc8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003b16:	4825      	ldr	r0, [pc, #148]	; (8003bac <xTaskCreate+0x17c>)
 8003b18:	f7ff f8d6 	bl	8002cc8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b1c:	4b24      	ldr	r3, [pc, #144]	; (8003bb0 <xTaskCreate+0x180>)
 8003b1e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b22:	4b24      	ldr	r3, [pc, #144]	; (8003bb4 <xTaskCreate+0x184>)
 8003b24:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003b26:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003b28:	2501      	movs	r5, #1
 8003b2a:	4924      	ldr	r1, [pc, #144]	; (8003bbc <xTaskCreate+0x18c>)
		uxTaskNumber++;
 8003b2c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003b2e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8003b30:	3301      	adds	r3, #1
 8003b32:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003b34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b36:	fa05 f302 	lsl.w	r3, r5, r2
 8003b3a:	4303      	orrs	r3, r0
 8003b3c:	2014      	movs	r0, #20
 8003b3e:	600b      	str	r3, [r1, #0]
 8003b40:	4639      	mov	r1, r7
 8003b42:	fb00 8002 	mla	r0, r0, r2, r8
 8003b46:	f7ff f8cd 	bl	8002ce4 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003b4a:	f7ff f981 	bl	8002e50 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8003b4e:	4b1c      	ldr	r3, [pc, #112]	; (8003bc0 <xTaskCreate+0x190>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	b163      	cbz	r3, 8003b6e <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b54:	6833      	ldr	r3, [r6, #0]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d207      	bcs.n	8003b6e <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 8003b5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b62:	4b18      	ldr	r3, [pc, #96]	; (8003bc4 <xTaskCreate+0x194>)
 8003b64:	601a      	str	r2, [r3, #0]
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	f3bf 8f6f 	isb	sy
	}
 8003b6e:	4628      	mov	r0, r5
 8003b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 8003b74:	4628      	mov	r0, r5
 8003b76:	f7ff fb1d 	bl	80031b4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003b7a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003b7e:	e7f6      	b.n	8003b6e <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 8003b80:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <xTaskCreate+0x190>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d1ce      	bne.n	8003b26 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b88:	6833      	ldr	r3, [r6, #0]
 8003b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b8c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d8c9      	bhi.n	8003b26 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8003b92:	6034      	str	r4, [r6, #0]
 8003b94:	e7c7      	b.n	8003b26 <xTaskCreate+0xf6>
 8003b96:	bf00      	nop
 8003b98:	20003d4c 	.word	0x20003d4c
 8003b9c:	20003cb4 	.word	0x20003cb4
 8003ba0:	20003d78 	.word	0x20003d78
 8003ba4:	20003d98 	.word	0x20003d98
 8003ba8:	20003dc4 	.word	0x20003dc4
 8003bac:	20003db0 	.word	0x20003db0
 8003bb0:	20003cb8 	.word	0x20003cb8
 8003bb4:	20003cbc 	.word	0x20003cbc
 8003bb8:	20003d5c 	.word	0x20003d5c
 8003bbc:	20003d60 	.word	0x20003d60
 8003bc0:	20003dac 	.word	0x20003dac
 8003bc4:	e000ed04 	.word	0xe000ed04
 8003bc8:	20003cc0 	.word	0x20003cc0
 8003bcc:	20003d64 	.word	0x20003d64

08003bd0 <vTaskStartScheduler>:
{
 8003bd0:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003bd2:	4b19      	ldr	r3, [pc, #100]	; (8003c38 <vTaskStartScheduler+0x68>)
 8003bd4:	2400      	movs	r4, #0
 8003bd6:	2280      	movs	r2, #128	; 0x80
 8003bd8:	4918      	ldr	r1, [pc, #96]	; (8003c3c <vTaskStartScheduler+0x6c>)
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	4623      	mov	r3, r4
 8003bde:	9400      	str	r4, [sp, #0]
 8003be0:	4817      	ldr	r0, [pc, #92]	; (8003c40 <vTaskStartScheduler+0x70>)
 8003be2:	f7ff ff25 	bl	8003a30 <xTaskCreate>
	if( xReturn == pdPASS )
 8003be6:	2801      	cmp	r0, #1
 8003be8:	d116      	bne.n	8003c18 <vTaskStartScheduler+0x48>
 8003bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bee:	b672      	cpsid	i
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c02:	4b10      	ldr	r3, [pc, #64]	; (8003c44 <vTaskStartScheduler+0x74>)
 8003c04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003c06:	4b10      	ldr	r3, [pc, #64]	; (8003c48 <vTaskStartScheduler+0x78>)
 8003c08:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003c0a:	4b10      	ldr	r3, [pc, #64]	; (8003c4c <vTaskStartScheduler+0x7c>)
 8003c0c:	601c      	str	r4, [r3, #0]
}
 8003c0e:	b002      	add	sp, #8
 8003c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003c14:	f7ff b992 	b.w	8002f3c <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003c18:	3001      	adds	r0, #1
 8003c1a:	d10a      	bne.n	8003c32 <vTaskStartScheduler+0x62>
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	b672      	cpsid	i
 8003c22:	f383 8811 	msr	BASEPRI, r3
 8003c26:	f3bf 8f6f 	isb	sy
 8003c2a:	f3bf 8f4f 	dsb	sy
 8003c2e:	b662      	cpsie	i
 8003c30:	e7fe      	b.n	8003c30 <vTaskStartScheduler+0x60>
}
 8003c32:	b002      	add	sp, #8
 8003c34:	bd10      	pop	{r4, pc}
 8003c36:	bf00      	nop
 8003c38:	20003d8c 	.word	0x20003d8c
 8003c3c:	0800cac5 	.word	0x0800cac5
 8003c40:	08003ee5 	.word	0x08003ee5
 8003c44:	20003d90 	.word	0x20003d90
 8003c48:	20003dac 	.word	0x20003dac
 8003c4c:	20003dd8 	.word	0x20003dd8

08003c50 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003c50:	4a02      	ldr	r2, [pc, #8]	; (8003c5c <vTaskSuspendAll+0xc>)
 8003c52:	6813      	ldr	r3, [r2, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	20003d58 	.word	0x20003d58

08003c60 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003c60:	4b01      	ldr	r3, [pc, #4]	; (8003c68 <xTaskGetTickCount+0x8>)
 8003c62:	6818      	ldr	r0, [r3, #0]
}
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20003dd8 	.word	0x20003dd8

08003c6c <xTaskGetTickCountFromISR>:
{
 8003c6c:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c6e:	f7ff f9b9 	bl	8002fe4 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8003c72:	4b01      	ldr	r3, [pc, #4]	; (8003c78 <xTaskGetTickCountFromISR+0xc>)
 8003c74:	6818      	ldr	r0, [r3, #0]
}
 8003c76:	bd08      	pop	{r3, pc}
 8003c78:	20003dd8 	.word	0x20003dd8

08003c7c <xTaskIncrementTick>:
{
 8003c7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <xTaskIncrementTick+0xfc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d155      	bne.n	8003d34 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 8003c88:	4b3c      	ldr	r3, [pc, #240]	; (8003d7c <xTaskIncrementTick+0x100>)
 8003c8a:	681c      	ldr	r4, [r3, #0]
 8003c8c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003c8e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003c90:	b9cc      	cbnz	r4, 8003cc6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8003c92:	4b3b      	ldr	r3, [pc, #236]	; (8003d80 <xTaskIncrementTick+0x104>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	b152      	cbz	r2, 8003cb0 <xTaskIncrementTick+0x34>
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	b672      	cpsid	i
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	b662      	cpsie	i
 8003cae:	e7fe      	b.n	8003cae <xTaskIncrementTick+0x32>
 8003cb0:	4a34      	ldr	r2, [pc, #208]	; (8003d84 <xTaskIncrementTick+0x108>)
 8003cb2:	6819      	ldr	r1, [r3, #0]
 8003cb4:	6810      	ldr	r0, [r2, #0]
 8003cb6:	6018      	str	r0, [r3, #0]
 8003cb8:	6011      	str	r1, [r2, #0]
 8003cba:	4a33      	ldr	r2, [pc, #204]	; (8003d88 <xTaskIncrementTick+0x10c>)
 8003cbc:	6813      	ldr	r3, [r2, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	f7ff fe51 	bl	8003968 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003cc6:	4d31      	ldr	r5, [pc, #196]	; (8003d8c <xTaskIncrementTick+0x110>)
 8003cc8:	f04f 0b00 	mov.w	fp, #0
 8003ccc:	4f30      	ldr	r7, [pc, #192]	; (8003d90 <xTaskIncrementTick+0x114>)
 8003cce:	682b      	ldr	r3, [r5, #0]
 8003cd0:	429c      	cmp	r4, r3
 8003cd2:	d33e      	bcc.n	8003d52 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cd4:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003d80 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8003cd8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003da0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cdc:	f8d8 2000 	ldr.w	r2, [r8]
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	bb72      	cbnz	r2, 8003d42 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ce8:	602a      	str	r2, [r5, #0]
					break;
 8003cea:	e032      	b.n	8003d52 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cec:	f106 0a04 	add.w	sl, r6, #4
 8003cf0:	4650      	mov	r0, sl
 8003cf2:	f7ff f81a 	bl	8002d2a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003cf8:	b119      	cbz	r1, 8003d02 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cfa:	f106 0018 	add.w	r0, r6, #24
 8003cfe:	f7ff f814 	bl	8002d2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d02:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003d04:	2201      	movs	r2, #1
 8003d06:	f8d9 3000 	ldr.w	r3, [r9]
 8003d0a:	f04f 0e14 	mov.w	lr, #20
 8003d0e:	fa02 f100 	lsl.w	r1, r2, r0
 8003d12:	4319      	orrs	r1, r3
 8003d14:	4b1f      	ldr	r3, [pc, #124]	; (8003d94 <xTaskIncrementTick+0x118>)
 8003d16:	f8c9 1000 	str.w	r1, [r9]
 8003d1a:	4651      	mov	r1, sl
 8003d1c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003d20:	f7fe ffe0 	bl	8002ce4 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d24:	6838      	ldr	r0, [r7, #0]
 8003d26:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003d28:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003d2a:	4291      	cmp	r1, r2
 8003d2c:	bf28      	it	cs
 8003d2e:	f04f 0b01 	movcs.w	fp, #1
 8003d32:	e7d3      	b.n	8003cdc <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8003d34:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8003d36:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003d3a:	6813      	ldr	r3, [r2, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e011      	b.n	8003d66 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d42:	f8d8 2000 	ldr.w	r2, [r8]
 8003d46:	68d2      	ldr	r2, [r2, #12]
 8003d48:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d4a:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8003d4c:	428c      	cmp	r4, r1
 8003d4e:	d2cd      	bcs.n	8003cec <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 8003d50:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	4b0f      	ldr	r3, [pc, #60]	; (8003d94 <xTaskIncrementTick+0x118>)
 8003d56:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003d58:	2214      	movs	r2, #20
 8003d5a:	434a      	muls	r2, r1
 8003d5c:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8003d5e:	2a02      	cmp	r2, #2
 8003d60:	bf28      	it	cs
 8003d62:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003d66:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <xTaskIncrementTick+0x120>)
 8003d68:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	bf18      	it	ne
 8003d6e:	f04f 0b01 	movne.w	fp, #1
}
 8003d72:	4658      	mov	r0, fp
 8003d74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d78:	20003d58 	.word	0x20003d58
 8003d7c:	20003dd8 	.word	0x20003dd8
 8003d80:	20003cb8 	.word	0x20003cb8
 8003d84:	20003cbc 	.word	0x20003cbc
 8003d88:	20003d94 	.word	0x20003d94
 8003d8c:	20003d90 	.word	0x20003d90
 8003d90:	20003cb4 	.word	0x20003cb4
 8003d94:	20003cc0 	.word	0x20003cc0
 8003d98:	20003d54 	.word	0x20003d54
 8003d9c:	20003ddc 	.word	0x20003ddc
 8003da0:	20003d60 	.word	0x20003d60

08003da4 <xTaskResumeAll>:
{
 8003da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003da8:	4c32      	ldr	r4, [pc, #200]	; (8003e74 <xTaskResumeAll+0xd0>)
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	b953      	cbnz	r3, 8003dc4 <xTaskResumeAll+0x20>
 8003dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db2:	b672      	cpsid	i
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	b662      	cpsie	i
 8003dc2:	e7fe      	b.n	8003dc2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8003dc4:	f7ff f81e 	bl	8002e04 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003dc8:	6823      	ldr	r3, [r4, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003dce:	6824      	ldr	r4, [r4, #0]
 8003dd0:	b12c      	cbz	r4, 8003dde <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8003dd2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003dd4:	f7ff f83c 	bl	8002e50 <vPortExitCritical>
}
 8003dd8:	4620      	mov	r0, r4
 8003dda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dde:	4b26      	ldr	r3, [pc, #152]	; (8003e78 <xTaskResumeAll+0xd4>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f5      	beq.n	8003dd2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003de6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003e90 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 8003dea:	4f24      	ldr	r7, [pc, #144]	; (8003e7c <xTaskResumeAll+0xd8>)
 8003dec:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003e94 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003df0:	f8d9 3000 	ldr.w	r3, [r9]
 8003df4:	b9e3      	cbnz	r3, 8003e30 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8003df6:	b10c      	cbz	r4, 8003dfc <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8003df8:	f7ff fdb6 	bl	8003968 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dfc:	4d20      	ldr	r5, [pc, #128]	; (8003e80 <xTaskResumeAll+0xdc>)
 8003dfe:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e00:	b144      	cbz	r4, 8003e14 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8003e02:	4e20      	ldr	r6, [pc, #128]	; (8003e84 <xTaskResumeAll+0xe0>)
 8003e04:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003e06:	f7ff ff39 	bl	8003c7c <xTaskIncrementTick>
 8003e0a:	b100      	cbz	r0, 8003e0e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 8003e0c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e0e:	3c01      	subs	r4, #1
 8003e10:	d1f9      	bne.n	8003e06 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8003e12:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003e14:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <xTaskResumeAll+0xe0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d0da      	beq.n	8003dd2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 8003e1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e20:	4b19      	ldr	r3, [pc, #100]	; (8003e88 <xTaskResumeAll+0xe4>)
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	f3bf 8f4f 	dsb	sy
 8003e28:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003e2c:	2401      	movs	r4, #1
 8003e2e:	e7d1      	b.n	8003dd4 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e30:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8003e34:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e36:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e38:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e3a:	f104 0018 	add.w	r0, r4, #24
 8003e3e:	f7fe ff74 	bl	8002d2a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e42:	4630      	mov	r0, r6
 8003e44:	f7fe ff71 	bl	8002d2a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e4a:	6839      	ldr	r1, [r7, #0]
 8003e4c:	2014      	movs	r0, #20
 8003e4e:	fa05 f302 	lsl.w	r3, r5, r2
 8003e52:	fb00 8002 	mla	r0, r0, r2, r8
 8003e56:	430b      	orrs	r3, r1
 8003e58:	4631      	mov	r1, r6
 8003e5a:	603b      	str	r3, [r7, #0]
 8003e5c:	f7fe ff42 	bl	8002ce4 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e60:	4b0a      	ldr	r3, [pc, #40]	; (8003e8c <xTaskResumeAll+0xe8>)
 8003e62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3c1      	bcc.n	8003df0 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <xTaskResumeAll+0xe0>)
 8003e6e:	601d      	str	r5, [r3, #0]
 8003e70:	e7be      	b.n	8003df0 <xTaskResumeAll+0x4c>
 8003e72:	bf00      	nop
 8003e74:	20003d58 	.word	0x20003d58
 8003e78:	20003d4c 	.word	0x20003d4c
 8003e7c:	20003d60 	.word	0x20003d60
 8003e80:	20003d54 	.word	0x20003d54
 8003e84:	20003ddc 	.word	0x20003ddc
 8003e88:	e000ed04 	.word	0xe000ed04
 8003e8c:	20003cb4 	.word	0x20003cb4
 8003e90:	20003d98 	.word	0x20003d98
 8003e94:	20003cc0 	.word	0x20003cc0

08003e98 <vTaskDelay>:
	{
 8003e98:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e9a:	b940      	cbnz	r0, 8003eae <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003e9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <vTaskDelay+0x44>)
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f3bf 8f4f 	dsb	sy
 8003ea8:	f3bf 8f6f 	isb	sy
 8003eac:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003eae:	4b0c      	ldr	r3, [pc, #48]	; (8003ee0 <vTaskDelay+0x48>)
 8003eb0:	6819      	ldr	r1, [r3, #0]
 8003eb2:	b151      	cbz	r1, 8003eca <vTaskDelay+0x32>
 8003eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb8:	b672      	cpsid	i
 8003eba:	f383 8811 	msr	BASEPRI, r3
 8003ebe:	f3bf 8f6f 	isb	sy
 8003ec2:	f3bf 8f4f 	dsb	sy
 8003ec6:	b662      	cpsie	i
 8003ec8:	e7fe      	b.n	8003ec8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003eca:	f7ff fec1 	bl	8003c50 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ece:	f7ff fd5d 	bl	800398c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003ed2:	f7ff ff67 	bl	8003da4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	d0e0      	beq.n	8003e9c <vTaskDelay+0x4>
 8003eda:	bd08      	pop	{r3, pc}
 8003edc:	e000ed04 	.word	0xe000ed04
 8003ee0:	20003d58 	.word	0x20003d58

08003ee4 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003ee4:	4e17      	ldr	r6, [pc, #92]	; (8003f44 <prvIdleTask+0x60>)
{
 8003ee6:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ee8:	4c17      	ldr	r4, [pc, #92]	; (8003f48 <prvIdleTask+0x64>)
 8003eea:	6823      	ldr	r3, [r4, #0]
 8003eec:	b963      	cbnz	r3, 8003f08 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003eee:	4b17      	ldr	r3, [pc, #92]	; (8003f4c <prvIdleTask+0x68>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d9f8      	bls.n	8003ee8 <prvIdleTask+0x4>
				taskYIELD();
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	4b15      	ldr	r3, [pc, #84]	; (8003f50 <prvIdleTask+0x6c>)
 8003efc:	601a      	str	r2, [r3, #0]
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	f3bf 8f6f 	isb	sy
 8003f06:	e7ef      	b.n	8003ee8 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003f08:	f7ff fea2 	bl	8003c50 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003f0c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003f0e:	f7ff ff49 	bl	8003da4 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	d0e9      	beq.n	8003eea <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003f16:	f7fe ff75 	bl	8002e04 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003f1a:	68f3      	ldr	r3, [r6, #12]
 8003f1c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003f1e:	1d28      	adds	r0, r5, #4
 8003f20:	f7fe ff03 	bl	8002d2a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003f24:	4a0b      	ldr	r2, [pc, #44]	; (8003f54 <prvIdleTask+0x70>)
 8003f26:	6813      	ldr	r3, [r2, #0]
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003f2c:	6823      	ldr	r3, [r4, #0]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003f32:	f7fe ff8d 	bl	8002e50 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003f36:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003f38:	f7ff f93c 	bl	80031b4 <vPortFree>
			vPortFree( pxTCB );
 8003f3c:	4628      	mov	r0, r5
 8003f3e:	f7ff f939 	bl	80031b4 <vPortFree>
 8003f42:	e7d2      	b.n	8003eea <prvIdleTask+0x6>
 8003f44:	20003dc4 	.word	0x20003dc4
 8003f48:	20003d50 	.word	0x20003d50
 8003f4c:	20003cc0 	.word	0x20003cc0
 8003f50:	e000ed04 	.word	0xe000ed04
 8003f54:	20003d4c 	.word	0x20003d4c

08003f58 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f58:	4b18      	ldr	r3, [pc, #96]	; (8003fbc <vTaskSwitchContext+0x64>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	4b18      	ldr	r3, [pc, #96]	; (8003fc0 <vTaskSwitchContext+0x68>)
{
 8003f5e:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f60:	b112      	cbz	r2, 8003f68 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003f62:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003f68:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f6a:	4b16      	ldr	r3, [pc, #88]	; (8003fc4 <vTaskSwitchContext+0x6c>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003f6e:	fab3 f383 	clz	r3, r3
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	2214      	movs	r2, #20
 8003f76:	4914      	ldr	r1, [pc, #80]	; (8003fc8 <vTaskSwitchContext+0x70>)
 8003f78:	f1c3 031f 	rsb	r3, r3, #31
 8003f7c:	435a      	muls	r2, r3
 8003f7e:	588c      	ldr	r4, [r1, r2]
 8003f80:	1888      	adds	r0, r1, r2
 8003f82:	b954      	cbnz	r4, 8003f9a <vTaskSwitchContext+0x42>
	__asm volatile
 8003f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f88:	b672      	cpsid	i
 8003f8a:	f383 8811 	msr	BASEPRI, r3
 8003f8e:	f3bf 8f6f 	isb	sy
 8003f92:	f3bf 8f4f 	dsb	sy
 8003f96:	b662      	cpsie	i
 8003f98:	e7fe      	b.n	8003f98 <vTaskSwitchContext+0x40>
 8003f9a:	6844      	ldr	r4, [r0, #4]
 8003f9c:	3208      	adds	r2, #8
 8003f9e:	6864      	ldr	r4, [r4, #4]
 8003fa0:	440a      	add	r2, r1
 8003fa2:	4294      	cmp	r4, r2
 8003fa4:	6044      	str	r4, [r0, #4]
 8003fa6:	bf04      	itt	eq
 8003fa8:	6862      	ldreq	r2, [r4, #4]
 8003faa:	6042      	streq	r2, [r0, #4]
 8003fac:	2214      	movs	r2, #20
 8003fae:	fb02 1303 	mla	r3, r2, r3, r1
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	4b05      	ldr	r3, [pc, #20]	; (8003fcc <vTaskSwitchContext+0x74>)
 8003fb8:	e7d4      	b.n	8003f64 <vTaskSwitchContext+0xc>
 8003fba:	bf00      	nop
 8003fbc:	20003d58 	.word	0x20003d58
 8003fc0:	20003ddc 	.word	0x20003ddc
 8003fc4:	20003d60 	.word	0x20003d60
 8003fc8:	20003cc0 	.word	0x20003cc0
 8003fcc:	20003cb4 	.word	0x20003cb4

08003fd0 <vTaskPlaceOnEventList>:
{
 8003fd0:	b510      	push	{r4, lr}
 8003fd2:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003fd4:	b950      	cbnz	r0, 8003fec <vTaskPlaceOnEventList+0x1c>
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	b672      	cpsid	i
 8003fdc:	f383 8811 	msr	BASEPRI, r3
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	b662      	cpsie	i
 8003fea:	e7fe      	b.n	8003fea <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fec:	4b05      	ldr	r3, [pc, #20]	; (8004004 <vTaskPlaceOnEventList+0x34>)
 8003fee:	6819      	ldr	r1, [r3, #0]
 8003ff0:	3118      	adds	r1, #24
 8003ff2:	f7fe fe83 	bl	8002cfc <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	2101      	movs	r1, #1
}
 8003ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ffe:	f7ff bcc5 	b.w	800398c <prvAddCurrentTaskToDelayedList>
 8004002:	bf00      	nop
 8004004:	20003cb4 	.word	0x20003cb4

08004008 <xTaskRemoveFromEventList>:
{
 8004008:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800400a:	68c3      	ldr	r3, [r0, #12]
 800400c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800400e:	b954      	cbnz	r4, 8004026 <xTaskRemoveFromEventList+0x1e>
 8004010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004014:	b672      	cpsid	i
 8004016:	f383 8811 	msr	BASEPRI, r3
 800401a:	f3bf 8f6f 	isb	sy
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	b662      	cpsie	i
 8004024:	e7fe      	b.n	8004024 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004026:	f104 0518 	add.w	r5, r4, #24
 800402a:	4628      	mov	r0, r5
 800402c:	f7fe fe7d 	bl	8002d2a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004030:	4b11      	ldr	r3, [pc, #68]	; (8004078 <xTaskRemoveFromEventList+0x70>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b9db      	cbnz	r3, 800406e <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004036:	1d25      	adds	r5, r4, #4
 8004038:	4628      	mov	r0, r5
 800403a:	f7fe fe76 	bl	8002d2a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800403e:	490f      	ldr	r1, [pc, #60]	; (800407c <xTaskRemoveFromEventList+0x74>)
 8004040:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004042:	2301      	movs	r3, #1
 8004044:	6808      	ldr	r0, [r1, #0]
 8004046:	4093      	lsls	r3, r2
 8004048:	4303      	orrs	r3, r0
 800404a:	2014      	movs	r0, #20
 800404c:	600b      	str	r3, [r1, #0]
 800404e:	4629      	mov	r1, r5
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <xTaskRemoveFromEventList+0x78>)
 8004052:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004056:	f7fe fe45 	bl	8002ce4 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800405a:	4b0a      	ldr	r3, [pc, #40]	; (8004084 <xTaskRemoveFromEventList+0x7c>)
 800405c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004062:	429a      	cmp	r2, r3
 8004064:	d906      	bls.n	8004074 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8004066:	2001      	movs	r0, #1
 8004068:	4b07      	ldr	r3, [pc, #28]	; (8004088 <xTaskRemoveFromEventList+0x80>)
 800406a:	6018      	str	r0, [r3, #0]
 800406c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800406e:	4629      	mov	r1, r5
 8004070:	4806      	ldr	r0, [pc, #24]	; (800408c <xTaskRemoveFromEventList+0x84>)
 8004072:	e7f0      	b.n	8004056 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8004074:	2000      	movs	r0, #0
}
 8004076:	bd38      	pop	{r3, r4, r5, pc}
 8004078:	20003d58 	.word	0x20003d58
 800407c:	20003d60 	.word	0x20003d60
 8004080:	20003cc0 	.word	0x20003cc0
 8004084:	20003cb4 	.word	0x20003cb4
 8004088:	20003ddc 	.word	0x20003ddc
 800408c:	20003d98 	.word	0x20003d98

08004090 <vTaskSetTimeOutState>:
{
 8004090:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8004092:	b908      	cbnz	r0, 8004098 <vTaskSetTimeOutState+0x8>
 8004094:	f7ff fcc0 	bl	8003a18 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <vTaskSetTimeOutState+0x18>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800409e:	4b03      	ldr	r3, [pc, #12]	; (80040ac <vTaskSetTimeOutState+0x1c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	6043      	str	r3, [r0, #4]
 80040a4:	bd08      	pop	{r3, pc}
 80040a6:	bf00      	nop
 80040a8:	20003d94 	.word	0x20003d94
 80040ac:	20003dd8 	.word	0x20003dd8

080040b0 <xTaskCheckForTimeOut>:
{
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 80040b4:	4604      	mov	r4, r0
 80040b6:	b950      	cbnz	r0, 80040ce <xTaskCheckForTimeOut+0x1e>
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	b672      	cpsid	i
 80040be:	f383 8811 	msr	BASEPRI, r3
 80040c2:	f3bf 8f6f 	isb	sy
 80040c6:	f3bf 8f4f 	dsb	sy
 80040ca:	b662      	cpsie	i
 80040cc:	e7fe      	b.n	80040cc <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 80040ce:	b951      	cbnz	r1, 80040e6 <xTaskCheckForTimeOut+0x36>
 80040d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040d4:	b672      	cpsid	i
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	b662      	cpsie	i
 80040e4:	e7fe      	b.n	80040e4 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 80040e6:	f7fe fe8d 	bl	8002e04 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80040ea:	4b0e      	ldr	r3, [pc, #56]	; (8004124 <xTaskCheckForTimeOut+0x74>)
 80040ec:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 80040ee:	682b      	ldr	r3, [r5, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	d010      	beq.n	8004116 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040f4:	4a0c      	ldr	r2, [pc, #48]	; (8004128 <xTaskCheckForTimeOut+0x78>)
 80040f6:	6820      	ldr	r0, [r4, #0]
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	4290      	cmp	r0, r2
 80040fc:	6862      	ldr	r2, [r4, #4]
 80040fe:	d001      	beq.n	8004104 <xTaskCheckForTimeOut+0x54>
 8004100:	4291      	cmp	r1, r2
 8004102:	d20d      	bcs.n	8004120 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004104:	1a88      	subs	r0, r1, r2
 8004106:	4283      	cmp	r3, r0
 8004108:	d90a      	bls.n	8004120 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800410a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 800410c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 800410e:	4413      	add	r3, r2
 8004110:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8004112:	f7ff ffbd 	bl	8004090 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8004116:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8004118:	f7fe fe9a 	bl	8002e50 <vPortExitCritical>
}
 800411c:	4620      	mov	r0, r4
 800411e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8004120:	2401      	movs	r4, #1
 8004122:	e7f9      	b.n	8004118 <xTaskCheckForTimeOut+0x68>
 8004124:	20003dd8 	.word	0x20003dd8
 8004128:	20003d94 	.word	0x20003d94

0800412c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800412c:	2201      	movs	r2, #1
 800412e:	4b01      	ldr	r3, [pc, #4]	; (8004134 <vTaskMissedYield+0x8>)
 8004130:	601a      	str	r2, [r3, #0]
 8004132:	4770      	bx	lr
 8004134:	20003ddc 	.word	0x20003ddc

08004138 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004138:	4b05      	ldr	r3, [pc, #20]	; (8004150 <xTaskGetSchedulerState+0x18>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	b133      	cbz	r3, 800414c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800413e:	4b05      	ldr	r3, [pc, #20]	; (8004154 <xTaskGetSchedulerState+0x1c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004144:	bf0c      	ite	eq
 8004146:	2002      	moveq	r0, #2
 8004148:	2000      	movne	r0, #0
 800414a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800414c:	2001      	movs	r0, #1
	}
 800414e:	4770      	bx	lr
 8004150:	20003dac 	.word	0x20003dac
 8004154:	20003d58 	.word	0x20003d58

08004158 <vTaskPriorityInherit>:
	{
 8004158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 800415c:	4604      	mov	r4, r0
 800415e:	2800      	cmp	r0, #0
 8004160:	d038      	beq.n	80041d4 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004162:	4d1d      	ldr	r5, [pc, #116]	; (80041d8 <vTaskPriorityInherit+0x80>)
 8004164:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004166:	682a      	ldr	r2, [r5, #0]
 8004168:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800416a:	4293      	cmp	r3, r2
 800416c:	d232      	bcs.n	80041d4 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800416e:	6982      	ldr	r2, [r0, #24]
 8004170:	2a00      	cmp	r2, #0
 8004172:	db04      	blt.n	800417e <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004174:	682a      	ldr	r2, [r5, #0]
 8004176:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004178:	f1c2 0207 	rsb	r2, r2, #7
 800417c:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800417e:	4e17      	ldr	r6, [pc, #92]	; (80041dc <vTaskPriorityInherit+0x84>)
 8004180:	2714      	movs	r7, #20
 8004182:	6962      	ldr	r2, [r4, #20]
 8004184:	fb07 6303 	mla	r3, r7, r3, r6
 8004188:	429a      	cmp	r2, r3
 800418a:	d120      	bne.n	80041ce <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800418c:	f104 0804 	add.w	r8, r4, #4
 8004190:	4640      	mov	r0, r8
 8004192:	f7fe fdca 	bl	8002d2a <uxListRemove>
 8004196:	4a12      	ldr	r2, [pc, #72]	; (80041e0 <vTaskPriorityInherit+0x88>)
 8004198:	b948      	cbnz	r0, 80041ae <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800419a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800419c:	4347      	muls	r7, r0
 800419e:	59f3      	ldr	r3, [r6, r7]
 80041a0:	b92b      	cbnz	r3, 80041ae <vTaskPriorityInherit+0x56>
 80041a2:	2101      	movs	r1, #1
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	4081      	lsls	r1, r0
 80041a8:	ea23 0301 	bic.w	r3, r3, r1
 80041ac:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ae:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 80041b0:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041b2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80041b4:	2301      	movs	r3, #1
 80041b6:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041b8:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80041ba:	430b      	orrs	r3, r1
 80041bc:	4641      	mov	r1, r8
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	2314      	movs	r3, #20
 80041c2:	fb03 6000 	mla	r0, r3, r0, r6
	}
 80041c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 80041ca:	f7fe bd8b 	b.w	8002ce4 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80041ce:	682b      	ldr	r3, [r5, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041d8:	20003cb4 	.word	0x20003cb4
 80041dc:	20003cc0 	.word	0x20003cc0
 80041e0:	20003d60 	.word	0x20003d60

080041e4 <xTaskPriorityDisinherit>:
	{
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80041e6:	4604      	mov	r4, r0
 80041e8:	b908      	cbnz	r0, 80041ee <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80041ea:	2000      	movs	r0, #0
 80041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80041ee:	4b24      	ldr	r3, [pc, #144]	; (8004280 <xTaskPriorityDisinherit+0x9c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4298      	cmp	r0, r3
 80041f4:	d00a      	beq.n	800420c <xTaskPriorityDisinherit+0x28>
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	b672      	cpsid	i
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	b662      	cpsie	i
 800420a:	e7fe      	b.n	800420a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 800420c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800420e:	b953      	cbnz	r3, 8004226 <xTaskPriorityDisinherit+0x42>
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	b672      	cpsid	i
 8004216:	f383 8811 	msr	BASEPRI, r3
 800421a:	f3bf 8f6f 	isb	sy
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	b662      	cpsie	i
 8004224:	e7fe      	b.n	8004224 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004226:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8004228:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800422a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 800422c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800422e:	4291      	cmp	r1, r2
 8004230:	d0db      	beq.n	80041ea <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1d9      	bne.n	80041ea <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004236:	1d05      	adds	r5, r0, #4
 8004238:	4e12      	ldr	r6, [pc, #72]	; (8004284 <xTaskPriorityDisinherit+0xa0>)
 800423a:	4628      	mov	r0, r5
 800423c:	f7fe fd75 	bl	8002d2a <uxListRemove>
 8004240:	4a11      	ldr	r2, [pc, #68]	; (8004288 <xTaskPriorityDisinherit+0xa4>)
 8004242:	b950      	cbnz	r0, 800425a <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004244:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004246:	2114      	movs	r1, #20
 8004248:	4379      	muls	r1, r7
 800424a:	5873      	ldr	r3, [r6, r1]
 800424c:	b92b      	cbnz	r3, 800425a <xTaskPriorityDisinherit+0x76>
 800424e:	2001      	movs	r0, #1
 8004250:	6813      	ldr	r3, [r2, #0]
 8004252:	40b8      	lsls	r0, r7
 8004254:	ea23 0300 	bic.w	r3, r3, r0
 8004258:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800425a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800425c:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004260:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004262:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004264:	2401      	movs	r4, #1
 8004266:	6811      	ldr	r1, [r2, #0]
 8004268:	fa04 f003 	lsl.w	r0, r4, r3
 800426c:	4308      	orrs	r0, r1
 800426e:	4629      	mov	r1, r5
 8004270:	6010      	str	r0, [r2, #0]
 8004272:	2014      	movs	r0, #20
 8004274:	fb00 6003 	mla	r0, r0, r3, r6
 8004278:	f7fe fd34 	bl	8002ce4 <vListInsertEnd>
					xReturn = pdTRUE;
 800427c:	4620      	mov	r0, r4
	}
 800427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004280:	20003cb4 	.word	0x20003cb4
 8004284:	20003cc0 	.word	0x20003cc0
 8004288:	20003d60 	.word	0x20003d60

0800428c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800428c:	4b04      	ldr	r3, [pc, #16]	; (80042a0 <pvTaskIncrementMutexHeldCount+0x14>)
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	b11a      	cbz	r2, 800429a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8004292:	6819      	ldr	r1, [r3, #0]
 8004294:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8004296:	3201      	adds	r2, #1
 8004298:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800429a:	6818      	ldr	r0, [r3, #0]
	}
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	20003cb4 	.word	0x20003cb4

080042a4 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 80042a4:	4b1d      	ldr	r3, [pc, #116]	; (800431c <tcpip_thread+0x78>)
 80042a6:	681b      	ldr	r3, [r3, #0]
{
 80042a8:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 80042aa:	b113      	cbz	r3, 80042b2 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 80042ac:	4a1c      	ldr	r2, [pc, #112]	; (8004320 <tcpip_thread+0x7c>)
 80042ae:	6810      	ldr	r0, [r2, #0]
 80042b0:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 80042b2:	4d1c      	ldr	r5, [pc, #112]	; (8004324 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80042b4:	4e1c      	ldr	r6, [pc, #112]	; (8004328 <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80042b6:	4c1d      	ldr	r4, [pc, #116]	; (800432c <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 80042b8:	481a      	ldr	r0, [pc, #104]	; (8004324 <tcpip_thread+0x80>)
 80042ba:	f006 fb38 	bl	800a92e <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 80042be:	4628      	mov	r0, r5
 80042c0:	f006 fb3a 	bl	800a938 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 80042c4:	a901      	add	r1, sp, #4
 80042c6:	4630      	mov	r0, r6
 80042c8:	f006 f81a 	bl	800a300 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 80042cc:	4628      	mov	r0, r5
 80042ce:	f006 fb2e 	bl	800a92e <sys_mutex_lock>
    if (msg == NULL) {
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	b933      	cbnz	r3, 80042e4 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80042d6:	4623      	mov	r3, r4
 80042d8:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80042da:	4915      	ldr	r1, [pc, #84]	; (8004330 <tcpip_thread+0x8c>)
 80042dc:	4815      	ldr	r0, [pc, #84]	; (8004334 <tcpip_thread+0x90>)
 80042de:	f007 fd43 	bl	800bd68 <iprintf>
      break;
 80042e2:	e7ec      	b.n	80042be <tcpip_thread+0x1a>
    switch (msg->type) {
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	2a03      	cmp	r2, #3
 80042e8:	d00b      	beq.n	8004302 <tcpip_thread+0x5e>
 80042ea:	2a04      	cmp	r2, #4
 80042ec:	d00f      	beq.n	800430e <tcpip_thread+0x6a>
 80042ee:	2a02      	cmp	r2, #2
 80042f0:	d111      	bne.n	8004316 <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 80042f2:	1d18      	adds	r0, r3, #4
 80042f4:	c807      	ldmia	r0, {r0, r1, r2}
 80042f6:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80042f8:	9901      	ldr	r1, [sp, #4]
 80042fa:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80042fc:	f002 fdfa 	bl	8006ef4 <memp_free>
      break;
 8004300:	e7dd      	b.n	80042be <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8004302:	6898      	ldr	r0, [r3, #8]
 8004304:	685a      	ldr	r2, [r3, #4]
 8004306:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8004308:	9901      	ldr	r1, [sp, #4]
 800430a:	2008      	movs	r0, #8
 800430c:	e7f6      	b.n	80042fc <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	6898      	ldr	r0, [r3, #8]
 8004312:	4790      	blx	r2
      break;
 8004314:	e7d3      	b.n	80042be <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8004316:	4623      	mov	r3, r4
 8004318:	229b      	movs	r2, #155	; 0x9b
 800431a:	e7de      	b.n	80042da <tcpip_thread+0x36>
 800431c:	20003de4 	.word	0x20003de4
 8004320:	20003de8 	.word	0x20003de8
 8004324:	20003f9c 	.word	0x20003f9c
 8004328:	20003de0 	.word	0x20003de0
 800432c:	0800cb28 	.word	0x0800cb28
 8004330:	0800cb58 	.word	0x0800cb58
 8004334:	0800cb76 	.word	0x0800cb76

08004338 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800433c:	4810      	ldr	r0, [pc, #64]	; (8004380 <tcpip_inpkt+0x48>)
{
 800433e:	460e      	mov	r6, r1
 8004340:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8004342:	f006 fad3 	bl	800a8ec <sys_mbox_valid>
 8004346:	b928      	cbnz	r0, 8004354 <tcpip_inpkt+0x1c>
 8004348:	4b0e      	ldr	r3, [pc, #56]	; (8004384 <tcpip_inpkt+0x4c>)
 800434a:	22b5      	movs	r2, #181	; 0xb5
 800434c:	490e      	ldr	r1, [pc, #56]	; (8004388 <tcpip_inpkt+0x50>)
 800434e:	480f      	ldr	r0, [pc, #60]	; (800438c <tcpip_inpkt+0x54>)
 8004350:	f007 fd0a 	bl	800bd68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8004354:	2009      	movs	r0, #9
 8004356:	f002 fdb1 	bl	8006ebc <memp_malloc>
  if (msg == NULL) {
 800435a:	4604      	mov	r4, r0
 800435c:	b168      	cbz	r0, 800437a <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 800435e:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
 8004360:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8004362:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8004364:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8004366:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8004368:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800436a:	4805      	ldr	r0, [pc, #20]	; (8004380 <tcpip_inpkt+0x48>)
 800436c:	f006 fa92 	bl	800a894 <sys_mbox_trypost>
 8004370:	b128      	cbz	r0, 800437e <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8004372:	4621      	mov	r1, r4
 8004374:	2009      	movs	r0, #9
 8004376:	f002 fdbd 	bl	8006ef4 <memp_free>
    return ERR_MEM;
 800437a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800437e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004380:	20003de0 	.word	0x20003de0
 8004384:	0800cb28 	.word	0x0800cb28
 8004388:	0800cb1b 	.word	0x0800cb1b
 800438c:	0800cb76 	.word	0x0800cb76

08004390 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8004390:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8004394:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8004398:	bf14      	ite	ne
 800439a:	4a02      	ldrne	r2, [pc, #8]	; (80043a4 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800439c:	4a02      	ldreq	r2, [pc, #8]	; (80043a8 <tcpip_input+0x18>)
 800439e:	f7ff bfcb 	b.w	8004338 <tcpip_inpkt>
 80043a2:	bf00      	nop
 80043a4:	0800a755 	.word	0x0800a755
 80043a8:	08005fbd 	.word	0x08005fbd

080043ac <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 80043ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ae:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80043b0:	4812      	ldr	r0, [pc, #72]	; (80043fc <tcpip_callback_with_block+0x50>)
{
 80043b2:	460e      	mov	r6, r1
 80043b4:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80043b6:	f006 fa99 	bl	800a8ec <sys_mbox_valid>
 80043ba:	b928      	cbnz	r0, 80043c8 <tcpip_callback_with_block+0x1c>
 80043bc:	4b10      	ldr	r3, [pc, #64]	; (8004400 <tcpip_callback_with_block+0x54>)
 80043be:	22ee      	movs	r2, #238	; 0xee
 80043c0:	4910      	ldr	r1, [pc, #64]	; (8004404 <tcpip_callback_with_block+0x58>)
 80043c2:	4811      	ldr	r0, [pc, #68]	; (8004408 <tcpip_callback_with_block+0x5c>)
 80043c4:	f007 fcd0 	bl	800bd68 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80043c8:	2008      	movs	r0, #8
 80043ca:	f002 fd77 	bl	8006ebc <memp_malloc>
  if (msg == NULL) {
 80043ce:	4604      	mov	r4, r0
 80043d0:	b188      	cbz	r0, 80043f6 <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80043d2:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
 80043d4:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 80043d6:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 80043d8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 80043da:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 80043dc:	4807      	ldr	r0, [pc, #28]	; (80043fc <tcpip_callback_with_block+0x50>)
  if (block) {
 80043de:	b11d      	cbz	r5, 80043e8 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 80043e0:	f006 fa4c 	bl	800a87c <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 80043e4:	2000      	movs	r0, #0
 80043e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80043e8:	f006 fa54 	bl	800a894 <sys_mbox_trypost>
 80043ec:	b128      	cbz	r0, 80043fa <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80043ee:	4621      	mov	r1, r4
 80043f0:	2008      	movs	r0, #8
 80043f2:	f002 fd7f 	bl	8006ef4 <memp_free>
    return ERR_MEM;
 80043f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80043fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043fc:	20003de0 	.word	0x20003de0
 8004400:	0800cb28 	.word	0x0800cb28
 8004404:	0800cb1b 	.word	0x0800cb1b
 8004408:	0800cb76 	.word	0x0800cb76

0800440c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800440c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800440e:	4605      	mov	r5, r0
 8004410:	460c      	mov	r4, r1
  lwip_init();
 8004412:	f000 f840 	bl	8004496 <lwip_init>

  tcpip_init_done = initfunc;
 8004416:	4b13      	ldr	r3, [pc, #76]	; (8004464 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8004418:	2106      	movs	r1, #6
 800441a:	4813      	ldr	r0, [pc, #76]	; (8004468 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 800441c:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 800441e:	4b13      	ldr	r3, [pc, #76]	; (800446c <tcpip_init+0x60>)
 8004420:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8004422:	f006 fa1b 	bl	800a85c <sys_mbox_new>
 8004426:	b130      	cbz	r0, 8004436 <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <tcpip_init+0x64>)
 800442a:	f240 12d5 	movw	r2, #469	; 0x1d5
 800442e:	4911      	ldr	r1, [pc, #68]	; (8004474 <tcpip_init+0x68>)
 8004430:	4811      	ldr	r0, [pc, #68]	; (8004478 <tcpip_init+0x6c>)
 8004432:	f007 fc99 	bl	800bd68 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8004436:	4811      	ldr	r0, [pc, #68]	; (800447c <tcpip_init+0x70>)
 8004438:	f006 fa6a 	bl	800a910 <sys_mutex_new>
 800443c:	b130      	cbz	r0, 800444c <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800443e:	4b0c      	ldr	r3, [pc, #48]	; (8004470 <tcpip_init+0x64>)
 8004440:	f240 12d9 	movw	r2, #473	; 0x1d9
 8004444:	490e      	ldr	r1, [pc, #56]	; (8004480 <tcpip_init+0x74>)
 8004446:	480c      	ldr	r0, [pc, #48]	; (8004478 <tcpip_init+0x6c>)
 8004448:	f007 fc8e 	bl	800bd68 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800444c:	2303      	movs	r3, #3
 800444e:	2200      	movs	r2, #0
 8004450:	490c      	ldr	r1, [pc, #48]	; (8004484 <tcpip_init+0x78>)
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004458:	480b      	ldr	r0, [pc, #44]	; (8004488 <tcpip_init+0x7c>)
 800445a:	f006 fa70 	bl	800a93e <sys_thread_new>
}
 800445e:	b003      	add	sp, #12
 8004460:	bd30      	pop	{r4, r5, pc}
 8004462:	bf00      	nop
 8004464:	20003de4 	.word	0x20003de4
 8004468:	20003de0 	.word	0x20003de0
 800446c:	20003de8 	.word	0x20003de8
 8004470:	0800cb28 	.word	0x0800cb28
 8004474:	0800caca 	.word	0x0800caca
 8004478:	0800cb76 	.word	0x0800cb76
 800447c:	20003f9c 	.word	0x20003f9c
 8004480:	0800caed 	.word	0x0800caed
 8004484:	080042a5 	.word	0x080042a5
 8004488:	0800cb0e 	.word	0x0800cb0e

0800448c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 800448c:	ba40      	rev16	r0, r0
}
 800448e:	b280      	uxth	r0, r0
 8004490:	4770      	bx	lr

08004492 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8004492:	ba00      	rev	r0, r0
 8004494:	4770      	bx	lr

08004496 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004496:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8004498:	f006 fa2e 	bl	800a8f8 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800449c:	f002 fa98 	bl	80069d0 <mem_init>
  memp_init();
 80044a0:	f002 fcfe 	bl	8006ea0 <memp_init>
  pbuf_init();
  netif_init();
 80044a4:	f002 fd49 	bl	8006f3a <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80044a8:	f005 ff7c 	bl	800a3a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80044ac:	f003 f9c6 	bl	800783c <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 80044b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 80044b4:	f005 beec 	b.w	800a290 <sys_timeouts_init>

080044b8 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 80044b8:	7a43      	ldrb	r3, [r0, #9]
 80044ba:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 80044bc:	bf1f      	itttt	ne
 80044be:	2300      	movne	r3, #0
    dhcp->state = new_state;
 80044c0:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 80044c2:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 80044c4:	82c3      	strhne	r3, [r0, #22]
 80044c6:	4770      	bx	lr

080044c8 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 80044c8:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80044ca:	8a83      	ldrh	r3, [r0, #20]
{
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80044d0:	3302      	adds	r3, #2
 80044d2:	2b44      	cmp	r3, #68	; 0x44
 80044d4:	d906      	bls.n	80044e4 <dhcp_option_short+0x1c>
 80044d6:	4b0a      	ldr	r3, [pc, #40]	; (8004500 <dhcp_option_short+0x38>)
 80044d8:	f240 5282 	movw	r2, #1410	; 0x582
 80044dc:	4909      	ldr	r1, [pc, #36]	; (8004504 <dhcp_option_short+0x3c>)
 80044de:	480a      	ldr	r0, [pc, #40]	; (8004508 <dhcp_option_short+0x40>)
 80044e0:	f007 fc42 	bl	800bd68 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80044e4:	8aa3      	ldrh	r3, [r4, #20]
 80044e6:	0a28      	lsrs	r0, r5, #8
 80044e8:	6922      	ldr	r2, [r4, #16]
 80044ea:	18d1      	adds	r1, r2, r3
 80044ec:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80044f0:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80044f2:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80044f4:	82a1      	strh	r1, [r4, #20]
 80044f6:	fa12 f383 	uxtah	r3, r2, r3
 80044fa:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 80044fe:	bd38      	pop	{r3, r4, r5, pc}
 8004500:	0800ce0e 	.word	0x0800ce0e
 8004504:	0800ce43 	.word	0x0800ce43
 8004508:	0800cb76 	.word	0x0800cb76

0800450c <dhcp_option>:
{
 800450c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800450e:	8a83      	ldrh	r3, [r0, #20]
{
 8004510:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8004512:	3202      	adds	r2, #2
{
 8004514:	4604      	mov	r4, r0
 8004516:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8004518:	4413      	add	r3, r2
 800451a:	2b44      	cmp	r3, #68	; 0x44
 800451c:	d906      	bls.n	800452c <dhcp_option+0x20>
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <dhcp_option+0x3c>)
 8004520:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8004524:	4909      	ldr	r1, [pc, #36]	; (800454c <dhcp_option+0x40>)
 8004526:	480a      	ldr	r0, [pc, #40]	; (8004550 <dhcp_option+0x44>)
 8004528:	f007 fc1e 	bl	800bd68 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800452c:	8aa3      	ldrh	r3, [r4, #20]
 800452e:	6922      	ldr	r2, [r4, #16]
 8004530:	18d1      	adds	r1, r2, r3
 8004532:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8004536:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8004538:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 800453a:	82a1      	strh	r1, [r4, #20]
 800453c:	fa12 f383 	uxtah	r3, r2, r3
 8004540:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	bf00      	nop
 8004548:	0800ce0e 	.word	0x0800ce0e
 800454c:	0800cd4b 	.word	0x0800cd4b
 8004550:	0800cb76 	.word	0x0800cb76

08004554 <dhcp_option_byte>:
{
 8004554:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8004556:	8a83      	ldrh	r3, [r0, #20]
{
 8004558:	4604      	mov	r4, r0
 800455a:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800455c:	2b43      	cmp	r3, #67	; 0x43
 800455e:	d906      	bls.n	800456e <dhcp_option_byte+0x1a>
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <dhcp_option_byte+0x2c>)
 8004562:	f240 527b 	movw	r2, #1403	; 0x57b
 8004566:	4907      	ldr	r1, [pc, #28]	; (8004584 <dhcp_option_byte+0x30>)
 8004568:	4807      	ldr	r0, [pc, #28]	; (8004588 <dhcp_option_byte+0x34>)
 800456a:	f007 fbfd 	bl	800bd68 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 800456e:	8aa2      	ldrh	r2, [r4, #20]
 8004570:	6923      	ldr	r3, [r4, #16]
 8004572:	1c51      	adds	r1, r2, #1
 8004574:	4413      	add	r3, r2
 8004576:	82a1      	strh	r1, [r4, #20]
 8004578:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 800457c:	bd38      	pop	{r3, r4, r5, pc}
 800457e:	bf00      	nop
 8004580:	0800ce0e 	.word	0x0800ce0e
 8004584:	0800cd93 	.word	0x0800cd93
 8004588:	0800cb76 	.word	0x0800cb76

0800458c <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 800458c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800458e:	8a83      	ldrh	r3, [r0, #20]
{
 8004590:	4605      	mov	r5, r0
 8004592:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8004594:	3304      	adds	r3, #4
 8004596:	2b44      	cmp	r3, #68	; 0x44
 8004598:	d906      	bls.n	80045a8 <dhcp_option_long+0x1c>
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <dhcp_option_long+0x50>)
 800459c:	f240 528a 	movw	r2, #1418	; 0x58a
 80045a0:	490f      	ldr	r1, [pc, #60]	; (80045e0 <dhcp_option_long+0x54>)
 80045a2:	4810      	ldr	r0, [pc, #64]	; (80045e4 <dhcp_option_long+0x58>)
 80045a4:	f007 fbe0 	bl	800bd68 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80045a8:	8aab      	ldrh	r3, [r5, #20]
 80045aa:	0e20      	lsrs	r0, r4, #24
 80045ac:	692a      	ldr	r2, [r5, #16]
 80045ae:	18d1      	adds	r1, r2, r3
 80045b0:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 80045b4:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80045b6:	0c20      	lsrs	r0, r4, #16
 80045b8:	fa12 f181 	uxtah	r1, r2, r1
 80045bc:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 80045c0:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80045c2:	0a20      	lsrs	r0, r4, #8
 80045c4:	fa12 f181 	uxtah	r1, r2, r1
 80045c8:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80045cc:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80045ce:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 80045d0:	82a9      	strh	r1, [r5, #20]
 80045d2:	fa12 f383 	uxtah	r3, r2, r3
 80045d6:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 80045da:	bd38      	pop	{r3, r4, r5, pc}
 80045dc:	0800ce0e 	.word	0x0800ce0e
 80045e0:	0800cdce 	.word	0x0800cdce
 80045e4:	0800cb76 	.word	0x0800cb76

080045e8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80045e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ec:	460c      	mov	r4, r1
 80045ee:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80045f0:	4680      	mov	r8, r0
 80045f2:	b950      	cbnz	r0, 800460a <dhcp_create_msg+0x22>
 80045f4:	4b62      	ldr	r3, [pc, #392]	; (8004780 <dhcp_create_msg+0x198>)
 80045f6:	f240 721d 	movw	r2, #1821	; 0x71d
 80045fa:	4962      	ldr	r1, [pc, #392]	; (8004784 <dhcp_create_msg+0x19c>)
 80045fc:	4862      	ldr	r0, [pc, #392]	; (8004788 <dhcp_create_msg+0x1a0>)
 80045fe:	f007 fbb3 	bl	800bd68 <iprintf>
 8004602:	f06f 000f 	mvn.w	r0, #15
 8004606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800460a:	b951      	cbnz	r1, 8004622 <dhcp_create_msg+0x3a>
 800460c:	4b5c      	ldr	r3, [pc, #368]	; (8004780 <dhcp_create_msg+0x198>)
 800460e:	f240 721e 	movw	r2, #1822	; 0x71e
 8004612:	495e      	ldr	r1, [pc, #376]	; (800478c <dhcp_create_msg+0x1a4>)
 8004614:	485c      	ldr	r0, [pc, #368]	; (8004788 <dhcp_create_msg+0x1a0>)
 8004616:	f007 fba7 	bl	800bd68 <iprintf>
 800461a:	f06f 0005 	mvn.w	r0, #5
 800461e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8004622:	68cb      	ldr	r3, [r1, #12]
 8004624:	b133      	cbz	r3, 8004634 <dhcp_create_msg+0x4c>
 8004626:	4b56      	ldr	r3, [pc, #344]	; (8004780 <dhcp_create_msg+0x198>)
 8004628:	f240 721f 	movw	r2, #1823	; 0x71f
 800462c:	4958      	ldr	r1, [pc, #352]	; (8004790 <dhcp_create_msg+0x1a8>)
 800462e:	4856      	ldr	r0, [pc, #344]	; (8004788 <dhcp_create_msg+0x1a0>)
 8004630:	f007 fb9a 	bl	800bd68 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	b133      	cbz	r3, 8004646 <dhcp_create_msg+0x5e>
 8004638:	4b51      	ldr	r3, [pc, #324]	; (8004780 <dhcp_create_msg+0x198>)
 800463a:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 800463e:	4955      	ldr	r1, [pc, #340]	; (8004794 <dhcp_create_msg+0x1ac>)
 8004640:	4851      	ldr	r0, [pc, #324]	; (8004788 <dhcp_create_msg+0x1a0>)
 8004642:	f007 fb91 	bl	800bd68 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8004646:	2200      	movs	r2, #0
 8004648:	f44f 719a 	mov.w	r1, #308	; 0x134
 800464c:	4610      	mov	r0, r2
 800464e:	f002 fe41 	bl	80072d4 <pbuf_alloc>
 8004652:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 8004654:	2800      	cmp	r0, #0
 8004656:	f000 808f 	beq.w	8004778 <dhcp_create_msg+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800465a:	8943      	ldrh	r3, [r0, #10]
 800465c:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8004660:	d206      	bcs.n	8004670 <dhcp_create_msg+0x88>
 8004662:	4b47      	ldr	r3, [pc, #284]	; (8004780 <dhcp_create_msg+0x198>)
 8004664:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8004668:	494b      	ldr	r1, [pc, #300]	; (8004798 <dhcp_create_msg+0x1b0>)
 800466a:	4847      	ldr	r0, [pc, #284]	; (8004788 <dhcp_create_msg+0x1a0>)
 800466c:	f007 fb7c 	bl	800bd68 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8004670:	2e03      	cmp	r6, #3
 8004672:	d102      	bne.n	800467a <dhcp_create_msg+0x92>
 8004674:	7a63      	ldrb	r3, [r4, #9]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d107      	bne.n	800468a <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800467a:	7aa3      	ldrb	r3, [r4, #10]
 800467c:	4d47      	ldr	r5, [pc, #284]	; (800479c <dhcp_create_msg+0x1b4>)
 800467e:	b913      	cbnz	r3, 8004686 <dhcp_create_msg+0x9e>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8004680:	f007 fb8a 	bl	800bd98 <rand>
 8004684:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8004686:	682b      	ldr	r3, [r5, #0]
 8004688:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800468a:	68e3      	ldr	r3, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 800468c:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 800468e:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8004690:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8004692:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8004694:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8004696:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8004698:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 800469c:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800469e:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80046a0:	6820      	ldr	r0, [r4, #0]
 80046a2:	f7ff fef6 	bl	8004492 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 80046a6:	6923      	ldr	r3, [r4, #16]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80046a8:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80046aa:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 80046ac:	721d      	strb	r5, [r3, #8]
 80046ae:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 80046b0:	729d      	strb	r5, [r3, #10]
 80046b2:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80046b4:	731d      	strb	r5, [r3, #12]
 80046b6:	735d      	strb	r5, [r3, #13]
 80046b8:	739d      	strb	r5, [r3, #14]
 80046ba:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80046bc:	d008      	beq.n	80046d0 <dhcp_create_msg+0xe8>
 80046be:	1ff2      	subs	r2, r6, #7
 80046c0:	2a01      	cmp	r2, #1
 80046c2:	d905      	bls.n	80046d0 <dhcp_create_msg+0xe8>
 80046c4:	2e03      	cmp	r6, #3
 80046c6:	d106      	bne.n	80046d6 <dhcp_create_msg+0xee>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 80046c8:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80046ca:	3a04      	subs	r2, #4
 80046cc:	2a01      	cmp	r2, #1
 80046ce:	d802      	bhi.n	80046d6 <dhcp_create_msg+0xee>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 80046d0:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80046d4:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 80046d6:	2200      	movs	r2, #0
 80046d8:	f103 001c 	add.w	r0, r3, #28
 80046dc:	741a      	strb	r2, [r3, #16]
 80046de:	745a      	strb	r2, [r3, #17]
 80046e0:	749a      	strb	r2, [r3, #18]
 80046e2:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 80046e4:	751a      	strb	r2, [r3, #20]
 80046e6:	755a      	strb	r2, [r3, #21]
 80046e8:	759a      	strb	r2, [r3, #22]
 80046ea:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 80046ec:	761a      	strb	r2, [r3, #24]
 80046ee:	765a      	strb	r2, [r3, #25]
 80046f0:	769a      	strb	r2, [r3, #26]
 80046f2:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80046f4:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 80046f8:	b291      	uxth	r1, r2
 80046fa:	428d      	cmp	r5, r1
 80046fc:	d93a      	bls.n	8004774 <dhcp_create_msg+0x18c>
 80046fe:	2905      	cmp	r1, #5
 8004700:	d838      	bhi.n	8004774 <dhcp_create_msg+0x18c>
 8004702:	eb08 0102 	add.w	r1, r8, r2
 8004706:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 800470a:	3201      	adds	r2, #1
 800470c:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8004710:	2a10      	cmp	r2, #16
 8004712:	d1f1      	bne.n	80046f8 <dhcp_create_msg+0x110>
 8004714:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004718:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 800471c:	2000      	movs	r0, #0
 800471e:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8004722:	428a      	cmp	r2, r1
 8004724:	d1fb      	bne.n	800471e <dhcp_create_msg+0x136>
 8004726:	f103 00ec 	add.w	r0, r3, #236	; 0xec
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 800472a:	2100      	movs	r1, #0
 800472c:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 8004730:	4282      	cmp	r2, r0
 8004732:	d1fb      	bne.n	800472c <dhcp_create_msg+0x144>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8004734:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8004738:	2263      	movs	r2, #99	; 0x63
 800473a:	33f0      	adds	r3, #240	; 0xf0
 800473c:	f803 0c03 	strb.w	r0, [r3, #-3]
 8004740:	2053      	movs	r0, #83	; 0x53
 8004742:	f803 2c04 	strb.w	r2, [r3, #-4]
 8004746:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 800474a:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800474c:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 8004750:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8004752:	f803 2b01 	strb.w	r2, [r3], #1
 8004756:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8004758:	2a44      	cmp	r2, #68	; 0x44
 800475a:	d1fa      	bne.n	8004752 <dhcp_create_msg+0x16a>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800475c:	2201      	movs	r2, #1
 800475e:	4620      	mov	r0, r4
 8004760:	2135      	movs	r1, #53	; 0x35
 8004762:	f7ff fed3 	bl	800450c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8004766:	4620      	mov	r0, r4
 8004768:	4631      	mov	r1, r6
 800476a:	f7ff fef3 	bl	8004554 <dhcp_option_byte>
  return ERR_OK;
 800476e:	2000      	movs	r0, #0
 8004770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8004774:	2100      	movs	r1, #0
 8004776:	e7c8      	b.n	800470a <dhcp_create_msg+0x122>
    return ERR_MEM;
 8004778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800477c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004780:	0800ce0e 	.word	0x0800ce0e
 8004784:	0800cbcf 	.word	0x0800cbcf
 8004788:	0800cb76 	.word	0x0800cb76
 800478c:	0800cbee 	.word	0x0800cbee
 8004790:	0800cc0c 	.word	0x0800cc0c
 8004794:	0800cc31 	.word	0x0800cc31
 8004798:	0800cc58 	.word	0x0800cc58
 800479c:	20003df4 	.word	0x20003df4

080047a0 <dhcp_check>:
{
 80047a0:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80047a2:	6a04      	ldr	r4, [r0, #32]
{
 80047a4:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80047a6:	2108      	movs	r1, #8
 80047a8:	4620      	mov	r0, r4
 80047aa:	f7ff fe85 	bl	80044b8 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80047ae:	2200      	movs	r2, #0
 80047b0:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80047b4:	4628      	mov	r0, r5
 80047b6:	f001 f9ad 	bl	8005b14 <etharp_query>
  if (dhcp->tries < 255) {
 80047ba:	7aa3      	ldrb	r3, [r4, #10]
 80047bc:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80047be:	bf1c      	itt	ne
 80047c0:	3301      	addne	r3, #1
 80047c2:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80047c4:	2301      	movs	r3, #1
 80047c6:	82e3      	strh	r3, [r4, #22]
 80047c8:	bd38      	pop	{r3, r4, r5, pc}
	...

080047cc <dhcp_bind>:
{
 80047cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80047ce:	4605      	mov	r5, r0
 80047d0:	b940      	cbnz	r0, 80047e4 <dhcp_bind+0x18>
 80047d2:	4b3a      	ldr	r3, [pc, #232]	; (80048bc <dhcp_bind+0xf0>)
 80047d4:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80047d8:	4939      	ldr	r1, [pc, #228]	; (80048c0 <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80047da:	483a      	ldr	r0, [pc, #232]	; (80048c4 <dhcp_bind+0xf8>)
 80047dc:	f007 fac4 	bl	800bd68 <iprintf>
}
 80047e0:	b003      	add	sp, #12
 80047e2:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 80047e4:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80047e6:	b924      	cbnz	r4, 80047f2 <dhcp_bind+0x26>
 80047e8:	4b34      	ldr	r3, [pc, #208]	; (80048bc <dhcp_bind+0xf0>)
 80047ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047ee:	4936      	ldr	r1, [pc, #216]	; (80048c8 <dhcp_bind+0xfc>)
 80047f0:	e7f3      	b.n	80047da <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 80047f2:	2300      	movs	r3, #0
 80047f4:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80047f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	d00b      	beq.n	8004814 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80047fc:	223c      	movs	r2, #60	; 0x3c
 80047fe:	331e      	adds	r3, #30
 8004800:	fbb3 f3f2 	udiv	r3, r3, r2
 8004804:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004808:	4293      	cmp	r3, r2
 800480a:	bf28      	it	cs
 800480c:	4613      	movcs	r3, r2
     if (dhcp->t0_timeout == 0) {
 800480e:	2b00      	cmp	r3, #0
 8004810:	d041      	beq.n	8004896 <dhcp_bind+0xca>
       dhcp->t0_timeout = 1;
 8004812:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8004814:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004816:	1c58      	adds	r0, r3, #1
 8004818:	d00d      	beq.n	8004836 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800481a:	223c      	movs	r2, #60	; 0x3c
 800481c:	331e      	adds	r3, #30
 800481e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004822:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004826:	4293      	cmp	r3, r2
 8004828:	bf28      	it	cs
 800482a:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 800482c:	2b00      	cmp	r3, #0
 800482e:	d034      	beq.n	800489a <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 8004830:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8004832:	8b23      	ldrh	r3, [r4, #24]
 8004834:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8004836:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004838:	1c59      	adds	r1, r3, #1
 800483a:	d00c      	beq.n	8004856 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800483c:	223c      	movs	r2, #60	; 0x3c
 800483e:	331e      	adds	r3, #30
 8004840:	fbb3 f3f2 	udiv	r3, r3, r2
 8004844:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004848:	4293      	cmp	r3, r2
 800484a:	bf28      	it	cs
 800484c:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 800484e:	b333      	cbz	r3, 800489e <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 8004850:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8004852:	8b63      	ldrh	r3, [r4, #26]
 8004854:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8004856:	8b63      	ldrh	r3, [r4, #26]
 8004858:	8b22      	ldrh	r2, [r4, #24]
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <dhcp_bind+0x98>
 800485e:	b10b      	cbz	r3, 8004864 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 8004860:	2300      	movs	r3, #0
 8004862:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 8004864:	7ae3      	ldrb	r3, [r4, #11]
 8004866:	b1e3      	cbz	r3, 80048a2 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8004868:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800486a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800486c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800486e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8004870:	b92b      	cbnz	r3, 800487e <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8004872:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004874:	9a00      	ldr	r2, [sp, #0]
 8004876:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8004878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800487c:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800487e:	4620      	mov	r0, r4
 8004880:	210a      	movs	r1, #10
 8004882:	f7ff fe19 	bl	80044b8 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8004886:	ab01      	add	r3, sp, #4
 8004888:	466a      	mov	r2, sp
 800488a:	f104 0128 	add.w	r1, r4, #40	; 0x28
 800488e:	4628      	mov	r0, r5
 8004890:	f002 fb76 	bl	8006f80 <netif_set_addr>
 8004894:	e7a4      	b.n	80047e0 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 8004896:	2301      	movs	r3, #1
 8004898:	e7bb      	b.n	8004812 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 800489a:	2301      	movs	r3, #1
 800489c:	e7c8      	b.n	8004830 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 800489e:	2301      	movs	r3, #1
 80048a0:	e7d6      	b.n	8004850 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80048a2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 80048a6:	061a      	lsls	r2, r3, #24
 80048a8:	d401      	bmi.n	80048ae <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80048aa:	23ff      	movs	r3, #255	; 0xff
 80048ac:	e7dd      	b.n	800486a <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 80048ae:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80048b0:	bf8c      	ite	hi
 80048b2:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80048b6:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80048ba:	e7d6      	b.n	800486a <dhcp_bind+0x9e>
 80048bc:	0800ce0e 	.word	0x0800ce0e
 80048c0:	0800cb9e 	.word	0x0800cb9e
 80048c4:	0800cb76 	.word	0x0800cb76
 80048c8:	0800cbb7 	.word	0x0800cbb7

080048cc <dhcp_inc_pcb_refcount>:
{
 80048cc:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 80048ce:	4d15      	ldr	r5, [pc, #84]	; (8004924 <dhcp_inc_pcb_refcount+0x58>)
 80048d0:	782b      	ldrb	r3, [r5, #0]
 80048d2:	b9f3      	cbnz	r3, 8004912 <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 80048d4:	4c14      	ldr	r4, [pc, #80]	; (8004928 <dhcp_inc_pcb_refcount+0x5c>)
 80048d6:	6823      	ldr	r3, [r4, #0]
 80048d8:	b12b      	cbz	r3, 80048e6 <dhcp_inc_pcb_refcount+0x1a>
 80048da:	4b14      	ldr	r3, [pc, #80]	; (800492c <dhcp_inc_pcb_refcount+0x60>)
 80048dc:	22d9      	movs	r2, #217	; 0xd9
 80048de:	4914      	ldr	r1, [pc, #80]	; (8004930 <dhcp_inc_pcb_refcount+0x64>)
 80048e0:	4814      	ldr	r0, [pc, #80]	; (8004934 <dhcp_inc_pcb_refcount+0x68>)
 80048e2:	f007 fa41 	bl	800bd68 <iprintf>
    dhcp_pcb = udp_new();
 80048e6:	f005 ff11 	bl	800a70c <udp_new>
 80048ea:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 80048ec:	b1b0      	cbz	r0, 800491c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80048ee:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80048f0:	4911      	ldr	r1, [pc, #68]	; (8004938 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80048f2:	f042 0220 	orr.w	r2, r2, #32
 80048f6:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80048f8:	2244      	movs	r2, #68	; 0x44
 80048fa:	f005 fded 	bl	800a4d8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80048fe:	2243      	movs	r2, #67	; 0x43
 8004900:	490d      	ldr	r1, [pc, #52]	; (8004938 <dhcp_inc_pcb_refcount+0x6c>)
 8004902:	6820      	ldr	r0, [r4, #0]
 8004904:	f005 febe 	bl	800a684 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8004908:	2200      	movs	r2, #0
 800490a:	490c      	ldr	r1, [pc, #48]	; (800493c <dhcp_inc_pcb_refcount+0x70>)
 800490c:	6820      	ldr	r0, [r4, #0]
 800490e:	f005 fee1 	bl	800a6d4 <udp_recv>
  dhcp_pcb_refcount++;
 8004912:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 8004914:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8004916:	3301      	adds	r3, #1
 8004918:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 800491a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800491c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8004920:	bd38      	pop	{r3, r4, r5, pc}
 8004922:	bf00      	nop
 8004924:	20003df0 	.word	0x20003df0
 8004928:	20003dec 	.word	0x20003dec
 800492c:	0800ce0e 	.word	0x0800ce0e
 8004930:	0800cd26 	.word	0x0800cd26
 8004934:	0800cb76 	.word	0x0800cb76
 8004938:	0800d2e0 	.word	0x0800d2e0
 800493c:	08004d3d 	.word	0x08004d3d

08004940 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 8004940:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8004942:	4604      	mov	r4, r0
 8004944:	b940      	cbnz	r0, 8004958 <dhcp_option_trailer+0x18>
 8004946:	4b17      	ldr	r3, [pc, #92]	; (80049a4 <dhcp_option_trailer+0x64>)
 8004948:	f240 7282 	movw	r2, #1922	; 0x782
 800494c:	4916      	ldr	r1, [pc, #88]	; (80049a8 <dhcp_option_trailer+0x68>)
 800494e:	4817      	ldr	r0, [pc, #92]	; (80049ac <dhcp_option_trailer+0x6c>)
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 8004950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8004954:	f007 ba08 	b.w	800bd68 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8004958:	6903      	ldr	r3, [r0, #16]
 800495a:	b933      	cbnz	r3, 800496a <dhcp_option_trailer+0x2a>
 800495c:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <dhcp_option_trailer+0x64>)
 800495e:	f240 7283 	movw	r2, #1923	; 0x783
 8004962:	4913      	ldr	r1, [pc, #76]	; (80049b0 <dhcp_option_trailer+0x70>)
 8004964:	4811      	ldr	r0, [pc, #68]	; (80049ac <dhcp_option_trailer+0x6c>)
 8004966:	f007 f9ff 	bl	800bd68 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 800496a:	8aa3      	ldrh	r3, [r4, #20]
 800496c:	2b43      	cmp	r3, #67	; 0x43
 800496e:	d906      	bls.n	800497e <dhcp_option_trailer+0x3e>
 8004970:	4b0c      	ldr	r3, [pc, #48]	; (80049a4 <dhcp_option_trailer+0x64>)
 8004972:	f240 7284 	movw	r2, #1924	; 0x784
 8004976:	490f      	ldr	r1, [pc, #60]	; (80049b4 <dhcp_option_trailer+0x74>)
 8004978:	480c      	ldr	r0, [pc, #48]	; (80049ac <dhcp_option_trailer+0x6c>)
 800497a:	f007 f9f5 	bl	800bd68 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 800497e:	8aa3      	ldrh	r3, [r4, #20]
 8004980:	6922      	ldr	r2, [r4, #16]
 8004982:	1c59      	adds	r1, r3, #1
 8004984:	4413      	add	r3, r2
 8004986:	82a1      	strh	r1, [r4, #20]
 8004988:	21ff      	movs	r1, #255	; 0xff
 800498a:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 800498e:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8004990:	8aa3      	ldrh	r3, [r4, #20]
 8004992:	2b43      	cmp	r3, #67	; 0x43
 8004994:	d900      	bls.n	8004998 <dhcp_option_trailer+0x58>
}
 8004996:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8004998:	1c58      	adds	r0, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	82a0      	strh	r0, [r4, #20]
 800499e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 80049a2:	e7f5      	b.n	8004990 <dhcp_option_trailer+0x50>
 80049a4:	0800ce0e 	.word	0x0800ce0e
 80049a8:	0800ce84 	.word	0x0800ce84
 80049ac:	0800cb76 	.word	0x0800cb76
 80049b0:	0800cea6 	.word	0x0800cea6
 80049b4:	0800ced2 	.word	0x0800ced2

080049b8 <dhcp_handle_ack.isra.1>:
dhcp_handle_ack(struct netif *netif)
 80049b8:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80049ba:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80049bc:	4d17      	ldr	r5, [pc, #92]	; (8004a1c <dhcp_handle_ack.isra.1+0x64>)
dhcp_handle_ack(struct netif *netif)
 80049be:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80049c0:	62c3      	str	r3, [r0, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80049c2:	6303      	str	r3, [r0, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80049c4:	78eb      	ldrb	r3, [r5, #3]
 80049c6:	b113      	cbz	r3, 80049ce <dhcp_handle_ack.isra.1+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80049c8:	4b15      	ldr	r3, [pc, #84]	; (8004a20 <dhcp_handle_ack.isra.1+0x68>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80049ce:	792b      	ldrb	r3, [r5, #4]
 80049d0:	b1db      	cbz	r3, 8004a0a <dhcp_handle_ack.isra.1+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80049d2:	4b13      	ldr	r3, [pc, #76]	; (8004a20 <dhcp_handle_ack.isra.1+0x68>)
 80049d4:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80049d6:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80049d8:	796b      	ldrb	r3, [r5, #5]
 80049da:	b1cb      	cbz	r3, 8004a10 <dhcp_handle_ack.isra.1+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80049dc:	4b10      	ldr	r3, [pc, #64]	; (8004a20 <dhcp_handle_ack.isra.1+0x68>)
 80049de:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80049e0:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80049e2:	6863      	ldr	r3, [r4, #4]
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80049e8:	79ab      	ldrb	r3, [r5, #6]
 80049ea:	b12b      	cbz	r3, 80049f8 <dhcp_handle_ack.isra.1+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <dhcp_handle_ack.isra.1+0x68>)
 80049ee:	6998      	ldr	r0, [r3, #24]
 80049f0:	f7ff fd4f 	bl	8004492 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 80049f4:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80049f6:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 80049f8:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80049fa:	79eb      	ldrb	r3, [r5, #7]
 80049fc:	b123      	cbz	r3, 8004a08 <dhcp_handle_ack.isra.1+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <dhcp_handle_ack.isra.1+0x68>)
 8004a00:	69d8      	ldr	r0, [r3, #28]
 8004a02:	f7ff fd46 	bl	8004492 <lwip_htonl>
 8004a06:	6320      	str	r0, [r4, #48]	; 0x30
 8004a08:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8004a0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	e7e2      	b.n	80049d6 <dhcp_handle_ack.isra.1+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004a10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004a16:	08db      	lsrs	r3, r3, #3
 8004a18:	e7e2      	b.n	80049e0 <dhcp_handle_ack.isra.1+0x28>
 8004a1a:	bf00      	nop
 8004a1c:	20003fb8 	.word	0x20003fb8
 8004a20:	20003fc0 	.word	0x20003fc0

08004a24 <dhcp_delete_msg>:
{
 8004a24:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8004a26:	4604      	mov	r4, r0
 8004a28:	b940      	cbnz	r0, 8004a3c <dhcp_delete_msg+0x18>
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <dhcp_delete_msg+0x4c>)
 8004a2c:	f240 726d 	movw	r2, #1901	; 0x76d
 8004a30:	4910      	ldr	r1, [pc, #64]	; (8004a74 <dhcp_delete_msg+0x50>)
 8004a32:	4811      	ldr	r0, [pc, #68]	; (8004a78 <dhcp_delete_msg+0x54>)
}
 8004a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8004a38:	f007 b996 	b.w	800bd68 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8004a3c:	68c3      	ldr	r3, [r0, #12]
 8004a3e:	b933      	cbnz	r3, 8004a4e <dhcp_delete_msg+0x2a>
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <dhcp_delete_msg+0x4c>)
 8004a42:	f240 726e 	movw	r2, #1902	; 0x76e
 8004a46:	490d      	ldr	r1, [pc, #52]	; (8004a7c <dhcp_delete_msg+0x58>)
 8004a48:	480b      	ldr	r0, [pc, #44]	; (8004a78 <dhcp_delete_msg+0x54>)
 8004a4a:	f007 f98d 	bl	800bd68 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	b933      	cbnz	r3, 8004a60 <dhcp_delete_msg+0x3c>
 8004a52:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <dhcp_delete_msg+0x4c>)
 8004a54:	f240 726f 	movw	r2, #1903	; 0x76f
 8004a58:	4909      	ldr	r1, [pc, #36]	; (8004a80 <dhcp_delete_msg+0x5c>)
 8004a5a:	4807      	ldr	r0, [pc, #28]	; (8004a78 <dhcp_delete_msg+0x54>)
 8004a5c:	f007 f984 	bl	800bd68 <iprintf>
  if (dhcp->p_out != NULL) {
 8004a60:	68e0      	ldr	r0, [r4, #12]
 8004a62:	b108      	cbz	r0, 8004a68 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 8004a64:	f002 fbcc 	bl	8007200 <pbuf_free>
  dhcp->p_out = NULL;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 8004a6c:	6123      	str	r3, [r4, #16]
 8004a6e:	bd10      	pop	{r4, pc}
 8004a70:	0800ce0e 	.word	0x0800ce0e
 8004a74:	0800ccbc 	.word	0x0800ccbc
 8004a78:	0800cb76 	.word	0x0800cb76
 8004a7c:	0800ccda 	.word	0x0800ccda
 8004a80:	0800ccff 	.word	0x0800ccff

08004a84 <dhcp_discover>:
{
 8004a84:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8004a86:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004a88:	6a04      	ldr	r4, [r0, #32]
{
 8004a8a:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004a8c:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8004a8e:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff fd11 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8004a96:	2201      	movs	r2, #1
 8004a98:	4621      	mov	r1, r4
 8004a9a:	4630      	mov	r0, r6
 8004a9c:	f7ff fda4 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004aa0:	4605      	mov	r5, r0
 8004aa2:	bb78      	cbnz	r0, 8004b04 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	2139      	movs	r1, #57	; 0x39
 8004aa8:	4620      	mov	r0, r4
 8004aaa:	f7ff fd2f 	bl	800450c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004aae:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	f7ff fd09 	bl	80044c8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	2137      	movs	r1, #55	; 0x37
 8004aba:	4620      	mov	r0, r4
 8004abc:	f7ff fd26 	bl	800450c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	f7ff fd46 	bl	8004554 <dhcp_option_byte>
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7ff fd42 	bl	8004554 <dhcp_option_byte>
 8004ad0:	211c      	movs	r1, #28
 8004ad2:	4620      	mov	r0, r4
 8004ad4:	f7ff fd3e 	bl	8004554 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004ad8:	4620      	mov	r0, r4
 8004ada:	f7ff ff31 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004ade:	8aa1      	ldrh	r1, [r4, #20]
 8004ae0:	68e0      	ldr	r0, [r4, #12]
 8004ae2:	31f0      	adds	r1, #240	; 0xf0
 8004ae4:	b289      	uxth	r1, r1
 8004ae6:	f002 fcd1 	bl	800748c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004aea:	4b12      	ldr	r3, [pc, #72]	; (8004b34 <dhcp_discover+0xb0>)
 8004aec:	4812      	ldr	r0, [pc, #72]	; (8004b38 <dhcp_discover+0xb4>)
 8004aee:	9301      	str	r3, [sp, #4]
 8004af0:	2343      	movs	r3, #67	; 0x43
 8004af2:	9600      	str	r6, [sp, #0]
 8004af4:	4a11      	ldr	r2, [pc, #68]	; (8004b3c <dhcp_discover+0xb8>)
 8004af6:	68e1      	ldr	r1, [r4, #12]
 8004af8:	6800      	ldr	r0, [r0, #0]
 8004afa:	f005 fd41 	bl	800a580 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8004afe:	4620      	mov	r0, r4
 8004b00:	f7ff ff90 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004b04:	7aa3      	ldrb	r3, [r4, #10]
}
 8004b06:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004b08:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004b0a:	bf1c      	itt	ne
 8004b0c:	3301      	addne	r3, #1
 8004b0e:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8004b10:	7aa2      	ldrb	r2, [r4, #10]
 8004b12:	2a05      	cmp	r2, #5
 8004b14:	bf96      	itet	ls
 8004b16:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8004b1a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8004b1e:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004b20:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004b24:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004b28:	fb93 f3f2 	sdiv	r3, r3, r2
 8004b2c:	82e3      	strh	r3, [r4, #22]
}
 8004b2e:	b002      	add	sp, #8
 8004b30:	bd70      	pop	{r4, r5, r6, pc}
 8004b32:	bf00      	nop
 8004b34:	0800d2e0 	.word	0x0800d2e0
 8004b38:	20003dec 	.word	0x20003dec
 8004b3c:	0800d2e4 	.word	0x0800d2e4

08004b40 <dhcp_select>:
{
 8004b40:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004b42:	6a04      	ldr	r4, [r0, #32]
{
 8004b44:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8004b46:	2101      	movs	r1, #1
 8004b48:	4620      	mov	r0, r4
 8004b4a:	f7ff fcb5 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004b4e:	2203      	movs	r2, #3
 8004b50:	4621      	mov	r1, r4
 8004b52:	4630      	mov	r0, r6
 8004b54:	f7ff fd48 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004b58:	4605      	mov	r5, r0
 8004b5a:	2800      	cmp	r0, #0
 8004b5c:	d147      	bne.n	8004bee <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004b5e:	2202      	movs	r2, #2
 8004b60:	2139      	movs	r1, #57	; 0x39
 8004b62:	4620      	mov	r0, r4
 8004b64:	f7ff fcd2 	bl	800450c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004b68:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7ff fcac 	bl	80044c8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8004b70:	2204      	movs	r2, #4
 8004b72:	2132      	movs	r1, #50	; 0x32
 8004b74:	4620      	mov	r0, r4
 8004b76:	f7ff fcc9 	bl	800450c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004b7a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004b7c:	f7ff fc89 	bl	8004492 <lwip_htonl>
 8004b80:	4601      	mov	r1, r0
 8004b82:	4620      	mov	r0, r4
 8004b84:	f7ff fd02 	bl	800458c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8004b88:	2204      	movs	r2, #4
 8004b8a:	2136      	movs	r1, #54	; 0x36
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f7ff fcbd 	bl	800450c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8004b92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004b94:	f7ff fc7d 	bl	8004492 <lwip_htonl>
 8004b98:	4601      	mov	r1, r0
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff fcf6 	bl	800458c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	2137      	movs	r1, #55	; 0x37
 8004ba4:	4620      	mov	r0, r4
 8004ba6:	f7ff fcb1 	bl	800450c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004baa:	2101      	movs	r1, #1
 8004bac:	4620      	mov	r0, r4
 8004bae:	f7ff fcd1 	bl	8004554 <dhcp_option_byte>
 8004bb2:	2103      	movs	r1, #3
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	f7ff fccd 	bl	8004554 <dhcp_option_byte>
 8004bba:	211c      	movs	r1, #28
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	f7ff fcc9 	bl	8004554 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	f7ff febc 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004bc8:	8aa1      	ldrh	r1, [r4, #20]
 8004bca:	68e0      	ldr	r0, [r4, #12]
 8004bcc:	31f0      	adds	r1, #240	; 0xf0
 8004bce:	b289      	uxth	r1, r1
 8004bd0:	f002 fc5c 	bl	800748c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004bd4:	4b11      	ldr	r3, [pc, #68]	; (8004c1c <dhcp_select+0xdc>)
 8004bd6:	4812      	ldr	r0, [pc, #72]	; (8004c20 <dhcp_select+0xe0>)
 8004bd8:	9301      	str	r3, [sp, #4]
 8004bda:	2343      	movs	r3, #67	; 0x43
 8004bdc:	9600      	str	r6, [sp, #0]
 8004bde:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <dhcp_select+0xe4>)
 8004be0:	68e1      	ldr	r1, [r4, #12]
 8004be2:	6800      	ldr	r0, [r0, #0]
 8004be4:	f005 fccc 	bl	800a580 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8004be8:	4620      	mov	r0, r4
 8004bea:	f7ff ff1b 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004bee:	7aa3      	ldrb	r3, [r4, #10]
}
 8004bf0:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004bf2:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004bf4:	bf1c      	itt	ne
 8004bf6:	3301      	addne	r3, #1
 8004bf8:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8004bfa:	7aa2      	ldrb	r2, [r4, #10]
 8004bfc:	2a05      	cmp	r2, #5
 8004bfe:	bf96      	itet	ls
 8004c00:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8004c04:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8004c08:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004c0a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004c0e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004c12:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c16:	82e3      	strh	r3, [r4, #22]
}
 8004c18:	b002      	add	sp, #8
 8004c1a:	bd70      	pop	{r4, r5, r6, pc}
 8004c1c:	0800d2e0 	.word	0x0800d2e0
 8004c20:	20003dec 	.word	0x20003dec
 8004c24:	0800d2e4 	.word	0x0800d2e4

08004c28 <dhcp_reboot>:
{
 8004c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004c2a:	6a04      	ldr	r4, [r0, #32]
{
 8004c2c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8004c2e:	2103      	movs	r1, #3
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff fc41 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004c36:	2203      	movs	r2, #3
 8004c38:	4621      	mov	r1, r4
 8004c3a:	4630      	mov	r0, r6
 8004c3c:	f7ff fcd4 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004c40:	4605      	mov	r5, r0
 8004c42:	2800      	cmp	r0, #0
 8004c44:	d13a      	bne.n	8004cbc <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004c46:	2202      	movs	r2, #2
 8004c48:	2139      	movs	r1, #57	; 0x39
 8004c4a:	4620      	mov	r0, r4
 8004c4c:	f7ff fc5e 	bl	800450c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8004c50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004c54:	4620      	mov	r0, r4
 8004c56:	f7ff fc37 	bl	80044c8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8004c5a:	2204      	movs	r2, #4
 8004c5c:	2132      	movs	r1, #50	; 0x32
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f7ff fc54 	bl	800450c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004c64:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004c66:	f7ff fc14 	bl	8004492 <lwip_htonl>
 8004c6a:	4601      	mov	r1, r0
 8004c6c:	4620      	mov	r0, r4
 8004c6e:	f7ff fc8d 	bl	800458c <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004c72:	2203      	movs	r2, #3
 8004c74:	2137      	movs	r1, #55	; 0x37
 8004c76:	4620      	mov	r0, r4
 8004c78:	f7ff fc48 	bl	800450c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004c7c:	2101      	movs	r1, #1
 8004c7e:	4620      	mov	r0, r4
 8004c80:	f7ff fc68 	bl	8004554 <dhcp_option_byte>
 8004c84:	2103      	movs	r1, #3
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7ff fc64 	bl	8004554 <dhcp_option_byte>
 8004c8c:	211c      	movs	r1, #28
 8004c8e:	4620      	mov	r0, r4
 8004c90:	f7ff fc60 	bl	8004554 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004c94:	4620      	mov	r0, r4
 8004c96:	f7ff fe53 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004c9a:	8aa1      	ldrh	r1, [r4, #20]
 8004c9c:	68e0      	ldr	r0, [r4, #12]
 8004c9e:	31f0      	adds	r1, #240	; 0xf0
 8004ca0:	b289      	uxth	r1, r1
 8004ca2:	f002 fbf3 	bl	800748c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8004ca6:	4813      	ldr	r0, [pc, #76]	; (8004cf4 <dhcp_reboot+0xcc>)
 8004ca8:	9600      	str	r6, [sp, #0]
 8004caa:	2343      	movs	r3, #67	; 0x43
 8004cac:	4a12      	ldr	r2, [pc, #72]	; (8004cf8 <dhcp_reboot+0xd0>)
 8004cae:	68e1      	ldr	r1, [r4, #12]
 8004cb0:	6800      	ldr	r0, [r0, #0]
 8004cb2:	f005 fccb 	bl	800a64c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	f7ff feb4 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004cbc:	7aa3      	ldrb	r3, [r4, #10]
}
 8004cbe:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004cc0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004cc2:	bf1c      	itt	ne
 8004cc4:	3301      	addne	r3, #1
 8004cc6:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004cc8:	7aa3      	ldrb	r3, [r4, #10]
 8004cca:	2b09      	cmp	r3, #9
 8004ccc:	bf96      	itet	ls
 8004cce:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004cd2:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8004cd6:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004cda:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004cde:	bf9c      	itt	ls
 8004ce0:	00db      	lslls	r3, r3, #3
 8004ce2:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004ce4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004ce8:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cec:	82e3      	strh	r3, [r4, #22]
}
 8004cee:	b002      	add	sp, #8
 8004cf0:	bd70      	pop	{r4, r5, r6, pc}
 8004cf2:	bf00      	nop
 8004cf4:	20003dec 	.word	0x20003dec
 8004cf8:	0800d2e4 	.word	0x0800d2e4

08004cfc <dhcp_dec_pcb_refcount>:
{
 8004cfc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8004cfe:	4d0a      	ldr	r5, [pc, #40]	; (8004d28 <dhcp_dec_pcb_refcount+0x2c>)
 8004d00:	782b      	ldrb	r3, [r5, #0]
 8004d02:	b92b      	cbnz	r3, 8004d10 <dhcp_dec_pcb_refcount+0x14>
 8004d04:	4b09      	ldr	r3, [pc, #36]	; (8004d2c <dhcp_dec_pcb_refcount+0x30>)
 8004d06:	22f3      	movs	r2, #243	; 0xf3
 8004d08:	4909      	ldr	r1, [pc, #36]	; (8004d30 <dhcp_dec_pcb_refcount+0x34>)
 8004d0a:	480a      	ldr	r0, [pc, #40]	; (8004d34 <dhcp_dec_pcb_refcount+0x38>)
 8004d0c:	f007 f82c 	bl	800bd68 <iprintf>
  dhcp_pcb_refcount--;
 8004d10:	782c      	ldrb	r4, [r5, #0]
 8004d12:	3c01      	subs	r4, #1
 8004d14:	b2e4      	uxtb	r4, r4
 8004d16:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8004d18:	b924      	cbnz	r4, 8004d24 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 8004d1a:	4d07      	ldr	r5, [pc, #28]	; (8004d38 <dhcp_dec_pcb_refcount+0x3c>)
 8004d1c:	6828      	ldr	r0, [r5, #0]
 8004d1e:	f005 fcdd 	bl	800a6dc <udp_remove>
    dhcp_pcb = NULL;
 8004d22:	602c      	str	r4, [r5, #0]
 8004d24:	bd38      	pop	{r3, r4, r5, pc}
 8004d26:	bf00      	nop
 8004d28:	20003df0 	.word	0x20003df0
 8004d2c:	0800ce0e 	.word	0x0800ce0e
 8004d30:	0800cc98 	.word	0x0800cc98
 8004d34:	0800cb76 	.word	0x0800cb76
 8004d38:	20003dec 	.word	0x20003dec

08004d3c <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8004d3c:	4bad      	ldr	r3, [pc, #692]	; (8004ff4 <dhcp_recv+0x2b8>)
{
 8004d3e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8004d42:	685d      	ldr	r5, [r3, #4]
{
 8004d44:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004d46:	f8d5 9020 	ldr.w	r9, [r5, #32]
{
 8004d4a:	9201      	str	r2, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8004d4c:	f1b9 0f00 	cmp.w	r9, #0
 8004d50:	d04d      	beq.n	8004dee <dhcp_recv+0xb2>
 8004d52:	f899 3008 	ldrb.w	r3, [r9, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d046      	beq.n	8004de8 <dhcp_recv+0xac>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8004d5a:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8004d5e:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8004d60:	b133      	cbz	r3, 8004d70 <dhcp_recv+0x34>
 8004d62:	4ba5      	ldr	r3, [pc, #660]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004d64:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8004d68:	49a4      	ldr	r1, [pc, #656]	; (8004ffc <dhcp_recv+0x2c0>)
 8004d6a:	48a5      	ldr	r0, [pc, #660]	; (8005000 <dhcp_recv+0x2c4>)
 8004d6c:	f006 fffc 	bl	800bd68 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8004d70:	9b01      	ldr	r3, [sp, #4]
 8004d72:	895b      	ldrh	r3, [r3, #10]
 8004d74:	2b2b      	cmp	r3, #43	; 0x2b
 8004d76:	d937      	bls.n	8004de8 <dhcp_recv+0xac>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8004d78:	7823      	ldrb	r3, [r4, #0]
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d134      	bne.n	8004de8 <dhcp_recv+0xac>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8004d7e:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 8004d82:	f105 0229 	add.w	r2, r5, #41	; 0x29
 8004d86:	f104 011c 	add.w	r1, r4, #28
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	b2de      	uxtb	r6, r3
 8004d8e:	42b0      	cmp	r0, r6
 8004d90:	d901      	bls.n	8004d96 <dhcp_recv+0x5a>
 8004d92:	2b06      	cmp	r3, #6
 8004d94:	d121      	bne.n	8004dda <dhcp_recv+0x9e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8004d96:	6860      	ldr	r0, [r4, #4]
 8004d98:	f7ff fb7b 	bl	8004492 <lwip_htonl>
 8004d9c:	f8d9 3000 	ldr.w	r3, [r9]
 8004da0:	4298      	cmp	r0, r3
 8004da2:	d121      	bne.n	8004de8 <dhcp_recv+0xac>
  dhcp_clear_all_options(dhcp);
 8004da4:	4b97      	ldr	r3, [pc, #604]	; (8005004 <dhcp_recv+0x2c8>)
 8004da6:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 8004da8:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 8004daa:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 8004dac:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 8004dae:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8004db0:	292b      	cmp	r1, #43	; 0x2b
 8004db2:	d919      	bls.n	8004de8 <dhcp_recv+0xac>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004db4:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8004db6:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 8004dba:	9203      	str	r2, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004dbc:	6849      	ldr	r1, [r1, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8004dbe:	9302      	str	r3, [sp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004dc0:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 8004dc4:	9901      	ldr	r1, [sp, #4]
 8004dc6:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 8004dca:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 8004dcc:	8973      	ldrh	r3, [r6, #10]
 8004dce:	455b      	cmp	r3, fp
 8004dd0:	d913      	bls.n	8004dfa <dhcp_recv+0xbe>
  options = (u8_t*)q->payload;
 8004dd2:	6873      	ldr	r3, [r6, #4]
 8004dd4:	465c      	mov	r4, fp
 8004dd6:	9304      	str	r3, [sp, #16]
 8004dd8:	e0e6      	b.n	8004fa8 <dhcp_recv+0x26c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8004dda:	f812 7b01 	ldrb.w	r7, [r2], #1
 8004dde:	3301      	adds	r3, #1
 8004de0:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004de4:	42b7      	cmp	r7, r6
 8004de6:	d0d1      	beq.n	8004d8c <dhcp_recv+0x50>
    dhcp->msg_in = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 8004dee:	9801      	ldr	r0, [sp, #4]
 8004df0:	f002 fa06 	bl	8007200 <pbuf_free>
}
 8004df4:	b009      	add	sp, #36	; 0x24
 8004df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx -= q->len;
 8004dfa:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 8004dfe:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8004e02:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 8004e04:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 8004e08:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 8004e0c:	2e00      	cmp	r6, #0
 8004e0e:	d1dd      	bne.n	8004dcc <dhcp_recv+0x90>
 8004e10:	e7ea      	b.n	8004de8 <dhcp_recv+0xac>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8004e12:	6833      	ldr	r3, [r6, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	f000 8172 	beq.w	80050fe <dhcp_recv+0x3c2>
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	e0d6      	b.n	8004fce <dhcp_recv+0x292>
        offset--;
 8004e20:	3c01      	subs	r4, #1
        decode_len = len = 0;
 8004e22:	2700      	movs	r7, #0
    int decode_idx = -1;
 8004e24:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
        offset--;
 8004e28:	b2a4      	uxth	r4, r4
        decode_len = len = 0;
 8004e2a:	463b      	mov	r3, r7
 8004e2c:	3402      	adds	r4, #2
    offset += len + 2;
 8004e2e:	fa13 f484 	uxtah	r4, r3, r4
 8004e32:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 8004e34:	b347      	cbz	r7, 8004e88 <dhcp_recv+0x14c>
      u32_t value = 0;
 8004e36:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004e38:	f1b8 0f07 	cmp.w	r8, #7
      u32_t value = 0;
 8004e3c:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8004e3e:	d906      	bls.n	8004e4e <dhcp_recv+0x112>
 8004e40:	4b6d      	ldr	r3, [pc, #436]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004e42:	f240 6236 	movw	r2, #1590	; 0x636
 8004e46:	4970      	ldr	r1, [pc, #448]	; (8005008 <dhcp_recv+0x2cc>)
 8004e48:	486d      	ldr	r0, [pc, #436]	; (8005000 <dhcp_recv+0x2c4>)
 8004e4a:	f006 ff8d 	bl	800bd68 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8004e4e:	9b02      	ldr	r3, [sp, #8]
 8004e50:	f813 3008 	ldrb.w	r3, [r3, r8]
 8004e54:	b9c3      	cbnz	r3, 8004e88 <dhcp_recv+0x14c>
 8004e56:	b2ba      	uxth	r2, r7
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8004e58:	9b05      	ldr	r3, [sp, #20]
 8004e5a:	a907      	add	r1, sp, #28
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	9205      	str	r2, [sp, #20]
 8004e60:	f002 fc76 	bl	8007750 <pbuf_copy_partial>
 8004e64:	9b05      	ldr	r3, [sp, #20]
 8004e66:	4283      	cmp	r3, r0
 8004e68:	d1be      	bne.n	8004de8 <dhcp_recv+0xac>
        } else if (decode_len == 4) {
 8004e6a:	2f04      	cmp	r7, #4
 8004e6c:	f040 8088 	bne.w	8004f80 <dhcp_recv+0x244>
          value = lwip_ntohl(value);
 8004e70:	9807      	ldr	r0, [sp, #28]
 8004e72:	f7ff fb0e 	bl	8004492 <lwip_htonl>
 8004e76:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 8004e78:	2301      	movs	r3, #1
 8004e7a:	9a02      	ldr	r2, [sp, #8]
 8004e7c:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8004e80:	9b07      	ldr	r3, [sp, #28]
 8004e82:	4a62      	ldr	r2, [pc, #392]	; (800500c <dhcp_recv+0x2d0>)
 8004e84:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    if (offset >= q->len) {
 8004e88:	8973      	ldrh	r3, [r6, #10]
 8004e8a:	42a3      	cmp	r3, r4
 8004e8c:	f200 808c 	bhi.w	8004fa8 <dhcp_recv+0x26c>
      offset -= q->len;
 8004e90:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8004e92:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8004e96:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8004e98:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 8004e9c:	4554      	cmp	r4, sl
 8004e9e:	d37a      	bcc.n	8004f96 <dhcp_recv+0x25a>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8004ea0:	9b02      	ldr	r3, [sp, #8]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f040 80bf 	bne.w	8005028 <dhcp_recv+0x2ec>
  } else if (parse_sname_as_options) {
 8004eaa:	9b03      	ldr	r3, [sp, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f040 80c4 	bne.w	800503a <dhcp_recv+0x2fe>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8004eb2:	9b02      	ldr	r3, [sp, #8]
 8004eb4:	785b      	ldrb	r3, [r3, #1]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d096      	beq.n	8004de8 <dhcp_recv+0xac>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8004eba:	4a54      	ldr	r2, [pc, #336]	; (800500c <dhcp_recv+0x2d0>)
 8004ebc:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8004ebe:	2b05      	cmp	r3, #5
 8004ec0:	f040 80d7 	bne.w	8005072 <dhcp_recv+0x336>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8004ec4:	f899 3009 	ldrb.w	r3, [r9, #9]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	f040 80c7 	bne.w	800505c <dhcp_recv+0x320>
      dhcp_handle_ack(netif);
 8004ece:	6a28      	ldr	r0, [r5, #32]
 8004ed0:	f7ff fd72 	bl	80049b8 <dhcp_handle_ack.isra.1>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004ed4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
        dhcp_check(netif);
 8004ed8:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004eda:	071b      	lsls	r3, r3, #28
 8004edc:	f140 80c6 	bpl.w	800506c <dhcp_recv+0x330>
        dhcp_check(netif);
 8004ee0:	f7ff fc5e 	bl	80047a0 <dhcp_check>
 8004ee4:	e780      	b.n	8004de8 <dhcp_recv+0xac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d02f      	beq.n	8004f4a <dhcp_recv+0x20e>
 8004eea:	4b43      	ldr	r3, [pc, #268]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004eec:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ef0:	4947      	ldr	r1, [pc, #284]	; (8005010 <dhcp_recv+0x2d4>)
 8004ef2:	e005      	b.n	8004f00 <dhcp_recv+0x1c4>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8004ef4:	2b03      	cmp	r3, #3
 8004ef6:	d82c      	bhi.n	8004f52 <dhcp_recv+0x216>
 8004ef8:	4b3f      	ldr	r3, [pc, #252]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004efa:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8004efe:	4945      	ldr	r1, [pc, #276]	; (8005014 <dhcp_recv+0x2d8>)
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004f00:	483f      	ldr	r0, [pc, #252]	; (8005000 <dhcp_recv+0x2c4>)
 8004f02:	f006 ff31 	bl	800bd68 <iprintf>
 8004f06:	e76f      	b.n	8004de8 <dhcp_recv+0xac>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d004      	beq.n	8004f16 <dhcp_recv+0x1da>
 8004f0c:	4b3a      	ldr	r3, [pc, #232]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f0e:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004f12:	4941      	ldr	r1, [pc, #260]	; (8005018 <dhcp_recv+0x2dc>)
 8004f14:	e7f4      	b.n	8004f00 <dhcp_recv+0x1c4>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004f16:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8004f1a:	d022      	beq.n	8004f62 <dhcp_recv+0x226>
 8004f1c:	4b36      	ldr	r3, [pc, #216]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f1e:	f240 6219 	movw	r2, #1561	; 0x619
 8004f22:	493e      	ldr	r1, [pc, #248]	; (800501c <dhcp_recv+0x2e0>)
 8004f24:	e7ec      	b.n	8004f00 <dhcp_recv+0x1c4>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	d023      	beq.n	8004f72 <dhcp_recv+0x236>
 8004f2a:	4b33      	ldr	r3, [pc, #204]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f2c:	f240 621d 	movw	r2, #1565	; 0x61d
 8004f30:	e7ef      	b.n	8004f12 <dhcp_recv+0x1d6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f32:	2b04      	cmp	r3, #4
 8004f34:	d019      	beq.n	8004f6a <dhcp_recv+0x22e>
 8004f36:	4b30      	ldr	r3, [pc, #192]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f38:	f240 6221 	movw	r2, #1569	; 0x621
 8004f3c:	e7d8      	b.n	8004ef0 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d017      	beq.n	8004f72 <dhcp_recv+0x236>
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f44:	f240 6225 	movw	r2, #1573	; 0x625
 8004f48:	e7d2      	b.n	8004ef0 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f4a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8004f4c:	f04f 0806 	mov.w	r8, #6
 8004f50:	e76c      	b.n	8004e2c <dhcp_recv+0xf0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8004f52:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8004f56:	2704      	movs	r7, #4
 8004f58:	e768      	b.n	8004e2c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f5a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8004f5c:	f04f 0803 	mov.w	r8, #3
 8004f60:	e764      	b.n	8004e2c <dhcp_recv+0xf0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004f62:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8004f64:	f04f 0800 	mov.w	r8, #0
 8004f68:	e760      	b.n	8004e2c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f6a:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8004f6c:	f04f 0802 	mov.w	r8, #2
 8004f70:	e75c      	b.n	8004e2c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f72:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8004f74:	4698      	mov	r8, r3
 8004f76:	e759      	b.n	8004e2c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004f78:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8004f7a:	f04f 0805 	mov.w	r8, #5
 8004f7e:	e755      	b.n	8004e2c <dhcp_recv+0xf0>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8004f80:	2f01      	cmp	r7, #1
 8004f82:	d004      	beq.n	8004f8e <dhcp_recv+0x252>
 8004f84:	4b1c      	ldr	r3, [pc, #112]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f86:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8004f8a:	4925      	ldr	r1, [pc, #148]	; (8005020 <dhcp_recv+0x2e4>)
 8004f8c:	e7b8      	b.n	8004f00 <dhcp_recv+0x1c4>
          value = ((u8_t*)&value)[0];
 8004f8e:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004f92:	9307      	str	r3, [sp, #28]
 8004f94:	e770      	b.n	8004e78 <dhcp_recv+0x13c>
        q = q->next;
 8004f96:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004f98:	b926      	cbnz	r6, 8004fa4 <dhcp_recv+0x268>
 8004f9a:	4b17      	ldr	r3, [pc, #92]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004f9c:	f240 6254 	movw	r2, #1620	; 0x654
 8004fa0:	4920      	ldr	r1, [pc, #128]	; (8005024 <dhcp_recv+0x2e8>)
 8004fa2:	e7ad      	b.n	8004f00 <dhcp_recv+0x1c4>
        options = (u8_t*)q->payload;
 8004fa4:	6873      	ldr	r3, [r6, #4]
 8004fa6:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8004fa8:	4554      	cmp	r4, sl
 8004faa:	f4bf af79 	bcs.w	8004ea0 <dhcp_recv+0x164>
 8004fae:	9b04      	ldr	r3, [sp, #16]
 8004fb0:	5d1a      	ldrb	r2, [r3, r4]
 8004fb2:	2aff      	cmp	r2, #255	; 0xff
 8004fb4:	f43f af74 	beq.w	8004ea0 <dhcp_recv+0x164>
    u16_t val_offset = offset + 2;
 8004fb8:	1ca3      	adds	r3, r4, #2
    if ((offset + 1) < q->len) {
 8004fba:	8971      	ldrh	r1, [r6, #10]
    u16_t val_offset = offset + 2;
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	9305      	str	r3, [sp, #20]
    if ((offset + 1) < q->len) {
 8004fc0:	1c63      	adds	r3, r4, #1
 8004fc2:	428b      	cmp	r3, r1
 8004fc4:	f6bf af25 	bge.w	8004e12 <dhcp_recv+0xd6>
      len = options[offset + 1];
 8004fc8:	9b04      	ldr	r3, [sp, #16]
 8004fca:	4423      	add	r3, r4
 8004fcc:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8004fce:	2a34      	cmp	r2, #52	; 0x34
 8004fd0:	d09a      	beq.n	8004f08 <dhcp_recv+0x1cc>
 8004fd2:	f200 8083 	bhi.w	80050dc <dhcp_recv+0x3a0>
 8004fd6:	2a01      	cmp	r2, #1
 8004fd8:	d085      	beq.n	8004ee6 <dhcp_recv+0x1aa>
 8004fda:	f4ff af21 	bcc.w	8004e20 <dhcp_recv+0xe4>
 8004fde:	2a03      	cmp	r2, #3
 8004fe0:	d088      	beq.n	8004ef4 <dhcp_recv+0x1b8>
 8004fe2:	2a33      	cmp	r2, #51	; 0x33
 8004fe4:	f040 809b 	bne.w	800511e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d0b6      	beq.n	8004f5a <dhcp_recv+0x21e>
 8004fec:	4b02      	ldr	r3, [pc, #8]	; (8004ff8 <dhcp_recv+0x2bc>)
 8004fee:	f240 6209 	movw	r2, #1545	; 0x609
 8004ff2:	e77d      	b.n	8004ef0 <dhcp_recv+0x1b4>
 8004ff4:	20003fa0 	.word	0x20003fa0
 8004ff8:	0800ce0e 	.word	0x0800ce0e
 8004ffc:	0800cf11 	.word	0x0800cf11
 8005000:	0800cb76 	.word	0x0800cb76
 8005004:	20003fb8 	.word	0x20003fb8
 8005008:	0800cf5f 	.word	0x0800cf5f
 800500c:	20003fc0 	.word	0x20003fc0
 8005010:	0800cf24 	.word	0x0800cf24
 8005014:	0800cf2d 	.word	0x0800cf2d
 8005018:	0800cf3f 	.word	0x0800cf3f
 800501c:	0800cf48 	.word	0x0800cf48
 8005020:	0800cf70 	.word	0x0800cf70
 8005024:	0800cf83 	.word	0x0800cf83
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8005028:	4b44      	ldr	r3, [pc, #272]	; (800513c <dhcp_recv+0x400>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800502a:	2200      	movs	r2, #0
 800502c:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800502e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8005030:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8005032:	2b01      	cmp	r3, #1
 8005034:	d00d      	beq.n	8005052 <dhcp_recv+0x316>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8005036:	2b02      	cmp	r3, #2
 8005038:	d106      	bne.n	8005048 <dhcp_recv+0x30c>
    parse_sname_as_options = 0;
 800503a:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800503c:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8005040:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8005044:	9303      	str	r3, [sp, #12]
 8005046:	e6c0      	b.n	8004dca <dhcp_recv+0x8e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8005048:	2b03      	cmp	r3, #3
 800504a:	f47f af2e 	bne.w	8004eaa <dhcp_recv+0x16e>
      parse_sname_as_options = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8005052:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8005056:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 800505a:	e6b6      	b.n	8004dca <dhcp_recv+0x8e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800505c:	3b03      	subs	r3, #3
 800505e:	2b02      	cmp	r3, #2
 8005060:	f63f aec2 	bhi.w	8004de8 <dhcp_recv+0xac>
      dhcp_handle_ack(netif);
 8005064:	6a28      	ldr	r0, [r5, #32]
 8005066:	f7ff fca7 	bl	80049b8 <dhcp_handle_ack.isra.1>
      dhcp_bind(netif);
 800506a:	4628      	mov	r0, r5
 800506c:	f7ff fbae 	bl	80047cc <dhcp_bind>
 8005070:	e6ba      	b.n	8004de8 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_NAK) &&
 8005072:	2b06      	cmp	r3, #6
 8005074:	d115      	bne.n	80050a2 <dhcp_recv+0x366>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8005076:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 800507a:	1eda      	subs	r2, r3, #3
 800507c:	2a02      	cmp	r2, #2
 800507e:	d902      	bls.n	8005086 <dhcp_recv+0x34a>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8005080:	2b01      	cmp	r3, #1
 8005082:	f47f aeb1 	bne.w	8004de8 <dhcp_recv+0xac>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8005086:	6a28      	ldr	r0, [r5, #32]
 8005088:	210c      	movs	r1, #12
 800508a:	f7ff fa15 	bl	80044b8 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800508e:	4b2c      	ldr	r3, [pc, #176]	; (8005140 <dhcp_recv+0x404>)
 8005090:	4628      	mov	r0, r5
 8005092:	461a      	mov	r2, r3
 8005094:	4619      	mov	r1, r3
 8005096:	f001 ff73 	bl	8006f80 <netif_set_addr>
  dhcp_discover(netif);
 800509a:	4628      	mov	r0, r5
 800509c:	f7ff fcf2 	bl	8004a84 <dhcp_discover>
 80050a0:	e6a2      	b.n	8004de8 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	f47f aea0 	bne.w	8004de8 <dhcp_recv+0xac>
 80050a8:	f899 3009 	ldrb.w	r3, [r9, #9]
 80050ac:	2b06      	cmp	r3, #6
 80050ae:	f47f ae9b 	bne.w	8004de8 <dhcp_recv+0xac>
    dhcp->request_timeout = 0;
 80050b2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80050b6:	6a2c      	ldr	r4, [r5, #32]
    dhcp->request_timeout = 0;
 80050b8:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80050bc:	9b02      	ldr	r3, [sp, #8]
 80050be:	789b      	ldrb	r3, [r3, #2]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f43f ae91 	beq.w	8004de8 <dhcp_recv+0xac>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80050c6:	6890      	ldr	r0, [r2, #8]
 80050c8:	f7ff f9e3 	bl	8004492 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80050cc:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80050ce:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 80050d0:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 80050d6:	f7ff fd33 	bl	8004b40 <dhcp_select>
 80050da:	e685      	b.n	8004de8 <dhcp_recv+0xac>
    switch(op) {
 80050dc:	2a36      	cmp	r2, #54	; 0x36
 80050de:	f43f af28 	beq.w	8004f32 <dhcp_recv+0x1f6>
 80050e2:	f4ff af20 	bcc.w	8004f26 <dhcp_recv+0x1ea>
 80050e6:	2a3a      	cmp	r2, #58	; 0x3a
 80050e8:	f43f af29 	beq.w	8004f3e <dhcp_recv+0x202>
 80050ec:	2a3b      	cmp	r2, #59	; 0x3b
 80050ee:	d116      	bne.n	800511e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	f43f af41 	beq.w	8004f78 <dhcp_recv+0x23c>
 80050f6:	4b13      	ldr	r3, [pc, #76]	; (8005144 <dhcp_recv+0x408>)
 80050f8:	f240 6229 	movw	r2, #1577	; 0x629
 80050fc:	e6f8      	b.n	8004ef0 <dhcp_recv+0x1b4>
    switch(op) {
 80050fe:	2a34      	cmp	r2, #52	; 0x34
 8005100:	f43f af04 	beq.w	8004f0c <dhcp_recv+0x1d0>
 8005104:	d80f      	bhi.n	8005126 <dhcp_recv+0x3ea>
 8005106:	2a01      	cmp	r2, #1
 8005108:	f43f aeef 	beq.w	8004eea <dhcp_recv+0x1ae>
 800510c:	f4ff ae88 	bcc.w	8004e20 <dhcp_recv+0xe4>
 8005110:	2a03      	cmp	r2, #3
 8005112:	f43f aef1 	beq.w	8004ef8 <dhcp_recv+0x1bc>
 8005116:	2a33      	cmp	r2, #51	; 0x33
 8005118:	f43f af68 	beq.w	8004fec <dhcp_recv+0x2b0>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 800511c:	2300      	movs	r3, #0
    offset += len + 2;
 800511e:	9a05      	ldr	r2, [sp, #20]
 8005120:	441a      	add	r2, r3
 8005122:	b294      	uxth	r4, r2
 8005124:	e6b0      	b.n	8004e88 <dhcp_recv+0x14c>
    switch(op) {
 8005126:	2a36      	cmp	r2, #54	; 0x36
 8005128:	f43f af05 	beq.w	8004f36 <dhcp_recv+0x1fa>
 800512c:	f4ff aefd 	bcc.w	8004f2a <dhcp_recv+0x1ee>
 8005130:	2a3a      	cmp	r2, #58	; 0x3a
 8005132:	f43f af06 	beq.w	8004f42 <dhcp_recv+0x206>
 8005136:	2a3b      	cmp	r2, #59	; 0x3b
 8005138:	d0dd      	beq.n	80050f6 <dhcp_recv+0x3ba>
 800513a:	e7ef      	b.n	800511c <dhcp_recv+0x3e0>
 800513c:	20003fc0 	.word	0x20003fc0
 8005140:	0800d2e0 	.word	0x0800d2e0
 8005144:	0800ce0e 	.word	0x0800ce0e

08005148 <dhcp_arp_reply>:
{
 8005148:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800514a:	4605      	mov	r5, r0
 800514c:	b948      	cbnz	r0, 8005162 <dhcp_arp_reply+0x1a>
 800514e:	4b24      	ldr	r3, [pc, #144]	; (80051e0 <dhcp_arp_reply+0x98>)
 8005150:	f240 327b 	movw	r2, #891	; 0x37b
 8005154:	4923      	ldr	r1, [pc, #140]	; (80051e4 <dhcp_arp_reply+0x9c>)
 8005156:	4824      	ldr	r0, [pc, #144]	; (80051e8 <dhcp_arp_reply+0xa0>)
}
 8005158:	b003      	add	sp, #12
 800515a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800515e:	f006 be03 	b.w	800bd68 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8005162:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8005164:	2c00      	cmp	r4, #0
 8005166:	d039      	beq.n	80051dc <dhcp_arp_reply+0x94>
 8005168:	7a63      	ldrb	r3, [r4, #9]
 800516a:	2b08      	cmp	r3, #8
 800516c:	d136      	bne.n	80051dc <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800516e:	680a      	ldr	r2, [r1, #0]
 8005170:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005172:	429a      	cmp	r2, r3
 8005174:	d132      	bne.n	80051dc <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8005176:	210c      	movs	r1, #12
 8005178:	4620      	mov	r0, r4
 800517a:	f7ff f99d 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 800517e:	2204      	movs	r2, #4
 8005180:	4621      	mov	r1, r4
 8005182:	4628      	mov	r0, r5
 8005184:	f7ff fa30 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8005188:	bb08      	cbnz	r0, 80051ce <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 800518a:	2204      	movs	r2, #4
 800518c:	2132      	movs	r1, #50	; 0x32
 800518e:	4620      	mov	r0, r4
 8005190:	f7ff f9bc 	bl	800450c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8005194:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005196:	f7ff f97c 	bl	8004492 <lwip_htonl>
 800519a:	4601      	mov	r1, r0
 800519c:	4620      	mov	r0, r4
 800519e:	f7ff f9f5 	bl	800458c <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff fbcc 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80051a8:	8aa1      	ldrh	r1, [r4, #20]
 80051aa:	68e0      	ldr	r0, [r4, #12]
 80051ac:	31f0      	adds	r1, #240	; 0xf0
 80051ae:	b289      	uxth	r1, r1
 80051b0:	f002 f96c 	bl	800748c <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80051b4:	4b0d      	ldr	r3, [pc, #52]	; (80051ec <dhcp_arp_reply+0xa4>)
 80051b6:	480e      	ldr	r0, [pc, #56]	; (80051f0 <dhcp_arp_reply+0xa8>)
 80051b8:	9301      	str	r3, [sp, #4]
 80051ba:	2343      	movs	r3, #67	; 0x43
 80051bc:	9500      	str	r5, [sp, #0]
 80051be:	4a0d      	ldr	r2, [pc, #52]	; (80051f4 <dhcp_arp_reply+0xac>)
 80051c0:	68e1      	ldr	r1, [r4, #12]
 80051c2:	6800      	ldr	r0, [r0, #0]
 80051c4:	f005 f9dc 	bl	800a580 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80051c8:	4620      	mov	r0, r4
 80051ca:	f7ff fc2b 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80051ce:	7aa3      	ldrb	r3, [r4, #10]
 80051d0:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80051d2:	bf1c      	itt	ne
 80051d4:	3301      	addne	r3, #1
 80051d6:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80051d8:	2314      	movs	r3, #20
 80051da:	82e3      	strh	r3, [r4, #22]
}
 80051dc:	b003      	add	sp, #12
 80051de:	bd30      	pop	{r4, r5, pc}
 80051e0:	0800ce0e 	.word	0x0800ce0e
 80051e4:	0800cba9 	.word	0x0800cba9
 80051e8:	0800cb76 	.word	0x0800cb76
 80051ec:	0800d2e0 	.word	0x0800d2e0
 80051f0:	20003dec 	.word	0x20003dec
 80051f4:	0800d2e4 	.word	0x0800d2e4

080051f8 <dhcp_renew>:
{
 80051f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80051fa:	6a04      	ldr	r4, [r0, #32]
{
 80051fc:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80051fe:	2105      	movs	r1, #5
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff f959 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8005206:	2203      	movs	r2, #3
 8005208:	4621      	mov	r1, r4
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff f9ec 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 8005210:	4605      	mov	r5, r0
 8005212:	bb70      	cbnz	r0, 8005272 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005214:	2202      	movs	r2, #2
 8005216:	2139      	movs	r1, #57	; 0x39
 8005218:	4620      	mov	r0, r4
 800521a:	f7ff f977 	bl	800450c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800521e:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8005220:	4620      	mov	r0, r4
 8005222:	f7ff f951 	bl	80044c8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005226:	2203      	movs	r2, #3
 8005228:	2137      	movs	r1, #55	; 0x37
 800522a:	4620      	mov	r0, r4
 800522c:	f7ff f96e 	bl	800450c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8005230:	2101      	movs	r1, #1
 8005232:	4620      	mov	r0, r4
 8005234:	f7ff f98e 	bl	8004554 <dhcp_option_byte>
 8005238:	2103      	movs	r1, #3
 800523a:	4620      	mov	r0, r4
 800523c:	f7ff f98a 	bl	8004554 <dhcp_option_byte>
 8005240:	211c      	movs	r1, #28
 8005242:	4620      	mov	r0, r4
 8005244:	f7ff f986 	bl	8004554 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8005248:	4620      	mov	r0, r4
 800524a:	f7ff fb79 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800524e:	8aa1      	ldrh	r1, [r4, #20]
 8005250:	68e0      	ldr	r0, [r4, #12]
 8005252:	31f0      	adds	r1, #240	; 0xf0
 8005254:	b289      	uxth	r1, r1
 8005256:	f002 f919 	bl	800748c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 800525a:	4813      	ldr	r0, [pc, #76]	; (80052a8 <dhcp_renew+0xb0>)
 800525c:	9600      	str	r6, [sp, #0]
 800525e:	2343      	movs	r3, #67	; 0x43
 8005260:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8005264:	68e1      	ldr	r1, [r4, #12]
 8005266:	6800      	ldr	r0, [r0, #0]
 8005268:	f005 f9f0 	bl	800a64c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800526c:	4620      	mov	r0, r4
 800526e:	f7ff fbd9 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8005272:	7aa3      	ldrb	r3, [r4, #10]
}
 8005274:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8005276:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8005278:	bf1c      	itt	ne
 800527a:	3301      	addne	r3, #1
 800527c:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 800527e:	7aa3      	ldrb	r3, [r4, #10]
 8005280:	2b09      	cmp	r3, #9
 8005282:	bf96      	itet	ls
 8005284:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8005288:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 800528c:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005290:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8005294:	bf9c      	itt	ls
 8005296:	011b      	lslls	r3, r3, #4
 8005298:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800529a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800529e:	fb93 f3f2 	sdiv	r3, r3, r2
 80052a2:	82e3      	strh	r3, [r4, #22]
}
 80052a4:	b002      	add	sp, #8
 80052a6:	bd70      	pop	{r4, r5, r6, pc}
 80052a8:	20003dec 	.word	0x20003dec

080052ac <dhcp_stop>:
{
 80052ac:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80052ae:	b940      	cbnz	r0, 80052c2 <dhcp_stop+0x16>
 80052b0:	4b0f      	ldr	r3, [pc, #60]	; (80052f0 <dhcp_stop+0x44>)
 80052b2:	f240 5242 	movw	r2, #1346	; 0x542
 80052b6:	490f      	ldr	r1, [pc, #60]	; (80052f4 <dhcp_stop+0x48>)
 80052b8:	480f      	ldr	r0, [pc, #60]	; (80052f8 <dhcp_stop+0x4c>)
}
 80052ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 80052be:	f006 bd53 	b.w	800bd68 <iprintf>
  dhcp = netif_dhcp_data(netif);
 80052c2:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 80052c4:	b194      	cbz	r4, 80052ec <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80052c6:	6863      	ldr	r3, [r4, #4]
 80052c8:	b133      	cbz	r3, 80052d8 <dhcp_stop+0x2c>
 80052ca:	4b09      	ldr	r3, [pc, #36]	; (80052f0 <dhcp_stop+0x44>)
 80052cc:	f240 524f 	movw	r2, #1359	; 0x54f
 80052d0:	490a      	ldr	r1, [pc, #40]	; (80052fc <dhcp_stop+0x50>)
 80052d2:	4809      	ldr	r0, [pc, #36]	; (80052f8 <dhcp_stop+0x4c>)
 80052d4:	f006 fd48 	bl	800bd68 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80052d8:	2100      	movs	r1, #0
 80052da:	4620      	mov	r0, r4
 80052dc:	f7ff f8ec 	bl	80044b8 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 80052e0:	7a23      	ldrb	r3, [r4, #8]
 80052e2:	b11b      	cbz	r3, 80052ec <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80052e4:	f7ff fd0a 	bl	8004cfc <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 80052e8:	2300      	movs	r3, #0
 80052ea:	7223      	strb	r3, [r4, #8]
 80052ec:	bd10      	pop	{r4, pc}
 80052ee:	bf00      	nop
 80052f0:	0800ce0e 	.word	0x0800ce0e
 80052f4:	0800cff3 	.word	0x0800cff3
 80052f8:	0800cb76 	.word	0x0800cb76
 80052fc:	0800cf11 	.word	0x0800cf11

08005300 <dhcp_start>:
{
 8005300:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8005302:	4605      	mov	r5, r0
 8005304:	b948      	cbnz	r0, 800531a <dhcp_start+0x1a>
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <dhcp_start+0xa4>)
 8005308:	f240 22d6 	movw	r2, #726	; 0x2d6
 800530c:	4926      	ldr	r1, [pc, #152]	; (80053a8 <dhcp_start+0xa8>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800530e:	4827      	ldr	r0, [pc, #156]	; (80053ac <dhcp_start+0xac>)
 8005310:	f006 fd2a 	bl	800bd68 <iprintf>
 8005314:	f06f 000f 	mvn.w	r0, #15
 8005318:	bd38      	pop	{r3, r4, r5, pc}
 800531a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 800531e:	07db      	lsls	r3, r3, #31
 8005320:	d404      	bmi.n	800532c <dhcp_start+0x2c>
 8005322:	4b20      	ldr	r3, [pc, #128]	; (80053a4 <dhcp_start+0xa4>)
 8005324:	f240 22d7 	movw	r2, #727	; 0x2d7
 8005328:	4921      	ldr	r1, [pc, #132]	; (80053b0 <dhcp_start+0xb0>)
 800532a:	e7f0      	b.n	800530e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800532c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 800532e:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8005330:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8005334:	d202      	bcs.n	800533c <dhcp_start+0x3c>
    return ERR_MEM;
 8005336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800533a:	bd38      	pop	{r3, r4, r5, pc}
  if (dhcp == NULL) {
 800533c:	b9d4      	cbnz	r4, 8005374 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800533e:	2040      	movs	r0, #64	; 0x40
 8005340:	f001 fcc2 	bl	8006cc8 <mem_malloc>
    if (dhcp == NULL) {
 8005344:	4604      	mov	r4, r0
 8005346:	2800      	cmp	r0, #0
 8005348:	d0f5      	beq.n	8005336 <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800534a:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 800534c:	2240      	movs	r2, #64	; 0x40
 800534e:	2100      	movs	r1, #0
 8005350:	4620      	mov	r0, r4
 8005352:	f006 fc55 	bl	800bc00 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8005356:	f7ff fab9 	bl	80048cc <dhcp_inc_pcb_refcount>
 800535a:	2800      	cmp	r0, #0
 800535c:	d1eb      	bne.n	8005336 <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 800535e:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 8005360:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 8005362:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 8005364:	f7ff fb8e 	bl	8004a84 <dhcp_discover>
  if (result != ERR_OK) {
 8005368:	2800      	cmp	r0, #0
 800536a:	d0e6      	beq.n	800533a <dhcp_start+0x3a>
    dhcp_stop(netif);
 800536c:	4628      	mov	r0, r5
 800536e:	f7ff ff9d 	bl	80052ac <dhcp_stop>
 8005372:	e7e0      	b.n	8005336 <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8005374:	68e3      	ldr	r3, [r4, #12]
 8005376:	b133      	cbz	r3, 8005386 <dhcp_start+0x86>
 8005378:	4b0a      	ldr	r3, [pc, #40]	; (80053a4 <dhcp_start+0xa4>)
 800537a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 800537e:	490d      	ldr	r1, [pc, #52]	; (80053b4 <dhcp_start+0xb4>)
 8005380:	480a      	ldr	r0, [pc, #40]	; (80053ac <dhcp_start+0xac>)
 8005382:	f006 fcf1 	bl	800bd68 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8005386:	6863      	ldr	r3, [r4, #4]
 8005388:	b133      	cbz	r3, 8005398 <dhcp_start+0x98>
 800538a:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <dhcp_start+0xa4>)
 800538c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005390:	4909      	ldr	r1, [pc, #36]	; (80053b8 <dhcp_start+0xb8>)
 8005392:	4806      	ldr	r0, [pc, #24]	; (80053ac <dhcp_start+0xac>)
 8005394:	f006 fce8 	bl	800bd68 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 8005398:	7a23      	ldrb	r3, [r4, #8]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d0d6      	beq.n	800534c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800539e:	f7ff fcad 	bl	8004cfc <dhcp_dec_pcb_refcount>
 80053a2:	e7d3      	b.n	800534c <dhcp_start+0x4c>
 80053a4:	0800ce0e 	.word	0x0800ce0e
 80053a8:	0800cba9 	.word	0x0800cba9
 80053ac:	0800cb76 	.word	0x0800cb76
 80053b0:	0800cfba 	.word	0x0800cfba
 80053b4:	0800cfdb 	.word	0x0800cfdb
 80053b8:	0800cf11 	.word	0x0800cf11

080053bc <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80053bc:	b158      	cbz	r0, 80053d6 <dhcp_supplied_address+0x1a>
 80053be:	6a00      	ldr	r0, [r0, #32]
 80053c0:	b148      	cbz	r0, 80053d6 <dhcp_supplied_address+0x1a>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80053c2:	7a40      	ldrb	r0, [r0, #9]
 80053c4:	280a      	cmp	r0, #10
 80053c6:	d005      	beq.n	80053d4 <dhcp_supplied_address+0x18>
 80053c8:	3804      	subs	r0, #4
 80053ca:	2801      	cmp	r0, #1
 80053cc:	bf8c      	ite	hi
 80053ce:	2000      	movhi	r0, #0
 80053d0:	2001      	movls	r0, #1
 80053d2:	4770      	bx	lr
 80053d4:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 80053d6:	4770      	bx	lr

080053d8 <dhcp_release>:
{
 80053d8:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80053da:	6a04      	ldr	r4, [r0, #32]
{
 80053dc:	b085      	sub	sp, #20
 80053de:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 80053e0:	2c00      	cmp	r4, #0
 80053e2:	d047      	beq.n	8005474 <dhcp_release+0x9c>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80053e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053e6:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80053e8:	f7ff ffe8 	bl	80053bc <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80053ec:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 80053ee:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80053f0:	4620      	mov	r0, r4
 80053f2:	f7ff f861 	bl	80044b8 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80053f6:	2300      	movs	r3, #0
 80053f8:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80053fa:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80053fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80053fe:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8005400:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005402:	63a3      	str	r3, [r4, #56]	; 0x38
 8005404:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8005406:	8463      	strh	r3, [r4, #34]	; 0x22
 8005408:	8423      	strh	r3, [r4, #32]
 800540a:	83e3      	strh	r3, [r4, #30]
 800540c:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 800540e:	b375      	cbz	r5, 800546e <dhcp_release+0x96>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8005410:	2207      	movs	r2, #7
 8005412:	4621      	mov	r1, r4
 8005414:	4630      	mov	r0, r6
 8005416:	f7ff f8e7 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 800541a:	4605      	mov	r5, r0
 800541c:	bb08      	cbnz	r0, 8005462 <dhcp_release+0x8a>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800541e:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8005420:	2204      	movs	r2, #4
 8005422:	2136      	movs	r1, #54	; 0x36
 8005424:	4620      	mov	r0, r4
 8005426:	f7ff f871 	bl	800450c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800542a:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 800542e:	f7ff f830 	bl	8004492 <lwip_htonl>
 8005432:	4601      	mov	r1, r0
 8005434:	4620      	mov	r0, r4
 8005436:	f7ff f8a9 	bl	800458c <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 800543a:	4620      	mov	r0, r4
 800543c:	f7ff fa80 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8005440:	8aa1      	ldrh	r1, [r4, #20]
 8005442:	68e0      	ldr	r0, [r4, #12]
 8005444:	31f0      	adds	r1, #240	; 0xf0
 8005446:	b289      	uxth	r1, r1
 8005448:	f002 f820 	bl	800748c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 800544c:	480b      	ldr	r0, [pc, #44]	; (800547c <dhcp_release+0xa4>)
 800544e:	9600      	str	r6, [sp, #0]
 8005450:	2343      	movs	r3, #67	; 0x43
 8005452:	463a      	mov	r2, r7
 8005454:	68e1      	ldr	r1, [r4, #12]
 8005456:	6800      	ldr	r0, [r0, #0]
 8005458:	f005 f8f8 	bl	800a64c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 800545c:	4620      	mov	r0, r4
 800545e:	f7ff fae1 	bl	8004a24 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8005462:	4b07      	ldr	r3, [pc, #28]	; (8005480 <dhcp_release+0xa8>)
 8005464:	4630      	mov	r0, r6
 8005466:	461a      	mov	r2, r3
 8005468:	4619      	mov	r1, r3
 800546a:	f001 fd89 	bl	8006f80 <netif_set_addr>
}
 800546e:	4628      	mov	r0, r5
 8005470:	b005      	add	sp, #20
 8005472:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8005474:	f06f 050f 	mvn.w	r5, #15
 8005478:	e7f9      	b.n	800546e <dhcp_release+0x96>
 800547a:	bf00      	nop
 800547c:	20003dec 	.word	0x20003dec
 8005480:	0800d2e0 	.word	0x0800d2e0

08005484 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 8005484:	4b51      	ldr	r3, [pc, #324]	; (80055cc <dhcp_coarse_tmr+0x148>)
{
 8005486:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 800548a:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800548c:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8005490:	4f4f      	ldr	r7, [pc, #316]	; (80055d0 <dhcp_coarse_tmr+0x14c>)
 8005492:	f8df 8140 	ldr.w	r8, [pc, #320]	; 80055d4 <dhcp_coarse_tmr+0x150>
  while (netif != NULL) {
 8005496:	b915      	cbnz	r5, 800549e <dhcp_coarse_tmr+0x1a>
}
 8005498:	b003      	add	sp, #12
 800549a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800549e:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80054a0:	b17c      	cbz	r4, 80054c2 <dhcp_coarse_tmr+0x3e>
 80054a2:	7a63      	ldrb	r3, [r4, #9]
 80054a4:	b16b      	cbz	r3, 80054c2 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80054a6:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 80054a8:	b169      	cbz	r1, 80054c6 <dhcp_coarse_tmr+0x42>
 80054aa:	8c22      	ldrh	r2, [r4, #32]
 80054ac:	3201      	adds	r2, #1
 80054ae:	b292      	uxth	r2, r2
 80054b0:	4291      	cmp	r1, r2
 80054b2:	8422      	strh	r2, [r4, #32]
 80054b4:	d107      	bne.n	80054c6 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 80054b6:	4628      	mov	r0, r5
 80054b8:	f7ff ff8e 	bl	80053d8 <dhcp_release>
        dhcp_discover(netif);
 80054bc:	4628      	mov	r0, r5
 80054be:	f7ff fae1 	bl	8004a84 <dhcp_discover>
    netif = netif->next;
 80054c2:	682d      	ldr	r5, [r5, #0]
 80054c4:	e7e7      	b.n	8005496 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80054c6:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 80054ca:	f1b9 0f00 	cmp.w	r9, #0
 80054ce:	d064      	beq.n	800559a <dhcp_coarse_tmr+0x116>
 80054d0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80054d4:	f1b9 0f01 	cmp.w	r9, #1
 80054d8:	83e2      	strh	r2, [r4, #30]
 80054da:	d15e      	bne.n	800559a <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80054dc:	3b01      	subs	r3, #1
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	2b09      	cmp	r3, #9
 80054e2:	d8ee      	bhi.n	80054c2 <dhcp_coarse_tmr+0x3e>
 80054e4:	fa26 f303 	lsr.w	r3, r6, r3
 80054e8:	07db      	lsls	r3, r3, #31
 80054ea:	d5ea      	bpl.n	80054c2 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80054ec:	2104      	movs	r1, #4
 80054ee:	4620      	mov	r0, r4
 80054f0:	f7fe ffe2 	bl	80044b8 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80054f4:	2203      	movs	r2, #3
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f7ff f875 	bl	80045e8 <dhcp_create_msg>
  if (result == ERR_OK) {
 80054fe:	bb60      	cbnz	r0, 800555a <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005500:	2202      	movs	r2, #2
 8005502:	2139      	movs	r1, #57	; 0x39
 8005504:	4620      	mov	r0, r4
 8005506:	f7ff f801 	bl	800450c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800550a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800550c:	4620      	mov	r0, r4
 800550e:	f7fe ffdb 	bl	80044c8 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005512:	2203      	movs	r2, #3
 8005514:	2137      	movs	r1, #55	; 0x37
 8005516:	4620      	mov	r0, r4
 8005518:	f7fe fff8 	bl	800450c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800551c:	4649      	mov	r1, r9
 800551e:	4620      	mov	r0, r4
 8005520:	f7ff f818 	bl	8004554 <dhcp_option_byte>
 8005524:	2103      	movs	r1, #3
 8005526:	4620      	mov	r0, r4
 8005528:	f7ff f814 	bl	8004554 <dhcp_option_byte>
 800552c:	211c      	movs	r1, #28
 800552e:	4620      	mov	r0, r4
 8005530:	f7ff f810 	bl	8004554 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8005534:	4620      	mov	r0, r4
 8005536:	f7ff fa03 	bl	8004940 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800553a:	8aa1      	ldrh	r1, [r4, #20]
 800553c:	68e0      	ldr	r0, [r4, #12]
 800553e:	31f0      	adds	r1, #240	; 0xf0
 8005540:	b289      	uxth	r1, r1
 8005542:	f001 ffa3 	bl	800748c <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8005546:	9500      	str	r5, [sp, #0]
 8005548:	2343      	movs	r3, #67	; 0x43
 800554a:	4642      	mov	r2, r8
 800554c:	68e1      	ldr	r1, [r4, #12]
 800554e:	6838      	ldr	r0, [r7, #0]
 8005550:	f005 f87c 	bl	800a64c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8005554:	4620      	mov	r0, r4
 8005556:	f7ff fa65 	bl	8004a24 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800555a:	7aa3      	ldrb	r3, [r4, #10]
 800555c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800555e:	bf1c      	itt	ne
 8005560:	3301      	addne	r3, #1
 8005562:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8005564:	7aa3      	ldrb	r3, [r4, #10]
 8005566:	2b09      	cmp	r3, #9
 8005568:	bf96      	itet	ls
 800556a:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 800556e:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8005572:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005576:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800557a:	bf9c      	itt	ls
 800557c:	00db      	lslls	r3, r3, #3
 800557e:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8005580:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8005584:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8005588:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800558a:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800558c:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 800558e:	1a9b      	subs	r3, r3, r2
 8005590:	2b01      	cmp	r3, #1
 8005592:	dd96      	ble.n	80054c2 <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8005594:	105b      	asrs	r3, r3, #1
 8005596:	83e3      	strh	r3, [r4, #30]
 8005598:	e793      	b.n	80054c2 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800559a:	8ba2      	ldrh	r2, [r4, #28]
 800559c:	2a00      	cmp	r2, #0
 800559e:	d090      	beq.n	80054c2 <dhcp_coarse_tmr+0x3e>
 80055a0:	1e51      	subs	r1, r2, #1
 80055a2:	2a01      	cmp	r2, #1
 80055a4:	83a1      	strh	r1, [r4, #28]
 80055a6:	d18c      	bne.n	80054c2 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80055a8:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 80055ac:	2a01      	cmp	r2, #1
 80055ae:	d001      	beq.n	80055b4 <dhcp_coarse_tmr+0x130>
 80055b0:	2b0a      	cmp	r3, #10
 80055b2:	d186      	bne.n	80054c2 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 80055b4:	4628      	mov	r0, r5
 80055b6:	f7ff fe1f 	bl	80051f8 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80055ba:	8b63      	ldrh	r3, [r4, #26]
 80055bc:	8c22      	ldrh	r2, [r4, #32]
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80055c2:	bfc4      	itt	gt
 80055c4:	105b      	asrgt	r3, r3, #1
 80055c6:	83a3      	strhgt	r3, [r4, #28]
 80055c8:	e77b      	b.n	80054c2 <dhcp_coarse_tmr+0x3e>
 80055ca:	bf00      	nop
 80055cc:	200076dc 	.word	0x200076dc
 80055d0:	20003dec 	.word	0x20003dec
 80055d4:	0800d2e4 	.word	0x0800d2e4

080055d8 <dhcp_fine_tmr>:
{
 80055d8:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 80055da:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 80055dc:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 80055de:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 80055e0:	b904      	cbnz	r4, 80055e4 <dhcp_fine_tmr+0xc>
}
 80055e2:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80055e4:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 80055e6:	b123      	cbz	r3, 80055f2 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 80055e8:	8ada      	ldrh	r2, [r3, #22]
 80055ea:	2a01      	cmp	r2, #1
 80055ec:	d903      	bls.n	80055f6 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 80055ee:	3a01      	subs	r2, #1
 80055f0:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 80055f2:	6824      	ldr	r4, [r4, #0]
 80055f4:	e7f4      	b.n	80055e0 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 80055f6:	d1fc      	bne.n	80055f2 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80055f8:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 80055fa:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80055fc:	2a0c      	cmp	r2, #12
 80055fe:	d001      	beq.n	8005604 <dhcp_fine_tmr+0x2c>
 8005600:	2a06      	cmp	r2, #6
 8005602:	d103      	bne.n	800560c <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8005604:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8005606:	f7ff fa3d 	bl	8004a84 <dhcp_discover>
 800560a:	e7f2      	b.n	80055f2 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800560c:	2a01      	cmp	r2, #1
 800560e:	d109      	bne.n	8005624 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8005610:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 8005612:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8005614:	2b05      	cmp	r3, #5
 8005616:	d802      	bhi.n	800561e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8005618:	f7ff fa92 	bl	8004b40 <dhcp_select>
 800561c:	e7e9      	b.n	80055f2 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800561e:	f7ff fedb 	bl	80053d8 <dhcp_release>
 8005622:	e7ef      	b.n	8005604 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8005624:	2a08      	cmp	r2, #8
 8005626:	d109      	bne.n	800563c <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8005628:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 800562a:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800562c:	2b01      	cmp	r3, #1
 800562e:	d802      	bhi.n	8005636 <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 8005630:	f7ff f8b6 	bl	80047a0 <dhcp_check>
 8005634:	e7dd      	b.n	80055f2 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 8005636:	f7ff f8c9 	bl	80047cc <dhcp_bind>
 800563a:	e7da      	b.n	80055f2 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800563c:	2a03      	cmp	r2, #3
 800563e:	d1d8      	bne.n	80055f2 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 8005640:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 8005642:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 8005644:	2b01      	cmp	r3, #1
 8005646:	d8de      	bhi.n	8005606 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 8005648:	f7ff faee 	bl	8004c28 <dhcp_reboot>
 800564c:	e7d1      	b.n	80055f2 <dhcp_fine_tmr+0x1a>
 800564e:	bf00      	nop
 8005650:	200076dc 	.word	0x200076dc

08005654 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8005654:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8005656:	2618      	movs	r6, #24
 8005658:	4c07      	ldr	r4, [pc, #28]	; (8005678 <etharp_free_entry+0x24>)
{
 800565a:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 800565c:	4346      	muls	r6, r0
 800565e:	59a0      	ldr	r0, [r4, r6]
 8005660:	b118      	cbz	r0, 800566a <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8005662:	f001 fdcd 	bl	8007200 <pbuf_free>
    arp_table[i].q = NULL;
 8005666:	2300      	movs	r3, #0
 8005668:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800566a:	2318      	movs	r3, #24
 800566c:	fb03 4405 	mla	r4, r3, r5, r4
 8005670:	2300      	movs	r3, #0
 8005672:	7523      	strb	r3, [r4, #20]
 8005674:	bd70      	pop	{r4, r5, r6, pc}
 8005676:	bf00      	nop
 8005678:	20003df8 	.word	0x20003df8

0800567c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800567c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005680:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005682:	4689      	mov	r9, r1
 8005684:	4692      	mov	sl, r2
 8005686:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005688:	4607      	mov	r7, r0
 800568a:	b930      	cbnz	r0, 800569a <etharp_raw+0x1e>
 800568c:	4b2c      	ldr	r3, [pc, #176]	; (8005740 <etharp_raw+0xc4>)
 800568e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005692:	492c      	ldr	r1, [pc, #176]	; (8005744 <etharp_raw+0xc8>)
 8005694:	482c      	ldr	r0, [pc, #176]	; (8005748 <etharp_raw+0xcc>)
 8005696:	f006 fb67 	bl	800bd68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800569a:	2200      	movs	r2, #0
 800569c:	211c      	movs	r1, #28
 800569e:	2002      	movs	r0, #2
 80056a0:	f001 fe18 	bl	80072d4 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80056a4:	4606      	mov	r6, r0
 80056a6:	2800      	cmp	r0, #0
 80056a8:	d047      	beq.n	800573a <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80056aa:	8943      	ldrh	r3, [r0, #10]
 80056ac:	2b1b      	cmp	r3, #27
 80056ae:	d806      	bhi.n	80056be <etharp_raw+0x42>
 80056b0:	4b23      	ldr	r3, [pc, #140]	; (8005740 <etharp_raw+0xc4>)
 80056b2:	f240 4264 	movw	r2, #1124	; 0x464
 80056b6:	4925      	ldr	r1, [pc, #148]	; (800574c <etharp_raw+0xd0>)
 80056b8:	4823      	ldr	r0, [pc, #140]	; (8005748 <etharp_raw+0xcc>)
 80056ba:	f006 fb55 	bl	800bd68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80056be:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80056c0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 80056c4:	f7fe fee2 	bl	800448c <lwip_htons>
 80056c8:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80056ca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056ce:	2b06      	cmp	r3, #6
 80056d0:	d006      	beq.n	80056e0 <etharp_raw+0x64>
 80056d2:	4b1b      	ldr	r3, [pc, #108]	; (8005740 <etharp_raw+0xc4>)
 80056d4:	f240 426b 	movw	r2, #1131	; 0x46b
 80056d8:	491d      	ldr	r1, [pc, #116]	; (8005750 <etharp_raw+0xd4>)
 80056da:	481b      	ldr	r0, [pc, #108]	; (8005748 <etharp_raw+0xcc>)
 80056dc:	f006 fb44 	bl	800bd68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80056e0:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80056e4:	464a      	mov	r2, r9
 80056e6:	4631      	mov	r1, r6
 80056e8:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 80056ea:	60a3      	str	r3, [r4, #8]
 80056ec:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80056f0:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	f8c4 3012 	str.w	r3, [r4, #18]
 80056f8:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 80056fa:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 80056fc:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 80056fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005706:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005708:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800570a:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800570c:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800570e:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005710:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005712:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005714:	2308      	movs	r3, #8
 8005716:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8005718:	2306      	movs	r3, #6
 800571a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800571c:	2304      	movs	r3, #4
 800571e:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005720:	f640 0306 	movw	r3, #2054	; 0x806
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	4653      	mov	r3, sl
 8005728:	f005 f860 	bl	800a7ec <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800572c:	4630      	mov	r0, r6
 800572e:	f001 fd67 	bl	8007200 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8005732:	4628      	mov	r0, r5
}
 8005734:	b002      	add	sp, #8
 8005736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 800573a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800573e:	e7f9      	b.n	8005734 <etharp_raw+0xb8>
 8005740:	0800d101 	.word	0x0800d101
 8005744:	0800cba9 	.word	0x0800cba9
 8005748:	0800cb76 	.word	0x0800cb76
 800574c:	0800d138 	.word	0x0800d138
 8005750:	0800d169 	.word	0x0800d169

08005754 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 8005754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	4b3e      	ldr	r3, [pc, #248]	; (8005854 <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 800575a:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800575c:	4605      	mov	r5, r0
 800575e:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8005760:	4694      	mov	ip, r2
 8005762:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8005764:	4681      	mov	r9, r0
 8005766:	4680      	mov	r8, r0
 8005768:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 800576a:	4696      	mov	lr, r2
 800576c:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 800576e:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005770:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 8005774:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8005776:	d111      	bne.n	800579c <etharp_find_entry.isra.0+0x48>
 8005778:	b997      	cbnz	r7, 80057a0 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 800577a:	fa4f fe80 	sxtb.w	lr, r0
 800577e:	3001      	adds	r0, #1
 8005780:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005782:	280a      	cmp	r0, #10
 8005784:	d1f4      	bne.n	8005770 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	0799      	lsls	r1, r3, #30
 800578a:	d404      	bmi.n	8005796 <etharp_find_entry.isra.0+0x42>
 800578c:	f1be 0f0a 	cmp.w	lr, #10
 8005790:	d11c      	bne.n	80057cc <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005792:	07db      	lsls	r3, r3, #31
 8005794:	d435      	bmi.n	8005802 <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 8005796:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800579a:	e009      	b.n	80057b0 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800579c:	2f00      	cmp	r7, #0
 800579e:	d0ee      	beq.n	800577e <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80057a0:	2d00      	cmp	r5, #0
 80057a2:	d04a      	beq.n	800583a <etharp_find_entry.isra.0+0xe6>
 80057a4:	6829      	ldr	r1, [r5, #0]
 80057a6:	468a      	mov	sl, r1
 80057a8:	6859      	ldr	r1, [r3, #4]
 80057aa:	458a      	cmp	sl, r1
 80057ac:	d145      	bne.n	800583a <etharp_find_entry.isra.0+0xe6>
        return i;
 80057ae:	b240      	sxtb	r0, r0
}
 80057b0:	b003      	add	sp, #12
 80057b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 80057b6:	45c2      	cmp	sl, r8
 80057b8:	d3e1      	bcc.n	800577e <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 80057ba:	fa4f fc80 	sxtb.w	ip, r0
 80057be:	46d0      	mov	r8, sl
 80057c0:	e7dd      	b.n	800577e <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 80057c2:	45ca      	cmp	sl, r9
            old_stable = i;
 80057c4:	bf24      	itt	cs
 80057c6:	b244      	sxtbcs	r4, r0
 80057c8:	46d1      	movcs	r9, sl
 80057ca:	e7d8      	b.n	800577e <etharp_find_entry.isra.0+0x2a>
    i = empty;
 80057cc:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80057d0:	2318      	movs	r3, #24
 80057d2:	fb03 6307 	mla	r3, r3, r7, r6
 80057d6:	7d1b      	ldrb	r3, [r3, #20]
 80057d8:	b133      	cbz	r3, 80057e8 <etharp_find_entry.isra.0+0x94>
 80057da:	4b1f      	ldr	r3, [pc, #124]	; (8005858 <etharp_find_entry.isra.0+0x104>)
 80057dc:	f240 1287 	movw	r2, #391	; 0x187
 80057e0:	491e      	ldr	r1, [pc, #120]	; (800585c <etharp_find_entry.isra.0+0x108>)
 80057e2:	481f      	ldr	r0, [pc, #124]	; (8005860 <etharp_find_entry.isra.0+0x10c>)
 80057e4:	f006 fac0 	bl	800bd68 <iprintf>
  if (ipaddr != NULL) {
 80057e8:	b125      	cbz	r5, 80057f4 <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80057ea:	2318      	movs	r3, #24
 80057ec:	682a      	ldr	r2, [r5, #0]
 80057ee:	fb03 6307 	mla	r3, r3, r7, r6
 80057f2:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 80057f4:	2318      	movs	r3, #24
  return (err_t)i;
 80057f6:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 80057f8:	fb03 6607 	mla	r6, r3, r7, r6
 80057fc:	2300      	movs	r3, #0
 80057fe:	8273      	strh	r3, [r6, #18]
 8005800:	e7d6      	b.n	80057b0 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 8005802:	2c0a      	cmp	r4, #10
 8005804:	d00f      	beq.n	8005826 <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005806:	2318      	movs	r3, #24
      i = old_stable;
 8005808:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800580a:	435c      	muls	r4, r3
 800580c:	5933      	ldr	r3, [r6, r4]
 800580e:	b133      	cbz	r3, 800581e <etharp_find_entry.isra.0+0xca>
 8005810:	4b11      	ldr	r3, [pc, #68]	; (8005858 <etharp_find_entry.isra.0+0x104>)
 8005812:	f240 126f 	movw	r2, #367	; 0x16f
 8005816:	4913      	ldr	r1, [pc, #76]	; (8005864 <etharp_find_entry.isra.0+0x110>)
 8005818:	4811      	ldr	r0, [pc, #68]	; (8005860 <etharp_find_entry.isra.0+0x10c>)
 800581a:	f006 faa5 	bl	800bd68 <iprintf>
    etharp_free_entry(i);
 800581e:	4638      	mov	r0, r7
 8005820:	f7ff ff18 	bl	8005654 <etharp_free_entry>
 8005824:	e7d4      	b.n	80057d0 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005826:	f1bc 0f0a 	cmp.w	ip, #10
 800582a:	d002      	beq.n	8005832 <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 800582c:	fa5f f78c 	uxtb.w	r7, ip
 8005830:	e7f5      	b.n	800581e <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8005832:	2a0a      	cmp	r2, #10
 8005834:	d0af      	beq.n	8005796 <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 8005836:	b2d7      	uxtb	r7, r2
 8005838:	e7f1      	b.n	800581e <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 800583a:	2f01      	cmp	r7, #1
 800583c:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 8005840:	d1bf      	bne.n	80057c2 <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 8005842:	681f      	ldr	r7, [r3, #0]
 8005844:	2f00      	cmp	r7, #0
 8005846:	d0b6      	beq.n	80057b6 <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 8005848:	45da      	cmp	sl, fp
 800584a:	d398      	bcc.n	800577e <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 800584c:	b242      	sxtb	r2, r0
 800584e:	46d3      	mov	fp, sl
 8005850:	e795      	b.n	800577e <etharp_find_entry.isra.0+0x2a>
 8005852:	bf00      	nop
 8005854:	20003df8 	.word	0x20003df8
 8005858:	0800d101 	.word	0x0800d101
 800585c:	0800d023 	.word	0x0800d023
 8005860:	0800cb76 	.word	0x0800cb76
 8005864:	0800d00c 	.word	0x0800d00c

08005868 <etharp_cleanup_netif>:
{
 8005868:	b570      	push	{r4, r5, r6, lr}
 800586a:	4606      	mov	r6, r0
 800586c:	4d07      	ldr	r5, [pc, #28]	; (800588c <etharp_cleanup_netif+0x24>)
 800586e:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8005870:	7d2b      	ldrb	r3, [r5, #20]
 8005872:	b12b      	cbz	r3, 8005880 <etharp_cleanup_netif+0x18>
 8005874:	68ab      	ldr	r3, [r5, #8]
 8005876:	42b3      	cmp	r3, r6
 8005878:	d102      	bne.n	8005880 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 800587a:	4620      	mov	r0, r4
 800587c:	f7ff feea 	bl	8005654 <etharp_free_entry>
 8005880:	3401      	adds	r4, #1
 8005882:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005884:	2c0a      	cmp	r4, #10
 8005886:	d1f3      	bne.n	8005870 <etharp_cleanup_netif+0x8>
}
 8005888:	bd70      	pop	{r4, r5, r6, pc}
 800588a:	bf00      	nop
 800588c:	20003df8 	.word	0x20003df8

08005890 <etharp_input>:
{
 8005890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005894:	4680      	mov	r8, r0
 8005896:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005898:	460c      	mov	r4, r1
 800589a:	b949      	cbnz	r1, 80058b0 <etharp_input+0x20>
 800589c:	4b4a      	ldr	r3, [pc, #296]	; (80059c8 <etharp_input+0x138>)
 800589e:	f44f 7222 	mov.w	r2, #648	; 0x288
 80058a2:	494a      	ldr	r1, [pc, #296]	; (80059cc <etharp_input+0x13c>)
 80058a4:	484a      	ldr	r0, [pc, #296]	; (80059d0 <etharp_input+0x140>)
 80058a6:	f006 fa5f 	bl	800bd68 <iprintf>
}
 80058aa:	b006      	add	sp, #24
 80058ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 80058b0:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80058b2:	882b      	ldrh	r3, [r5, #0]
 80058b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058b8:	d108      	bne.n	80058cc <etharp_input+0x3c>
 80058ba:	792b      	ldrb	r3, [r5, #4]
 80058bc:	2b06      	cmp	r3, #6
 80058be:	d105      	bne.n	80058cc <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80058c0:	796b      	ldrb	r3, [r5, #5]
 80058c2:	2b04      	cmp	r3, #4
 80058c4:	d102      	bne.n	80058cc <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80058c6:	886b      	ldrh	r3, [r5, #2]
 80058c8:	2b08      	cmp	r3, #8
 80058ca:	d003      	beq.n	80058d4 <etharp_input+0x44>
  pbuf_free(p);
 80058cc:	4640      	mov	r0, r8
 80058ce:	f001 fc97 	bl	8007200 <pbuf_free>
 80058d2:	e7ea      	b.n	80058aa <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80058d4:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80058d8:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80058da:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80058dc:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80058de:	b116      	cbz	r6, 80058e6 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80058e0:	1b9b      	subs	r3, r3, r6
 80058e2:	425e      	negs	r6, r3
 80058e4:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80058e6:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80058e8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80058ec:	f105 0708 	add.w	r7, r5, #8
 80058f0:	bf14      	ite	ne
 80058f2:	f04f 0901 	movne.w	r9, #1
 80058f6:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80058fa:	2b06      	cmp	r3, #6
 80058fc:	d006      	beq.n	800590c <etharp_input+0x7c>
 80058fe:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <etharp_input+0x138>)
 8005900:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005904:	4933      	ldr	r1, [pc, #204]	; (80059d4 <etharp_input+0x144>)
 8005906:	4832      	ldr	r0, [pc, #200]	; (80059d0 <etharp_input+0x140>)
 8005908:	f006 fa2e 	bl	800bd68 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800590c:	9805      	ldr	r0, [sp, #20]
 800590e:	2800      	cmp	r0, #0
 8005910:	d03c      	beq.n	800598c <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005912:	4621      	mov	r1, r4
 8005914:	f000 fca9 	bl	800626a <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005918:	4682      	mov	sl, r0
 800591a:	bbb8      	cbnz	r0, 800598c <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 800591c:	9b05      	ldr	r3, [sp, #20]
 800591e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005922:	2be0      	cmp	r3, #224	; 0xe0
 8005924:	d032      	beq.n	800598c <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005926:	4649      	mov	r1, r9
 8005928:	a805      	add	r0, sp, #20
 800592a:	f7ff ff13 	bl	8005754 <etharp_find_entry.isra.0>
  if (i < 0) {
 800592e:	2800      	cmp	r0, #0
 8005930:	db2c      	blt.n	800598c <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8005932:	2218      	movs	r2, #24
 8005934:	4b28      	ldr	r3, [pc, #160]	; (80059d8 <etharp_input+0x148>)
 8005936:	f04f 0c02 	mov.w	ip, #2
 800593a:	fb02 f100 	mul.w	r1, r2, r0
 800593e:	eb03 0e01 	add.w	lr, r3, r1
 8005942:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8005946:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 800594a:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 800594e:	fb12 c200 	smlabb	r2, r2, r0, ip
 8005952:	6838      	ldr	r0, [r7, #0]
 8005954:	eb03 0c02 	add.w	ip, r3, r2
 8005958:	5098      	str	r0, [r3, r2]
 800595a:	88ba      	ldrh	r2, [r7, #4]
 800595c:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 8005960:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 8005964:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 8005968:	f1b9 0f00 	cmp.w	r9, #0
 800596c:	d00e      	beq.n	800598c <etharp_input+0xfc>
    arp_table[i].q = NULL;
 800596e:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8005972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005976:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800597a:	4649      	mov	r1, r9
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	4620      	mov	r0, r4
 8005980:	463b      	mov	r3, r7
 8005982:	f004 ff33 	bl	800a7ec <ethernet_output>
    pbuf_free(p);
 8005986:	4648      	mov	r0, r9
 8005988:	f001 fc3a 	bl	8007200 <pbuf_free>
  switch (hdr->opcode) {
 800598c:	88eb      	ldrh	r3, [r5, #6]
 800598e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005992:	d007      	beq.n	80059a4 <etharp_input+0x114>
 8005994:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005998:	d198      	bne.n	80058cc <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 800599a:	a905      	add	r1, sp, #20
 800599c:	4620      	mov	r0, r4
 800599e:	f7ff fbd3 	bl	8005148 <dhcp_arp_reply>
    break;
 80059a2:	e793      	b.n	80058cc <etharp_input+0x3c>
    if (for_us) {
 80059a4:	2e00      	cmp	r6, #0
 80059a6:	d091      	beq.n	80058cc <etharp_input+0x3c>
      etharp_raw(netif,
 80059a8:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80059aa:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 80059ae:	9701      	str	r7, [sp, #4]
 80059b0:	4620      	mov	r0, r4
 80059b2:	9203      	str	r2, [sp, #12]
 80059b4:	aa05      	add	r2, sp, #20
 80059b6:	4619      	mov	r1, r3
 80059b8:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80059ba:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 80059bc:	9200      	str	r2, [sp, #0]
 80059be:	463a      	mov	r2, r7
 80059c0:	f7ff fe5c 	bl	800567c <etharp_raw>
 80059c4:	e782      	b.n	80058cc <etharp_input+0x3c>
 80059c6:	bf00      	nop
 80059c8:	0800d101 	.word	0x0800d101
 80059cc:	0800cba9 	.word	0x0800cba9
 80059d0:	0800cb76 	.word	0x0800cb76
 80059d4:	0800d06b 	.word	0x0800d06b
 80059d8:	20003df8 	.word	0x20003df8

080059dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80059dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80059de:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80059e0:	f100 0329 	add.w	r3, r0, #41	; 0x29
 80059e4:	9102      	str	r1, [sp, #8]
 80059e6:	2401      	movs	r4, #1
 80059e8:	4905      	ldr	r1, [pc, #20]	; (8005a00 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80059ea:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80059ec:	9403      	str	r4, [sp, #12]
 80059ee:	9101      	str	r1, [sp, #4]
 80059f0:	4619      	mov	r1, r3
 80059f2:	9200      	str	r2, [sp, #0]
 80059f4:	4a03      	ldr	r2, [pc, #12]	; (8005a04 <etharp_request+0x28>)
 80059f6:	f7ff fe41 	bl	800567c <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 80059fa:	b004      	add	sp, #16
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	0800e49a 	.word	0x0800e49a
 8005a04:	0800e42e 	.word	0x0800e42e

08005a08 <etharp_tmr>:
{
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	4c13      	ldr	r4, [pc, #76]	; (8005a58 <etharp_tmr+0x50>)
 8005a0c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005a0e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005a10:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005a12:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005a14:	b16a      	cbz	r2, 8005a32 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005a16:	89e3      	ldrh	r3, [r4, #14]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005a1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005a20:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005a22:	d203      	bcs.n	8005a2c <etharp_tmr+0x24>
 8005a24:	2a01      	cmp	r2, #1
 8005a26:	d109      	bne.n	8005a3c <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d90b      	bls.n	8005a44 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 8005a2c:	4628      	mov	r0, r5
 8005a2e:	f7ff fe11 	bl	8005654 <etharp_free_entry>
 8005a32:	3501      	adds	r5, #1
 8005a34:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8005a36:	2d0a      	cmp	r5, #10
 8005a38:	d1eb      	bne.n	8005a12 <etharp_tmr+0xa>
 8005a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8005a3c:	2a03      	cmp	r2, #3
 8005a3e:	d106      	bne.n	8005a4e <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005a40:	7427      	strb	r7, [r4, #16]
 8005a42:	e7f6      	b.n	8005a32 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8005a44:	4621      	mov	r1, r4
 8005a46:	6860      	ldr	r0, [r4, #4]
 8005a48:	f7ff ffc8 	bl	80059dc <etharp_request>
 8005a4c:	e7f1      	b.n	8005a32 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8005a4e:	2a04      	cmp	r2, #4
 8005a50:	d1ef      	bne.n	8005a32 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8005a52:	7426      	strb	r6, [r4, #16]
 8005a54:	e7ed      	b.n	8005a32 <etharp_tmr+0x2a>
 8005a56:	bf00      	nop
 8005a58:	20003dfc 	.word	0x20003dfc

08005a5c <etharp_output_to_arp_index>:
{
 8005a5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a60:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005a62:	4d27      	ldr	r5, [pc, #156]	; (8005b00 <etharp_output_to_arp_index+0xa4>)
 8005a64:	2218      	movs	r2, #24
{
 8005a66:	b085      	sub	sp, #20
 8005a68:	4606      	mov	r6, r0
 8005a6a:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8005a6c:	fb02 5204 	mla	r2, r2, r4, r5
 8005a70:	7d12      	ldrb	r2, [r2, #20]
 8005a72:	2a01      	cmp	r2, #1
 8005a74:	d806      	bhi.n	8005a84 <etharp_output_to_arp_index+0x28>
 8005a76:	4b23      	ldr	r3, [pc, #140]	; (8005b04 <etharp_output_to_arp_index+0xa8>)
 8005a78:	f240 22ed 	movw	r2, #749	; 0x2ed
 8005a7c:	4922      	ldr	r1, [pc, #136]	; (8005b08 <etharp_output_to_arp_index+0xac>)
 8005a7e:	4823      	ldr	r0, [pc, #140]	; (8005b0c <etharp_output_to_arp_index+0xb0>)
 8005a80:	f006 f972 	bl	800bd68 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8005a84:	2118      	movs	r1, #24
 8005a86:	f106 0729 	add.w	r7, r6, #41	; 0x29
 8005a8a:	fb01 5904 	mla	r9, r1, r4, r5
 8005a8e:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d10d      	bne.n	8005ab2 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005a96:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 8005a9a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8005a9e:	d917      	bls.n	8005ad0 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005aa0:	4649      	mov	r1, r9
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	3104      	adds	r1, #4
 8005aa6:	f7ff ff99 	bl	80059dc <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005aaa:	b910      	cbnz	r0, 8005ab2 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8005aac:	2303      	movs	r3, #3
 8005aae:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005ab2:	2318      	movs	r3, #24
 8005ab4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ab8:	4641      	mov	r1, r8
 8005aba:	4630      	mov	r0, r6
 8005abc:	fb03 5304 	mla	r3, r3, r4, r5
 8005ac0:	9200      	str	r2, [sp, #0]
 8005ac2:	463a      	mov	r2, r7
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	f004 fe91 	bl	800a7ec <ethernet_output>
}
 8005aca:	b005      	add	sp, #20
 8005acc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005ad0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005ad4:	d3ed      	bcc.n	8005ab2 <etharp_output_to_arp_index+0x56>
 8005ad6:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005ada:	2101      	movs	r1, #1
 8005adc:	4630      	mov	r0, r6
 8005ade:	00db      	lsls	r3, r3, #3
 8005ae0:	9103      	str	r1, [sp, #12]
 8005ae2:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005ae4:	f103 020c 	add.w	r2, r3, #12
 8005ae8:	3304      	adds	r3, #4
 8005aea:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005aec:	442a      	add	r2, r5
 8005aee:	9302      	str	r3, [sp, #8]
 8005af0:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <etharp_output_to_arp_index+0xb4>)
 8005af2:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005af4:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	463b      	mov	r3, r7
 8005afa:	f7ff fdbf 	bl	800567c <etharp_raw>
 8005afe:	e7d4      	b.n	8005aaa <etharp_output_to_arp_index+0x4e>
 8005b00:	20003df8 	.word	0x20003df8
 8005b04:	0800d101 	.word	0x0800d101
 8005b08:	0800d08f 	.word	0x0800d08f
 8005b0c:	0800cb76 	.word	0x0800cb76
 8005b10:	0800e49a 	.word	0x0800e49a

08005b14 <etharp_query>:
{
 8005b14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b18:	4689      	mov	r9, r1
 8005b1a:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005b1c:	4601      	mov	r1, r0
{
 8005b1e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005b20:	f8d9 0000 	ldr.w	r0, [r9]
 8005b24:	f000 fba1 	bl	800626a <ip4_addr_isbroadcast_u32>
 8005b28:	4604      	mov	r4, r0
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d15e      	bne.n	8005bec <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 8005b2e:	f8d9 3000 	ldr.w	r3, [r9]
 8005b32:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005b36:	2ae0      	cmp	r2, #224	; 0xe0
 8005b38:	d058      	beq.n	8005bec <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d056      	beq.n	8005bec <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8005b3e:	2101      	movs	r1, #1
 8005b40:	4648      	mov	r0, r9
 8005b42:	f7ff fe07 	bl	8005754 <etharp_find_entry.isra.0>
  if (i < 0) {
 8005b46:	1e05      	subs	r5, r0, #0
 8005b48:	db53      	blt.n	8005bf2 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8005b4a:	4f40      	ldr	r7, [pc, #256]	; (8005c4c <etharp_query+0x138>)
 8005b4c:	2318      	movs	r3, #24
 8005b4e:	fb03 7305 	mla	r3, r3, r5, r7
 8005b52:	7d1a      	ldrb	r2, [r3, #20]
 8005b54:	b91a      	cbnz	r2, 8005b5e <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005b56:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 8005b58:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8005b5c:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8005b5e:	2318      	movs	r3, #24
 8005b60:	fb03 7305 	mla	r3, r3, r5, r7
 8005b64:	7d1b      	ldrb	r3, [r3, #20]
 8005b66:	b933      	cbnz	r3, 8005b76 <etharp_query+0x62>
 8005b68:	4b39      	ldr	r3, [pc, #228]	; (8005c50 <etharp_query+0x13c>)
 8005b6a:	f240 32c9 	movw	r2, #969	; 0x3c9
 8005b6e:	4939      	ldr	r1, [pc, #228]	; (8005c54 <etharp_query+0x140>)
 8005b70:	4839      	ldr	r0, [pc, #228]	; (8005c58 <etharp_query+0x144>)
 8005b72:	f006 f8f9 	bl	800bd68 <iprintf>
  if (is_new_entry || (q == NULL)) {
 8005b76:	b90c      	cbnz	r4, 8005b7c <etharp_query+0x68>
 8005b78:	2e00      	cmp	r6, #0
 8005b7a:	d13c      	bne.n	8005bf6 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	4640      	mov	r0, r8
 8005b80:	f7ff ff2c 	bl	80059dc <etharp_request>
    if (q == NULL) {
 8005b84:	2e00      	cmp	r6, #0
 8005b86:	d138      	bne.n	8005bfa <etharp_query+0xe6>
}
 8005b88:	b002      	add	sp, #8
 8005b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8005b8e:	d1fb      	bne.n	8005b88 <etharp_query+0x74>
 8005b90:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005b92:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8005c50 <etharp_query+0x13c>
 8005b96:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8005c60 <etharp_query+0x14c>
 8005b9a:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005c58 <etharp_query+0x144>
    while (p) {
 8005b9e:	b99c      	cbnz	r4, 8005bc8 <etharp_query+0xb4>
      pbuf_ref(p);
 8005ba0:	4630      	mov	r0, r6
 8005ba2:	f001 fceb 	bl	800757c <pbuf_ref>
    if (p != NULL) {
 8005ba6:	2e00      	cmp	r6, #0
 8005ba8:	d04c      	beq.n	8005c44 <etharp_query+0x130>
 8005baa:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 8005bac:	2318      	movs	r3, #24
 8005bae:	fb03 f205 	mul.w	r2, r3, r5
 8005bb2:	461c      	mov	r4, r3
 8005bb4:	58b8      	ldr	r0, [r7, r2]
 8005bb6:	b108      	cbz	r0, 8005bbc <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8005bb8:	f001 fb22 	bl	8007200 <pbuf_free>
      arp_table[i].q = p;
 8005bbc:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8005bc0:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005bc2:	f847 8003 	str.w	r8, [r7, r3]
 8005bc6:	e7df      	b.n	8005b88 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005bc8:	8962      	ldrh	r2, [r4, #10]
 8005bca:	8923      	ldrh	r3, [r4, #8]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d108      	bne.n	8005be2 <etharp_query+0xce>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	b133      	cbz	r3, 8005be2 <etharp_query+0xce>
 8005bd4:	4643      	mov	r3, r8
 8005bd6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8005bda:	4649      	mov	r1, r9
 8005bdc:	4650      	mov	r0, sl
 8005bde:	f006 f8c3 	bl	800bd68 <iprintf>
      if (p->type != PBUF_ROM) {
 8005be2:	7b23      	ldrb	r3, [r4, #12]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d11e      	bne.n	8005c26 <etharp_query+0x112>
      p = p->next;
 8005be8:	6824      	ldr	r4, [r4, #0]
 8005bea:	e7d8      	b.n	8005b9e <etharp_query+0x8a>
    return ERR_ARG;
 8005bec:	f06f 000f 	mvn.w	r0, #15
 8005bf0:	e7ca      	b.n	8005b88 <etharp_query+0x74>
 8005bf2:	4628      	mov	r0, r5
 8005bf4:	e7c8      	b.n	8005b88 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8005bfa:	2318      	movs	r3, #24
 8005bfc:	fb03 7205 	mla	r2, r3, r5, r7
 8005c00:	7d12      	ldrb	r2, [r2, #20]
 8005c02:	2a01      	cmp	r2, #1
 8005c04:	d9c3      	bls.n	8005b8e <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8005c06:	4a15      	ldr	r2, [pc, #84]	; (8005c5c <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005c08:	4631      	mov	r1, r6
 8005c0a:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 8005c0c:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005c0e:	220c      	movs	r2, #12
 8005c10:	fb13 2305 	smlabb	r3, r3, r5, r2
 8005c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c18:	443b      	add	r3, r7
 8005c1a:	9200      	str	r2, [sp, #0]
 8005c1c:	f108 0229 	add.w	r2, r8, #41	; 0x29
 8005c20:	f004 fde4 	bl	800a7ec <ethernet_output>
 8005c24:	e7b0      	b.n	8005b88 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005c26:	2200      	movs	r2, #0
 8005c28:	8921      	ldrh	r1, [r4, #8]
 8005c2a:	2002      	movs	r0, #2
 8005c2c:	f001 fb52 	bl	80072d4 <pbuf_alloc>
      if (p != NULL) {
 8005c30:	4680      	mov	r8, r0
 8005c32:	b138      	cbz	r0, 8005c44 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 8005c34:	4631      	mov	r1, r6
 8005c36:	f001 fd01 	bl	800763c <pbuf_copy>
 8005c3a:	2800      	cmp	r0, #0
 8005c3c:	d0b6      	beq.n	8005bac <etharp_query+0x98>
          pbuf_free(p);
 8005c3e:	4640      	mov	r0, r8
 8005c40:	f001 fade 	bl	8007200 <pbuf_free>
      result = ERR_MEM;
 8005c44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005c48:	e79e      	b.n	8005b88 <etharp_query+0x74>
 8005c4a:	bf00      	nop
 8005c4c:	20003df8 	.word	0x20003df8
 8005c50:	0800d101 	.word	0x0800d101
 8005c54:	0800d0bf 	.word	0x0800d0bf
 8005c58:	0800cb76 	.word	0x0800cb76
 8005c5c:	20003ee8 	.word	0x20003ee8
 8005c60:	0800d0e7 	.word	0x0800d0e7

08005c64 <etharp_output>:
{
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	460e      	mov	r6, r1
 8005c68:	b085      	sub	sp, #20
 8005c6a:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8005c6c:	4604      	mov	r4, r0
 8005c6e:	b930      	cbnz	r0, 8005c7e <etharp_output+0x1a>
 8005c70:	4b3e      	ldr	r3, [pc, #248]	; (8005d6c <etharp_output+0x108>)
 8005c72:	f240 321b 	movw	r2, #795	; 0x31b
 8005c76:	493e      	ldr	r1, [pc, #248]	; (8005d70 <etharp_output+0x10c>)
 8005c78:	483e      	ldr	r0, [pc, #248]	; (8005d74 <etharp_output+0x110>)
 8005c7a:	f006 f875 	bl	800bd68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8005c7e:	b936      	cbnz	r6, 8005c8e <etharp_output+0x2a>
 8005c80:	4b3a      	ldr	r3, [pc, #232]	; (8005d6c <etharp_output+0x108>)
 8005c82:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8005c86:	493c      	ldr	r1, [pc, #240]	; (8005d78 <etharp_output+0x114>)
 8005c88:	483a      	ldr	r0, [pc, #232]	; (8005d74 <etharp_output+0x110>)
 8005c8a:	f006 f86d 	bl	800bd68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8005c8e:	b935      	cbnz	r5, 8005c9e <etharp_output+0x3a>
 8005c90:	4b36      	ldr	r3, [pc, #216]	; (8005d6c <etharp_output+0x108>)
 8005c92:	f240 321d 	movw	r2, #797	; 0x31d
 8005c96:	4939      	ldr	r1, [pc, #228]	; (8005d7c <etharp_output+0x118>)
 8005c98:	4836      	ldr	r0, [pc, #216]	; (8005d74 <etharp_output+0x110>)
 8005c9a:	f006 f865 	bl	800bd68 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	6828      	ldr	r0, [r5, #0]
 8005ca2:	f000 fae2 	bl	800626a <ip4_addr_isbroadcast_u32>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d15a      	bne.n	8005d60 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8005caa:	682b      	ldr	r3, [r5, #0]
 8005cac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cb0:	2ae0      	cmp	r2, #224	; 0xe0
 8005cb2:	d11d      	bne.n	8005cf0 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005cb4:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005cb6:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005cba:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8005cbe:	235e      	movs	r3, #94	; 0x5e
 8005cc0:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005cc4:	786b      	ldrb	r3, [r5, #1]
 8005cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cca:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8005cce:	78ab      	ldrb	r3, [r5, #2]
 8005cd0:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005cd4:	78eb      	ldrb	r3, [r5, #3]
 8005cd6:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 8005cda:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8005cdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4620      	mov	r0, r4
 8005ce4:	9200      	str	r2, [sp, #0]
 8005ce6:	f104 0229 	add.w	r2, r4, #41	; 0x29
 8005cea:	f004 fd7f 	bl	800a7ec <ethernet_output>
 8005cee:	e01f      	b.n	8005d30 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005cf0:	6862      	ldr	r2, [r4, #4]
 8005cf2:	68a1      	ldr	r1, [r4, #8]
 8005cf4:	405a      	eors	r2, r3
 8005cf6:	420a      	tst	r2, r1
 8005cf8:	d008      	beq.n	8005d0c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 8005cfa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005cfc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d003      	beq.n	8005d0c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005d04:	68e3      	ldr	r3, [r4, #12]
 8005d06:	b36b      	cbz	r3, 8005d64 <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 8005d08:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8005d0c:	4b1c      	ldr	r3, [pc, #112]	; (8005d80 <etharp_output+0x11c>)
 8005d0e:	2018      	movs	r0, #24
 8005d10:	491c      	ldr	r1, [pc, #112]	; (8005d84 <etharp_output+0x120>)
 8005d12:	781a      	ldrb	r2, [r3, #0]
 8005d14:	fb00 1002 	mla	r0, r0, r2, r1
 8005d18:	7d01      	ldrb	r1, [r0, #20]
 8005d1a:	2901      	cmp	r1, #1
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	d909      	bls.n	8005d34 <etharp_output+0xd0>
 8005d20:	682f      	ldr	r7, [r5, #0]
 8005d22:	6843      	ldr	r3, [r0, #4]
 8005d24:	429f      	cmp	r7, r3
 8005d26:	d105      	bne.n	8005d34 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8005d28:	4631      	mov	r1, r6
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f7ff fe96 	bl	8005a5c <etharp_output_to_arp_index>
}
 8005d30:	b005      	add	sp, #20
 8005d32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <etharp_output+0x120>)
{
 8005d36:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8005d38:	7d18      	ldrb	r0, [r3, #20]
 8005d3a:	2801      	cmp	r0, #1
 8005d3c:	d906      	bls.n	8005d4c <etharp_output+0xe8>
 8005d3e:	682f      	ldr	r7, [r5, #0]
 8005d40:	6858      	ldr	r0, [r3, #4]
 8005d42:	4287      	cmp	r7, r0
 8005d44:	d102      	bne.n	8005d4c <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	700a      	strb	r2, [r1, #0]
 8005d4a:	e7ed      	b.n	8005d28 <etharp_output+0xc4>
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8005d50:	2a0a      	cmp	r2, #10
 8005d52:	d1f1      	bne.n	8005d38 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 8005d54:	4632      	mov	r2, r6
 8005d56:	4629      	mov	r1, r5
 8005d58:	4620      	mov	r0, r4
 8005d5a:	f7ff fedb 	bl	8005b14 <etharp_query>
 8005d5e:	e7e7      	b.n	8005d30 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 8005d60:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <etharp_output+0x124>)
 8005d62:	e7bb      	b.n	8005cdc <etharp_output+0x78>
            return ERR_RTE;
 8005d64:	f06f 0003 	mvn.w	r0, #3
 8005d68:	e7e2      	b.n	8005d30 <etharp_output+0xcc>
 8005d6a:	bf00      	nop
 8005d6c:	0800d101 	.word	0x0800d101
 8005d70:	0800cba9 	.word	0x0800cba9
 8005d74:	0800cb76 	.word	0x0800cb76
 8005d78:	0800db37 	.word	0x0800db37
 8005d7c:	0800d04c 	.word	0x0800d04c
 8005d80:	20003ee8 	.word	0x20003ee8
 8005d84:	20003df8 	.word	0x20003df8
 8005d88:	0800e42e 	.word	0x0800e42e

08005d8c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 8005d8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d8e:	4604      	mov	r4, r0
 8005d90:	b087      	sub	sp, #28
 8005d92:	460f      	mov	r7, r1
 8005d94:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005d96:	2124      	movs	r1, #36	; 0x24
 8005d98:	2200      	movs	r2, #0
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	f001 fa9a 	bl	80072d4 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005da0:	4605      	mov	r5, r0
 8005da2:	b3a0      	cbz	r0, 8005e0e <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005da4:	8943      	ldrh	r3, [r0, #10]
 8005da6:	2b23      	cmp	r3, #35	; 0x23
 8005da8:	d806      	bhi.n	8005db8 <icmp_send_response.isra.0+0x2c>
 8005daa:	4b1a      	ldr	r3, [pc, #104]	; (8005e14 <icmp_send_response.isra.0+0x88>)
 8005dac:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005db0:	4919      	ldr	r1, [pc, #100]	; (8005e18 <icmp_send_response.isra.0+0x8c>)
 8005db2:	481a      	ldr	r0, [pc, #104]	; (8005e1c <icmp_send_response.isra.0+0x90>)
 8005db4:	f005 ffd8 	bl	800bd68 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005db8:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8005dba:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8005dbc:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005dbe:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8005dc2:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005dc4:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8005dc8:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 8005dca:	71a3      	strb	r3, [r4, #6]
 8005dcc:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005dce:	4613      	mov	r3, r2
  icmphdr->type = type;
 8005dd0:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005dd2:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005dd4:	f853 6b04 	ldr.w	r6, [r3], #4
 8005dd8:	4283      	cmp	r3, r0
 8005dda:	f841 6b04 	str.w	r6, [r1], #4
 8005dde:	d1f9      	bne.n	8005dd4 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005de0:	ae06      	add	r6, sp, #24
 8005de2:	68d3      	ldr	r3, [r2, #12]
 8005de4:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005de8:	4630      	mov	r0, r6
 8005dea:	f000 f8bb 	bl	8005f64 <ip4_route>
#endif
  if (netif != NULL) {
 8005dee:	b158      	cbz	r0, 8005e08 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005df0:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005df2:	2301      	movs	r3, #1
 8005df4:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8005df6:	70a1      	strb	r1, [r4, #2]
 8005df8:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005dfa:	9002      	str	r0, [sp, #8]
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005e02:	23ff      	movs	r3, #255	; 0xff
 8005e04:	f000 fa20 	bl	8006248 <ip4_output_if>
  }
  pbuf_free(q);
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f001 f9f9 	bl	8007200 <pbuf_free>
}
 8005e0e:	b007      	add	sp, #28
 8005e10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e12:	bf00      	nop
 8005e14:	0800d211 	.word	0x0800d211
 8005e18:	0800d246 	.word	0x0800d246
 8005e1c:	0800cb76 	.word	0x0800cb76

08005e20 <icmp_input>:
  iphdr_in = ip4_current_header();
 8005e20:	4b45      	ldr	r3, [pc, #276]	; (8005f38 <icmp_input+0x118>)
{
 8005e22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8005e26:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	4604      	mov	r4, r0
 8005e2e:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 8005e30:	f899 5000 	ldrb.w	r5, [r9]
 8005e34:	461f      	mov	r7, r3
 8005e36:	f005 050f 	and.w	r5, r5, #15
 8005e3a:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 8005e3c:	2d13      	cmp	r5, #19
 8005e3e:	d92a      	bls.n	8005e96 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 8005e40:	8942      	ldrh	r2, [r0, #10]
 8005e42:	2a03      	cmp	r2, #3
 8005e44:	d927      	bls.n	8005e96 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 8005e46:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 8005e48:	7812      	ldrb	r2, [r2, #0]
 8005e4a:	2a08      	cmp	r2, #8
 8005e4c:	d123      	bne.n	8005e96 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005e4e:	6958      	ldr	r0, [r3, #20]
 8005e50:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 8005e54:	2ae0      	cmp	r2, #224	; 0xe0
 8005e56:	d01e      	beq.n	8005e96 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8005e58:	6819      	ldr	r1, [r3, #0]
 8005e5a:	f000 fa06 	bl	800626a <ip4_addr_isbroadcast_u32>
 8005e5e:	4606      	mov	r6, r0
 8005e60:	b9c8      	cbnz	r0, 8005e96 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8005e62:	8923      	ldrh	r3, [r4, #8]
 8005e64:	2b07      	cmp	r3, #7
 8005e66:	d916      	bls.n	8005e96 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005e68:	f105 010e 	add.w	r1, r5, #14
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	f001 f9c1 	bl	80071f4 <pbuf_header>
 8005e72:	2800      	cmp	r0, #0
 8005e74:	d04f      	beq.n	8005f16 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8005e76:	8921      	ldrh	r1, [r4, #8]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	2002      	movs	r0, #2
 8005e7c:	4429      	add	r1, r5
 8005e7e:	b289      	uxth	r1, r1
 8005e80:	f001 fa28 	bl	80072d4 <pbuf_alloc>
      if (r == NULL) {
 8005e84:	4606      	mov	r6, r0
 8005e86:	b130      	cbz	r0, 8005e96 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8005e88:	8942      	ldrh	r2, [r0, #10]
 8005e8a:	f105 0308 	add.w	r3, r5, #8
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d207      	bcs.n	8005ea2 <icmp_input+0x82>
        pbuf_free(r);
 8005e92:	f001 f9b5 	bl	8007200 <pbuf_free>
  pbuf_free(p);
 8005e96:	4620      	mov	r0, r4
}
 8005e98:	b005      	add	sp, #20
 8005e9a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8005e9e:	f001 b9af 	b.w	8007200 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	462a      	mov	r2, r5
 8005ea6:	6840      	ldr	r0, [r0, #4]
 8005ea8:	f005 fe9f 	bl	800bbea <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8005eac:	4269      	negs	r1, r5
 8005eae:	4630      	mov	r0, r6
 8005eb0:	f001 f9a0 	bl	80071f4 <pbuf_header>
 8005eb4:	b138      	cbz	r0, 8005ec6 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005eb6:	4b21      	ldr	r3, [pc, #132]	; (8005f3c <icmp_input+0x11c>)
 8005eb8:	22af      	movs	r2, #175	; 0xaf
 8005eba:	4921      	ldr	r1, [pc, #132]	; (8005f40 <icmp_input+0x120>)
 8005ebc:	4821      	ldr	r0, [pc, #132]	; (8005f44 <icmp_input+0x124>)
 8005ebe:	f005 ff53 	bl	800bd68 <iprintf>
        pbuf_free(r);
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	e7e5      	b.n	8005e92 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	4630      	mov	r0, r6
 8005eca:	f001 fbb7 	bl	800763c <pbuf_copy>
 8005ece:	2800      	cmp	r0, #0
 8005ed0:	d1f7      	bne.n	8005ec2 <icmp_input+0xa2>
      pbuf_free(p);
 8005ed2:	4620      	mov	r0, r4
 8005ed4:	4634      	mov	r4, r6
 8005ed6:	f001 f993 	bl	8007200 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 8005eda:	4629      	mov	r1, r5
 8005edc:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005ede:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005ee0:	f001 f988 	bl	80071f4 <pbuf_header>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	d1d5      	bne.n	8005e96 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005eea:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005ef4:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005ef6:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8005ef8:	70b0      	strb	r0, [r6, #2]
 8005efa:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005efc:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005efe:	7288      	strb	r0, [r1, #10]
 8005f00:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005f02:	2101      	movs	r1, #1
 8005f04:	9000      	str	r0, [sp, #0]
 8005f06:	4620      	mov	r0, r4
 8005f08:	9101      	str	r1, [sp, #4]
 8005f0a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005f0e:	490e      	ldr	r1, [pc, #56]	; (8005f48 <icmp_input+0x128>)
 8005f10:	f000 f99a 	bl	8006248 <ip4_output_if>
 8005f14:	e7bf      	b.n	8005e96 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005f16:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8005f1a:	4620      	mov	r0, r4
 8005f1c:	31f2      	adds	r1, #242	; 0xf2
 8005f1e:	b209      	sxth	r1, r1
 8005f20:	f001 f968 	bl	80071f4 <pbuf_header>
 8005f24:	2800      	cmp	r0, #0
 8005f26:	d0d8      	beq.n	8005eda <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005f28:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <icmp_input+0x11c>)
 8005f2a:	22c0      	movs	r2, #192	; 0xc0
 8005f2c:	4907      	ldr	r1, [pc, #28]	; (8005f4c <icmp_input+0x12c>)
 8005f2e:	4805      	ldr	r0, [pc, #20]	; (8005f44 <icmp_input+0x124>)
 8005f30:	f005 ff1a 	bl	800bd68 <iprintf>
        goto icmperr;
 8005f34:	e7af      	b.n	8005e96 <icmp_input+0x76>
 8005f36:	bf00      	nop
 8005f38:	20003fa0 	.word	0x20003fa0
 8005f3c:	0800d211 	.word	0x0800d211
 8005f40:	0800d1aa 	.word	0x0800d1aa
 8005f44:	0800cb76 	.word	0x0800cb76
 8005f48:	20003fb4 	.word	0x20003fb4
 8005f4c:	0800d1df 	.word	0x0800d1df

08005f50 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8005f50:	460a      	mov	r2, r1
 8005f52:	3004      	adds	r0, #4
 8005f54:	2103      	movs	r1, #3
 8005f56:	f7ff bf19 	b.w	8005d8c <icmp_send_response.isra.0>

08005f5a <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8005f5a:	460a      	mov	r2, r1
 8005f5c:	3004      	adds	r0, #4
 8005f5e:	210b      	movs	r1, #11
 8005f60:	f7ff bf14 	b.w	8005d8c <icmp_send_response.isra.0>

08005f64 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005f64:	4b13      	ldr	r3, [pc, #76]	; (8005fb4 <ip4_route+0x50>)
{
 8005f66:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	b96b      	cbnz	r3, 8005f88 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005f6c:	4a12      	ldr	r2, [pc, #72]	; (8005fb8 <ip4_route+0x54>)
 8005f6e:	6812      	ldr	r2, [r2, #0]
 8005f70:	b1ea      	cbz	r2, 8005fae <ip4_route+0x4a>
 8005f72:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8005f76:	f001 0105 	and.w	r1, r1, #5
 8005f7a:	2905      	cmp	r1, #5
 8005f7c:	d117      	bne.n	8005fae <ip4_route+0x4a>
 8005f7e:	6851      	ldr	r1, [r2, #4]
 8005f80:	2900      	cmp	r1, #0
 8005f82:	bf18      	it	ne
 8005f84:	4613      	movne	r3, r2
 8005f86:	e012      	b.n	8005fae <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005f88:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 8005f8c:	f004 0205 	and.w	r2, r4, #5
 8005f90:	2a05      	cmp	r2, #5
 8005f92:	d1e9      	bne.n	8005f68 <ip4_route+0x4>
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	d0e6      	beq.n	8005f68 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005f9a:	6801      	ldr	r1, [r0, #0]
 8005f9c:	689d      	ldr	r5, [r3, #8]
 8005f9e:	404a      	eors	r2, r1
 8005fa0:	422a      	tst	r2, r5
 8005fa2:	d004      	beq.n	8005fae <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005fa4:	07a2      	lsls	r2, r4, #30
 8005fa6:	d4df      	bmi.n	8005f68 <ip4_route+0x4>
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	4291      	cmp	r1, r2
 8005fac:	d1dc      	bne.n	8005f68 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	bd30      	pop	{r4, r5, pc}
 8005fb2:	bf00      	nop
 8005fb4:	200076dc 	.word	0x200076dc
 8005fb8:	200076e0 	.word	0x200076e0

08005fbc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005fbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005fc0:	6847      	ldr	r7, [r0, #4]
{
 8005fc2:	4605      	mov	r5, r0
 8005fc4:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8005fc6:	f897 9000 	ldrb.w	r9, [r7]
 8005fca:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d005      	beq.n	8005fde <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f001 f914 	bl	8007200 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005fd8:	2000      	movs	r0, #0
 8005fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005fde:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8005fe0:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005fe4:	f7fe fa52 	bl	800448c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005fe8:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 8005fea:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005fee:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005ff0:	4283      	cmp	r3, r0
 8005ff2:	d903      	bls.n	8005ffc <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f001 fa48 	bl	800748c <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005ffc:	896b      	ldrh	r3, [r5, #10]
 8005ffe:	454b      	cmp	r3, r9
 8006000:	d3e7      	bcc.n	8005fd2 <ip4_input+0x16>
 8006002:	892b      	ldrh	r3, [r5, #8]
 8006004:	42a3      	cmp	r3, r4
 8006006:	d3e4      	bcc.n	8005fd2 <ip4_input+0x16>
 8006008:	f1b9 0f13 	cmp.w	r9, #19
 800600c:	d9e1      	bls.n	8005fd2 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	4c4f      	ldr	r4, [pc, #316]	; (8006150 <ip4_input+0x194>)
 8006012:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006014:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8006018:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800601a:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800601c:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800601e:	d113      	bne.n	8006048 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8006020:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 8006024:	07da      	lsls	r2, r3, #31
 8006026:	d504      	bpl.n	8006032 <ip4_input+0x76>
 8006028:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800602c:	2b00      	cmp	r3, #0
 800602e:	f040 808d 	bne.w	800614c <ip4_input+0x190>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8006032:	7a7b      	ldrb	r3, [r7, #9]
 8006034:	2b11      	cmp	r3, #17
 8006036:	d105      	bne.n	8006044 <ip4_input+0x88>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8006038:	eb07 0309 	add.w	r3, r7, r9
 800603c:	885b      	ldrh	r3, [r3, #2]
 800603e:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8006042:	d059      	beq.n	80060f8 <ip4_input+0x13c>
 8006044:	2600      	movs	r6, #0
 8006046:	e018      	b.n	800607a <ip4_input+0xbe>
 8006048:	4646      	mov	r6, r8
 800604a:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 800604e:	f8df b104 	ldr.w	fp, [pc, #260]	; 8006154 <ip4_input+0x198>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006052:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8006056:	07db      	lsls	r3, r3, #31
 8006058:	d404      	bmi.n	8006064 <ip4_input+0xa8>
      if (first) {
 800605a:	f1ba 0f00 	cmp.w	sl, #0
 800605e:	d13e      	bne.n	80060de <ip4_input+0x122>
        netif = netif->next;
 8006060:	6836      	ldr	r6, [r6, #0]
 8006062:	e041      	b.n	80060e8 <ip4_input+0x12c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8006064:	6873      	ldr	r3, [r6, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d0f7      	beq.n	800605a <ip4_input+0x9e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800606a:	6960      	ldr	r0, [r4, #20]
 800606c:	4283      	cmp	r3, r0
 800606e:	d004      	beq.n	800607a <ip4_input+0xbe>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8006070:	4631      	mov	r1, r6
 8006072:	f000 f8fa 	bl	800626a <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8006076:	2800      	cmp	r0, #0
 8006078:	d0ef      	beq.n	800605a <ip4_input+0x9e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800607a:	6920      	ldr	r0, [r4, #16]
 800607c:	b148      	cbz	r0, 8006092 <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800607e:	4641      	mov	r1, r8
 8006080:	f000 f8f3 	bl	800626a <ip4_addr_isbroadcast_u32>
 8006084:	2800      	cmp	r0, #0
 8006086:	d1a4      	bne.n	8005fd2 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8006088:	6923      	ldr	r3, [r4, #16]
 800608a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800608e:	2be0      	cmp	r3, #224	; 0xe0
 8006090:	d09f      	beq.n	8005fd2 <ip4_input+0x16>
  if (netif == NULL) {
 8006092:	2e00      	cmp	r6, #0
 8006094:	d09d      	beq.n	8005fd2 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8006096:	88fb      	ldrh	r3, [r7, #6]
 8006098:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800609c:	b133      	cbz	r3, 80060ac <ip4_input+0xf0>
    p = ip4_reass(p);
 800609e:	4628      	mov	r0, r5
 80060a0:	f000 fa12 	bl	80064c8 <ip4_reass>
    if (p == NULL) {
 80060a4:	4605      	mov	r5, r0
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d096      	beq.n	8005fd8 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 80060aa:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 80060ac:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80060ae:	f1c9 0100 	rsb	r1, r9, #0
 80060b2:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 80060b4:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 80060b8:	783b      	ldrb	r3, [r7, #0]
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 80060c2:	f001 f897 	bl	80071f4 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 80060c6:	7a7b      	ldrb	r3, [r7, #9]
 80060c8:	2b06      	cmp	r3, #6
 80060ca:	d023      	beq.n	8006114 <ip4_input+0x158>
 80060cc:	2b11      	cmp	r3, #17
 80060ce:	d015      	beq.n	80060fc <ip4_input+0x140>
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d124      	bne.n	800611e <ip4_input+0x162>
      icmp_input(p, inp);
 80060d4:	4641      	mov	r1, r8
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7ff fea2 	bl	8005e20 <icmp_input>
      break;
 80060dc:	e012      	b.n	8006104 <ip4_input+0x148>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 80060de:	7d23      	ldrb	r3, [r4, #20]
 80060e0:	2b7f      	cmp	r3, #127	; 0x7f
 80060e2:	d0a6      	beq.n	8006032 <ip4_input+0x76>
        netif = netif_list;
 80060e4:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 80060e8:	4546      	cmp	r6, r8
 80060ea:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 80060ee:	bf08      	it	eq
 80060f0:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 80060f2:	2e00      	cmp	r6, #0
 80060f4:	d1ad      	bne.n	8006052 <ip4_input+0x96>
 80060f6:	e79c      	b.n	8006032 <ip4_input+0x76>
 80060f8:	4646      	mov	r6, r8
 80060fa:	e7ca      	b.n	8006092 <ip4_input+0xd6>
      udp_input(p, inp);
 80060fc:	4641      	mov	r1, r8
 80060fe:	4628      	mov	r0, r5
 8006100:	f004 f952 	bl	800a3a8 <udp_input>
  ip_data.current_netif = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8006108:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 800610a:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 800610c:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800610e:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8006110:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8006112:	e761      	b.n	8005fd8 <ip4_input+0x1c>
      tcp_input(p, inp);
 8006114:	4641      	mov	r1, r8
 8006116:	4628      	mov	r0, r5
 8006118:	f002 fece 	bl	8008eb8 <tcp_input>
      break;
 800611c:	e7f2      	b.n	8006104 <ip4_input+0x148>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800611e:	4631      	mov	r1, r6
 8006120:	6960      	ldr	r0, [r4, #20]
 8006122:	f000 f8a2 	bl	800626a <ip4_addr_isbroadcast_u32>
 8006126:	b968      	cbnz	r0, 8006144 <ip4_input+0x188>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8006128:	6963      	ldr	r3, [r4, #20]
 800612a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800612e:	2be0      	cmp	r3, #224	; 0xe0
 8006130:	d008      	beq.n	8006144 <ip4_input+0x188>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8006132:	4649      	mov	r1, r9
 8006134:	4628      	mov	r0, r5
 8006136:	f001 f860 	bl	80071fa <pbuf_header_force>
        p->payload = iphdr;
 800613a:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800613c:	2102      	movs	r1, #2
 800613e:	4628      	mov	r0, r5
 8006140:	f7ff ff06 	bl	8005f50 <icmp_dest_unreach>
      pbuf_free(p);
 8006144:	4628      	mov	r0, r5
 8006146:	f001 f85b 	bl	8007200 <pbuf_free>
 800614a:	e7db      	b.n	8006104 <ip4_input+0x148>
 800614c:	4646      	mov	r6, r8
 800614e:	e794      	b.n	800607a <ip4_input+0xbe>
 8006150:	20003fa0 	.word	0x20003fa0
 8006154:	200076dc 	.word	0x200076dc

08006158 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8006158:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800615c:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800615e:	89c3      	ldrh	r3, [r0, #14]
{
 8006160:	4605      	mov	r5, r0
 8006162:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8006164:	2b01      	cmp	r3, #1
{
 8006166:	4616      	mov	r6, r2
 8006168:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800616c:	d006      	beq.n	800617c <ip4_output_if_src+0x24>
 800616e:	4b30      	ldr	r3, [pc, #192]	; (8006230 <ip4_output_if_src+0xd8>)
 8006170:	f240 3233 	movw	r2, #819	; 0x333
 8006174:	492f      	ldr	r1, [pc, #188]	; (8006234 <ip4_output_if_src+0xdc>)
 8006176:	4830      	ldr	r0, [pc, #192]	; (8006238 <ip4_output_if_src+0xe0>)
 8006178:	f005 fdf6 	bl	800bd68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800617c:	2e00      	cmp	r6, #0
 800617e:	d047      	beq.n	8006210 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8006180:	2114      	movs	r1, #20
 8006182:	4628      	mov	r0, r5
 8006184:	f001 f836 	bl	80071f4 <pbuf_header>
 8006188:	2800      	cmp	r0, #0
 800618a:	d14e      	bne.n	800622a <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800618c:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 800618e:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8006190:	2b13      	cmp	r3, #19
 8006192:	d806      	bhi.n	80061a2 <ip4_output_if_src+0x4a>
 8006194:	4b26      	ldr	r3, [pc, #152]	; (8006230 <ip4_output_if_src+0xd8>)
 8006196:	f240 3261 	movw	r2, #865	; 0x361
 800619a:	4928      	ldr	r1, [pc, #160]	; (800623c <ip4_output_if_src+0xe4>)
 800619c:	4826      	ldr	r0, [pc, #152]	; (8006238 <ip4_output_if_src+0xe0>)
 800619e:	f005 fde3 	bl	800bd68 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 80061a2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 80061a6:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80061a8:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 80061aa:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 80061ac:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80061ae:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8006244 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 80061b2:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80061b4:	2345      	movs	r3, #69	; 0x45
 80061b6:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 80061b8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80061bc:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80061be:	8928      	ldrh	r0, [r5, #8]
 80061c0:	f7fe f964 	bl	800448c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 80061c4:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80061c6:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 80061c8:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80061ca:	f8b9 0000 	ldrh.w	r0, [r9]
 80061ce:	f7fe f95d 	bl	800448c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80061d2:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80061d6:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 80061d8:	3301      	adds	r3, #1
 80061da:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 80061de:	f1ba 0f00 	cmp.w	sl, #0
 80061e2:	d112      	bne.n	800620a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80061e4:	4b16      	ldr	r3, [pc, #88]	; (8006240 <ip4_output_if_src+0xe8>)
 80061e6:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80061e8:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80061ea:	72a7      	strb	r7, [r4, #10]
 80061ec:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80061ee:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 80061f2:	b19b      	cbz	r3, 800621c <ip4_output_if_src+0xc4>
 80061f4:	892a      	ldrh	r2, [r5, #8]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d910      	bls.n	800621c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 80061fa:	4632      	mov	r2, r6
 80061fc:	4641      	mov	r1, r8
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 fb0c 	bl	800681c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8006204:	b002      	add	sp, #8
 8006206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 800620a:	f8da 3000 	ldr.w	r3, [sl]
 800620e:	e7eb      	b.n	80061e8 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8006210:	686b      	ldr	r3, [r5, #4]
 8006212:	ae02      	add	r6, sp, #8
 8006214:	691b      	ldr	r3, [r3, #16]
 8006216:	f846 3d04 	str.w	r3, [r6, #-4]!
 800621a:	e7e8      	b.n	80061ee <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 800621c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8006220:	4632      	mov	r2, r6
 8006222:	4629      	mov	r1, r5
 8006224:	4640      	mov	r0, r8
 8006226:	4798      	blx	r3
 8006228:	e7ec      	b.n	8006204 <ip4_output_if_src+0xac>
      return ERR_BUF;
 800622a:	f06f 0001 	mvn.w	r0, #1
 800622e:	e7e9      	b.n	8006204 <ip4_output_if_src+0xac>
 8006230:	0800d272 	.word	0x0800d272
 8006234:	0800d2a6 	.word	0x0800d2a6
 8006238:	0800cb76 	.word	0x0800cb76
 800623c:	0800d2b2 	.word	0x0800d2b2
 8006240:	0800d2e0 	.word	0x0800d2e0
 8006244:	20003eea 	.word	0x20003eea

08006248 <ip4_output_if>:
{
 8006248:	b4f0      	push	{r4, r5, r6, r7}
 800624a:	9c06      	ldr	r4, [sp, #24]
 800624c:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8006250:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8006254:	b11a      	cbz	r2, 800625e <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8006256:	b109      	cbz	r1, 800625c <ip4_output_if+0x14>
 8006258:	680f      	ldr	r7, [r1, #0]
 800625a:	b907      	cbnz	r7, 800625e <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 800625c:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800625e:	9406      	str	r4, [sp, #24]
 8006260:	9605      	str	r6, [sp, #20]
 8006262:	9504      	str	r5, [sp, #16]
}
 8006264:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8006266:	f7ff bf77 	b.w	8006158 <ip4_output_if_src>

0800626a <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800626a:	1e43      	subs	r3, r0, #1
 800626c:	3303      	adds	r3, #3
 800626e:	d811      	bhi.n	8006294 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8006270:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8006274:	f013 0302 	ands.w	r3, r3, #2
 8006278:	d00e      	beq.n	8006298 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800627a:	684a      	ldr	r2, [r1, #4]
 800627c:	4290      	cmp	r0, r2
 800627e:	d00b      	beq.n	8006298 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8006280:	688b      	ldr	r3, [r1, #8]
 8006282:	4042      	eors	r2, r0
 8006284:	421a      	tst	r2, r3
 8006286:	d107      	bne.n	8006298 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8006288:	43db      	mvns	r3, r3
 800628a:	4383      	bics	r3, r0
    return 1;
 800628c:	bf0c      	ite	eq
 800628e:	2001      	moveq	r0, #1
 8006290:	2000      	movne	r0, #0
 8006292:	4770      	bx	lr
 8006294:	2001      	movs	r0, #1
 8006296:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8006298:	2000      	movs	r0, #0
  }
}
 800629a:	4770      	bx	lr

0800629c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800629c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800629e:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <ip_reass_dequeue_datagram+0x34>)
{
 80062a0:	4604      	mov	r4, r0
 80062a2:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	4282      	cmp	r2, r0
 80062a8:	d107      	bne.n	80062ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80062aa:	6802      	ldr	r2, [r0, #0]
 80062ac:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80062ae:	4621      	mov	r1, r4
 80062b0:	2004      	movs	r0, #4
}
 80062b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 80062b6:	f000 be1d 	b.w	8006ef4 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80062ba:	b931      	cbnz	r1, 80062ca <ip_reass_dequeue_datagram+0x2e>
 80062bc:	4b05      	ldr	r3, [pc, #20]	; (80062d4 <ip_reass_dequeue_datagram+0x38>)
 80062be:	f240 1245 	movw	r2, #325	; 0x145
 80062c2:	4905      	ldr	r1, [pc, #20]	; (80062d8 <ip_reass_dequeue_datagram+0x3c>)
 80062c4:	4805      	ldr	r0, [pc, #20]	; (80062dc <ip_reass_dequeue_datagram+0x40>)
 80062c6:	f005 fd4f 	bl	800bd68 <iprintf>
    prev->next = ipr->next;
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7ee      	b.n	80062ae <ip_reass_dequeue_datagram+0x12>
 80062d0:	20003ef0 	.word	0x20003ef0
 80062d4:	0800d3cd 	.word	0x0800d3cd
 80062d8:	0800d406 	.word	0x0800d406
 80062dc:	0800cb76 	.word	0x0800cb76

080062e0 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80062e0:	4281      	cmp	r1, r0
{
 80062e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e6:	4605      	mov	r5, r0
 80062e8:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 80062ea:	d105      	bne.n	80062f8 <ip_reass_free_complete_datagram+0x18>
 80062ec:	4b2f      	ldr	r3, [pc, #188]	; (80063ac <ip_reass_free_complete_datagram+0xcc>)
 80062ee:	22ab      	movs	r2, #171	; 0xab
 80062f0:	492f      	ldr	r1, [pc, #188]	; (80063b0 <ip_reass_free_complete_datagram+0xd0>)
 80062f2:	4830      	ldr	r0, [pc, #192]	; (80063b4 <ip_reass_free_complete_datagram+0xd4>)
 80062f4:	f005 fd38 	bl	800bd68 <iprintf>
  if (prev != NULL) {
 80062f8:	b147      	cbz	r7, 800630c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	429d      	cmp	r5, r3
 80062fe:	d005      	beq.n	800630c <ip_reass_free_complete_datagram+0x2c>
 8006300:	4b2a      	ldr	r3, [pc, #168]	; (80063ac <ip_reass_free_complete_datagram+0xcc>)
 8006302:	22ad      	movs	r2, #173	; 0xad
 8006304:	492c      	ldr	r1, [pc, #176]	; (80063b8 <ip_reass_free_complete_datagram+0xd8>)
 8006306:	482b      	ldr	r0, [pc, #172]	; (80063b4 <ip_reass_free_complete_datagram+0xd4>)
 8006308:	f005 fd2e 	bl	800bd68 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800630c:	686e      	ldr	r6, [r5, #4]
 800630e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8006310:	889a      	ldrh	r2, [r3, #4]
 8006312:	bb92      	cbnz	r2, 800637a <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8006314:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8006316:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 800631a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800631c:	f105 0208 	add.w	r2, r5, #8
 8006320:	f852 0b04 	ldr.w	r0, [r2], #4
 8006324:	428a      	cmp	r2, r1
 8006326:	f843 0b04 	str.w	r0, [r3], #4
 800632a:	d1f9      	bne.n	8006320 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800632c:	2101      	movs	r1, #1
 800632e:	4630      	mov	r0, r6
 8006330:	f7ff fe13 	bl	8005f5a <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8006334:	4630      	mov	r0, r6
 8006336:	f001 f919 	bl	800756c <pbuf_clen>
 800633a:	4604      	mov	r4, r0
    pbuf_free(p);
 800633c:	4630      	mov	r0, r6
 800633e:	f000 ff5f 	bl	8007200 <pbuf_free>
  p = ipr->p;
 8006342:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8006344:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80063ac <ip_reass_free_complete_datagram+0xcc>
 8006348:	f8df 9078 	ldr.w	r9, [pc, #120]	; 80063c4 <ip_reass_free_complete_datagram+0xe4>
 800634c:	f8df a064 	ldr.w	sl, [pc, #100]	; 80063b4 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8006350:	b9ae      	cbnz	r6, 800637e <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8006352:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8006354:	4d19      	ldr	r5, [pc, #100]	; (80063bc <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8006356:	4639      	mov	r1, r7
 8006358:	f7ff ffa0 	bl	800629c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800635c:	882b      	ldrh	r3, [r5, #0]
 800635e:	42a3      	cmp	r3, r4
 8006360:	d205      	bcs.n	800636e <ip_reass_free_complete_datagram+0x8e>
 8006362:	4b12      	ldr	r3, [pc, #72]	; (80063ac <ip_reass_free_complete_datagram+0xcc>)
 8006364:	22d2      	movs	r2, #210	; 0xd2
 8006366:	4916      	ldr	r1, [pc, #88]	; (80063c0 <ip_reass_free_complete_datagram+0xe0>)
 8006368:	4812      	ldr	r0, [pc, #72]	; (80063b4 <ip_reass_free_complete_datagram+0xd4>)
 800636a:	f005 fcfd 	bl	800bd68 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800636e:	882b      	ldrh	r3, [r5, #0]
}
 8006370:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8006372:	1b1b      	subs	r3, r3, r4
 8006374:	802b      	strh	r3, [r5, #0]
}
 8006376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 800637a:	2400      	movs	r4, #0
 800637c:	e7e1      	b.n	8006342 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 800637e:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8006380:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8006382:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8006386:	f001 f8f1 	bl	800756c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800638a:	4404      	add	r4, r0
 800638c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8006390:	db05      	blt.n	800639e <ip_reass_free_complete_datagram+0xbe>
 8006392:	4643      	mov	r3, r8
 8006394:	22cc      	movs	r2, #204	; 0xcc
 8006396:	4649      	mov	r1, r9
 8006398:	4650      	mov	r0, sl
 800639a:	f005 fce5 	bl	800bd68 <iprintf>
    pbuf_free(pcur);
 800639e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 80063a0:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 80063a2:	f000 ff2d 	bl	8007200 <pbuf_free>
    p = iprh->next_pbuf;
 80063a6:	465e      	mov	r6, fp
 80063a8:	e7d2      	b.n	8006350 <ip_reass_free_complete_datagram+0x70>
 80063aa:	bf00      	nop
 80063ac:	0800d3cd 	.word	0x0800d3cd
 80063b0:	0800d41f 	.word	0x0800d41f
 80063b4:	0800cb76 	.word	0x0800cb76
 80063b8:	0800d42b 	.word	0x0800d42b
 80063bc:	20003eec 	.word	0x20003eec
 80063c0:	0800d45a 	.word	0x0800d45a
 80063c4:	0800d43d 	.word	0x0800d43d

080063c8 <ip_reass_remove_oldest_datagram>:
{
 80063c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063cc:	4606      	mov	r6, r0
 80063ce:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 80063d0:	2500      	movs	r5, #0
    r = reassdatagrams;
 80063d2:	f8df 8068 	ldr.w	r8, [pc, #104]	; 800643c <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 80063d6:	2400      	movs	r4, #0
    r = reassdatagrams;
 80063d8:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 80063dc:	4621      	mov	r1, r4
    prev = NULL;
 80063de:	46a6      	mov	lr, r4
    oldest = NULL;
 80063e0:	4620      	mov	r0, r4
    while (r != NULL) {
 80063e2:	b953      	cbnz	r3, 80063fa <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 80063e4:	b110      	cbz	r0, 80063ec <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80063e6:	f7ff ff7b 	bl	80062e0 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 80063ea:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80063ec:	42bd      	cmp	r5, r7
 80063ee:	da01      	bge.n	80063f4 <ip_reass_remove_oldest_datagram+0x2c>
 80063f0:	2c01      	cmp	r4, #1
 80063f2:	dcf0      	bgt.n	80063d6 <ip_reass_remove_oldest_datagram+0xe>
}
 80063f4:	4628      	mov	r0, r5
 80063f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80063fa:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 80063fe:	695a      	ldr	r2, [r3, #20]
 8006400:	4562      	cmp	r2, ip
 8006402:	d109      	bne.n	8006418 <ip_reass_remove_oldest_datagram+0x50>
 8006404:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	4562      	cmp	r2, ip
 800640c:	d104      	bne.n	8006418 <ip_reass_remove_oldest_datagram+0x50>
 800640e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8006412:	88b2      	ldrh	r2, [r6, #4]
 8006414:	4594      	cmp	ip, r2
 8006416:	d008      	beq.n	800642a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8006418:	3401      	adds	r4, #1
        if (oldest == NULL) {
 800641a:	b160      	cbz	r0, 8006436 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 800641c:	7fc2      	ldrb	r2, [r0, #31]
 800641e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8006422:	4594      	cmp	ip, r2
 8006424:	bf9c      	itt	ls
 8006426:	4671      	movls	r1, lr
 8006428:	4618      	movls	r0, r3
      if (r->next != NULL) {
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	2a00      	cmp	r2, #0
 800642e:	bf18      	it	ne
 8006430:	469e      	movne	lr, r3
 8006432:	4613      	mov	r3, r2
 8006434:	e7d5      	b.n	80063e2 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8006436:	4671      	mov	r1, lr
 8006438:	4618      	mov	r0, r3
 800643a:	e7f6      	b.n	800642a <ip_reass_remove_oldest_datagram+0x62>
 800643c:	20003ef0 	.word	0x20003ef0

08006440 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8006440:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8006442:	4604      	mov	r4, r0
 8006444:	b930      	cbnz	r0, 8006454 <ip_frag_free_pbuf_custom_ref+0x14>
 8006446:	4b06      	ldr	r3, [pc, #24]	; (8006460 <ip_frag_free_pbuf_custom_ref+0x20>)
 8006448:	f240 22ae 	movw	r2, #686	; 0x2ae
 800644c:	4905      	ldr	r1, [pc, #20]	; (8006464 <ip_frag_free_pbuf_custom_ref+0x24>)
 800644e:	4806      	ldr	r0, [pc, #24]	; (8006468 <ip_frag_free_pbuf_custom_ref+0x28>)
 8006450:	f005 fc8a 	bl	800bd68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8006454:	4621      	mov	r1, r4
 8006456:	2005      	movs	r0, #5
}
 8006458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 800645c:	f000 bd4a 	b.w	8006ef4 <memp_free>
 8006460:	0800d3cd 	.word	0x0800d3cd
 8006464:	0800daf3 	.word	0x0800daf3
 8006468:	0800cb76 	.word	0x0800cb76

0800646c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800646c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800646e:	4604      	mov	r4, r0
 8006470:	b930      	cbnz	r0, 8006480 <ipfrag_free_pbuf_custom+0x14>
 8006472:	4b08      	ldr	r3, [pc, #32]	; (8006494 <ipfrag_free_pbuf_custom+0x28>)
 8006474:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8006478:	4907      	ldr	r1, [pc, #28]	; (8006498 <ipfrag_free_pbuf_custom+0x2c>)
 800647a:	4808      	ldr	r0, [pc, #32]	; (800649c <ipfrag_free_pbuf_custom+0x30>)
 800647c:	f005 fc74 	bl	800bd68 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8006480:	6960      	ldr	r0, [r4, #20]
 8006482:	b108      	cbz	r0, 8006488 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8006484:	f000 febc 	bl	8007200 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8006488:	4620      	mov	r0, r4
}
 800648a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 800648e:	f7ff bfd7 	b.w	8006440 <ip_frag_free_pbuf_custom_ref>
 8006492:	bf00      	nop
 8006494:	0800d3cd 	.word	0x0800d3cd
 8006498:	0800d475 	.word	0x0800d475
 800649c:	0800cb76 	.word	0x0800cb76

080064a0 <ip_reass_tmr>:
{
 80064a0:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 80064a2:	4b08      	ldr	r3, [pc, #32]	; (80064c4 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 80064a4:	2400      	movs	r4, #0
  r = reassdatagrams;
 80064a6:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 80064a8:	b900      	cbnz	r0, 80064ac <ip_reass_tmr+0xc>
}
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 80064ac:	7fc3      	ldrb	r3, [r0, #31]
 80064ae:	6805      	ldr	r5, [r0, #0]
 80064b0:	b123      	cbz	r3, 80064bc <ip_reass_tmr+0x1c>
      r->timer--;
 80064b2:	3b01      	subs	r3, #1
 80064b4:	4604      	mov	r4, r0
 80064b6:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 80064b8:	4628      	mov	r0, r5
 80064ba:	e7f5      	b.n	80064a8 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 80064bc:	4621      	mov	r1, r4
 80064be:	f7ff ff0f 	bl	80062e0 <ip_reass_free_complete_datagram>
 80064c2:	e7f9      	b.n	80064b8 <ip_reass_tmr+0x18>
 80064c4:	20003ef0 	.word	0x20003ef0

080064c8 <ip4_reass>:
{
 80064c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 80064cc:	6845      	ldr	r5, [r0, #4]
{
 80064ce:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 80064d0:	782b      	ldrb	r3, [r5, #0]
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	f040 808c 	bne.w	80065f4 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80064dc:	88e8      	ldrh	r0, [r5, #6]
 80064de:	f7fd ffd5 	bl	800448c <lwip_htons>
 80064e2:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80064e6:	4cb2      	ldr	r4, [pc, #712]	; (80067b0 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80064e8:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80064ec:	8868      	ldrh	r0, [r5, #2]
 80064ee:	f7fd ffcd 	bl	800448c <lwip_htons>
 80064f2:	782b      	ldrb	r3, [r5, #0]
 80064f4:	f003 030f 	and.w	r3, r3, #15
 80064f8:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 80064fc:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 80064fe:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006500:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8006502:	f001 f833 	bl	800756c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006506:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8006508:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800650a:	4403      	add	r3, r0
 800650c:	2b0a      	cmp	r3, #10
 800650e:	dc68      	bgt.n	80065e2 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006510:	4ea8      	ldr	r6, [pc, #672]	; (80067b4 <ip4_reass+0x2ec>)
 8006512:	6834      	ldr	r4, [r6, #0]
 8006514:	2c00      	cmp	r4, #0
 8006516:	d172      	bne.n	80065fe <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006518:	2004      	movs	r0, #4
 800651a:	f000 fccf 	bl	8006ebc <memp_malloc>
  if (ipr == NULL) {
 800651e:	4604      	mov	r4, r0
 8006520:	b958      	cbnz	r0, 800653a <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006522:	4651      	mov	r1, sl
 8006524:	4628      	mov	r0, r5
 8006526:	f7ff ff4f 	bl	80063c8 <ip_reass_remove_oldest_datagram>
 800652a:	4582      	cmp	sl, r0
 800652c:	dc62      	bgt.n	80065f4 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800652e:	2004      	movs	r0, #4
 8006530:	f000 fcc4 	bl	8006ebc <memp_malloc>
    if (ipr == NULL)
 8006534:	4604      	mov	r4, r0
 8006536:	2800      	cmp	r0, #0
 8006538:	d05c      	beq.n	80065f4 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800653a:	2220      	movs	r2, #32
 800653c:	2100      	movs	r1, #0
 800653e:	4620      	mov	r0, r4
 8006540:	f005 fb5e 	bl	800bc00 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8006544:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006546:	f104 0208 	add.w	r2, r4, #8
 800654a:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 800654e:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 8006550:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 8006552:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 8006554:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8006556:	462b      	mov	r3, r5
 8006558:	f853 0b04 	ldr.w	r0, [r3], #4
 800655c:	428b      	cmp	r3, r1
 800655e:	f842 0b04 	str.w	r0, [r2], #4
 8006562:	d1f9      	bne.n	8006558 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8006564:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 8006568:	f01b 0b20 	ands.w	fp, fp, #32
 800656c:	d108      	bne.n	8006580 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 800656e:	9b01      	ldr	r3, [sp, #4]
 8006570:	444b      	add	r3, r9
 8006572:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8006574:	4599      	cmp	r9, r3
 8006576:	d83d      	bhi.n	80065f4 <ip4_reass+0x12c>
 8006578:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800657c:	4293      	cmp	r3, r2
 800657e:	d839      	bhi.n	80065f4 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 8006580:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006582:	8868      	ldrh	r0, [r5, #2]
 8006584:	f7fd ff82 	bl	800448c <lwip_htons>
 8006588:	f895 8000 	ldrb.w	r8, [r5]
 800658c:	f008 080f 	and.w	r8, r8, #15
 8006590:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006594:	88e8      	ldrh	r0, [r5, #6]
 8006596:	f7fd ff79 	bl	800448c <lwip_htons>
 800659a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800659e:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 80065a2:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 80065a6:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 80065a8:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 80065aa:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 80065ac:	4672      	mov	r2, lr
  iprh->end = offset + len;
 80065ae:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 80065b2:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 80065b6:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 80065b8:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 80065ba:	7075      	strb	r5, [r6, #1]
 80065bc:	70b5      	strb	r5, [r6, #2]
 80065be:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 80065c0:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 80065c2:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 80065c4:	bb52      	cbnz	r2, 800661c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	f040 8092 	bne.w	80066f0 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80065cc:	f1be 0f00 	cmp.w	lr, #0
 80065d0:	d07d      	beq.n	80066ce <ip4_reass+0x206>
 80065d2:	4b79      	ldr	r3, [pc, #484]	; (80067b8 <ip4_reass+0x2f0>)
 80065d4:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80065d8:	4978      	ldr	r1, [pc, #480]	; (80067bc <ip4_reass+0x2f4>)
 80065da:	4879      	ldr	r0, [pc, #484]	; (80067c0 <ip4_reass+0x2f8>)
 80065dc:	f005 fbc4 	bl	800bd68 <iprintf>
 80065e0:	e075      	b.n	80066ce <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80065e2:	4601      	mov	r1, r0
 80065e4:	4628      	mov	r0, r5
 80065e6:	f7ff feef 	bl	80063c8 <ip_reass_remove_oldest_datagram>
 80065ea:	b118      	cbz	r0, 80065f4 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80065ec:	8823      	ldrh	r3, [r4, #0]
 80065ee:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80065f0:	2b0a      	cmp	r3, #10
 80065f2:	dd8d      	ble.n	8006510 <ip4_reass+0x48>
  pbuf_free(p);
 80065f4:	4638      	mov	r0, r7
 80065f6:	f000 fe03 	bl	8007200 <pbuf_free>
  return NULL;
 80065fa:	2500      	movs	r5, #0
 80065fc:	e0d4      	b.n	80067a8 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80065fe:	68eb      	ldr	r3, [r5, #12]
 8006600:	6962      	ldr	r2, [r4, #20]
 8006602:	429a      	cmp	r2, r3
 8006604:	d108      	bne.n	8006618 <ip4_reass+0x150>
 8006606:	692b      	ldr	r3, [r5, #16]
 8006608:	69a2      	ldr	r2, [r4, #24]
 800660a:	429a      	cmp	r2, r3
 800660c:	d104      	bne.n	8006618 <ip4_reass+0x150>
 800660e:	89a2      	ldrh	r2, [r4, #12]
 8006610:	88ab      	ldrh	r3, [r5, #4]
 8006612:	429a      	cmp	r2, r3
 8006614:	f000 80dc 	beq.w	80067d0 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006618:	6824      	ldr	r4, [r4, #0]
 800661a:	e77b      	b.n	8006514 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800661c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8006620:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8006624:	4288      	cmp	r0, r1
 8006626:	d254      	bcs.n	80066d2 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006628:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800662a:	2d00      	cmp	r5, #0
 800662c:	d04d      	beq.n	80066ca <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800662e:	88ea      	ldrh	r2, [r5, #6]
 8006630:	4290      	cmp	r0, r2
 8006632:	f0c0 8091 	bcc.w	8006758 <ip4_reass+0x290>
 8006636:	428b      	cmp	r3, r1
 8006638:	f200 808e 	bhi.w	8006758 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 800663c:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 800663e:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006640:	f040 80e4 	bne.w	800680c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8006644:	f1bb 0f00 	cmp.w	fp, #0
 8006648:	d004      	beq.n	8006654 <ip4_reass+0x18c>
 800664a:	7fa3      	ldrb	r3, [r4, #30]
 800664c:	f013 0301 	ands.w	r3, r3, #1
 8006650:	f000 80da 	beq.w	8006808 <ip4_reass+0x340>
    if (valid) {
 8006654:	f1b8 0f00 	cmp.w	r8, #0
 8006658:	d159      	bne.n	800670e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 800665a:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800665e:	4e54      	ldr	r6, [pc, #336]	; (80067b0 <ip4_reass+0x2e8>)
 8006660:	8833      	ldrh	r3, [r6, #0]
 8006662:	449a      	add	sl, r3
 8006664:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 8006668:	f1bb 0f00 	cmp.w	fp, #0
 800666c:	d107      	bne.n	800667e <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8006672:	7fa3      	ldrb	r3, [r4, #30]
 8006674:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8006678:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800667c:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800667e:	f1b8 0f01 	cmp.w	r8, #1
 8006682:	d1ba      	bne.n	80065fa <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 8006684:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006686:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 800668a:	3314      	adds	r3, #20
 800668c:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800668e:	6863      	ldr	r3, [r4, #4]
 8006690:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006692:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006696:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006698:	462a      	mov	r2, r5
 800669a:	f853 0b04 	ldr.w	r0, [r3], #4
 800669e:	428b      	cmp	r3, r1
 80066a0:	f842 0b04 	str.w	r0, [r2], #4
 80066a4:	d1f9      	bne.n	800669a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80066a6:	8ba0      	ldrh	r0, [r4, #28]
 80066a8:	f7fd fef0 	bl	800448c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 80066ac:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80066ae:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80066b0:	71ab      	strb	r3, [r5, #6]
 80066b2:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80066b4:	72ab      	strb	r3, [r5, #10]
 80066b6:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 80066b8:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	d157      	bne.n	800676e <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 80066be:	4b3d      	ldr	r3, [pc, #244]	; (80067b4 <ip4_reass+0x2ec>)
 80066c0:	6819      	ldr	r1, [r3, #0]
 80066c2:	428c      	cmp	r4, r1
 80066c4:	d165      	bne.n	8006792 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 80066c6:	4639      	mov	r1, r7
 80066c8:	e065      	b.n	8006796 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 80066ca:	428b      	cmp	r3, r1
 80066cc:	d844      	bhi.n	8006758 <ip4_reass+0x290>
      ipr->p = new_p;
 80066ce:	6067      	str	r7, [r4, #4]
 80066d0:	e7b8      	b.n	8006644 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 80066d2:	d041      	beq.n	8006758 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 80066d4:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80066d8:	4282      	cmp	r2, r0
 80066da:	d83d      	bhi.n	8006758 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 80066dc:	b125      	cbz	r5, 80066e8 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 80066de:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 80066e0:	428a      	cmp	r2, r1
 80066e2:	bf18      	it	ne
 80066e4:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 80066e8:	f8dc 2000 	ldr.w	r2, [ip]
 80066ec:	4665      	mov	r5, ip
 80066ee:	e769      	b.n	80065c4 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80066f0:	88eb      	ldrh	r3, [r5, #6]
 80066f2:	4283      	cmp	r3, r0
 80066f4:	d906      	bls.n	8006704 <ip4_reass+0x23c>
 80066f6:	4b30      	ldr	r3, [pc, #192]	; (80067b8 <ip4_reass+0x2f0>)
 80066f8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80066fc:	4931      	ldr	r1, [pc, #196]	; (80067c4 <ip4_reass+0x2fc>)
 80066fe:	4830      	ldr	r0, [pc, #192]	; (80067c0 <ip4_reass+0x2f8>)
 8006700:	f005 fb32 	bl	800bd68 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8006704:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006706:	88ea      	ldrh	r2, [r5, #6]
 8006708:	88b3      	ldrh	r3, [r6, #4]
 800670a:	429a      	cmp	r2, r3
 800670c:	e798      	b.n	8006640 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800670e:	6863      	ldr	r3, [r4, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0a2      	beq.n	800665a <ip4_reass+0x192>
 8006714:	6859      	ldr	r1, [r3, #4]
 8006716:	888b      	ldrh	r3, [r1, #4]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d19e      	bne.n	800665a <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800671c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800671e:	b99b      	cbnz	r3, 8006748 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8006720:	42b1      	cmp	r1, r6
 8006722:	d106      	bne.n	8006732 <ip4_reass+0x26a>
 8006724:	4b24      	ldr	r3, [pc, #144]	; (80067b8 <ip4_reass+0x2f0>)
 8006726:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800672a:	4927      	ldr	r1, [pc, #156]	; (80067c8 <ip4_reass+0x300>)
 800672c:	4824      	ldr	r0, [pc, #144]	; (80067c0 <ip4_reass+0x2f8>)
 800672e:	f005 fb1b 	bl	800bd68 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8006732:	6833      	ldr	r3, [r6, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d092      	beq.n	800665e <ip4_reass+0x196>
 8006738:	4b1f      	ldr	r3, [pc, #124]	; (80067b8 <ip4_reass+0x2f0>)
 800673a:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800673e:	4923      	ldr	r1, [pc, #140]	; (80067cc <ip4_reass+0x304>)
 8006740:	481f      	ldr	r0, [pc, #124]	; (80067c0 <ip4_reass+0x2f8>)
 8006742:	f005 fb11 	bl	800bd68 <iprintf>
 8006746:	e78a      	b.n	800665e <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 8006748:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 800674a:	88f0      	ldrh	r0, [r6, #6]
 800674c:	8893      	ldrh	r3, [r2, #4]
 800674e:	4298      	cmp	r0, r3
 8006750:	d183      	bne.n	800665a <ip4_reass+0x192>
          q = iprh->next_pbuf;
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	4616      	mov	r6, r2
 8006756:	e7e2      	b.n	800671e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 8006758:	4638      	mov	r0, r7
 800675a:	f000 ff07 	bl	800756c <pbuf_clen>
 800675e:	4a14      	ldr	r2, [pc, #80]	; (80067b0 <ip4_reass+0x2e8>)
 8006760:	8813      	ldrh	r3, [r2, #0]
 8006762:	1a18      	subs	r0, r3, r0
 8006764:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 8006766:	4638      	mov	r0, r7
 8006768:	f000 fd4a 	bl	8007200 <pbuf_free>
 800676c:	e742      	b.n	80065f4 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 800676e:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 8006772:	f06f 0113 	mvn.w	r1, #19
 8006776:	4638      	mov	r0, r7
 8006778:	f000 fd3c 	bl	80071f4 <pbuf_header>
      pbuf_cat(p, r);
 800677c:	4639      	mov	r1, r7
 800677e:	4628      	mov	r0, r5
 8006780:	f000 ff18 	bl	80075b4 <pbuf_cat>
      r = iprh->next_pbuf;
 8006784:	f8d8 7000 	ldr.w	r7, [r8]
 8006788:	e797      	b.n	80066ba <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 800678a:	680b      	ldr	r3, [r1, #0]
 800678c:	429c      	cmp	r4, r3
 800678e:	d002      	beq.n	8006796 <ip4_reass+0x2ce>
 8006790:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006792:	2900      	cmp	r1, #0
 8006794:	d1f9      	bne.n	800678a <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006796:	4620      	mov	r0, r4
 8006798:	f7ff fd80 	bl	800629c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800679c:	4628      	mov	r0, r5
 800679e:	f000 fee5 	bl	800756c <pbuf_clen>
 80067a2:	8833      	ldrh	r3, [r6, #0]
 80067a4:	1a18      	subs	r0, r3, r0
 80067a6:	8030      	strh	r0, [r6, #0]
}
 80067a8:	4628      	mov	r0, r5
 80067aa:	b003      	add	sp, #12
 80067ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b0:	20003eec 	.word	0x20003eec
 80067b4:	20003ef0 	.word	0x20003ef0
 80067b8:	0800d3cd 	.word	0x0800d3cd
 80067bc:	0800d367 	.word	0x0800d367
 80067c0:	0800cb76 	.word	0x0800cb76
 80067c4:	0800d349 	.word	0x0800d349
 80067c8:	0800d39e 	.word	0x0800d39e
 80067cc:	0800d3ab 	.word	0x0800d3ab
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80067d0:	88e8      	ldrh	r0, [r5, #6]
 80067d2:	f7fd fe5b 	bl	800448c <lwip_htons>
 80067d6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80067da:	2800      	cmp	r0, #0
 80067dc:	f47f aec2 	bne.w	8006564 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80067e0:	89e0      	ldrh	r0, [r4, #14]
 80067e2:	f7fd fe53 	bl	800448c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80067e6:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80067ea:	2800      	cmp	r0, #0
 80067ec:	f43f aeba 	beq.w	8006564 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80067f0:	462b      	mov	r3, r5
 80067f2:	f104 0208 	add.w	r2, r4, #8
 80067f6:	f105 0114 	add.w	r1, r5, #20
 80067fa:	f853 0b04 	ldr.w	r0, [r3], #4
 80067fe:	428b      	cmp	r3, r1
 8006800:	f842 0b04 	str.w	r0, [r2], #4
 8006804:	d1f9      	bne.n	80067fa <ip4_reass+0x332>
 8006806:	e6ad      	b.n	8006564 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006808:	4698      	mov	r8, r3
 800680a:	e728      	b.n	800665e <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800680c:	f1bb 0f00 	cmp.w	fp, #0
 8006810:	f43f af23 	beq.w	800665a <ip4_reass+0x192>
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	e717      	b.n	800664a <ip4_reass+0x182>
 800681a:	bf00      	nop

0800681c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800681c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006820:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 8006824:	2308      	movs	r3, #8
{
 8006826:	b08b      	sub	sp, #44	; 0x2c
 8006828:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800682a:	f1a8 0814 	sub.w	r8, r8, #20
{
 800682e:	468b      	mov	fp, r1
 8006830:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006832:	fb98 f8f3 	sdiv	r8, r8, r3
 8006836:	fa1f f388 	uxth.w	r3, r8
 800683a:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800683c:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800683e:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 8006840:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8006842:	f006 060f 	and.w	r6, r6, #15
 8006846:	00b6      	lsls	r6, r6, #2
 8006848:	2e14      	cmp	r6, #20
 800684a:	d00b      	beq.n	8006864 <ip4_frag+0x48>
 800684c:	4b5a      	ldr	r3, [pc, #360]	; (80069b8 <ip4_frag+0x19c>)
 800684e:	f240 22e1 	movw	r2, #737	; 0x2e1
 8006852:	495a      	ldr	r1, [pc, #360]	; (80069bc <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006854:	485a      	ldr	r0, [pc, #360]	; (80069c0 <ip4_frag+0x1a4>)
 8006856:	f005 fa87 	bl	800bd68 <iprintf>
 800685a:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 800685e:	b00b      	add	sp, #44	; 0x2c
 8006860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8006864:	9b02      	ldr	r3, [sp, #8]
 8006866:	88d8      	ldrh	r0, [r3, #6]
 8006868:	f7fd fe10 	bl	800448c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 800686c:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006870:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 8006874:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8006876:	d004      	beq.n	8006882 <ip4_frag+0x66>
 8006878:	4b4f      	ldr	r3, [pc, #316]	; (80069b8 <ip4_frag+0x19c>)
 800687a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800687e:	4951      	ldr	r1, [pc, #324]	; (80069c4 <ip4_frag+0x1a8>)
 8006880:	e7e8      	b.n	8006854 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 8006882:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 8006884:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 8006888:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 800688a:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 800688e:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8006890:	9307      	str	r3, [sp, #28]
  while (left) {
 8006892:	b90d      	cbnz	r5, 8006898 <ip4_frag+0x7c>
  return ERR_OK;
 8006894:	4628      	mov	r0, r5
 8006896:	e7e2      	b.n	800685e <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006898:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800689a:	2200      	movs	r2, #0
 800689c:	2114      	movs	r1, #20
 800689e:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 80068a0:	42ab      	cmp	r3, r5
 80068a2:	bfa8      	it	ge
 80068a4:	462b      	movge	r3, r5
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80068aa:	f000 fd13 	bl	80072d4 <pbuf_alloc>
    if (rambuf == NULL) {
 80068ae:	4680      	mov	r8, r0
 80068b0:	b370      	cbz	r0, 8006910 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80068b2:	897b      	ldrh	r3, [r7, #10]
 80068b4:	2b13      	cmp	r3, #19
 80068b6:	d806      	bhi.n	80068c6 <ip4_frag+0xaa>
 80068b8:	4b3f      	ldr	r3, [pc, #252]	; (80069b8 <ip4_frag+0x19c>)
 80068ba:	f240 3209 	movw	r2, #777	; 0x309
 80068be:	4942      	ldr	r1, [pc, #264]	; (80069c8 <ip4_frag+0x1ac>)
 80068c0:	483f      	ldr	r0, [pc, #252]	; (80069c0 <ip4_frag+0x1a4>)
 80068c2:	f005 fa51 	bl	800bd68 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80068c6:	9b02      	ldr	r3, [sp, #8]
 80068c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80068cc:	4619      	mov	r1, r3
 80068ce:	3114      	adds	r1, #20
 80068d0:	f853 0b04 	ldr.w	r0, [r3], #4
 80068d4:	428b      	cmp	r3, r1
 80068d6:	f842 0b04 	str.w	r0, [r2], #4
 80068da:	d1f9      	bne.n	80068d0 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80068dc:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 80068e0:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80068e4:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 80068e6:	f1b9 0f00 	cmp.w	r9, #0
 80068ea:	d037      	beq.n	800695c <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 80068ec:	897c      	ldrh	r4, [r7, #10]
 80068ee:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80068f0:	b2a4      	uxth	r4, r4
 80068f2:	454c      	cmp	r4, r9
 80068f4:	bf28      	it	cs
 80068f6:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 80068f8:	b914      	cbnz	r4, 8006900 <ip4_frag+0xe4>
        p = p->next;
 80068fa:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 80068fc:	2600      	movs	r6, #0
 80068fe:	e7f2      	b.n	80068e6 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006900:	2005      	movs	r0, #5
 8006902:	f000 fadb 	bl	8006ebc <memp_malloc>
      if (pcr == NULL) {
 8006906:	4682      	mov	sl, r0
 8006908:	b928      	cbnz	r0, 8006916 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800690a:	4640      	mov	r0, r8
 800690c:	f000 fc78 	bl	8007200 <pbuf_free>
  return ERR_MEM;
 8006910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006914:	e7a3      	b.n	800685e <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006916:	9401      	str	r4, [sp, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4621      	mov	r1, r4
 800691e:	4433      	add	r3, r6
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	4603      	mov	r3, r0
 8006924:	2004      	movs	r0, #4
 8006926:	f000 fc2d 	bl	8007184 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800692a:	b918      	cbnz	r0, 8006934 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800692c:	4650      	mov	r0, sl
 800692e:	f7ff fd87 	bl	8006440 <ip_frag_free_pbuf_custom_ref>
 8006932:	e7ea      	b.n	800690a <ip4_frag+0xee>
 8006934:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 8006936:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 800693a:	4638      	mov	r0, r7
 800693c:	f000 fe1e 	bl	800757c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8006940:	4b22      	ldr	r3, [pc, #136]	; (80069cc <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 8006942:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 8006946:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800694a:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 800694e:	4640      	mov	r0, r8
 8006950:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006952:	f000 fe2f 	bl	80075b4 <pbuf_cat>
      if (left_to_copy) {
 8006956:	f1b9 0f00 	cmp.w	r9, #0
 800695a:	d1ce      	bne.n	80068fa <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 800695c:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 800695e:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 8006960:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 8006964:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 8006968:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 800696a:	3b13      	subs	r3, #19
    if (!last) {
 800696c:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 800696e:	bfa8      	it	ge
 8006970:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8006974:	f7fd fd8a 	bl	800448c <lwip_htons>
 8006978:	9b03      	ldr	r3, [sp, #12]
 800697a:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800697c:	9b05      	ldr	r3, [sp, #20]
 800697e:	f103 0014 	add.w	r0, r3, #20
 8006982:	b280      	uxth	r0, r0
 8006984:	f7fd fd82 	bl	800448c <lwip_htons>
 8006988:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 800698a:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 800698c:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800698e:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006990:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8006992:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8006994:	7293      	strb	r3, [r2, #10]
 8006996:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8006998:	f8db 3014 	ldr.w	r3, [fp, #20]
 800699c:	9a08      	ldr	r2, [sp, #32]
 800699e:	4798      	blx	r3
    pbuf_free(rambuf);
 80069a0:	4640      	mov	r0, r8
 80069a2:	f000 fc2d 	bl	8007200 <pbuf_free>
    left -= fragsize;
 80069a6:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 80069a8:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 80069aa:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	4413      	add	r3, r2
    left -= fragsize;
 80069b0:	b2ad      	uxth	r5, r5
    ofo += nfb;
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	9304      	str	r3, [sp, #16]
 80069b6:	e76c      	b.n	8006892 <ip4_frag+0x76>
 80069b8:	0800d3cd 	.word	0x0800d3cd
 80069bc:	0800d2e8 	.word	0x0800d2e8
 80069c0:	0800cb76 	.word	0x0800cb76
 80069c4:	0800d30f 	.word	0x0800d30f
 80069c8:	0800d329 	.word	0x0800d329
 80069cc:	0800646d 	.word	0x0800646d

080069d0 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80069d0:	4b12      	ldr	r3, [pc, #72]	; (8006a1c <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 80069d2:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80069d4:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <mem_init+0x50>)
 80069d6:	f023 0303 	bic.w	r3, r3, #3
{
 80069da:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80069dc:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 80069de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 80069e2:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80069e4:	1898      	adds	r0, r3, r2
  mem->used = 0;
 80069e6:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80069e8:	490e      	ldr	r1, [pc, #56]	; (8006a24 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 80069ea:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80069ec:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 80069ee:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 80069f0:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 80069f4:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80069f8:	4a0b      	ldr	r2, [pc, #44]	; (8006a28 <mem_init+0x58>)
  ram_end->used = 1;
 80069fa:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80069fe:	480b      	ldr	r0, [pc, #44]	; (8006a2c <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 8006a00:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006a02:	f003 ff85 	bl	800a910 <sys_mutex_new>
 8006a06:	b140      	cbz	r0, 8006a1a <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006a08:	4b09      	ldr	r3, [pc, #36]	; (8006a30 <mem_init+0x60>)
 8006a0a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8006a0e:	4909      	ldr	r1, [pc, #36]	; (8006a34 <mem_init+0x64>)
 8006a10:	4809      	ldr	r0, [pc, #36]	; (8006a38 <mem_init+0x68>)
  }
}
 8006a12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006a16:	f005 b9a7 	b.w	800bd68 <iprintf>
 8006a1a:	bd10      	pop	{r4, pc}
 8006a1c:	20003fe3 	.word	0x20003fe3
 8006a20:	20003efc 	.word	0x20003efc
 8006a24:	20003f00 	.word	0x20003f00
 8006a28:	20003ef4 	.word	0x20003ef4
 8006a2c:	20003ef8 	.word	0x20003ef8
 8006a30:	0800d543 	.word	0x0800d543
 8006a34:	0800d572 	.word	0x0800d572
 8006a38:	0800cb76 	.word	0x0800cb76

08006a3c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8006a3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8006a40:	4604      	mov	r4, r0
 8006a42:	2800      	cmp	r0, #0
 8006a44:	f000 8097 	beq.w	8006b76 <mem_free+0x13a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 8006a48:	0783      	lsls	r3, r0, #30
 8006a4a:	d006      	beq.n	8006a5a <mem_free+0x1e>
 8006a4c:	4b4b      	ldr	r3, [pc, #300]	; (8006b7c <mem_free+0x140>)
 8006a4e:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 8006a52:	494b      	ldr	r1, [pc, #300]	; (8006b80 <mem_free+0x144>)
 8006a54:	484b      	ldr	r0, [pc, #300]	; (8006b84 <mem_free+0x148>)
 8006a56:	f005 f987 	bl	800bd68 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006a5a:	4f4b      	ldr	r7, [pc, #300]	; (8006b88 <mem_free+0x14c>)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	429c      	cmp	r4, r3
 8006a60:	d303      	bcc.n	8006a6a <mem_free+0x2e>
 8006a62:	4b4a      	ldr	r3, [pc, #296]	; (8006b8c <mem_free+0x150>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	429c      	cmp	r4, r3
 8006a68:	d306      	bcc.n	8006a78 <mem_free+0x3c>
 8006a6a:	4b44      	ldr	r3, [pc, #272]	; (8006b7c <mem_free+0x140>)
 8006a6c:	f240 12af 	movw	r2, #431	; 0x1af
 8006a70:	4947      	ldr	r1, [pc, #284]	; (8006b90 <mem_free+0x154>)
 8006a72:	4844      	ldr	r0, [pc, #272]	; (8006b84 <mem_free+0x148>)
 8006a74:	f005 f978 	bl	800bd68 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	429c      	cmp	r4, r3
 8006a7c:	d304      	bcc.n	8006a88 <mem_free+0x4c>
 8006a7e:	4b43      	ldr	r3, [pc, #268]	; (8006b8c <mem_free+0x150>)
 8006a80:	681a      	ldr	r2, [r3, #0]
 8006a82:	4698      	mov	r8, r3
 8006a84:	4294      	cmp	r4, r2
 8006a86:	d305      	bcc.n	8006a94 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006a88:	f003 ff6a 	bl	800a960 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8006a8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8006a90:	f003 bf72 	b.w	800a978 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8006a94:	483f      	ldr	r0, [pc, #252]	; (8006b94 <mem_free+0x158>)
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006a96:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_MEM_FREE_PROTECT();
 8006a9a:	f003 ff48 	bl	800a92e <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 8006a9e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006aa2:	b933      	cbnz	r3, 8006ab2 <mem_free+0x76>
 8006aa4:	4b35      	ldr	r3, [pc, #212]	; (8006b7c <mem_free+0x140>)
 8006aa6:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 8006aaa:	493b      	ldr	r1, [pc, #236]	; (8006b98 <mem_free+0x15c>)
 8006aac:	4835      	ldr	r0, [pc, #212]	; (8006b84 <mem_free+0x148>)
 8006aae:	f005 f95b 	bl	800bd68 <iprintf>
  mem->used = 0;
 8006ab2:	2300      	movs	r3, #0
  if (mem < lfree) {
 8006ab4:	4e39      	ldr	r6, [pc, #228]	; (8006b9c <mem_free+0x160>)
  mem->used = 0;
 8006ab6:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 8006aba:	6833      	ldr	r3, [r6, #0]
 8006abc:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006abe:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8006ac0:	bf38      	it	cc
 8006ac2:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006ac4:	429d      	cmp	r5, r3
 8006ac6:	d206      	bcs.n	8006ad6 <mem_free+0x9a>
 8006ac8:	4b2c      	ldr	r3, [pc, #176]	; (8006b7c <mem_free+0x140>)
 8006aca:	f240 125d 	movw	r2, #349	; 0x15d
 8006ace:	4934      	ldr	r1, [pc, #208]	; (8006ba0 <mem_free+0x164>)
 8006ad0:	482c      	ldr	r0, [pc, #176]	; (8006b84 <mem_free+0x148>)
 8006ad2:	f005 f949 	bl	800bd68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006ad6:	f8d8 3000 	ldr.w	r3, [r8]
 8006ada:	429d      	cmp	r5, r3
 8006adc:	d306      	bcc.n	8006aec <mem_free+0xb0>
 8006ade:	4b27      	ldr	r3, [pc, #156]	; (8006b7c <mem_free+0x140>)
 8006ae0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006ae4:	492f      	ldr	r1, [pc, #188]	; (8006ba4 <mem_free+0x168>)
 8006ae6:	4827      	ldr	r0, [pc, #156]	; (8006b84 <mem_free+0x148>)
 8006ae8:	f005 f93e 	bl	800bd68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006aec:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006af0:	b133      	cbz	r3, 8006b00 <mem_free+0xc4>
 8006af2:	4b22      	ldr	r3, [pc, #136]	; (8006b7c <mem_free+0x140>)
 8006af4:	f240 125f 	movw	r2, #351	; 0x15f
 8006af8:	492b      	ldr	r1, [pc, #172]	; (8006ba8 <mem_free+0x16c>)
 8006afa:	4822      	ldr	r0, [pc, #136]	; (8006b84 <mem_free+0x148>)
 8006afc:	f005 f934 	bl	800bd68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006b00:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006b04:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006b08:	d906      	bls.n	8006b18 <mem_free+0xdc>
 8006b0a:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <mem_free+0x140>)
 8006b0c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006b10:	4926      	ldr	r1, [pc, #152]	; (8006bac <mem_free+0x170>)
 8006b12:	481c      	ldr	r0, [pc, #112]	; (8006b84 <mem_free+0x148>)
 8006b14:	f005 f928 	bl	800bd68 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006b1e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006b20:	4295      	cmp	r5, r2
 8006b22:	d011      	beq.n	8006b48 <mem_free+0x10c>
 8006b24:	7910      	ldrb	r0, [r2, #4]
 8006b26:	b978      	cbnz	r0, 8006b48 <mem_free+0x10c>
 8006b28:	f8d8 0000 	ldr.w	r0, [r8]
 8006b2c:	4282      	cmp	r2, r0
 8006b2e:	d00b      	beq.n	8006b48 <mem_free+0x10c>
    if (lfree == nmem) {
 8006b30:	6830      	ldr	r0, [r6, #0]
 8006b32:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 8006b34:	5a5a      	ldrh	r2, [r3, r1]
 8006b36:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006b3a:	5a5a      	ldrh	r2, [r3, r1]
 8006b3c:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 8006b40:	bf08      	it	eq
 8006b42:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8006b44:	441a      	add	r2, r3
 8006b46:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 8006b48:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 8006b4c:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 8006b4e:	428d      	cmp	r5, r1
 8006b50:	d00c      	beq.n	8006b6c <mem_free+0x130>
 8006b52:	7908      	ldrb	r0, [r1, #4]
 8006b54:	b950      	cbnz	r0, 8006b6c <mem_free+0x130>
    if (lfree == mem) {
 8006b56:	6830      	ldr	r0, [r6, #0]
 8006b58:	4285      	cmp	r5, r0
      lfree = pmem;
 8006b5a:	bf08      	it	eq
 8006b5c:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 8006b5e:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006b62:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 8006b64:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006b68:	440b      	add	r3, r1
 8006b6a:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006b6c:	4809      	ldr	r0, [pc, #36]	; (8006b94 <mem_free+0x158>)
}
 8006b6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 8006b72:	f003 bee1 	b.w	800a938 <sys_mutex_unlock>
 8006b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7a:	bf00      	nop
 8006b7c:	0800d543 	.word	0x0800d543
 8006b80:	0800d481 	.word	0x0800d481
 8006b84:	0800cb76 	.word	0x0800cb76
 8006b88:	20003efc 	.word	0x20003efc
 8006b8c:	20003f00 	.word	0x20003f00
 8006b90:	0800d4a2 	.word	0x0800d4a2
 8006b94:	20003ef8 	.word	0x20003ef8
 8006b98:	0800d4b9 	.word	0x0800d4b9
 8006b9c:	20003ef4 	.word	0x20003ef4
 8006ba0:	0800d4cd 	.word	0x0800d4cd
 8006ba4:	0800d4e4 	.word	0x0800d4e4
 8006ba8:	0800d4fe 	.word	0x0800d4fe
 8006bac:	0800d519 	.word	0x0800d519

08006bb0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006bb4:	3103      	adds	r1, #3
 8006bb6:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 8006bba:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006bbc:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 8006bbe:	2d0b      	cmp	r5, #11
 8006bc0:	d904      	bls.n	8006bcc <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006bc2:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006bc6:	d902      	bls.n	8006bce <mem_trim+0x1e>
    return NULL;
 8006bc8:	2400      	movs	r4, #0
 8006bca:	e01c      	b.n	8006c06 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 8006bcc:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8006bce:	4b36      	ldr	r3, [pc, #216]	; (8006ca8 <mem_trim+0xf8>)
 8006bd0:	681a      	ldr	r2, [r3, #0]
 8006bd2:	4698      	mov	r8, r3
 8006bd4:	42a2      	cmp	r2, r4
 8006bd6:	d803      	bhi.n	8006be0 <mem_trim+0x30>
 8006bd8:	4b34      	ldr	r3, [pc, #208]	; (8006cac <mem_trim+0xfc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	429c      	cmp	r4, r3
 8006bde:	d306      	bcc.n	8006bee <mem_trim+0x3e>
 8006be0:	4b33      	ldr	r3, [pc, #204]	; (8006cb0 <mem_trim+0x100>)
 8006be2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006be6:	4933      	ldr	r1, [pc, #204]	; (8006cb4 <mem_trim+0x104>)
 8006be8:	4833      	ldr	r0, [pc, #204]	; (8006cb8 <mem_trim+0x108>)
 8006bea:	f005 f8bd 	bl	800bd68 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8006bee:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d303      	bcc.n	8006bfe <mem_trim+0x4e>
 8006bf6:	4a2d      	ldr	r2, [pc, #180]	; (8006cac <mem_trim+0xfc>)
 8006bf8:	6812      	ldr	r2, [r2, #0]
 8006bfa:	4294      	cmp	r4, r2
 8006bfc:	d306      	bcc.n	8006c0c <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8006bfe:	f003 feaf 	bl	800a960 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006c02:	f003 feb9 	bl	800a978 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8006c06:	4620      	mov	r0, r4
 8006c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006c0c:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006c10:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006c14:	1af6      	subs	r6, r6, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006c16:	3f08      	subs	r7, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006c18:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006c1a:	1bbf      	subs	r7, r7, r6
 8006c1c:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8006c1e:	42af      	cmp	r7, r5
 8006c20:	d219      	bcs.n	8006c56 <mem_trim+0xa6>
 8006c22:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <mem_trim+0x100>)
 8006c24:	f240 2206 	movw	r2, #518	; 0x206
 8006c28:	4924      	ldr	r1, [pc, #144]	; (8006cbc <mem_trim+0x10c>)
 8006c2a:	4823      	ldr	r0, [pc, #140]	; (8006cb8 <mem_trim+0x108>)
 8006c2c:	f005 f89c 	bl	800bd68 <iprintf>
 8006c30:	e7ca      	b.n	8006bc8 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8006c32:	f105 0214 	add.w	r2, r5, #20
 8006c36:	42ba      	cmp	r2, r7
 8006c38:	d831      	bhi.n	8006c9e <mem_trim+0xee>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c3a:	f106 0208 	add.w	r2, r6, #8
    if (mem2 < lfree) {
 8006c3e:	4820      	ldr	r0, [pc, #128]	; (8006cc0 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c40:	4415      	add	r5, r2
    if (mem2 < lfree) {
 8006c42:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c44:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8006c46:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 8006c48:	42ba      	cmp	r2, r7
      lfree = mem2;
 8006c4a:	bf38      	it	cc
 8006c4c:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 8006c4e:	2000      	movs	r0, #0
 8006c50:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 8006c52:	5359      	strh	r1, [r3, r5]
 8006c54:	e01a      	b.n	8006c8c <mem_trim+0xdc>
  if (newsize == size) {
 8006c56:	d0d6      	beq.n	8006c06 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 8006c58:	481a      	ldr	r0, [pc, #104]	; (8006cc4 <mem_trim+0x114>)
 8006c5a:	f003 fe68 	bl	800a92e <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 8006c5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006c62:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 8006c66:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 8006c68:	7902      	ldrb	r2, [r0, #4]
 8006c6a:	2a00      	cmp	r2, #0
 8006c6c:	d1e1      	bne.n	8006c32 <mem_trim+0x82>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c6e:	f106 0208 	add.w	r2, r6, #8
    next = mem2->next;
 8006c72:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 8006c74:	4912      	ldr	r1, [pc, #72]	; (8006cc0 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c76:	4415      	add	r5, r2
    if (lfree == mem2) {
 8006c78:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8006c7a:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 8006c7c:	4290      	cmp	r0, r2
 8006c7e:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 8006c82:	bf08      	it	eq
 8006c84:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 8006c86:	2100      	movs	r1, #0
 8006c88:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 8006c8a:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 8006c8c:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 8006c8e:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006c92:	5b5a      	ldrh	r2, [r3, r5]
 8006c94:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006c98:	bf1c      	itt	ne
 8006c9a:	189b      	addne	r3, r3, r2
 8006c9c:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 8006c9e:	4809      	ldr	r0, [pc, #36]	; (8006cc4 <mem_trim+0x114>)
 8006ca0:	f003 fe4a 	bl	800a938 <sys_mutex_unlock>
  return rmem;
 8006ca4:	e7af      	b.n	8006c06 <mem_trim+0x56>
 8006ca6:	bf00      	nop
 8006ca8:	20003efc 	.word	0x20003efc
 8006cac:	20003f00 	.word	0x20003f00
 8006cb0:	0800d543 	.word	0x0800d543
 8006cb4:	0800d628 	.word	0x0800d628
 8006cb8:	0800cb76 	.word	0x0800cb76
 8006cbc:	0800d63f 	.word	0x0800d63f
 8006cc0:	20003ef4 	.word	0x20003ef4
 8006cc4:	20003ef8 	.word	0x20003ef8

08006cc8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8006cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8006ccc:	b148      	cbz	r0, 8006ce2 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8006cce:	3003      	adds	r0, #3
 8006cd0:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8006cd4:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8006cd6:	2d0b      	cmp	r5, #11
 8006cd8:	d905      	bls.n	8006ce6 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 8006cda:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006cde:	d903      	bls.n	8006ce8 <mem_malloc+0x20>
    return NULL;
 8006ce0:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8006ce2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8006ce6:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 8006ce8:	483c      	ldr	r0, [pc, #240]	; (8006ddc <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006cea:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
  sys_mutex_lock(&mem_mutex);
 8006cee:	f003 fe1e 	bl	800a92e <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006cf2:	4e3b      	ldr	r6, [pc, #236]	; (8006de0 <mem_malloc+0x118>)
 8006cf4:	483b      	ldr	r0, [pc, #236]	; (8006de4 <mem_malloc+0x11c>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006cf6:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006cfa:	6831      	ldr	r1, [r6, #0]
 8006cfc:	6807      	ldr	r7, [r0, #0]
 8006cfe:	1a7b      	subs	r3, r7, r1
 8006d00:	b29b      	uxth	r3, r3
 8006d02:	4543      	cmp	r3, r8
 8006d04:	d303      	bcc.n	8006d0e <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 8006d06:	4835      	ldr	r0, [pc, #212]	; (8006ddc <mem_malloc+0x114>)
 8006d08:	f003 fe16 	bl	800a938 <sys_mutex_unlock>
 8006d0c:	e7e8      	b.n	8006ce0 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 8006d0e:	18cc      	adds	r4, r1, r3
 8006d10:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8006d14:	f894 c004 	ldrb.w	ip, [r4, #4]
 8006d18:	f1bc 0f00 	cmp.w	ip, #0
 8006d1c:	d15b      	bne.n	8006dd6 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006d1e:	eba9 0203 	sub.w	r2, r9, r3
 8006d22:	4472      	add	r2, lr
      if ((!mem->used) &&
 8006d24:	4295      	cmp	r5, r2
 8006d26:	d856      	bhi.n	8006dd6 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006d28:	f105 0814 	add.w	r8, r5, #20
 8006d2c:	4542      	cmp	r2, r8
 8006d2e:	d34c      	bcc.n	8006dca <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8006d30:	f105 0208 	add.w	r2, r5, #8
 8006d34:	441a      	add	r2, r3
 8006d36:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8006d38:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 8006d3c:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 8006d40:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 8006d44:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 8006d48:	2301      	movs	r3, #1
          mem->next = ptr2;
 8006d4a:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 8006d4c:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8006d4e:	5a8b      	ldrh	r3, [r1, r2]
 8006d50:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006d54:	d001      	beq.n	8006d5a <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006d56:	4419      	add	r1, r3
 8006d58:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 8006d5a:	42a7      	cmp	r7, r4
 8006d5c:	4f22      	ldr	r7, [pc, #136]	; (8006de8 <mem_malloc+0x120>)
 8006d5e:	d111      	bne.n	8006d84 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 8006d60:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 8006d62:	4623      	mov	r3, r4
 8006d64:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 8006d66:	791a      	ldrb	r2, [r3, #4]
 8006d68:	b10a      	cbz	r2, 8006d6e <mem_malloc+0xa6>
 8006d6a:	428b      	cmp	r3, r1
 8006d6c:	d130      	bne.n	8006dd0 <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d6e:	428b      	cmp	r3, r1
          lfree = cur;
 8006d70:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8006d72:	d007      	beq.n	8006d84 <mem_malloc+0xbc>
 8006d74:	b132      	cbz	r2, 8006d84 <mem_malloc+0xbc>
 8006d76:	4b1d      	ldr	r3, [pc, #116]	; (8006dec <mem_malloc+0x124>)
 8006d78:	f240 22cf 	movw	r2, #719	; 0x2cf
 8006d7c:	491c      	ldr	r1, [pc, #112]	; (8006df0 <mem_malloc+0x128>)
 8006d7e:	481d      	ldr	r0, [pc, #116]	; (8006df4 <mem_malloc+0x12c>)
 8006d80:	f004 fff2 	bl	800bd68 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d84:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 8006d86:	4815      	ldr	r0, [pc, #84]	; (8006ddc <mem_malloc+0x114>)
 8006d88:	f003 fdd6 	bl	800a938 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	4425      	add	r5, r4
 8006d90:	42ab      	cmp	r3, r5
 8006d92:	d206      	bcs.n	8006da2 <mem_malloc+0xda>
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <mem_malloc+0x124>)
 8006d96:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8006d9a:	4917      	ldr	r1, [pc, #92]	; (8006df8 <mem_malloc+0x130>)
 8006d9c:	4815      	ldr	r0, [pc, #84]	; (8006df4 <mem_malloc+0x12c>)
 8006d9e:	f004 ffe3 	bl	800bd68 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006da2:	07a3      	lsls	r3, r4, #30
 8006da4:	d00d      	beq.n	8006dc2 <mem_malloc+0xfa>
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <mem_malloc+0x124>)
 8006da8:	f240 22d6 	movw	r2, #726	; 0x2d6
 8006dac:	4913      	ldr	r1, [pc, #76]	; (8006dfc <mem_malloc+0x134>)
 8006dae:	4811      	ldr	r0, [pc, #68]	; (8006df4 <mem_malloc+0x12c>)
 8006db0:	f004 ffda 	bl	800bd68 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006db4:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <mem_malloc+0x124>)
 8006db6:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8006dba:	4911      	ldr	r1, [pc, #68]	; (8006e00 <mem_malloc+0x138>)
 8006dbc:	480d      	ldr	r0, [pc, #52]	; (8006df4 <mem_malloc+0x12c>)
 8006dbe:	f004 ffd3 	bl	800bd68 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006dc2:	f104 0008 	add.w	r0, r4, #8
 8006dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	7123      	strb	r3, [r4, #4]
 8006dce:	e7c4      	b.n	8006d5a <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8006dd0:	881b      	ldrh	r3, [r3, #0]
 8006dd2:	4433      	add	r3, r6
 8006dd4:	e7c7      	b.n	8006d66 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006dd6:	4673      	mov	r3, lr
 8006dd8:	e793      	b.n	8006d02 <mem_malloc+0x3a>
 8006dda:	bf00      	nop
 8006ddc:	20003ef8 	.word	0x20003ef8
 8006de0:	20003efc 	.word	0x20003efc
 8006de4:	20003ef4 	.word	0x20003ef4
 8006de8:	20003f00 	.word	0x20003f00
 8006dec:	0800d543 	.word	0x0800d543
 8006df0:	0800d58d 	.word	0x0800d58d
 8006df4:	0800cb76 	.word	0x0800cb76
 8006df8:	0800d5a6 	.word	0x0800d5a6
 8006dfc:	0800d5d6 	.word	0x0800d5d6
 8006e00:	0800d605 	.word	0x0800d605

08006e04 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8006e04:	b538      	push	{r3, r4, r5, lr}
 8006e06:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006e08:	f003 fdaa 	bl	800a960 <sys_arch_protect>
 8006e0c:	4605      	mov	r5, r0

  memp = *desc->tab;
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006e12:	b15c      	cbz	r4, 8006e2c <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006e14:	6822      	ldr	r2, [r4, #0]
 8006e16:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006e18:	07a3      	lsls	r3, r4, #30
 8006e1a:	d006      	beq.n	8006e2a <do_memp_malloc_pool.isra.0+0x26>
 8006e1c:	4b05      	ldr	r3, [pc, #20]	; (8006e34 <do_memp_malloc_pool.isra.0+0x30>)
 8006e1e:	f240 1249 	movw	r2, #329	; 0x149
 8006e22:	4905      	ldr	r1, [pc, #20]	; (8006e38 <do_memp_malloc_pool.isra.0+0x34>)
 8006e24:	4805      	ldr	r0, [pc, #20]	; (8006e3c <do_memp_malloc_pool.isra.0+0x38>)
 8006e26:	f004 ff9f 	bl	800bd68 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8006e2a:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8006e2c:	f003 fda4 	bl	800a978 <sys_arch_unprotect>
  return NULL;
}
 8006e30:	4620      	mov	r0, r4
 8006e32:	bd38      	pop	{r3, r4, r5, pc}
 8006e34:	0800d67f 	.word	0x0800d67f
 8006e38:	0800d6af 	.word	0x0800d6af
 8006e3c:	0800cb76 	.word	0x0800cb76

08006e40 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8006e40:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e42:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 8006e44:	4605      	mov	r5, r0
 8006e46:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 8006e48:	d006      	beq.n	8006e58 <do_memp_free_pool.isra.1+0x18>
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <do_memp_free_pool.isra.1+0x2c>)
 8006e4c:	f240 129d 	movw	r2, #413	; 0x19d
 8006e50:	4907      	ldr	r1, [pc, #28]	; (8006e70 <do_memp_free_pool.isra.1+0x30>)
 8006e52:	4808      	ldr	r0, [pc, #32]	; (8006e74 <do_memp_free_pool.isra.1+0x34>)
 8006e54:	f004 ff88 	bl	800bd68 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 8006e58:	f003 fd82 	bl	800a960 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	681a      	ldr	r2, [r3, #0]
 8006e60:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 8006e62:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8006e64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 8006e68:	f003 bd86 	b.w	800a978 <sys_arch_unprotect>
 8006e6c:	0800d67f 	.word	0x0800d67f
 8006e70:	0800d65f 	.word	0x0800d65f
 8006e74:	0800cb76 	.word	0x0800cb76

08006e78 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006e78:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006e7e:	3303      	adds	r3, #3
{
 8006e80:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8006e82:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 8006e86:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 8006e88:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006e8a:	42a2      	cmp	r2, r4
 8006e8c:	db00      	blt.n	8006e90 <memp_init_pool+0x18>
}
 8006e8e:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8006e90:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006e92:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8006e94:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e96:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8006e98:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006e9a:	442b      	add	r3, r5
 8006e9c:	e7f5      	b.n	8006e8a <memp_init_pool+0x12>
	...

08006ea0 <memp_init>:
{
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8006ea4:	4d04      	ldr	r5, [pc, #16]	; (8006eb8 <memp_init+0x18>)
 8006ea6:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006eaa:	3401      	adds	r4, #1
 8006eac:	f7ff ffe4 	bl	8006e78 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006eb0:	2c0d      	cmp	r4, #13
 8006eb2:	d1f8      	bne.n	8006ea6 <memp_init+0x6>
}
 8006eb4:	bd38      	pop	{r3, r4, r5, pc}
 8006eb6:	bf00      	nop
 8006eb8:	0800d7a8 	.word	0x0800d7a8

08006ebc <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006ebc:	280c      	cmp	r0, #12
{
 8006ebe:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006ec0:	d807      	bhi.n	8006ed2 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006ec2:	4b08      	ldr	r3, [pc, #32]	; (8006ee4 <memp_malloc+0x28>)
 8006ec4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8006ec8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006ecc:	3008      	adds	r0, #8
 8006ece:	f7ff bf99 	b.w	8006e04 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <memp_malloc+0x2c>)
 8006ed4:	f240 1287 	movw	r2, #391	; 0x187
 8006ed8:	4904      	ldr	r1, [pc, #16]	; (8006eec <memp_malloc+0x30>)
 8006eda:	4805      	ldr	r0, [pc, #20]	; (8006ef0 <memp_malloc+0x34>)
 8006edc:	f004 ff44 	bl	800bd68 <iprintf>
}
 8006ee0:	2000      	movs	r0, #0
 8006ee2:	bd08      	pop	{r3, pc}
 8006ee4:	0800d7a8 	.word	0x0800d7a8
 8006ee8:	0800d67f 	.word	0x0800d67f
 8006eec:	0800d78b 	.word	0x0800d78b
 8006ef0:	0800cb76 	.word	0x0800cb76

08006ef4 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006ef4:	280c      	cmp	r0, #12
 8006ef6:	d906      	bls.n	8006f06 <memp_free+0x12>
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <memp_free+0x24>)
 8006efa:	f240 12db 	movw	r2, #475	; 0x1db
 8006efe:	4907      	ldr	r1, [pc, #28]	; (8006f1c <memp_free+0x28>)
 8006f00:	4807      	ldr	r0, [pc, #28]	; (8006f20 <memp_free+0x2c>)
 8006f02:	f004 bf31 	b.w	800bd68 <iprintf>

  if (mem == NULL) {
 8006f06:	b129      	cbz	r1, 8006f14 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006f08:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <memp_free+0x30>)
 8006f0a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006f0e:	3008      	adds	r0, #8
 8006f10:	f7ff bf96 	b.w	8006e40 <do_memp_free_pool.isra.1>
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop
 8006f18:	0800d67f 	.word	0x0800d67f
 8006f1c:	0800d770 	.word	0x0800d770
 8006f20:	0800cb76 	.word	0x0800cb76
 8006f24:	0800d7a8 	.word	0x0800d7a8

08006f28 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006f28:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8006f2c:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006f2e:	071b      	lsls	r3, r3, #28
 8006f30:	d502      	bpl.n	8006f38 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8006f32:	3104      	adds	r1, #4
 8006f34:	f7fe bd52 	b.w	80059dc <etharp_request>
 8006f38:	4770      	bx	lr

08006f3a <netif_init>:
{
 8006f3a:	4770      	bx	lr

08006f3c <netif_set_ipaddr>:
{
 8006f3c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f3e:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006f40:	460c      	mov	r4, r1
 8006f42:	b1b9      	cbz	r1, 8006f74 <netif_set_ipaddr+0x38>
 8006f44:	680b      	ldr	r3, [r1, #0]
 8006f46:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006f48:	9a01      	ldr	r2, [sp, #4]
 8006f4a:	686b      	ldr	r3, [r5, #4]
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d00f      	beq.n	8006f70 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006f50:	1d2e      	adds	r6, r5, #4
 8006f52:	a901      	add	r1, sp, #4
 8006f54:	4630      	mov	r0, r6
 8006f56:	f001 f9ff 	bl	8008358 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006f5a:	a901      	add	r1, sp, #4
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f003 fbe3 	bl	800a728 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006f62:	b104      	cbz	r4, 8006f66 <netif_set_ipaddr+0x2a>
 8006f64:	6824      	ldr	r4, [r4, #0]
 8006f66:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006f68:	b114      	cbz	r4, 8006f70 <netif_set_ipaddr+0x34>
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f7ff ffdc 	bl	8006f28 <netif_issue_reports.part.0>
}
 8006f70:	b002      	add	sp, #8
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006f74:	4b01      	ldr	r3, [pc, #4]	; (8006f7c <netif_set_ipaddr+0x40>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	e7e5      	b.n	8006f46 <netif_set_ipaddr+0xa>
 8006f7a:	bf00      	nop
 8006f7c:	0800d2e0 	.word	0x0800d2e0

08006f80 <netif_set_addr>:
{
 8006f80:	b570      	push	{r4, r5, r6, lr}
 8006f82:	4606      	mov	r6, r0
 8006f84:	4615      	mov	r5, r2
 8006f86:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8006f88:	b109      	cbz	r1, 8006f8e <netif_set_addr+0xe>
 8006f8a:	680b      	ldr	r3, [r1, #0]
 8006f8c:	b94b      	cbnz	r3, 8006fa2 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f7ff ffd4 	bl	8006f3c <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006f94:	b105      	cbz	r5, 8006f98 <netif_set_addr+0x18>
 8006f96:	682d      	ldr	r5, [r5, #0]
 8006f98:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006f9a:	b104      	cbz	r4, 8006f9e <netif_set_addr+0x1e>
 8006f9c:	6824      	ldr	r4, [r4, #0]
 8006f9e:	60f4      	str	r4, [r6, #12]
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006fa2:	b102      	cbz	r2, 8006fa6 <netif_set_addr+0x26>
 8006fa4:	6815      	ldr	r5, [r2, #0]
 8006fa6:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006fa8:	b104      	cbz	r4, 8006fac <netif_set_addr+0x2c>
 8006faa:	6824      	ldr	r4, [r4, #0]
 8006fac:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8006fae:	4630      	mov	r0, r6
}
 8006fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8006fb4:	f7ff bfc2 	b.w	8006f3c <netif_set_ipaddr>

08006fb8 <netif_add>:
{
 8006fb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fbc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	460f      	mov	r7, r1
 8006fc2:	4690      	mov	r8, r2
 8006fc4:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8006fc6:	b92e      	cbnz	r6, 8006fd4 <netif_add+0x1c>
 8006fc8:	4b15      	ldr	r3, [pc, #84]	; (8007020 <netif_add+0x68>)
 8006fca:	22fb      	movs	r2, #251	; 0xfb
 8006fcc:	4915      	ldr	r1, [pc, #84]	; (8007024 <netif_add+0x6c>)
 8006fce:	4816      	ldr	r0, [pc, #88]	; (8007028 <netif_add+0x70>)
 8006fd0:	f004 feca 	bl	800bd68 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006fd4:	2303      	movs	r3, #3
  netif->num = netif_num++;
 8006fd6:	4a15      	ldr	r2, [pc, #84]	; (800702c <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006fd8:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006fda:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006fdc:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8006fe0:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006fe2:	6065      	str	r5, [r4, #4]
  netif->state = state;
 8006fe4:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8006fe6:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006fe8:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 8006fea:	1c59      	adds	r1, r3, #1
 8006fec:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8006ff0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8006ff2:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006ff4:	4642      	mov	r2, r8
  netif->input = input;
 8006ff6:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006ff8:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 8006ffa:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006ffc:	464b      	mov	r3, r9
  netif->flags = 0;
 8006ffe:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8007002:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007004:	f7ff ffbc 	bl	8006f80 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8007008:	4620      	mov	r0, r4
 800700a:	47b0      	blx	r6
 800700c:	b930      	cbnz	r0, 800701c <netif_add+0x64>
  netif->next = netif_list;
 800700e:	4b08      	ldr	r3, [pc, #32]	; (8007030 <netif_add+0x78>)
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8007014:	601c      	str	r4, [r3, #0]
}
 8007016:	4620      	mov	r0, r4
 8007018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 800701c:	462c      	mov	r4, r5
 800701e:	e7fa      	b.n	8007016 <netif_add+0x5e>
 8007020:	0800d7dc 	.word	0x0800d7dc
 8007024:	0800d80d 	.word	0x0800d80d
 8007028:	0800cb76 	.word	0x0800cb76
 800702c:	20003f38 	.word	0x20003f38
 8007030:	200076dc 	.word	0x200076dc

08007034 <netif_set_default>:
  netif_default = netif;
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <netif_set_default+0x8>)
 8007036:	6018      	str	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	200076e0 	.word	0x200076e0

08007040 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007040:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8007044:	07d1      	lsls	r1, r2, #31
 8007046:	d409      	bmi.n	800705c <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8007048:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800704c:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 800704e:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007052:	d503      	bpl.n	800705c <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007054:	6843      	ldr	r3, [r0, #4]
 8007056:	b10b      	cbz	r3, 800705c <netif_set_up+0x1c>
 8007058:	f7ff bf66 	b.w	8006f28 <netif_issue_reports.part.0>
 800705c:	4770      	bx	lr

0800705e <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 800705e:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8007062:	07d9      	lsls	r1, r3, #31
 8007064:	d507      	bpl.n	8007076 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8007066:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800706a:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 800706c:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007070:	d501      	bpl.n	8007076 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8007072:	f7fe bbf9 	b.w	8005868 <etharp_cleanup_netif>
 8007076:	4770      	bx	lr

08007078 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8007078:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800707a:	f003 fc71 	bl	800a960 <sys_arch_protect>
 800707e:	4b09      	ldr	r3, [pc, #36]	; (80070a4 <pbuf_free_ooseq_callback+0x2c>)
 8007080:	2200      	movs	r2, #0
 8007082:	701a      	strb	r2, [r3, #0]
 8007084:	f003 fc78 	bl	800a978 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8007088:	4b07      	ldr	r3, [pc, #28]	; (80070a8 <pbuf_free_ooseq_callback+0x30>)
 800708a:	681c      	ldr	r4, [r3, #0]
 800708c:	b904      	cbnz	r4, 8007090 <pbuf_free_ooseq_callback+0x18>
 800708e:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8007090:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007092:	b120      	cbz	r0, 800709e <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8007094:	f000 fc4c 	bl	8007930 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007098:	2300      	movs	r3, #0
 800709a:	6723      	str	r3, [r4, #112]	; 0x70
 800709c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800709e:	68e4      	ldr	r4, [r4, #12]
 80070a0:	e7f4      	b.n	800708c <pbuf_free_ooseq_callback+0x14>
 80070a2:	bf00      	nop
 80070a4:	200076e4 	.word	0x200076e4
 80070a8:	200076ec 	.word	0x200076ec

080070ac <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80070ac:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80070ae:	4604      	mov	r4, r0
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d12f      	bne.n	8007114 <pbuf_header_impl+0x68>
 80070b4:	4b1f      	ldr	r3, [pc, #124]	; (8007134 <pbuf_header_impl+0x88>)
 80070b6:	f240 223f 	movw	r2, #575	; 0x23f
 80070ba:	491f      	ldr	r1, [pc, #124]	; (8007138 <pbuf_header_impl+0x8c>)
 80070bc:	481f      	ldr	r0, [pc, #124]	; (800713c <pbuf_header_impl+0x90>)
 80070be:	f004 fe53 	bl	800bd68 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80070c2:	2000      	movs	r0, #0
 80070c4:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 80070c6:	b288      	uxth	r0, r1
  type = p->type;
 80070c8:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 80070ca:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80070cc:	b10d      	cbz	r5, 80070d2 <pbuf_header_impl+0x26>
 80070ce:	2d03      	cmp	r5, #3
 80070d0:	d106      	bne.n	80070e0 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 80070d2:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80070d4:	f104 0210 	add.w	r2, r4, #16
 80070d8:	4293      	cmp	r3, r2
 80070da:	d20a      	bcs.n	80070f2 <pbuf_header_impl+0x46>
      return 1;
 80070dc:	2001      	movs	r0, #1
 80070de:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 80070e0:	3d01      	subs	r5, #1
 80070e2:	2d01      	cmp	r5, #1
 80070e4:	d811      	bhi.n	800710a <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 80070e6:	2900      	cmp	r1, #0
 80070e8:	da0c      	bge.n	8007104 <pbuf_header_impl+0x58>
 80070ea:	8962      	ldrh	r2, [r4, #10]
 80070ec:	4282      	cmp	r2, r0
 80070ee:	d3f5      	bcc.n	80070dc <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 80070f0:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 80070f2:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 80070f4:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 80070f6:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 80070f8:	8963      	ldrh	r3, [r4, #10]
 80070fa:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 80070fc:	4401      	add	r1, r0
  p->len += header_size_increment;
 80070fe:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8007100:	8121      	strh	r1, [r4, #8]
 8007102:	e7de      	b.n	80070c2 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8007104:	2a00      	cmp	r2, #0
 8007106:	d1f3      	bne.n	80070f0 <pbuf_header_impl+0x44>
 8007108:	e7e8      	b.n	80070dc <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 800710a:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <pbuf_header_impl+0x88>)
 800710c:	f240 2277 	movw	r2, #631	; 0x277
 8007110:	490b      	ldr	r1, [pc, #44]	; (8007140 <pbuf_header_impl+0x94>)
 8007112:	e00b      	b.n	800712c <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8007114:	2900      	cmp	r1, #0
 8007116:	d0d4      	beq.n	80070c2 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8007118:	dad5      	bge.n	80070c6 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 800711a:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800711c:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 800711e:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8007120:	4283      	cmp	r3, r0
 8007122:	d2d1      	bcs.n	80070c8 <pbuf_header_impl+0x1c>
 8007124:	4b03      	ldr	r3, [pc, #12]	; (8007134 <pbuf_header_impl+0x88>)
 8007126:	f240 2247 	movw	r2, #583	; 0x247
 800712a:	4906      	ldr	r1, [pc, #24]	; (8007144 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 800712c:	4803      	ldr	r0, [pc, #12]	; (800713c <pbuf_header_impl+0x90>)
 800712e:	f004 fe1b 	bl	800bd68 <iprintf>
 8007132:	e7d3      	b.n	80070dc <pbuf_header_impl+0x30>
 8007134:	0800da89 	.word	0x0800da89
 8007138:	0800daf3 	.word	0x0800daf3
 800713c:	0800cb76 	.word	0x0800cb76
 8007140:	0800dad7 	.word	0x0800dad7
 8007144:	0800dab9 	.word	0x0800dab9

08007148 <pbuf_pool_is_empty>:
{
 8007148:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 800714a:	4d0c      	ldr	r5, [pc, #48]	; (800717c <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 800714c:	f003 fc08 	bl	800a960 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8007150:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8007152:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8007154:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 8007156:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 8007158:	f003 fc0e 	bl	800a978 <sys_arch_unprotect>
  if (!queued) {
 800715c:	b964      	cbnz	r4, 8007178 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800715e:	4622      	mov	r2, r4
 8007160:	4621      	mov	r1, r4
 8007162:	4807      	ldr	r0, [pc, #28]	; (8007180 <pbuf_pool_is_empty+0x38>)
 8007164:	f7fd f922 	bl	80043ac <tcpip_callback_with_block>
 8007168:	b130      	cbz	r0, 8007178 <pbuf_pool_is_empty+0x30>
 800716a:	f003 fbf9 	bl	800a960 <sys_arch_protect>
 800716e:	702c      	strb	r4, [r5, #0]
}
 8007170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8007174:	f003 bc00 	b.w	800a978 <sys_arch_unprotect>
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	bf00      	nop
 800717c:	200076e4 	.word	0x200076e4
 8007180:	08007079 	.word	0x08007079

08007184 <pbuf_alloced_custom>:
{
 8007184:	b570      	push	{r4, r5, r6, lr}
 8007186:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8007188:	2804      	cmp	r0, #4
 800718a:	d81e      	bhi.n	80071ca <pbuf_alloced_custom+0x46>
 800718c:	e8df f000 	tbb	[pc, r0]
 8007190:	1b280326 	.word	0x1b280326
 8007194:	1b          	.byte	0x1b
 8007195:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8007196:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8007198:	3403      	adds	r4, #3
 800719a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 800719e:	f024 0403 	bic.w	r4, r4, #3
 80071a2:	190e      	adds	r6, r1, r4
 80071a4:	4286      	cmp	r6, r0
 80071a6:	f04f 0000 	mov.w	r0, #0
 80071aa:	d80b      	bhi.n	80071c4 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 80071ac:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 80071ae:	b1cd      	cbz	r5, 80071e4 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80071b0:	442c      	add	r4, r5
 80071b2:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80071b4:	2002      	movs	r0, #2
  p->pbuf.type = type;
 80071b6:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 80071b8:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 80071ba:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80071bc:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 80071be:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 80071c0:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 80071c2:	81da      	strh	r2, [r3, #14]
}
 80071c4:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 80071c6:	2400      	movs	r4, #0
    break;
 80071c8:	e7e6      	b.n	8007198 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80071ca:	4b07      	ldr	r3, [pc, #28]	; (80071e8 <pbuf_alloced_custom+0x64>)
 80071cc:	f240 12c5 	movw	r2, #453	; 0x1c5
 80071d0:	4906      	ldr	r1, [pc, #24]	; (80071ec <pbuf_alloced_custom+0x68>)
 80071d2:	4807      	ldr	r0, [pc, #28]	; (80071f0 <pbuf_alloced_custom+0x6c>)
 80071d4:	f004 fdc8 	bl	800bd68 <iprintf>
    return NULL;
 80071d8:	2000      	movs	r0, #0
 80071da:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 80071dc:	2436      	movs	r4, #54	; 0x36
 80071de:	e7db      	b.n	8007198 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 80071e0:	240e      	movs	r4, #14
 80071e2:	e7d9      	b.n	8007198 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 80071e4:	605d      	str	r5, [r3, #4]
 80071e6:	e7e5      	b.n	80071b4 <pbuf_alloced_custom+0x30>
 80071e8:	0800da89 	.word	0x0800da89
 80071ec:	0800d8cc 	.word	0x0800d8cc
 80071f0:	0800cb76 	.word	0x0800cb76

080071f4 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 80071f4:	2200      	movs	r2, #0
 80071f6:	f7ff bf59 	b.w	80070ac <pbuf_header_impl>

080071fa <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 80071fa:	2201      	movs	r2, #1
 80071fc:	f7ff bf56 	b.w	80070ac <pbuf_header_impl>

08007200 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8007200:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8007204:	4604      	mov	r4, r0
 8007206:	b950      	cbnz	r0, 800721e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8007208:	4627      	mov	r7, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 800720a:	4b2c      	ldr	r3, [pc, #176]	; (80072bc <pbuf_free+0xbc>)
 800720c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8007210:	492b      	ldr	r1, [pc, #172]	; (80072c0 <pbuf_free+0xc0>)
 8007212:	482c      	ldr	r0, [pc, #176]	; (80072c4 <pbuf_free+0xc4>)
 8007214:	f004 fda8 	bl	800bd68 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8007218:	4638      	mov	r0, r7
 800721a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 800721e:	7b03      	ldrb	r3, [r0, #12]
 8007220:	2b03      	cmp	r3, #3
 8007222:	d906      	bls.n	8007232 <pbuf_free+0x32>
 8007224:	4b25      	ldr	r3, [pc, #148]	; (80072bc <pbuf_free+0xbc>)
 8007226:	f240 22de 	movw	r2, #734	; 0x2de
 800722a:	4927      	ldr	r1, [pc, #156]	; (80072c8 <pbuf_free+0xc8>)
 800722c:	4825      	ldr	r0, [pc, #148]	; (80072c4 <pbuf_free+0xc4>)
 800722e:	f004 fd9b 	bl	800bd68 <iprintf>
{
 8007232:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8007234:	f8df 8084 	ldr.w	r8, [pc, #132]	; 80072bc <pbuf_free+0xbc>
 8007238:	f8df a094 	ldr.w	sl, [pc, #148]	; 80072d0 <pbuf_free+0xd0>
 800723c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80072c4 <pbuf_free+0xc4>
 8007240:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 8007242:	2c00      	cmp	r4, #0
 8007244:	d0e8      	beq.n	8007218 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 8007246:	f003 fb8b 	bl	800a960 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800724a:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 800724c:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800724e:	b933      	cbnz	r3, 800725e <pbuf_free+0x5e>
 8007250:	4643      	mov	r3, r8
 8007252:	f240 22eb 	movw	r2, #747	; 0x2eb
 8007256:	4651      	mov	r1, sl
 8007258:	4648      	mov	r0, r9
 800725a:	f004 fd85 	bl	800bd68 <iprintf>
    ref = --(p->ref);
 800725e:	89e5      	ldrh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007260:	4658      	mov	r0, fp
    ref = --(p->ref);
 8007262:	3d01      	subs	r5, #1
 8007264:	b2ad      	uxth	r5, r5
 8007266:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8007268:	f003 fb86 	bl	800a978 <sys_arch_unprotect>
    if (ref == 0) {
 800726c:	2d00      	cmp	r5, #0
 800726e:	d1d3      	bne.n	8007218 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007270:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8007272:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8007274:	079b      	lsls	r3, r3, #30
 8007276:	d50e      	bpl.n	8007296 <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	b933      	cbnz	r3, 800728a <pbuf_free+0x8a>
 800727c:	4643      	mov	r3, r8
 800727e:	f240 22f9 	movw	r2, #761	; 0x2f9
 8007282:	4912      	ldr	r1, [pc, #72]	; (80072cc <pbuf_free+0xcc>)
 8007284:	4648      	mov	r0, r9
 8007286:	f004 fd6f 	bl	800bd68 <iprintf>
        pc->custom_free_function(p);
 800728a:	6923      	ldr	r3, [r4, #16]
 800728c:	4620      	mov	r0, r4
 800728e:	4798      	blx	r3
 8007290:	3601      	adds	r6, #1
      p = q;
 8007292:	462c      	mov	r4, r5
 8007294:	e7d4      	b.n	8007240 <pbuf_free+0x40>
      type = p->type;
 8007296:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8007298:	2b03      	cmp	r3, #3
 800729a:	d104      	bne.n	80072a6 <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 800729c:	4621      	mov	r1, r4
 800729e:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 80072a0:	f7ff fe28 	bl	8006ef4 <memp_free>
 80072a4:	e7f4      	b.n	8007290 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80072a6:	3b01      	subs	r3, #1
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d802      	bhi.n	80072b2 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 80072ac:	4621      	mov	r1, r4
 80072ae:	200b      	movs	r0, #11
 80072b0:	e7f6      	b.n	80072a0 <pbuf_free+0xa0>
          mem_free(p);
 80072b2:	4620      	mov	r0, r4
 80072b4:	f7ff fbc2 	bl	8006a3c <mem_free>
 80072b8:	e7ea      	b.n	8007290 <pbuf_free+0x90>
 80072ba:	bf00      	nop
 80072bc:	0800da89 	.word	0x0800da89
 80072c0:	0800daf3 	.word	0x0800daf3
 80072c4:	0800cb76 	.word	0x0800cb76
 80072c8:	0800da3d 	.word	0x0800da3d
 80072cc:	0800da68 	.word	0x0800da68
 80072d0:	0800da52 	.word	0x0800da52

080072d4 <pbuf_alloc>:
{
 80072d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	460e      	mov	r6, r1
 80072da:	4617      	mov	r7, r2
  switch (layer) {
 80072dc:	2804      	cmp	r0, #4
 80072de:	d80e      	bhi.n	80072fe <pbuf_alloc+0x2a>
 80072e0:	e8df f000 	tbb	[pc, r0]
 80072e4:	0b170315 	.word	0x0b170315
 80072e8:	0b          	.byte	0x0b
 80072e9:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 80072ea:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 80072ec:	2f03      	cmp	r7, #3
 80072ee:	f200 80b9 	bhi.w	8007464 <pbuf_alloc+0x190>
 80072f2:	e8df f007 	tbb	[pc, r7]
 80072f6:	aa8f      	.short	0xaa8f
 80072f8:	10aa      	.short	0x10aa
    offset = 0;
 80072fa:	2500      	movs	r5, #0
    break;
 80072fc:	e7f6      	b.n	80072ec <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 80072fe:	4b5c      	ldr	r3, [pc, #368]	; (8007470 <pbuf_alloc+0x19c>)
 8007300:	f44f 728b 	mov.w	r2, #278	; 0x116
 8007304:	495b      	ldr	r1, [pc, #364]	; (8007474 <pbuf_alloc+0x1a0>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007306:	485c      	ldr	r0, [pc, #368]	; (8007478 <pbuf_alloc+0x1a4>)
 8007308:	f004 fd2e 	bl	800bd68 <iprintf>
 800730c:	e049      	b.n	80073a2 <pbuf_alloc+0xce>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800730e:	2536      	movs	r5, #54	; 0x36
 8007310:	e7ec      	b.n	80072ec <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8007312:	250e      	movs	r5, #14
 8007314:	e7ea      	b.n	80072ec <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007316:	200c      	movs	r0, #12
 8007318:	f7ff fdd0 	bl	8006ebc <memp_malloc>
    if (p == NULL) {
 800731c:	4604      	mov	r4, r0
 800731e:	b920      	cbnz	r0, 800732a <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8007320:	f7ff ff12 	bl	8007148 <pbuf_pool_is_empty>
}
 8007324:	4620      	mov	r0, r4
 8007326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 800732a:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800732c:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 8007330:	8106      	strh	r6, [r0, #8]
    p->type = type;
 8007332:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007338:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800733a:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800733c:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800733e:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8007342:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007346:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800734a:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800734c:	42b5      	cmp	r5, r6
 800734e:	bf28      	it	cs
 8007350:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007352:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8007354:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8007356:	429f      	cmp	r7, r3
 8007358:	d206      	bcs.n	8007368 <pbuf_alloc+0x94>
 800735a:	4b45      	ldr	r3, [pc, #276]	; (8007470 <pbuf_alloc+0x19c>)
 800735c:	f44f 7298 	mov.w	r2, #304	; 0x130
 8007360:	4946      	ldr	r1, [pc, #280]	; (800747c <pbuf_alloc+0x1a8>)
 8007362:	4845      	ldr	r0, [pc, #276]	; (8007478 <pbuf_alloc+0x1a4>)
 8007364:	f004 fd00 	bl	800bd68 <iprintf>
    p->ref = 1;
 8007368:	2301      	movs	r3, #1
    while (rem_len > 0) {
 800736a:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800736c:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8007470 <pbuf_alloc+0x19c>
    p->ref = 1;
 8007370:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8007372:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8007374:	f8df a110 	ldr.w	sl, [pc, #272]	; 8007488 <pbuf_alloc+0x1b4>
    rem_len = length - p->len;
 8007378:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800737a:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8007478 <pbuf_alloc+0x1a4>
    while (rem_len > 0) {
 800737e:	2e00      	cmp	r6, #0
 8007380:	dc04      	bgt.n	800738c <pbuf_alloc+0xb8>
  p->ref = 1;
 8007382:	2301      	movs	r3, #1
 8007384:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	7363      	strb	r3, [r4, #13]
  return p;
 800738a:	e7cb      	b.n	8007324 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800738c:	200c      	movs	r0, #12
 800738e:	f7ff fd95 	bl	8006ebc <memp_malloc>
 8007392:	2300      	movs	r3, #0
      if (q == NULL) {
 8007394:	4605      	mov	r5, r0
 8007396:	b930      	cbnz	r0, 80073a6 <pbuf_alloc+0xd2>
        PBUF_POOL_IS_EMPTY();
 8007398:	f7ff fed6 	bl	8007148 <pbuf_pool_is_empty>
        pbuf_free(p);
 800739c:	4620      	mov	r0, r4
 800739e:	f7ff ff2f 	bl	8007200 <pbuf_free>
    return NULL;
 80073a2:	2400      	movs	r4, #0
 80073a4:	e7be      	b.n	8007324 <pbuf_alloc+0x50>
      q->flags = 0;
 80073a6:	7343      	strb	r3, [r0, #13]
      q->type = type;
 80073a8:	2203      	movs	r2, #3
      q->next = NULL;
 80073aa:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80073ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 80073b0:	7302      	strb	r2, [r0, #12]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80073b2:	429e      	cmp	r6, r3
      r->next = q;
 80073b4:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80073b8:	d106      	bne.n	80073c8 <pbuf_alloc+0xf4>
 80073ba:	4643      	mov	r3, r8
 80073bc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80073c0:	4651      	mov	r1, sl
 80073c2:	4648      	mov	r0, r9
 80073c4:	f004 fcd0 	bl	800bd68 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80073c8:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80073ca:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 80073ce:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80073d0:	bf28      	it	cs
 80073d2:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80073d6:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80073d8:	f105 0310 	add.w	r3, r5, #16
 80073dc:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80073de:	079b      	lsls	r3, r3, #30
 80073e0:	d006      	beq.n	80073f0 <pbuf_alloc+0x11c>
 80073e2:	4643      	mov	r3, r8
 80073e4:	f44f 72a9 	mov.w	r2, #338	; 0x152
 80073e8:	4925      	ldr	r1, [pc, #148]	; (8007480 <pbuf_alloc+0x1ac>)
 80073ea:	4648      	mov	r0, r9
 80073ec:	f004 fcbc 	bl	800bd68 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 80073f0:	8962      	ldrh	r2, [r4, #10]
 80073f2:	6863      	ldr	r3, [r4, #4]
 80073f4:	4413      	add	r3, r2
 80073f6:	429f      	cmp	r7, r3
 80073f8:	d206      	bcs.n	8007408 <pbuf_alloc+0x134>
 80073fa:	4643      	mov	r3, r8
 80073fc:	f240 1255 	movw	r2, #341	; 0x155
 8007400:	491e      	ldr	r1, [pc, #120]	; (800747c <pbuf_alloc+0x1a8>)
 8007402:	4648      	mov	r0, r9
 8007404:	f004 fcb0 	bl	800bd68 <iprintf>
      q->ref = 1;
 8007408:	2301      	movs	r3, #1
      rem_len -= q->len;
 800740a:	46ab      	mov	fp, r5
      q->ref = 1;
 800740c:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 800740e:	896b      	ldrh	r3, [r5, #10]
 8007410:	1af6      	subs	r6, r6, r3
 8007412:	e7b4      	b.n	800737e <pbuf_alloc+0xaa>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8007414:	f105 0013 	add.w	r0, r5, #19
 8007418:	1cf3      	adds	r3, r6, #3
 800741a:	f020 0003 	bic.w	r0, r0, #3
 800741e:	f023 0303 	bic.w	r3, r3, #3
 8007422:	4418      	add	r0, r3
 8007424:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8007426:	4298      	cmp	r0, r3
 8007428:	d3bb      	bcc.n	80073a2 <pbuf_alloc+0xce>
      p = (struct pbuf*)mem_malloc(alloc_len);
 800742a:	f7ff fc4d 	bl	8006cc8 <mem_malloc>
    if (p == NULL) {
 800742e:	4604      	mov	r4, r0
 8007430:	2800      	cmp	r0, #0
 8007432:	d0b6      	beq.n	80073a2 <pbuf_alloc+0xce>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007434:	4405      	add	r5, r0
    p->next = NULL;
 8007436:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8007438:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800743a:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 800743c:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 800743e:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007440:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8007444:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8007446:	6045      	str	r5, [r0, #4]
 8007448:	e79b      	b.n	8007382 <pbuf_alloc+0xae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800744a:	200b      	movs	r0, #11
 800744c:	f7ff fd36 	bl	8006ebc <memp_malloc>
    if (p == NULL) {
 8007450:	4604      	mov	r4, r0
 8007452:	2800      	cmp	r0, #0
 8007454:	d0a5      	beq.n	80073a2 <pbuf_alloc+0xce>
    p->payload = NULL;
 8007456:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8007458:	8106      	strh	r6, [r0, #8]
 800745a:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 800745c:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 800745e:	6003      	str	r3, [r0, #0]
    p->type = type;
 8007460:	7307      	strb	r7, [r0, #12]
    break;
 8007462:	e78e      	b.n	8007382 <pbuf_alloc+0xae>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007464:	4b02      	ldr	r3, [pc, #8]	; (8007470 <pbuf_alloc+0x19c>)
 8007466:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800746a:	4906      	ldr	r1, [pc, #24]	; (8007484 <pbuf_alloc+0x1b0>)
 800746c:	e74b      	b.n	8007306 <pbuf_alloc+0x32>
 800746e:	bf00      	nop
 8007470:	0800da89 	.word	0x0800da89
 8007474:	0800d824 	.word	0x0800d824
 8007478:	0800cb76 	.word	0x0800cb76
 800747c:	0800d83f 	.word	0x0800d83f
 8007480:	0800d884 	.word	0x0800d884
 8007484:	0800d8b1 	.word	0x0800d8b1
 8007488:	0800d870 	.word	0x0800d870

0800748c <pbuf_realloc>:
{
 800748c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007490:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007492:	4604      	mov	r4, r0
 8007494:	b930      	cbnz	r0, 80074a4 <pbuf_realloc+0x18>
 8007496:	4b2e      	ldr	r3, [pc, #184]	; (8007550 <pbuf_realloc+0xc4>)
 8007498:	f240 12f3 	movw	r2, #499	; 0x1f3
 800749c:	492d      	ldr	r1, [pc, #180]	; (8007554 <pbuf_realloc+0xc8>)
 800749e:	482e      	ldr	r0, [pc, #184]	; (8007558 <pbuf_realloc+0xcc>)
 80074a0:	f004 fc62 	bl	800bd68 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 80074a4:	7b23      	ldrb	r3, [r4, #12]
 80074a6:	2b03      	cmp	r3, #3
 80074a8:	d906      	bls.n	80074b8 <pbuf_realloc+0x2c>
 80074aa:	4b29      	ldr	r3, [pc, #164]	; (8007550 <pbuf_realloc+0xc4>)
 80074ac:	f240 12f7 	movw	r2, #503	; 0x1f7
 80074b0:	492a      	ldr	r1, [pc, #168]	; (800755c <pbuf_realloc+0xd0>)
 80074b2:	4829      	ldr	r0, [pc, #164]	; (8007558 <pbuf_realloc+0xcc>)
 80074b4:	f004 fc58 	bl	800bd68 <iprintf>
  if (new_len >= p->tot_len) {
 80074b8:	8926      	ldrh	r6, [r4, #8]
 80074ba:	42ae      	cmp	r6, r5
 80074bc:	d945      	bls.n	800754a <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 80074be:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80074c0:	4f23      	ldr	r7, [pc, #140]	; (8007550 <pbuf_realloc+0xc4>)
 80074c2:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 8007568 <pbuf_realloc+0xdc>
 80074c6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007558 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 80074ca:	8963      	ldrh	r3, [r4, #10]
 80074cc:	429d      	cmp	r5, r3
 80074ce:	d819      	bhi.n	8007504 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80074d0:	7b22      	ldrb	r2, [r4, #12]
 80074d2:	2a00      	cmp	r2, #0
 80074d4:	d131      	bne.n	800753a <pbuf_realloc+0xae>
 80074d6:	429d      	cmp	r5, r3
 80074d8:	d02f      	beq.n	800753a <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80074da:	7b63      	ldrb	r3, [r4, #13]
 80074dc:	079b      	lsls	r3, r3, #30
 80074de:	d42c      	bmi.n	800753a <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 80074e0:	6861      	ldr	r1, [r4, #4]
 80074e2:	4620      	mov	r0, r4
 80074e4:	1b09      	subs	r1, r1, r4
 80074e6:	4429      	add	r1, r5
 80074e8:	b289      	uxth	r1, r1
 80074ea:	f7ff fb61 	bl	8006bb0 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 80074ee:	4604      	mov	r4, r0
 80074f0:	bb18      	cbnz	r0, 800753a <pbuf_realloc+0xae>
 80074f2:	4b17      	ldr	r3, [pc, #92]	; (8007550 <pbuf_realloc+0xc4>)
 80074f4:	f240 221d 	movw	r2, #541	; 0x21d
 80074f8:	4919      	ldr	r1, [pc, #100]	; (8007560 <pbuf_realloc+0xd4>)
 80074fa:	4817      	ldr	r0, [pc, #92]	; (8007558 <pbuf_realloc+0xcc>)
 80074fc:	f004 fc34 	bl	800bd68 <iprintf>
  q->len = rem_len;
 8007500:	8164      	strh	r4, [r4, #10]
 8007502:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8007504:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007506:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800750a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800750c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800750e:	dd06      	ble.n	800751e <pbuf_realloc+0x92>
 8007510:	463b      	mov	r3, r7
 8007512:	f240 220b 	movw	r2, #523	; 0x20b
 8007516:	4649      	mov	r1, r9
 8007518:	4640      	mov	r0, r8
 800751a:	f004 fc25 	bl	800bd68 <iprintf>
    q->tot_len += (u16_t)grow;
 800751e:	8923      	ldrh	r3, [r4, #8]
 8007520:	4433      	add	r3, r6
 8007522:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007524:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007526:	2c00      	cmp	r4, #0
 8007528:	d1cf      	bne.n	80074ca <pbuf_realloc+0x3e>
 800752a:	463b      	mov	r3, r7
 800752c:	f240 220f 	movw	r2, #527	; 0x20f
 8007530:	490c      	ldr	r1, [pc, #48]	; (8007564 <pbuf_realloc+0xd8>)
 8007532:	4640      	mov	r0, r8
 8007534:	f004 fc18 	bl	800bd68 <iprintf>
 8007538:	e7c7      	b.n	80074ca <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 800753a:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 800753c:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 800753e:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8007540:	b108      	cbz	r0, 8007546 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 8007542:	f7ff fe5d 	bl	8007200 <pbuf_free>
  q->next = NULL;
 8007546:	2300      	movs	r3, #0
 8007548:	6023      	str	r3, [r4, #0]
 800754a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800754e:	bf00      	nop
 8007550:	0800da89 	.word	0x0800da89
 8007554:	0800dae5 	.word	0x0800dae5
 8007558:	0800cb76 	.word	0x0800cb76
 800755c:	0800dafd 	.word	0x0800dafd
 8007560:	0800db41 	.word	0x0800db41
 8007564:	0800db29 	.word	0x0800db29
 8007568:	0800db18 	.word	0x0800db18

0800756c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800756c:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 800756e:	2200      	movs	r2, #0
 8007570:	b290      	uxth	r0, r2
 8007572:	3201      	adds	r2, #1
 8007574:	b903      	cbnz	r3, 8007578 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 8007576:	4770      	bx	lr
    p = p->next;
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	e7f9      	b.n	8007570 <pbuf_clen+0x4>

0800757c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800757c:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 800757e:	4604      	mov	r4, r0
 8007580:	b188      	cbz	r0, 80075a6 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 8007582:	f003 f9ed 	bl	800a960 <sys_arch_protect>
 8007586:	89e3      	ldrh	r3, [r4, #14]
 8007588:	3301      	adds	r3, #1
 800758a:	81e3      	strh	r3, [r4, #14]
 800758c:	f003 f9f4 	bl	800a978 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007590:	89e3      	ldrh	r3, [r4, #14]
 8007592:	b943      	cbnz	r3, 80075a6 <pbuf_ref+0x2a>
 8007594:	4b04      	ldr	r3, [pc, #16]	; (80075a8 <pbuf_ref+0x2c>)
 8007596:	f240 3239 	movw	r2, #825	; 0x339
 800759a:	4904      	ldr	r1, [pc, #16]	; (80075ac <pbuf_ref+0x30>)
 800759c:	4804      	ldr	r0, [pc, #16]	; (80075b0 <pbuf_ref+0x34>)
  }
}
 800759e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80075a2:	f004 bbe1 	b.w	800bd68 <iprintf>
 80075a6:	bd10      	pop	{r4, pc}
 80075a8:	0800da89 	.word	0x0800da89
 80075ac:	0800db5d 	.word	0x0800db5d
 80075b0:	0800cb76 	.word	0x0800cb76

080075b4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80075b4:	b570      	push	{r4, r5, r6, lr}
 80075b6:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80075b8:	4604      	mov	r4, r0
 80075ba:	b100      	cbz	r0, 80075be <pbuf_cat+0xa>
 80075bc:	b969      	cbnz	r1, 80075da <pbuf_cat+0x26>
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <pbuf_cat+0x60>)
 80075c0:	f240 324d 	movw	r2, #845	; 0x34d
 80075c4:	4914      	ldr	r1, [pc, #80]	; (8007618 <pbuf_cat+0x64>)
 80075c6:	4815      	ldr	r0, [pc, #84]	; (800761c <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80075c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80075cc:	f004 bbcc 	b.w	800bd68 <iprintf>
    p->tot_len += t->tot_len;
 80075d0:	8923      	ldrh	r3, [r4, #8]
 80075d2:	8929      	ldrh	r1, [r5, #8]
 80075d4:	440b      	add	r3, r1
 80075d6:	8123      	strh	r3, [r4, #8]
 80075d8:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 80075da:	6822      	ldr	r2, [r4, #0]
 80075dc:	2a00      	cmp	r2, #0
 80075de:	d1f7      	bne.n	80075d0 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80075e0:	8922      	ldrh	r2, [r4, #8]
 80075e2:	8963      	ldrh	r3, [r4, #10]
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d006      	beq.n	80075f6 <pbuf_cat+0x42>
 80075e8:	4b0a      	ldr	r3, [pc, #40]	; (8007614 <pbuf_cat+0x60>)
 80075ea:	f240 3255 	movw	r2, #853	; 0x355
 80075ee:	490c      	ldr	r1, [pc, #48]	; (8007620 <pbuf_cat+0x6c>)
 80075f0:	480a      	ldr	r0, [pc, #40]	; (800761c <pbuf_cat+0x68>)
 80075f2:	f004 fbb9 	bl	800bd68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	b133      	cbz	r3, 8007608 <pbuf_cat+0x54>
 80075fa:	4b06      	ldr	r3, [pc, #24]	; (8007614 <pbuf_cat+0x60>)
 80075fc:	f240 3256 	movw	r2, #854	; 0x356
 8007600:	4908      	ldr	r1, [pc, #32]	; (8007624 <pbuf_cat+0x70>)
 8007602:	4806      	ldr	r0, [pc, #24]	; (800761c <pbuf_cat+0x68>)
 8007604:	f004 fbb0 	bl	800bd68 <iprintf>
  p->tot_len += t->tot_len;
 8007608:	892a      	ldrh	r2, [r5, #8]
 800760a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800760c:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800760e:	4413      	add	r3, r2
 8007610:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	0800da89 	.word	0x0800da89
 8007618:	0800d8f0 	.word	0x0800d8f0
 800761c:	0800cb76 	.word	0x0800cb76
 8007620:	0800d925 	.word	0x0800d925
 8007624:	0800d952 	.word	0x0800d952

08007628 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007628:	b510      	push	{r4, lr}
 800762a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800762c:	f7ff ffc2 	bl	80075b4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8007630:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8007632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 8007636:	f7ff bfa1 	b.w	800757c <pbuf_ref>
	...

0800763c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800763c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007640:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8007642:	4605      	mov	r5, r0
 8007644:	b120      	cbz	r0, 8007650 <pbuf_copy+0x14>
 8007646:	b119      	cbz	r1, 8007650 <pbuf_copy+0x14>
 8007648:	8902      	ldrh	r2, [r0, #8]
 800764a:	890b      	ldrh	r3, [r1, #8]
 800764c:	429a      	cmp	r2, r3
 800764e:	d20a      	bcs.n	8007666 <pbuf_copy+0x2a>
 8007650:	4b38      	ldr	r3, [pc, #224]	; (8007734 <pbuf_copy+0xf8>)
 8007652:	f240 32bd 	movw	r2, #957	; 0x3bd
 8007656:	4938      	ldr	r1, [pc, #224]	; (8007738 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8007658:	4838      	ldr	r0, [pc, #224]	; (800773c <pbuf_copy+0x100>)
 800765a:	f004 fb85 	bl	800bd68 <iprintf>
 800765e:	f06f 000f 	mvn.w	r0, #15
 8007662:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007666:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800766a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8007734 <pbuf_copy+0xf8>
 800766e:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 800774c <pbuf_copy+0x110>
 8007672:	465f      	mov	r7, fp
 8007674:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 800773c <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007678:	896e      	ldrh	r6, [r5, #10]
 800767a:	8963      	ldrh	r3, [r4, #10]
 800767c:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800767e:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007680:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007684:	6861      	ldr	r1, [r4, #4]
 8007686:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8007688:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800768a:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 800768c:	bfac      	ite	ge
 800768e:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8007690:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 8007692:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007694:	4632      	mov	r2, r6
 8007696:	f004 faa8 	bl	800bbea <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800769a:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800769c:	b2bf      	uxth	r7, r7
    offset_from += len;
 800769e:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076a0:	42bb      	cmp	r3, r7
    offset_from += len;
 80076a2:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80076a6:	d206      	bcs.n	80076b6 <pbuf_copy+0x7a>
 80076a8:	4643      	mov	r3, r8
 80076aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 80076ae:	4651      	mov	r1, sl
 80076b0:	4648      	mov	r0, r9
 80076b2:	f004 fb59 	bl	800bd68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80076b6:	8963      	ldrh	r3, [r4, #10]
 80076b8:	455b      	cmp	r3, fp
 80076ba:	d206      	bcs.n	80076ca <pbuf_copy+0x8e>
 80076bc:	4643      	mov	r3, r8
 80076be:	f240 32ce 	movw	r2, #974	; 0x3ce
 80076c2:	491f      	ldr	r1, [pc, #124]	; (8007740 <pbuf_copy+0x104>)
 80076c4:	4648      	mov	r0, r9
 80076c6:	f004 fb4f 	bl	800bd68 <iprintf>
    if (offset_from >= p_from->len) {
 80076ca:	8963      	ldrh	r3, [r4, #10]
 80076cc:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 80076ce:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80076d0:	bf9c      	itt	ls
 80076d2:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 80076d4:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 80076d8:	42bb      	cmp	r3, r7
 80076da:	d11e      	bne.n	800771a <pbuf_copy+0xde>
      p_to = p_to->next;
 80076dc:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80076de:	b9dd      	cbnz	r5, 8007718 <pbuf_copy+0xdc>
 80076e0:	b1bc      	cbz	r4, 8007712 <pbuf_copy+0xd6>
 80076e2:	4b14      	ldr	r3, [pc, #80]	; (8007734 <pbuf_copy+0xf8>)
 80076e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80076e8:	4916      	ldr	r1, [pc, #88]	; (8007744 <pbuf_copy+0x108>)
 80076ea:	e7b5      	b.n	8007658 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80076ec:	8962      	ldrh	r2, [r4, #10]
 80076ee:	8923      	ldrh	r3, [r4, #8]
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d114      	bne.n	800771e <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80076f4:	6823      	ldr	r3, [r4, #0]
 80076f6:	b193      	cbz	r3, 800771e <pbuf_copy+0xe2>
 80076f8:	4b0e      	ldr	r3, [pc, #56]	; (8007734 <pbuf_copy+0xf8>)
 80076fa:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80076fe:	4912      	ldr	r1, [pc, #72]	; (8007748 <pbuf_copy+0x10c>)
 8007700:	480e      	ldr	r0, [pc, #56]	; (800773c <pbuf_copy+0x100>)
 8007702:	f004 fb31 	bl	800bd68 <iprintf>
 8007706:	f06f 0005 	mvn.w	r0, #5
 800770a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800770e:	2c00      	cmp	r4, #0
 8007710:	d1b2      	bne.n	8007678 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007712:	4620      	mov	r0, r4
 8007714:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8007718:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800771a:	2c00      	cmp	r4, #0
 800771c:	d1e6      	bne.n	80076ec <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800771e:	896a      	ldrh	r2, [r5, #10]
 8007720:	892b      	ldrh	r3, [r5, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d1f3      	bne.n	800770e <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007726:	682b      	ldr	r3, [r5, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d0f0      	beq.n	800770e <pbuf_copy+0xd2>
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <pbuf_copy+0xf8>)
 800772e:	f240 32e3 	movw	r2, #995	; 0x3e3
 8007732:	e7e4      	b.n	80076fe <pbuf_copy+0xc2>
 8007734:	0800da89 	.word	0x0800da89
 8007738:	0800d962 	.word	0x0800d962
 800773c:	0800cb76 	.word	0x0800cb76
 8007740:	0800d9a9 	.word	0x0800d9a9
 8007744:	0800d9c4 	.word	0x0800d9c4
 8007748:	0800d9d1 	.word	0x0800d9d1
 800774c:	0800d992 	.word	0x0800d992

08007750 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	460f      	mov	r7, r1
 8007756:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8007758:	4606      	mov	r6, r0
 800775a:	b950      	cbnz	r0, 8007772 <pbuf_copy_partial+0x22>
 800775c:	4635      	mov	r5, r6
 800775e:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <pbuf_copy_partial+0x7c>)
 8007760:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8007764:	491a      	ldr	r1, [pc, #104]	; (80077d0 <pbuf_copy_partial+0x80>)
 8007766:	481b      	ldr	r0, [pc, #108]	; (80077d4 <pbuf_copy_partial+0x84>)
 8007768:	f004 fafe 	bl	800bd68 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 800776c:	4628      	mov	r0, r5
 800776e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007772:	b169      	cbz	r1, 8007790 <pbuf_copy_partial+0x40>
 8007774:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8007776:	f1b8 0f00 	cmp.w	r8, #0
 800777a:	d0f7      	beq.n	800776c <pbuf_copy_partial+0x1c>
 800777c:	2e00      	cmp	r6, #0
 800777e:	d0f5      	beq.n	800776c <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 8007780:	b17b      	cbz	r3, 80077a2 <pbuf_copy_partial+0x52>
 8007782:	8971      	ldrh	r1, [r6, #10]
 8007784:	428b      	cmp	r3, r1
 8007786:	d30c      	bcc.n	80077a2 <pbuf_copy_partial+0x52>
      offset -= p->len;
 8007788:	1a5b      	subs	r3, r3, r1
 800778a:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800778c:	6836      	ldr	r6, [r6, #0]
 800778e:	e7f2      	b.n	8007776 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007790:	4b0e      	ldr	r3, [pc, #56]	; (80077cc <pbuf_copy_partial+0x7c>)
 8007792:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007796:	4910      	ldr	r1, [pc, #64]	; (80077d8 <pbuf_copy_partial+0x88>)
 8007798:	463d      	mov	r5, r7
 800779a:	480e      	ldr	r0, [pc, #56]	; (80077d4 <pbuf_copy_partial+0x84>)
 800779c:	f004 fae4 	bl	800bd68 <iprintf>
 80077a0:	e7e4      	b.n	800776c <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 80077a2:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80077a4:	1978      	adds	r0, r7, r5
 80077a6:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 80077a8:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80077aa:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 80077ac:	b2a4      	uxth	r4, r4
 80077ae:	4544      	cmp	r4, r8
 80077b0:	bf28      	it	cs
 80077b2:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80077b4:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 80077b6:	4425      	add	r5, r4
      len -= buf_copy_len;
 80077b8:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 80077bc:	f004 fa15 	bl	800bbea <memcpy>
      copied_total += buf_copy_len;
 80077c0:	b2ad      	uxth	r5, r5
      offset = 0;
 80077c2:	2300      	movs	r3, #0
      len -= buf_copy_len;
 80077c4:	fa1f f884 	uxth.w	r8, r4
 80077c8:	e7e0      	b.n	800778c <pbuf_copy_partial+0x3c>
 80077ca:	bf00      	nop
 80077cc:	0800da89 	.word	0x0800da89
 80077d0:	0800d9fb 	.word	0x0800d9fb
 80077d4:	0800cb76 	.word	0x0800cb76
 80077d8:	0800da1a 	.word	0x0800da1a

080077dc <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80077dc:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80077de:	4604      	mov	r4, r0
 80077e0:	b930      	cbnz	r0, 80077f0 <tcp_close_shutdown_fin+0x14>
 80077e2:	4b13      	ldr	r3, [pc, #76]	; (8007830 <tcp_close_shutdown_fin+0x54>)
 80077e4:	f240 124d 	movw	r2, #333	; 0x14d
 80077e8:	4912      	ldr	r1, [pc, #72]	; (8007834 <tcp_close_shutdown_fin+0x58>)
 80077ea:	4813      	ldr	r0, [pc, #76]	; (8007838 <tcp_close_shutdown_fin+0x5c>)
 80077ec:	f004 fabc 	bl	800bd68 <iprintf>

  switch (pcb->state) {
 80077f0:	7d23      	ldrb	r3, [r4, #20]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d003      	beq.n	80077fe <tcp_close_shutdown_fin+0x22>
 80077f6:	2b07      	cmp	r3, #7
 80077f8:	d00c      	beq.n	8007814 <tcp_close_shutdown_fin+0x38>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d108      	bne.n	8007810 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80077fe:	4620      	mov	r0, r4
 8007800:	f002 f998 	bl	8009b34 <tcp_send_fin>
    if (err == ERR_OK) {
 8007804:	b988      	cbnz	r0, 800782a <tcp_close_shutdown_fin+0x4e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8007806:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8007808:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800780a:	4620      	mov	r0, r4
 800780c:	f002 f9ea 	bl	8009be4 <tcp_output>
 8007810:	2000      	movs	r0, #0
 8007812:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007814:	4620      	mov	r0, r4
 8007816:	f002 f98d 	bl	8009b34 <tcp_send_fin>
    if (err == ERR_OK) {
 800781a:	b930      	cbnz	r0, 800782a <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 800781c:	2309      	movs	r3, #9
 800781e:	e7f3      	b.n	8007808 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8007820:	7ea3      	ldrb	r3, [r4, #26]
 8007822:	f043 0308 	orr.w	r3, r3, #8
 8007826:	76a3      	strb	r3, [r4, #26]
 8007828:	e7f2      	b.n	8007810 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800782a:	1c43      	adds	r3, r0, #1
 800782c:	d0f8      	beq.n	8007820 <tcp_close_shutdown_fin+0x44>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 800782e:	bd10      	pop	{r4, pc}
 8007830:	0800dbc6 	.word	0x0800dbc6
 8007834:	0800dbf5 	.word	0x0800dbf5
 8007838:	0800cb76 	.word	0x0800cb76

0800783c <tcp_init>:
{
 800783c:	4770      	bx	lr
	...

08007840 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8007840:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8007842:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 8007844:	4604      	mov	r4, r0

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8007846:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007848:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800784a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800784c:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800784e:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8007852:	4428      	add	r0, r5
 8007854:	bf94      	ite	ls
 8007856:	1a82      	subls	r2, r0, r2
 8007858:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 800785c:	2a00      	cmp	r2, #0
 800785e:	db01      	blt.n	8007864 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8007860:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8007862:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8007864:	1aea      	subs	r2, r5, r3
 8007866:	2a00      	cmp	r2, #0
 8007868:	dd02      	ble.n	8007870 <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800786a:	2000      	movs	r0, #0
 800786c:	8560      	strh	r0, [r4, #42]	; 0x2a
 800786e:	bd38      	pop	{r3, r4, r5, pc}
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8007870:	1b5d      	subs	r5, r3, r5
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8007872:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007876:	d306      	bcc.n	8007886 <tcp_update_rcv_ann_wnd+0x46>
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <tcp_update_rcv_ann_wnd+0x4c>)
 800787a:	f44f 7242 	mov.w	r2, #776	; 0x308
 800787e:	4904      	ldr	r1, [pc, #16]	; (8007890 <tcp_update_rcv_ann_wnd+0x50>)
 8007880:	4804      	ldr	r0, [pc, #16]	; (8007894 <tcp_update_rcv_ann_wnd+0x54>)
 8007882:	f004 fa71 	bl	800bd68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8007886:	8565      	strh	r5, [r4, #42]	; 0x2a
    }
    return 0;
 8007888:	2000      	movs	r0, #0
  }
}
 800788a:	bd38      	pop	{r3, r4, r5, pc}
 800788c:	0800dbc6 	.word	0x0800dbc6
 8007890:	0800de08 	.word	0x0800de08
 8007894:	0800cb76 	.word	0x0800cb76

08007898 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007898:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800789a:	7d03      	ldrb	r3, [r0, #20]
{
 800789c:	4604      	mov	r4, r0
 800789e:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80078a0:	2b01      	cmp	r3, #1
 80078a2:	d106      	bne.n	80078b2 <tcp_recved+0x1a>
 80078a4:	4b17      	ldr	r3, [pc, #92]	; (8007904 <tcp_recved+0x6c>)
 80078a6:	f44f 7248 	mov.w	r2, #800	; 0x320
 80078aa:	4917      	ldr	r1, [pc, #92]	; (8007908 <tcp_recved+0x70>)
 80078ac:	4817      	ldr	r0, [pc, #92]	; (800790c <tcp_recved+0x74>)
 80078ae:	f004 fa5b 	bl	800bd68 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80078b2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80078b4:	4429      	add	r1, r5
 80078b6:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80078b8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 80078bc:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80078be:	d911      	bls.n	80078e4 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80078c0:	f44f 6306 	mov.w	r3, #2144	; 0x860
 80078c4:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80078c6:	4620      	mov	r0, r4
 80078c8:	f7ff ffba 	bl	8007840 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80078cc:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 80078d0:	db17      	blt.n	8007902 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 80078d2:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 80078d4:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 80078d6:	f043 0302 	orr.w	r3, r3, #2
 80078da:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80078dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 80078e0:	f002 b980 	b.w	8009be4 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 80078e4:	2900      	cmp	r1, #0
 80078e6:	d1ee      	bne.n	80078c6 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 80078e8:	7d23      	ldrb	r3, [r4, #20]
 80078ea:	2b07      	cmp	r3, #7
 80078ec:	d0e8      	beq.n	80078c0 <tcp_recved+0x28>
 80078ee:	2b09      	cmp	r3, #9
 80078f0:	d0e6      	beq.n	80078c0 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 80078f2:	4b04      	ldr	r3, [pc, #16]	; (8007904 <tcp_recved+0x6c>)
 80078f4:	f240 322d 	movw	r2, #813	; 0x32d
 80078f8:	4905      	ldr	r1, [pc, #20]	; (8007910 <tcp_recved+0x78>)
 80078fa:	4804      	ldr	r0, [pc, #16]	; (800790c <tcp_recved+0x74>)
 80078fc:	f004 fa34 	bl	800bd68 <iprintf>
 8007900:	e7e1      	b.n	80078c6 <tcp_recved+0x2e>
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	0800dbc6 	.word	0x0800dbc6
 8007908:	0800dc6f 	.word	0x0800dc6f
 800790c:	0800cb76 	.word	0x0800cb76
 8007910:	0800dc95 	.word	0x0800dc95

08007914 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007914:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007916:	4604      	mov	r4, r0
 8007918:	b148      	cbz	r0, 800792e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800791a:	6840      	ldr	r0, [r0, #4]
 800791c:	b108      	cbz	r0, 8007922 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800791e:	f7ff fc6f 	bl	8007200 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007922:	4621      	mov	r1, r4
 8007924:	2003      	movs	r0, #3
  }
}
 8007926:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800792a:	f7ff bae3 	b.w	8006ef4 <memp_free>
 800792e:	bd10      	pop	{r4, pc}

08007930 <tcp_segs_free>:
{
 8007930:	b510      	push	{r4, lr}
  while (seg != NULL) {
 8007932:	b900      	cbnz	r0, 8007936 <tcp_segs_free+0x6>
}
 8007934:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 8007936:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 8007938:	f7ff ffec 	bl	8007914 <tcp_seg_free>
    seg = next;
 800793c:	4620      	mov	r0, r4
 800793e:	e7f8      	b.n	8007932 <tcp_segs_free+0x2>

08007940 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8007944:	2003      	movs	r0, #3
 8007946:	f7ff fab9 	bl	8006ebc <memp_malloc>
  if (cseg == NULL) {
 800794a:	4605      	mov	r5, r0
 800794c:	b160      	cbz	r0, 8007968 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800794e:	4620      	mov	r0, r4
 8007950:	462b      	mov	r3, r5
 8007952:	f104 0210 	add.w	r2, r4, #16
 8007956:	f850 1b04 	ldr.w	r1, [r0], #4
 800795a:	4290      	cmp	r0, r2
 800795c:	f843 1b04 	str.w	r1, [r3], #4
 8007960:	d1f9      	bne.n	8007956 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 8007962:	6868      	ldr	r0, [r5, #4]
 8007964:	f7ff fe0a 	bl	800757c <pbuf_ref>
  return cseg;
}
 8007968:	4628      	mov	r0, r5
 800796a:	bd38      	pop	{r3, r4, r5, pc}

0800796c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800796c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 800796e:	7d03      	ldrb	r3, [r0, #20]
{
 8007970:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 8007972:	2b01      	cmp	r3, #1
 8007974:	d919      	bls.n	80079aa <tcp_pcb_purge+0x3e>
 8007976:	2b0a      	cmp	r3, #10
 8007978:	d017      	beq.n	80079aa <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800797a:	6f40      	ldr	r0, [r0, #116]	; 0x74
 800797c:	b118      	cbz	r0, 8007986 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800797e:	f7ff fc3f 	bl	8007200 <pbuf_free>
      pcb->refused_data = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 8007986:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 8007988:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 800798a:	f7ff ffd1 	bl	8007930 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800798e:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 8007992:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8007994:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 8007996:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8007998:	f7ff ffca 	bl	8007930 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800799c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800799e:	f7ff ffc7 	bl	8007930 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80079a2:	66a5      	str	r5, [r4, #104]	; 0x68
 80079a4:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80079a6:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 80079aa:	bd38      	pop	{r3, r4, r5, pc}

080079ac <tcp_slowtmr>:
{
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 80079b0:	4eb0      	ldr	r6, [pc, #704]	; (8007c74 <tcp_slowtmr+0x2c8>)
{
 80079b2:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 80079b4:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8007ca8 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 80079b8:	6833      	ldr	r3, [r6, #0]
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 80079be:	4bae      	ldr	r3, [pc, #696]	; (8007c78 <tcp_slowtmr+0x2cc>)
 80079c0:	781a      	ldrb	r2, [r3, #0]
 80079c2:	9302      	str	r3, [sp, #8]
 80079c4:	3201      	adds	r2, #1
 80079c6:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 80079c8:	4fac      	ldr	r7, [pc, #688]	; (8007c7c <tcp_slowtmr+0x2d0>)
  prev = NULL;
 80079ca:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80079ce:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8007cac <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 80079d2:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 80079d4:	b96c      	cbnz	r4, 80079f2 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 80079d6:	4faa      	ldr	r7, [pc, #680]	; (8007c80 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80079d8:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8007cac <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 80079dc:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80079de:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8007cb0 <tcp_slowtmr+0x304>
 80079e2:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 8007c88 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 80079e6:	2d00      	cmp	r5, #0
 80079e8:	f040 8185 	bne.w	8007cf6 <tcp_slowtmr+0x34a>
}
 80079ec:	b005      	add	sp, #20
 80079ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80079f2:	7d23      	ldrb	r3, [r4, #20]
 80079f4:	b933      	cbnz	r3, 8007a04 <tcp_slowtmr+0x58>
 80079f6:	464b      	mov	r3, r9
 80079f8:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 80079fc:	49a1      	ldr	r1, [pc, #644]	; (8007c84 <tcp_slowtmr+0x2d8>)
 80079fe:	48a2      	ldr	r0, [pc, #648]	; (8007c88 <tcp_slowtmr+0x2dc>)
 8007a00:	f004 f9b2 	bl	800bd68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007a04:	7d23      	ldrb	r3, [r4, #20]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d106      	bne.n	8007a18 <tcp_slowtmr+0x6c>
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007a10:	499e      	ldr	r1, [pc, #632]	; (8007c8c <tcp_slowtmr+0x2e0>)
 8007a12:	489d      	ldr	r0, [pc, #628]	; (8007c88 <tcp_slowtmr+0x2dc>)
 8007a14:	f004 f9a8 	bl	800bd68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007a18:	7d23      	ldrb	r3, [r4, #20]
 8007a1a:	2b0a      	cmp	r3, #10
 8007a1c:	d106      	bne.n	8007a2c <tcp_slowtmr+0x80>
 8007a1e:	464b      	mov	r3, r9
 8007a20:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007a24:	499a      	ldr	r1, [pc, #616]	; (8007c90 <tcp_slowtmr+0x2e4>)
 8007a26:	4898      	ldr	r0, [pc, #608]	; (8007c88 <tcp_slowtmr+0x2dc>)
 8007a28:	f004 f99e 	bl	800bd68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8007a2c:	9b02      	ldr	r3, [sp, #8]
 8007a2e:	7f62      	ldrb	r2, [r4, #29]
 8007a30:	781b      	ldrb	r3, [r3, #0]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d104      	bne.n	8007a40 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 8007a36:	68e5      	ldr	r5, [r4, #12]
 8007a38:	4644      	mov	r4, r8
      continue;
 8007a3a:	46a0      	mov	r8, r4
 8007a3c:	462c      	mov	r4, r5
 8007a3e:	e7c9      	b.n	80079d4 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007a40:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8007a42:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8007a44:	2902      	cmp	r1, #2
 8007a46:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8007a4a:	d102      	bne.n	8007a52 <tcp_slowtmr+0xa6>
 8007a4c:	2a05      	cmp	r2, #5
 8007a4e:	f200 80e6 	bhi.w	8007c1e <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 8007a52:	2a0b      	cmp	r2, #11
 8007a54:	f200 80e3 	bhi.w	8007c1e <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 8007a58:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 8007a5c:	f1bb 0f00 	cmp.w	fp, #0
 8007a60:	f000 80a6 	beq.w	8007bb0 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007a64:	488b      	ldr	r0, [pc, #556]	; (8007c94 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 8007a66:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 8007a6a:	4483      	add	fp, r0
 8007a6c:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 8007a70:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 8007a72:	bf84      	itt	hi
 8007a74:	3301      	addhi	r3, #1
 8007a76:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 8007a7a:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	f080 8085 	bcs.w	8007b8e <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 8007a84:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 8007a88:	7d23      	ldrb	r3, [r4, #20]
 8007a8a:	2b06      	cmp	r3, #6
 8007a8c:	d10b      	bne.n	8007aa6 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 8007a8e:	7ea2      	ldrb	r2, [r4, #26]
 8007a90:	06d2      	lsls	r2, r2, #27
 8007a92:	d508      	bpl.n	8007aa6 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007a94:	6832      	ldr	r2, [r6, #0]
 8007a96:	6a21      	ldr	r1, [r4, #32]
 8007a98:	1a52      	subs	r2, r2, r1
 8007a9a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 8007a9c:	bf84      	itt	hi
 8007a9e:	f10b 0b01 	addhi.w	fp, fp, #1
 8007aa2:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007aa6:	7a25      	ldrb	r5, [r4, #8]
 8007aa8:	f015 0508 	ands.w	r5, r5, #8
 8007aac:	d019      	beq.n	8007ae2 <tcp_slowtmr+0x136>
 8007aae:	2b04      	cmp	r3, #4
 8007ab0:	d002      	beq.n	8007ab8 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 8007ab2:	2b07      	cmp	r3, #7
 8007ab4:	f040 80c8 	bne.w	8007c48 <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007ab8:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 8007abc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ac0:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007ac2:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ac6:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007ac8:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007acc:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007ace:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007ad2:	4291      	cmp	r1, r2
 8007ad4:	f240 80a6 	bls.w	8007c24 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8007ad8:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 8007adc:	2501      	movs	r5, #1
        ++pcb_remove;
 8007ade:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8007ae2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007ae4:	b168      	cbz	r0, 8007b02 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007ae6:	6833      	ldr	r3, [r6, #0]
 8007ae8:	6a22      	ldr	r2, [r4, #32]
 8007aea:	1a9a      	subs	r2, r3, r2
 8007aec:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007af0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8007af4:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007af8:	d303      	bcc.n	8007b02 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 8007afa:	f7ff ff19 	bl	8007930 <tcp_segs_free>
      pcb->ooseq = NULL;
 8007afe:	2300      	movs	r3, #0
 8007b00:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8007b02:	7d23      	ldrb	r3, [r4, #20]
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	f040 80a1 	bne.w	8007c4c <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007b0a:	6833      	ldr	r3, [r6, #0]
 8007b0c:	6a22      	ldr	r2, [r4, #32]
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007b12:	d803      	bhi.n	8007b1c <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8007b14:	f1bb 0f00 	cmp.w	fp, #0
 8007b18:	f000 80cc 	beq.w	8007cb4 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 8007b1c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8007b1e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007b22:	f7ff ff23 	bl	800796c <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007b26:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8007b28:	f1b8 0f00 	cmp.w	r8, #0
 8007b2c:	f000 8096 	beq.w	8007c5c <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d106      	bne.n	8007b42 <tcp_slowtmr+0x196>
 8007b34:	464b      	mov	r3, r9
 8007b36:	f240 4289 	movw	r2, #1161	; 0x489
 8007b3a:	4957      	ldr	r1, [pc, #348]	; (8007c98 <tcp_slowtmr+0x2ec>)
 8007b3c:	4852      	ldr	r0, [pc, #328]	; (8007c88 <tcp_slowtmr+0x2dc>)
 8007b3e:	f004 f913 	bl	800bd68 <iprintf>
        prev->next = pcb->next;
 8007b42:	68e3      	ldr	r3, [r4, #12]
 8007b44:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8007b48:	b14d      	cbz	r5, 8007b5e <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007b4a:	8b23      	ldrh	r3, [r4, #24]
 8007b4c:	4622      	mov	r2, r4
 8007b4e:	9301      	str	r3, [sp, #4]
 8007b50:	8ae3      	ldrh	r3, [r4, #22]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	1d23      	adds	r3, r4, #4
 8007b56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b58:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007b5a:	f002 f9c1 	bl	8009ee0 <tcp_rst>
      err_arg = pcb->callback_arg;
 8007b5e:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007b60:	4621      	mov	r1, r4
 8007b62:	2001      	movs	r0, #1
      pcb = pcb->next;
 8007b64:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 8007b66:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007b68:	f7ff f9c4 	bl	8006ef4 <memp_free>
      tcp_active_pcbs_changed = 0;
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8007b72:	f1bb 0f00 	cmp.w	fp, #0
 8007b76:	d004      	beq.n	8007b82 <tcp_slowtmr+0x1d6>
 8007b78:	9b03      	ldr	r3, [sp, #12]
 8007b7a:	f06f 010c 	mvn.w	r1, #12
 8007b7e:	4618      	mov	r0, r3
 8007b80:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 8007b82:	f89a 3000 	ldrb.w	r3, [sl]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f43f af56 	beq.w	8007a38 <tcp_slowtmr+0x8c>
 8007b8c:	e71c      	b.n	80079c8 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8007b8e:	4620      	mov	r0, r4
 8007b90:	f002 fa96 	bl	800a0c0 <tcp_zero_window_probe>
 8007b94:	2800      	cmp	r0, #0
 8007b96:	f47f af75 	bne.w	8007a84 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007b9a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 8007b9e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	f63f af6e 	bhi.w	8007a84 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8007ba8:	3301      	adds	r3, #1
 8007baa:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 8007bae:	e769      	b.n	8007a84 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8007bb0:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007bb4:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8007bb6:	bfa4      	itt	ge
 8007bb8:	3301      	addge	r3, #1
 8007bba:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8007bbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	f43f af60 	beq.w	8007a84 <tcp_slowtmr+0xd8>
 8007bc4:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8007bc8:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007bcc:	4298      	cmp	r0, r3
 8007bce:	f6ff af59 	blt.w	8007a84 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 8007bd2:	2902      	cmp	r1, #2
 8007bd4:	d00a      	beq.n	8007bec <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007bd6:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 8007bda:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 8007bde:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007be2:	492e      	ldr	r1, [pc, #184]	; (8007c9c <tcp_slowtmr+0x2f0>)
 8007be4:	5c8a      	ldrb	r2, [r1, r2]
 8007be6:	4093      	lsls	r3, r2
 8007be8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 8007bec:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007bee:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007bf2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 8007bf4:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8007bf6:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007bf8:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 8007bfc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8007c00:	4293      	cmp	r3, r2
 8007c02:	bf28      	it	cs
 8007c04:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007c06:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8007c08:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007c0a:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 8007c0c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007c10:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 8007c12:	bf38      	it	cc
 8007c14:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8007c18:	f002 f9bc 	bl	8009f94 <tcp_rexmit_rto>
 8007c1c:	e734      	b.n	8007a88 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 8007c1e:	f04f 0b01 	mov.w	fp, #1
 8007c22:	e731      	b.n	8007a88 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007c24:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <tcp_slowtmr+0x2f4>)
 8007c2a:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 8007c2e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007c32:	4299      	cmp	r1, r3
 8007c34:	d908      	bls.n	8007c48 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 8007c36:	4620      	mov	r0, r4
 8007c38:	f002 fa18 	bl	800a06c <tcp_keepalive>
        if (err == ERR_OK) {
 8007c3c:	b920      	cbnz	r0, 8007c48 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 8007c3e:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007c42:	3301      	adds	r3, #1
 8007c44:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 8007c48:	2500      	movs	r5, #0
 8007c4a:	e74a      	b.n	8007ae2 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 8007c4c:	2b09      	cmp	r3, #9
 8007c4e:	f47f af61 	bne.w	8007b14 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007c52:	6833      	ldr	r3, [r6, #0]
 8007c54:	6a22      	ldr	r2, [r4, #32]
 8007c56:	1a9b      	subs	r3, r3, r2
 8007c58:	2bf0      	cmp	r3, #240	; 0xf0
 8007c5a:	e75a      	b.n	8007b12 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8007c5c:	429c      	cmp	r4, r3
 8007c5e:	d006      	beq.n	8007c6e <tcp_slowtmr+0x2c2>
 8007c60:	464b      	mov	r3, r9
 8007c62:	f240 428d 	movw	r2, #1165	; 0x48d
 8007c66:	490f      	ldr	r1, [pc, #60]	; (8007ca4 <tcp_slowtmr+0x2f8>)
 8007c68:	4807      	ldr	r0, [pc, #28]	; (8007c88 <tcp_slowtmr+0x2dc>)
 8007c6a:	f004 f87d 	bl	800bd68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8007c6e:	68e3      	ldr	r3, [r4, #12]
 8007c70:	603b      	str	r3, [r7, #0]
 8007c72:	e769      	b.n	8007b48 <tcp_slowtmr+0x19c>
 8007c74:	200076f0 	.word	0x200076f0
 8007c78:	20003f3a 	.word	0x20003f3a
 8007c7c:	200076ec 	.word	0x200076ec
 8007c80:	200076fc 	.word	0x200076fc
 8007c84:	0800dcb6 	.word	0x0800dcb6
 8007c88:	0800cb76 	.word	0x0800cb76
 8007c8c:	0800dce0 	.word	0x0800dce0
 8007c90:	0800dd0a 	.word	0x0800dd0a
 8007c94:	0800dc68 	.word	0x0800dc68
 8007c98:	0800dd37 	.word	0x0800dd37
 8007c9c:	0800dba0 	.word	0x0800dba0
 8007ca0:	000124f8 	.word	0x000124f8
 8007ca4:	0800dd62 	.word	0x0800dd62
 8007ca8:	200076e8 	.word	0x200076e8
 8007cac:	0800dbc6 	.word	0x0800dbc6
 8007cb0:	0800dd8c 	.word	0x0800dd8c
      ++prev->polltmr;
 8007cb4:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8007cb6:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8007cb8:	3301      	adds	r3, #1
      pcb = pcb->next;
 8007cba:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 8007cbc:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8007cbe:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8007cc0:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8007cc2:	f63f aeba 	bhi.w	8007a3a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8007cc6:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 8007cca:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 8007cce:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8007cd2:	b173      	cbz	r3, 8007cf2 <tcp_slowtmr+0x346>
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	6920      	ldr	r0, [r4, #16]
 8007cd8:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8007cda:	f89a 3000 	ldrb.w	r3, [sl]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f47f ae72 	bne.w	80079c8 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	f47f aea8 	bne.w	8007a3a <tcp_slowtmr+0x8e>
          tcp_output(prev);
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 ff7a 	bl	8009be4 <tcp_output>
 8007cf0:	e6a3      	b.n	8007a3a <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	e7f1      	b.n	8007cda <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007cf6:	7d2b      	ldrb	r3, [r5, #20]
 8007cf8:	2b0a      	cmp	r3, #10
 8007cfa:	d006      	beq.n	8007d0a <tcp_slowtmr+0x35e>
 8007cfc:	4643      	mov	r3, r8
 8007cfe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007d02:	4651      	mov	r1, sl
 8007d04:	4648      	mov	r0, r9
 8007d06:	f004 f82f 	bl	800bd68 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007d0a:	6833      	ldr	r3, [r6, #0]
 8007d0c:	6a2a      	ldr	r2, [r5, #32]
 8007d0e:	1a9b      	subs	r3, r3, r2
 8007d10:	2bf0      	cmp	r3, #240	; 0xf0
 8007d12:	d816      	bhi.n	8007d42 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8007d14:	462c      	mov	r4, r5
 8007d16:	68ed      	ldr	r5, [r5, #12]
 8007d18:	e665      	b.n	80079e6 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	429d      	cmp	r5, r3
 8007d1e:	d106      	bne.n	8007d2e <tcp_slowtmr+0x382>
 8007d20:	4643      	mov	r3, r8
 8007d22:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007d26:	4910      	ldr	r1, [pc, #64]	; (8007d68 <tcp_slowtmr+0x3bc>)
 8007d28:	4648      	mov	r0, r9
 8007d2a:	f004 f81d 	bl	800bd68 <iprintf>
        prev->next = pcb->next;
 8007d2e:	68eb      	ldr	r3, [r5, #12]
 8007d30:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 8007d32:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 8007d36:	4629      	mov	r1, r5
 8007d38:	2001      	movs	r0, #1
 8007d3a:	f7ff f8db 	bl	8006ef4 <memp_free>
      pcb = pcb->next;
 8007d3e:	465d      	mov	r5, fp
 8007d40:	e651      	b.n	80079e6 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 8007d42:	4628      	mov	r0, r5
 8007d44:	f7ff fe12 	bl	800796c <tcp_pcb_purge>
      if (prev != NULL) {
 8007d48:	2c00      	cmp	r4, #0
 8007d4a:	d1e6      	bne.n	8007d1a <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	429d      	cmp	r5, r3
 8007d50:	d006      	beq.n	8007d60 <tcp_slowtmr+0x3b4>
 8007d52:	4643      	mov	r3, r8
 8007d54:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8007d58:	4904      	ldr	r1, [pc, #16]	; (8007d6c <tcp_slowtmr+0x3c0>)
 8007d5a:	4648      	mov	r0, r9
 8007d5c:	f004 f804 	bl	800bd68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8007d60:	68eb      	ldr	r3, [r5, #12]
 8007d62:	603b      	str	r3, [r7, #0]
 8007d64:	e7e5      	b.n	8007d32 <tcp_slowtmr+0x386>
 8007d66:	bf00      	nop
 8007d68:	0800ddbb 	.word	0x0800ddbb
 8007d6c:	0800dde2 	.word	0x0800dde2

08007d70 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 8007d70:	6803      	ldr	r3, [r0, #0]
 8007d72:	428b      	cmp	r3, r1
{
 8007d74:	b510      	push	{r4, lr}
 8007d76:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 8007d78:	d137      	bne.n	8007dea <tcp_pcb_remove+0x7a>
 8007d7a:	68cb      	ldr	r3, [r1, #12]
 8007d7c:	6003      	str	r3, [r0, #0]
 8007d7e:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 8007d80:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 8007d82:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 8007d84:	f7ff fdf2 	bl	800796c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 8007d88:	7d23      	ldrb	r3, [r4, #20]
 8007d8a:	2b0a      	cmp	r3, #10
 8007d8c:	d00a      	beq.n	8007da4 <tcp_pcb_remove+0x34>
 8007d8e:	2b01      	cmp	r3, #1
 8007d90:	d008      	beq.n	8007da4 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8007d92:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8007d94:	07da      	lsls	r2, r3, #31
 8007d96:	d505      	bpl.n	8007da4 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8007d98:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 8007d9c:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 8007d9e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007da0:	f001 ff20 	bl	8009be4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007da4:	7d23      	ldrb	r3, [r4, #20]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d01a      	beq.n	8007de0 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8007daa:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8007dac:	b133      	cbz	r3, 8007dbc <tcp_pcb_remove+0x4c>
 8007dae:	4b13      	ldr	r3, [pc, #76]	; (8007dfc <tcp_pcb_remove+0x8c>)
 8007db0:	f240 7253 	movw	r2, #1875	; 0x753
 8007db4:	4912      	ldr	r1, [pc, #72]	; (8007e00 <tcp_pcb_remove+0x90>)
 8007db6:	4813      	ldr	r0, [pc, #76]	; (8007e04 <tcp_pcb_remove+0x94>)
 8007db8:	f003 ffd6 	bl	800bd68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8007dbc:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8007dbe:	b133      	cbz	r3, 8007dce <tcp_pcb_remove+0x5e>
 8007dc0:	4b0e      	ldr	r3, [pc, #56]	; (8007dfc <tcp_pcb_remove+0x8c>)
 8007dc2:	f240 7254 	movw	r2, #1876	; 0x754
 8007dc6:	4910      	ldr	r1, [pc, #64]	; (8007e08 <tcp_pcb_remove+0x98>)
 8007dc8:	480e      	ldr	r0, [pc, #56]	; (8007e04 <tcp_pcb_remove+0x94>)
 8007dca:	f003 ffcd 	bl	800bd68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007dce:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007dd0:	b133      	cbz	r3, 8007de0 <tcp_pcb_remove+0x70>
 8007dd2:	4b0a      	ldr	r3, [pc, #40]	; (8007dfc <tcp_pcb_remove+0x8c>)
 8007dd4:	f240 7256 	movw	r2, #1878	; 0x756
 8007dd8:	490c      	ldr	r1, [pc, #48]	; (8007e0c <tcp_pcb_remove+0x9c>)
 8007dda:	480a      	ldr	r0, [pc, #40]	; (8007e04 <tcp_pcb_remove+0x94>)
 8007ddc:	f003 ffc4 	bl	800bd68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007de0:	2300      	movs	r3, #0
 8007de2:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007de4:	82e3      	strh	r3, [r4, #22]
 8007de6:	bd10      	pop	{r4, pc}
 8007de8:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0c7      	beq.n	8007d7e <tcp_pcb_remove+0xe>
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	4294      	cmp	r4, r2
 8007df2:	d1f9      	bne.n	8007de8 <tcp_pcb_remove+0x78>
 8007df4:	68e2      	ldr	r2, [r4, #12]
 8007df6:	60da      	str	r2, [r3, #12]
 8007df8:	e7c1      	b.n	8007d7e <tcp_pcb_remove+0xe>
 8007dfa:	bf00      	nop
 8007dfc:	0800dbc6 	.word	0x0800dbc6
 8007e00:	0800dc20 	.word	0x0800dc20
 8007e04:	0800cb76 	.word	0x0800cb76
 8007e08:	0800dc38 	.word	0x0800dc38
 8007e0c:	0800dc51 	.word	0x0800dc51

08007e10 <tcp_close_shutdown>:
{
 8007e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e12:	7d03      	ldrb	r3, [r0, #20]
 8007e14:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007e16:	2900      	cmp	r1, #0
 8007e18:	d049      	beq.n	8007eae <tcp_close_shutdown+0x9e>
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d001      	beq.n	8007e22 <tcp_close_shutdown+0x12>
 8007e1e:	2b07      	cmp	r3, #7
 8007e20:	d145      	bne.n	8007eae <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007e22:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007e24:	b91a      	cbnz	r2, 8007e2e <tcp_close_shutdown+0x1e>
 8007e26:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007e28:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 8007e2c:	d03f      	beq.n	8007eae <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8007e2e:	7ea3      	ldrb	r3, [r4, #26]
 8007e30:	06db      	lsls	r3, r3, #27
 8007e32:	d406      	bmi.n	8007e42 <tcp_close_shutdown+0x32>
 8007e34:	4b3f      	ldr	r3, [pc, #252]	; (8007f34 <tcp_close_shutdown+0x124>)
 8007e36:	f240 120f 	movw	r2, #271	; 0x10f
 8007e3a:	493f      	ldr	r1, [pc, #252]	; (8007f38 <tcp_close_shutdown+0x128>)
 8007e3c:	483f      	ldr	r0, [pc, #252]	; (8007f3c <tcp_close_shutdown+0x12c>)
 8007e3e:	f003 ff93 	bl	800bd68 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8007e42:	8b23      	ldrh	r3, [r4, #24]
 8007e44:	4622      	mov	r2, r4
 8007e46:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	8ae3      	ldrh	r3, [r4, #22]
 8007e4c:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8007e4e:	9300      	str	r3, [sp, #0]
 8007e50:	1d23      	adds	r3, r4, #4
 8007e52:	f002 f845 	bl	8009ee0 <tcp_rst>
      tcp_pcb_purge(pcb);
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7ff fd88 	bl	800796c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8007e5c:	4a38      	ldr	r2, [pc, #224]	; (8007f40 <tcp_close_shutdown+0x130>)
 8007e5e:	6813      	ldr	r3, [r2, #0]
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d115      	bne.n	8007e90 <tcp_close_shutdown+0x80>
 8007e64:	68e3      	ldr	r3, [r4, #12]
 8007e66:	6013      	str	r3, [r2, #0]
 8007e68:	2300      	movs	r3, #0
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	60e3      	str	r3, [r4, #12]
 8007e6e:	4b35      	ldr	r3, [pc, #212]	; (8007f44 <tcp_close_shutdown+0x134>)
 8007e70:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8007e72:	7d23      	ldrb	r3, [r4, #20]
 8007e74:	2b04      	cmp	r3, #4
 8007e76:	d113      	bne.n	8007ea0 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 8007e78:	230a      	movs	r3, #10
 8007e7a:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8007e7c:	4b32      	ldr	r3, [pc, #200]	; (8007f48 <tcp_close_shutdown+0x138>)
 8007e7e:	681a      	ldr	r2, [r3, #0]
 8007e80:	601c      	str	r4, [r3, #0]
 8007e82:	60e2      	str	r2, [r4, #12]
 8007e84:	f002 f9ce 	bl	800a224 <tcp_timer_needed>
}
 8007e88:	2000      	movs	r0, #0
 8007e8a:	b003      	add	sp, #12
 8007e8c:	bd30      	pop	{r4, r5, pc}
 8007e8e:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0e9      	beq.n	8007e68 <tcp_close_shutdown+0x58>
 8007e94:	68da      	ldr	r2, [r3, #12]
 8007e96:	4294      	cmp	r4, r2
 8007e98:	d1f9      	bne.n	8007e8e <tcp_close_shutdown+0x7e>
 8007e9a:	68e2      	ldr	r2, [r4, #12]
 8007e9c:	60da      	str	r2, [r3, #12]
 8007e9e:	e7e3      	b.n	8007e68 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8007ea0:	4b2a      	ldr	r3, [pc, #168]	; (8007f4c <tcp_close_shutdown+0x13c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	429c      	cmp	r4, r3
 8007ea6:	d117      	bne.n	8007ed8 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8007ea8:	f001 fd04 	bl	80098b4 <tcp_trigger_input_pcb_close>
 8007eac:	e7ec      	b.n	8007e88 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d020      	beq.n	8007ef4 <tcp_close_shutdown+0xe4>
 8007eb2:	d307      	bcc.n	8007ec4 <tcp_close_shutdown+0xb4>
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d033      	beq.n	8007f20 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8007eb8:	4620      	mov	r0, r4
}
 8007eba:	b003      	add	sp, #12
 8007ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8007ec0:	f7ff bc8c 	b.w	80077dc <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8007ec4:	8ae3      	ldrh	r3, [r4, #22]
 8007ec6:	b13b      	cbz	r3, 8007ed8 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ec8:	4a21      	ldr	r2, [pc, #132]	; (8007f50 <tcp_close_shutdown+0x140>)
 8007eca:	6813      	ldr	r3, [r2, #0]
 8007ecc:	429c      	cmp	r4, r3
 8007ece:	d109      	bne.n	8007ee4 <tcp_close_shutdown+0xd4>
 8007ed0:	68e3      	ldr	r3, [r4, #12]
 8007ed2:	6013      	str	r3, [r2, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8007ed8:	4621      	mov	r1, r4
 8007eda:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8007edc:	f7ff f80a 	bl	8006ef4 <memp_free>
    break;
 8007ee0:	e7d2      	b.n	8007e88 <tcp_close_shutdown+0x78>
 8007ee2:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0f5      	beq.n	8007ed4 <tcp_close_shutdown+0xc4>
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	4294      	cmp	r4, r2
 8007eec:	d1f9      	bne.n	8007ee2 <tcp_close_shutdown+0xd2>
 8007eee:	68e2      	ldr	r2, [r4, #12]
 8007ef0:	60da      	str	r2, [r3, #12]
 8007ef2:	e7ef      	b.n	8007ed4 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007ef4:	4917      	ldr	r1, [pc, #92]	; (8007f54 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8007ef6:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007ef8:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007efc:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007efe:	b94a      	cbnz	r2, 8007f14 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007f00:	3301      	adds	r3, #1
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d1f8      	bne.n	8007ef8 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007f06:	4621      	mov	r1, r4
 8007f08:	4813      	ldr	r0, [pc, #76]	; (8007f58 <tcp_close_shutdown+0x148>)
 8007f0a:	f7ff ff31 	bl	8007d70 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007f0e:	4621      	mov	r1, r4
 8007f10:	2002      	movs	r0, #2
 8007f12:	e7e3      	b.n	8007edc <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8007f14:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8007f16:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007f18:	bf08      	it	eq
 8007f1a:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007f1c:	68d2      	ldr	r2, [r2, #12]
 8007f1e:	e7ee      	b.n	8007efe <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f20:	4621      	mov	r1, r4
 8007f22:	4807      	ldr	r0, [pc, #28]	; (8007f40 <tcp_close_shutdown+0x130>)
 8007f24:	f7ff ff24 	bl	8007d70 <tcp_pcb_remove>
 8007f28:	2001      	movs	r0, #1
 8007f2a:	4b06      	ldr	r3, [pc, #24]	; (8007f44 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8007f2c:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007f2e:	7018      	strb	r0, [r3, #0]
 8007f30:	e7d4      	b.n	8007edc <tcp_close_shutdown+0xcc>
 8007f32:	bf00      	nop
 8007f34:	0800dbc6 	.word	0x0800dbc6
 8007f38:	0800dbad 	.word	0x0800dbad
 8007f3c:	0800cb76 	.word	0x0800cb76
 8007f40:	200076ec 	.word	0x200076ec
 8007f44:	200076e8 	.word	0x200076e8
 8007f48:	200076fc 	.word	0x200076fc
 8007f4c:	20007700 	.word	0x20007700
 8007f50:	200076f8 	.word	0x200076f8
 8007f54:	0800dc10 	.word	0x0800dc10
 8007f58:	200076f4 	.word	0x200076f4

08007f5c <tcp_close>:
  if (pcb->state != LISTEN) {
 8007f5c:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8007f5e:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8007f60:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8007f62:	bf1e      	ittt	ne
 8007f64:	7e83      	ldrbne	r3, [r0, #26]
 8007f66:	f043 0310 	orrne.w	r3, r3, #16
 8007f6a:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007f6c:	f7ff bf50 	b.w	8007e10 <tcp_close_shutdown>

08007f70 <tcp_recv_null>:
{
 8007f70:	b510      	push	{r4, lr}
 8007f72:	4608      	mov	r0, r1
  if (p != NULL) {
 8007f74:	4614      	mov	r4, r2
 8007f76:	b13a      	cbz	r2, 8007f88 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8007f78:	8911      	ldrh	r1, [r2, #8]
 8007f7a:	f7ff fc8d 	bl	8007898 <tcp_recved>
    pbuf_free(p);
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f7ff f93e 	bl	8007200 <pbuf_free>
}
 8007f84:	2000      	movs	r0, #0
 8007f86:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1fb      	bne.n	8007f84 <tcp_recv_null+0x14>
}
 8007f8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007f90:	f7ff bfe4 	b.w	8007f5c <tcp_close>

08007f94 <tcp_process_refused_data>:
{
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8007f96:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8007f98:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007f9a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8007f9e:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8007fa0:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007fa2:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007fa4:	b1dd      	cbz	r5, 8007fde <tcp_process_refused_data+0x4a>
 8007fa6:	4601      	mov	r1, r0
 8007fa8:	4632      	mov	r2, r6
 8007faa:	6900      	ldr	r0, [r0, #16]
 8007fac:	47a8      	blx	r5
 8007fae:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007fb0:	b9e0      	cbnz	r0, 8007fec <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007fb2:	06bb      	lsls	r3, r7, #26
 8007fb4:	d511      	bpl.n	8007fda <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007fb6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007fb8:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007fbc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8007fc0:	bf1c      	itt	ne
 8007fc2:	3301      	addne	r3, #1
 8007fc4:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007fc6:	b146      	cbz	r6, 8007fda <tcp_process_refused_data+0x46>
 8007fc8:	2300      	movs	r3, #0
 8007fca:	4621      	mov	r1, r4
 8007fcc:	6920      	ldr	r0, [r4, #16]
 8007fce:	461a      	mov	r2, r3
 8007fd0:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007fd2:	300d      	adds	r0, #13
 8007fd4:	d101      	bne.n	8007fda <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8007fd6:	f06f 050c 	mvn.w	r5, #12
}
 8007fda:	4628      	mov	r0, r5
 8007fdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007fde:	4601      	mov	r1, r0
 8007fe0:	462b      	mov	r3, r5
 8007fe2:	4632      	mov	r2, r6
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	f7ff ffc3 	bl	8007f70 <tcp_recv_null>
 8007fea:	e7e0      	b.n	8007fae <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8007fec:	f110 050d 	adds.w	r5, r0, #13
 8007ff0:	d0f1      	beq.n	8007fd6 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8007ff2:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8007ff4:	f06f 0504 	mvn.w	r5, #4
 8007ff8:	e7ef      	b.n	8007fda <tcp_process_refused_data+0x46>
	...

08007ffc <tcp_fasttmr>:
{
 8007ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8008000:	4d1b      	ldr	r5, [pc, #108]	; (8008070 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8008002:	4f1c      	ldr	r7, [pc, #112]	; (8008074 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8008004:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8008006:	4e1c      	ldr	r6, [pc, #112]	; (8008078 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8008008:	3301      	adds	r3, #1
 800800a:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 800800c:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 800800e:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8008012:	b90c      	cbnz	r4, 8008018 <tcp_fasttmr+0x1c>
}
 8008014:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8008018:	782b      	ldrb	r3, [r5, #0]
 800801a:	7f62      	ldrb	r2, [r4, #29]
 800801c:	429a      	cmp	r2, r3
 800801e:	d024      	beq.n	800806a <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8008020:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8008022:	7ea3      	ldrb	r3, [r4, #26]
 8008024:	07d9      	lsls	r1, r3, #31
 8008026:	d509      	bpl.n	800803c <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8008028:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 800802c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800802e:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8008030:	f001 fdd8 	bl	8009be4 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8008034:	7ea3      	ldrb	r3, [r4, #26]
 8008036:	f023 0303 	bic.w	r3, r3, #3
 800803a:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 800803c:	7ea3      	ldrb	r3, [r4, #26]
 800803e:	071a      	lsls	r2, r3, #28
 8008040:	d505      	bpl.n	800804e <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8008042:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8008046:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 8008048:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 800804a:	f7ff fbc7 	bl	80077dc <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 800804e:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8008050:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8008054:	b13b      	cbz	r3, 8008066 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8008056:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8008058:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 800805c:	f7ff ff9a 	bl	8007f94 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8008060:	7833      	ldrb	r3, [r6, #0]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1d2      	bne.n	800800c <tcp_fasttmr+0x10>
{
 8008066:	464c      	mov	r4, r9
 8008068:	e7d3      	b.n	8008012 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 800806a:	f8d4 900c 	ldr.w	r9, [r4, #12]
 800806e:	e7fa      	b.n	8008066 <tcp_fasttmr+0x6a>
 8008070:	20003f3a 	.word	0x20003f3a
 8008074:	200076ec 	.word	0x200076ec
 8008078:	200076e8 	.word	0x200076e8

0800807c <tcp_tmr>:
{
 800807c:	b508      	push	{r3, lr}
  tcp_fasttmr();
 800807e:	f7ff ffbd 	bl	8007ffc <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8008082:	4a06      	ldr	r2, [pc, #24]	; (800809c <tcp_tmr+0x20>)
 8008084:	7813      	ldrb	r3, [r2, #0]
 8008086:	3301      	adds	r3, #1
 8008088:	b2db      	uxtb	r3, r3
 800808a:	7013      	strb	r3, [r2, #0]
 800808c:	07db      	lsls	r3, r3, #31
 800808e:	d503      	bpl.n	8008098 <tcp_tmr+0x1c>
}
 8008090:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8008094:	f7ff bc8a 	b.w	80079ac <tcp_slowtmr>
 8008098:	bd08      	pop	{r3, pc}
 800809a:	bf00      	nop
 800809c:	20003f39 	.word	0x20003f39

080080a0 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80080a0:	7d03      	ldrb	r3, [r0, #20]
 80080a2:	2b01      	cmp	r3, #1
{
 80080a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a8:	4604      	mov	r4, r0
 80080aa:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80080ac:	d106      	bne.n	80080bc <tcp_abandon+0x1c>
 80080ae:	4b30      	ldr	r3, [pc, #192]	; (8008170 <tcp_abandon+0xd0>)
 80080b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80080b4:	492f      	ldr	r1, [pc, #188]	; (8008174 <tcp_abandon+0xd4>)
 80080b6:	4830      	ldr	r0, [pc, #192]	; (8008178 <tcp_abandon+0xd8>)
 80080b8:	f003 fe56 	bl	800bd68 <iprintf>
  if (pcb->state == TIME_WAIT) {
 80080bc:	7d23      	ldrb	r3, [r4, #20]
 80080be:	2b0a      	cmp	r3, #10
 80080c0:	d10a      	bne.n	80080d8 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80080c2:	4621      	mov	r1, r4
 80080c4:	482d      	ldr	r0, [pc, #180]	; (800817c <tcp_abandon+0xdc>)
 80080c6:	f7ff fe53 	bl	8007d70 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 80080ca:	4621      	mov	r1, r4
 80080cc:	2001      	movs	r0, #1
}
 80080ce:	b002      	add	sp, #8
 80080d0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 80080d4:	f7fe bf0e 	b.w	8006ef4 <memp_free>
    seqno = pcb->snd_nxt;
 80080d8:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 80080dc:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 80080e0:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 80080e4:	f8d4 8010 	ldr.w	r8, [r4, #16]
 80080e8:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 80080ea:	b99b      	cbnz	r3, 8008114 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 80080ec:	b13d      	cbz	r5, 80080fe <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80080ee:	4a24      	ldr	r2, [pc, #144]	; (8008180 <tcp_abandon+0xe0>)
 80080f0:	6813      	ldr	r3, [r2, #0]
 80080f2:	429c      	cmp	r4, r3
 80080f4:	d106      	bne.n	8008104 <tcp_abandon+0x64>
 80080f6:	68e3      	ldr	r3, [r4, #12]
 80080f8:	6013      	str	r3, [r2, #0]
 80080fa:	2500      	movs	r5, #0
 80080fc:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 80080fe:	462e      	mov	r6, r5
 8008100:	e00f      	b.n	8008122 <tcp_abandon+0x82>
 8008102:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8008104:	2b00      	cmp	r3, #0
 8008106:	d0f8      	beq.n	80080fa <tcp_abandon+0x5a>
 8008108:	68da      	ldr	r2, [r3, #12]
 800810a:	4294      	cmp	r4, r2
 800810c:	d1f9      	bne.n	8008102 <tcp_abandon+0x62>
 800810e:	68e2      	ldr	r2, [r4, #12]
 8008110:	60da      	str	r2, [r3, #12]
 8008112:	e7f2      	b.n	80080fa <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8008114:	4621      	mov	r1, r4
 8008116:	481b      	ldr	r0, [pc, #108]	; (8008184 <tcp_abandon+0xe4>)
 8008118:	f7ff fe2a 	bl	8007d70 <tcp_pcb_remove>
 800811c:	2201      	movs	r2, #1
 800811e:	4b1a      	ldr	r3, [pc, #104]	; (8008188 <tcp_abandon+0xe8>)
 8008120:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8008122:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008124:	b108      	cbz	r0, 800812a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8008126:	f7ff fc03 	bl	8007930 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800812a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800812c:	b108      	cbz	r0, 8008132 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 800812e:	f7ff fbff 	bl	8007930 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8008132:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008134:	b108      	cbz	r0, 800813a <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8008136:	f7ff fbfb 	bl	8007930 <tcp_segs_free>
    if (send_rst) {
 800813a:	b146      	cbz	r6, 800814e <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800813c:	8b23      	ldrh	r3, [r4, #24]
 800813e:	4622      	mov	r2, r4
 8008140:	9500      	str	r5, [sp, #0]
 8008142:	4651      	mov	r1, sl
 8008144:	9301      	str	r3, [sp, #4]
 8008146:	4648      	mov	r0, r9
 8008148:	1d23      	adds	r3, r4, #4
 800814a:	f001 fec9 	bl	8009ee0 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 800814e:	4621      	mov	r1, r4
 8008150:	2001      	movs	r0, #1
 8008152:	f7fe fecf 	bl	8006ef4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008156:	b13f      	cbz	r7, 8008168 <tcp_abandon+0xc8>
 8008158:	f06f 010c 	mvn.w	r1, #12
 800815c:	4640      	mov	r0, r8
 800815e:	463b      	mov	r3, r7
}
 8008160:	b002      	add	sp, #8
 8008162:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8008166:	4718      	bx	r3
}
 8008168:	b002      	add	sp, #8
 800816a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800816e:	bf00      	nop
 8008170:	0800dbc6 	.word	0x0800dbc6
 8008174:	0800db6f 	.word	0x0800db6f
 8008178:	0800cb76 	.word	0x0800cb76
 800817c:	200076fc 	.word	0x200076fc
 8008180:	200076f8 	.word	0x200076f8
 8008184:	200076ec 	.word	0x200076ec
 8008188:	200076e8 	.word	0x200076e8

0800818c <tcp_abort>:
  tcp_abandon(pcb, 1);
 800818c:	2101      	movs	r1, #1
 800818e:	f7ff bf87 	b.w	80080a0 <tcp_abandon>

08008192 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8008192:	b538      	push	{r3, r4, r5, lr}
 8008194:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8008196:	b901      	cbnz	r1, 800819a <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8008198:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800819a:	680a      	ldr	r2, [r1, #0]
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	68cc      	ldr	r4, [r1, #12]
 80081a0:	429a      	cmp	r2, r3
 80081a2:	d102      	bne.n	80081aa <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 80081a4:	4608      	mov	r0, r1
 80081a6:	f7ff fff1 	bl	800818c <tcp_abort>
      pcb = pcb->next;
 80081aa:	4621      	mov	r1, r4
 80081ac:	e7f3      	b.n	8008196 <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

080081b0 <tcp_kill_state>:
{
 80081b0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80081b2:	f1a0 0308 	sub.w	r3, r0, #8
{
 80081b6:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d906      	bls.n	80081ca <tcp_kill_state+0x1a>
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <tcp_kill_state+0x4c>)
 80081be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80081c2:	490f      	ldr	r1, [pc, #60]	; (8008200 <tcp_kill_state+0x50>)
 80081c4:	480f      	ldr	r0, [pc, #60]	; (8008204 <tcp_kill_state+0x54>)
 80081c6:	f003 fdcf 	bl	800bd68 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081ca:	4b0f      	ldr	r3, [pc, #60]	; (8008208 <tcp_kill_state+0x58>)
  inactivity = 0;
 80081cc:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081ce:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 80081d0:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80081d2:	4b0e      	ldr	r3, [pc, #56]	; (800820c <tcp_kill_state+0x5c>)
 80081d4:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081d6:	b921      	cbnz	r1, 80081e2 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 80081d8:	b170      	cbz	r0, 80081f8 <tcp_kill_state+0x48>
}
 80081da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 80081de:	f7ff bf5f 	b.w	80080a0 <tcp_abandon>
    if (pcb->state == state) {
 80081e2:	7d0b      	ldrb	r3, [r1, #20]
 80081e4:	42a3      	cmp	r3, r4
 80081e6:	d105      	bne.n	80081f4 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80081e8:	6a0b      	ldr	r3, [r1, #32]
 80081ea:	1aeb      	subs	r3, r5, r3
 80081ec:	429a      	cmp	r2, r3
 80081ee:	bf9c      	itt	ls
 80081f0:	461a      	movls	r2, r3
 80081f2:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80081f4:	68c9      	ldr	r1, [r1, #12]
 80081f6:	e7ee      	b.n	80081d6 <tcp_kill_state+0x26>
 80081f8:	bd38      	pop	{r3, r4, r5, pc}
 80081fa:	bf00      	nop
 80081fc:	0800dbc6 	.word	0x0800dbc6
 8008200:	0800dc01 	.word	0x0800dc01
 8008204:	0800cb76 	.word	0x0800cb76
 8008208:	200076ec 	.word	0x200076ec
 800820c:	200076f0 	.word	0x200076f0

08008210 <tcp_alloc>:
{
 8008210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008212:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008214:	2001      	movs	r0, #1
 8008216:	f7fe fe51 	bl	8006ebc <memp_malloc>
 800821a:	4d3b      	ldr	r5, [pc, #236]	; (8008308 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 800821c:	4604      	mov	r4, r0
 800821e:	bb90      	cbnz	r0, 8008286 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008220:	4b3a      	ldr	r3, [pc, #232]	; (800830c <tcp_alloc+0xfc>)
  inactivity = 0;
 8008222:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008224:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d158      	bne.n	80082de <tcp_alloc+0xce>
  if (inactive != NULL) {
 800822c:	b114      	cbz	r4, 8008234 <tcp_alloc+0x24>
    tcp_abort(inactive);
 800822e:	4620      	mov	r0, r4
 8008230:	f7ff ffac 	bl	800818c <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008234:	2001      	movs	r0, #1
 8008236:	f7fe fe41 	bl	8006ebc <memp_malloc>
    if (pcb == NULL) {
 800823a:	4604      	mov	r4, r0
 800823c:	bb18      	cbnz	r0, 8008286 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 800823e:	2009      	movs	r0, #9
 8008240:	f7ff ffb6 	bl	80081b0 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008244:	2001      	movs	r0, #1
 8008246:	f7fe fe39 	bl	8006ebc <memp_malloc>
      if (pcb == NULL) {
 800824a:	4604      	mov	r4, r0
 800824c:	b9d8      	cbnz	r0, 8008286 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 800824e:	2008      	movs	r0, #8
 8008250:	f7ff ffae 	bl	80081b0 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8008254:	2001      	movs	r0, #1
 8008256:	f7fe fe31 	bl	8006ebc <memp_malloc>
        if (pcb == NULL) {
 800825a:	4604      	mov	r4, r0
 800825c:	b998      	cbnz	r0, 8008286 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800825e:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008262:	4b2b      	ldr	r3, [pc, #172]	; (8008310 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8008264:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8008268:	bf0c      	ite	eq
 800826a:	4631      	moveq	r1, r6
 800826c:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d13c      	bne.n	80082ee <tcp_alloc+0xde>
  if (inactive != NULL) {
 8008274:	b114      	cbz	r4, 800827c <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff ff88 	bl	800818c <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800827c:	2001      	movs	r0, #1
 800827e:	f7fe fe1d 	bl	8006ebc <memp_malloc>
  if (pcb != NULL) {
 8008282:	4604      	mov	r4, r0
 8008284:	b348      	cbz	r0, 80082da <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8008286:	2298      	movs	r2, #152	; 0x98
 8008288:	2100      	movs	r1, #0
 800828a:	4620      	mov	r0, r4
 800828c:	f003 fcb8 	bl	800bc00 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8008290:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 8008294:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8008298:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800829a:	8562      	strh	r2, [r4, #42]	; 0x2a
 800829c:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800829e:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 80082a0:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 80082a4:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 80082a6:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 80082aa:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 80082ae:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80082b0:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 80082b2:	4b18      	ldr	r3, [pc, #96]	; (8008314 <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80082b4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80082b8:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 80082ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 80082be:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 80082c2:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 80082c4:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 80082c8:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80082cc:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80082ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 80082d2:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 80082d4:	4a11      	ldr	r2, [pc, #68]	; (800831c <tcp_alloc+0x10c>)
 80082d6:	7812      	ldrb	r2, [r2, #0]
 80082d8:	7762      	strb	r2, [r4, #29]
}
 80082da:	4620      	mov	r0, r4
 80082dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082de:	6a1a      	ldr	r2, [r3, #32]
 80082e0:	1a82      	subs	r2, r0, r2
 80082e2:	428a      	cmp	r2, r1
 80082e4:	bf24      	itt	cs
 80082e6:	461c      	movcs	r4, r3
 80082e8:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	e79c      	b.n	8008228 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 80082ee:	7d5f      	ldrb	r7, [r3, #21]
 80082f0:	428f      	cmp	r7, r1
 80082f2:	d807      	bhi.n	8008304 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80082f4:	6a1a      	ldr	r2, [r3, #32]
 80082f6:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 80082fa:	4282      	cmp	r2, r0
 80082fc:	bf22      	ittt	cs
 80082fe:	4639      	movcs	r1, r7
 8008300:	4610      	movcs	r0, r2
 8008302:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	e7b3      	b.n	8008270 <tcp_alloc+0x60>
 8008308:	200076f0 	.word	0x200076f0
 800830c:	200076fc 	.word	0x200076fc
 8008310:	200076ec 	.word	0x200076ec
 8008314:	08007f71 	.word	0x08007f71
 8008318:	006ddd00 	.word	0x006ddd00
 800831c:	20003f3a 	.word	0x20003f3a

08008320 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8008320:	4b03      	ldr	r3, [pc, #12]	; (8008330 <tcp_next_iss+0x10>)
 8008322:	4a04      	ldr	r2, [pc, #16]	; (8008334 <tcp_next_iss+0x14>)
 8008324:	6818      	ldr	r0, [r3, #0]
 8008326:	6812      	ldr	r2, [r2, #0]
 8008328:	4410      	add	r0, r2
 800832a:	6018      	str	r0, [r3, #0]
}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	20000008 	.word	0x20000008
 8008334:	200076f0 	.word	0x200076f0

08008338 <tcp_eff_send_mss_impl>:
{
 8008338:	b510      	push	{r4, lr}
 800833a:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 800833c:	4608      	mov	r0, r1
 800833e:	f7fd fe11 	bl	8005f64 <ip4_route>
    if (outif == NULL) {
 8008342:	b130      	cbz	r0, 8008352 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8008344:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8008346:	b123      	cbz	r3, 8008352 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8008348:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 800834a:	b29b      	uxth	r3, r3
 800834c:	429c      	cmp	r4, r3
 800834e:	bf28      	it	cs
 8008350:	461c      	movcs	r4, r3
}
 8008352:	4620      	mov	r0, r4
 8008354:	bd10      	pop	{r4, pc}
	...

08008358 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8008358:	b538      	push	{r3, r4, r5, lr}
 800835a:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800835c:	4604      	mov	r4, r0
 800835e:	b180      	cbz	r0, 8008382 <tcp_netif_ip_addr_changed+0x2a>
 8008360:	6803      	ldr	r3, [r0, #0]
 8008362:	b173      	cbz	r3, 8008382 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8008364:	4b0c      	ldr	r3, [pc, #48]	; (8008398 <tcp_netif_ip_addr_changed+0x40>)
 8008366:	6819      	ldr	r1, [r3, #0]
 8008368:	f7ff ff13 	bl	8008192 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800836c:	4b0b      	ldr	r3, [pc, #44]	; (800839c <tcp_netif_ip_addr_changed+0x44>)
 800836e:	4620      	mov	r0, r4
 8008370:	6819      	ldr	r1, [r3, #0]
 8008372:	f7ff ff0e 	bl	8008192 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8008376:	b125      	cbz	r5, 8008382 <tcp_netif_ip_addr_changed+0x2a>
 8008378:	682b      	ldr	r3, [r5, #0]
 800837a:	b113      	cbz	r3, 8008382 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800837c:	4b08      	ldr	r3, [pc, #32]	; (80083a0 <tcp_netif_ip_addr_changed+0x48>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	b903      	cbnz	r3, 8008384 <tcp_netif_ip_addr_changed+0x2c>
 8008382:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8008384:	6818      	ldr	r0, [r3, #0]
 8008386:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8008388:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800838a:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800838c:	bf04      	itt	eq
 800838e:	6829      	ldreq	r1, [r5, #0]
 8008390:	6019      	streq	r1, [r3, #0]
{
 8008392:	4613      	mov	r3, r2
 8008394:	e7f4      	b.n	8008380 <tcp_netif_ip_addr_changed+0x28>
 8008396:	bf00      	nop
 8008398:	200076ec 	.word	0x200076ec
 800839c:	200076f8 	.word	0x200076f8
 80083a0:	200076f4 	.word	0x200076f4

080083a4 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083a4:	68c3      	ldr	r3, [r0, #12]
{
 80083a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083aa:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083ac:	8998      	ldrh	r0, [r3, #12]
{
 80083ae:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80083b0:	f7fc f86c 	bl	800448c <lwip_htons>
 80083b4:	07c2      	lsls	r2, r0, #31
 80083b6:	d415      	bmi.n	80083e4 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083b8:	4e18      	ldr	r6, [pc, #96]	; (800841c <tcp_oos_insert_segment+0x78>)
    while (next &&
 80083ba:	b1bc      	cbz	r4, 80083ec <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80083bc:	68e7      	ldr	r7, [r4, #12]
 80083be:	6830      	ldr	r0, [r6, #0]
 80083c0:	892b      	ldrh	r3, [r5, #8]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	8922      	ldrh	r2, [r4, #8]
 80083c6:	4403      	add	r3, r0
 80083c8:	440a      	add	r2, r1
 80083ca:	1a9a      	subs	r2, r3, r2
    while (next &&
 80083cc:	2a00      	cmp	r2, #0
 80083ce:	da10      	bge.n	80083f2 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80083d0:	1a5b      	subs	r3, r3, r1
    if (next &&
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	dd0a      	ble.n	80083ec <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80083d6:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 80083d8:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80083da:	b289      	uxth	r1, r1
 80083dc:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80083de:	f7ff f855 	bl	800748c <pbuf_realloc>
 80083e2:	e003      	b.n	80083ec <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 80083e4:	4620      	mov	r0, r4
    next = NULL;
 80083e6:	2400      	movs	r4, #0
    tcp_segs_free(next);
 80083e8:	f7ff faa2 	bl	8007930 <tcp_segs_free>
    }
  }
  cseg->next = next;
 80083ec:	602c      	str	r4, [r5, #0]
}
 80083ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80083f2:	89b8      	ldrh	r0, [r7, #12]
 80083f4:	f7fc f84a 	bl	800448c <lwip_htons>
 80083f8:	07c3      	lsls	r3, r0, #31
 80083fa:	d509      	bpl.n	8008410 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80083fc:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8008400:	2001      	movs	r0, #1
 8008402:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8008406:	f7fc f841 	bl	800448c <lwip_htons>
 800840a:	4338      	orrs	r0, r7
 800840c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8008410:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8008412:	4620      	mov	r0, r4
 8008414:	f7ff fa7e 	bl	8007914 <tcp_seg_free>
      next = next->next;
 8008418:	463c      	mov	r4, r7
 800841a:	e7ce      	b.n	80083ba <tcp_oos_insert_segment+0x16>
 800841c:	20003f60 	.word	0x20003f60

08008420 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008420:	7d03      	ldrb	r3, [r0, #20]
 8008422:	2b03      	cmp	r3, #3
{
 8008424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008428:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800842a:	d806      	bhi.n	800843a <tcp_receive+0x1a>
 800842c:	4b89      	ldr	r3, [pc, #548]	; (8008654 <tcp_receive+0x234>)
 800842e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8008432:	4989      	ldr	r1, [pc, #548]	; (8008658 <tcp_receive+0x238>)
 8008434:	4889      	ldr	r0, [pc, #548]	; (800865c <tcp_receive+0x23c>)
 8008436:	f003 fc97 	bl	800bd68 <iprintf>

  if (flags & TCP_ACK) {
 800843a:	4b89      	ldr	r3, [pc, #548]	; (8008660 <tcp_receive+0x240>)
 800843c:	4e89      	ldr	r6, [pc, #548]	; (8008664 <tcp_receive+0x244>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	f013 0f10 	tst.w	r3, #16
 8008444:	f000 8180 	beq.w	8008748 <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008448:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800844a:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800844c:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008450:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008452:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008454:	2d00      	cmp	r5, #0
 8008456:	4d84      	ldr	r5, [pc, #528]	; (8008668 <tcp_receive+0x248>)
 8008458:	db0d      	blt.n	8008476 <tcp_receive+0x56>
 800845a:	4283      	cmp	r3, r0
 800845c:	d103      	bne.n	8008466 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800845e:	682b      	ldr	r3, [r5, #0]
 8008460:	1acb      	subs	r3, r1, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	db07      	blt.n	8008476 <tcp_receive+0x56>
 8008466:	682b      	ldr	r3, [r5, #0]
 8008468:	4299      	cmp	r1, r3
 800846a:	d11c      	bne.n	80084a6 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800846c:	4b7f      	ldr	r3, [pc, #508]	; (800866c <tcp_receive+0x24c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	89db      	ldrh	r3, [r3, #14]
 8008472:	4293      	cmp	r3, r2
 8008474:	d917      	bls.n	80084a6 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008476:	4b7d      	ldr	r3, [pc, #500]	; (800866c <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008478:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8008480:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008482:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8008484:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008486:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 800848a:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 800848c:	bf38      	it	cc
 800848e:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8008492:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8008496:	2f00      	cmp	r7, #0
 8008498:	d13c      	bne.n	8008514 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 800849a:	b920      	cbnz	r0, 80084a6 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 800849c:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 800849e:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80084a2:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80084a6:	682b      	ldr	r3, [r5, #0]
 80084a8:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80084ac:	4f70      	ldr	r7, [pc, #448]	; (8008670 <tcp_receive+0x250>)
 80084ae:	eba3 000e 	sub.w	r0, r3, lr
 80084b2:	2800      	cmp	r0, #0
 80084b4:	dc37      	bgt.n	8008526 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 80084b6:	486f      	ldr	r0, [pc, #444]	; (8008674 <tcp_receive+0x254>)
 80084b8:	8800      	ldrh	r0, [r0, #0]
 80084ba:	2800      	cmp	r0, #0
 80084bc:	f040 8476 	bne.w	8008dac <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80084c0:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80084c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084c4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80084c8:	4401      	add	r1, r0
 80084ca:	428a      	cmp	r2, r1
 80084cc:	f040 846e 	bne.w	8008dac <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80084d0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	f2c0 8469 	blt.w	8008dac <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80084da:	4573      	cmp	r3, lr
 80084dc:	f040 8466 	bne.w	8008dac <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80084e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80084e4:	1c53      	adds	r3, r2, #1
 80084e6:	b2db      	uxtb	r3, r3
 80084e8:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 80084ea:	bf38      	it	cc
 80084ec:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80084f0:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80084f4:	2b03      	cmp	r3, #3
 80084f6:	d911      	bls.n	800851c <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80084f8:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80084fc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80084fe:	4413      	add	r3, r2
 8008500:	b29b      	uxth	r3, r3
 8008502:	429a      	cmp	r2, r3
 8008504:	d201      	bcs.n	800850a <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8008506:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800850a:	f8df a148 	ldr.w	sl, [pc, #328]	; 8008654 <tcp_receive+0x234>
 800850e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 800865c <tcp_receive+0x23c>
 8008512:	e10c      	b.n	800872e <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 8008514:	2800      	cmp	r0, #0
 8008516:	d0c6      	beq.n	80084a6 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8008518:	2300      	movs	r3, #0
 800851a:	e7c2      	b.n	80084a2 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 800851c:	d1f5      	bne.n	800850a <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 800851e:	4620      	mov	r0, r4
 8008520:	f001 fd7d 	bl	800a01e <tcp_rexmit_fast>
 8008524:	e7f1      	b.n	800850a <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008526:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008528:	1a9a      	subs	r2, r3, r2
 800852a:	2a00      	cmp	r2, #0
 800852c:	f300 808d 	bgt.w	800864a <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 8008530:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008532:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 8008536:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 8008538:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 800853a:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 800853c:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 8008540:	bf48      	it	mi
 8008542:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 8008546:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 800854a:	bf44      	itt	mi
 800854c:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 800854e:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 8008552:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 8008556:	bf48      	it	mi
 8008558:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 800855c:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800855e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8008560:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 8008564:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 8008568:	d90f      	bls.n	800858a <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 800856a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800856e:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8008572:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008574:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8008576:	bf9c      	itt	ls
 8008578:	435b      	mulls	r3, r3
 800857a:	fb93 f3f2 	sdivls	r3, r3, r2
 800857e:	4413      	add	r3, r2
 8008580:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 8008582:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 8008584:	bf38      	it	cc
 8008586:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800858a:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 8008654 <tcp_receive+0x234>
 800858e:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 800865c <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 8008592:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008594:	b943      	cbnz	r3, 80085a8 <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 8008596:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008598:	2300      	movs	r3, #0
 800859a:	2a00      	cmp	r2, #0
 800859c:	d153      	bne.n	8008646 <tcp_receive+0x226>
        pcb->rtime = -1;
 800859e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085a2:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 80085a4:	76e3      	strb	r3, [r4, #27]
 80085a6:	e7b0      	b.n	800850a <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80085a8:	68db      	ldr	r3, [r3, #12]
 80085aa:	6858      	ldr	r0, [r3, #4]
 80085ac:	f7fb ff71 	bl	8004492 <lwip_htonl>
 80085b0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80085b2:	4683      	mov	fp, r0
 80085b4:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	8998      	ldrh	r0, [r3, #12]
 80085bc:	f7fb ff66 	bl	800448c <lwip_htons>
 80085c0:	682b      	ldr	r3, [r5, #0]
 80085c2:	f010 0003 	ands.w	r0, r0, #3
 80085c6:	eba8 0803 	sub.w	r8, r8, r3
 80085ca:	bf18      	it	ne
 80085cc:	2001      	movne	r0, #1
 80085ce:	44d8      	add	r8, fp
 80085d0:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 80085d2:	f1b8 0f00 	cmp.w	r8, #0
 80085d6:	dcde      	bgt.n	8008596 <tcp_receive+0x176>
        next = pcb->unacked;
 80085d8:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80085dc:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 80085e0:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80085e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 80085e8:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80085ea:	f7fe ffbf 	bl	800756c <pbuf_clen>
 80085ee:	4583      	cmp	fp, r0
 80085f0:	d206      	bcs.n	8008600 <tcp_receive+0x1e0>
 80085f2:	464b      	mov	r3, r9
 80085f4:	f240 429e 	movw	r2, #1182	; 0x49e
 80085f8:	491f      	ldr	r1, [pc, #124]	; (8008678 <tcp_receive+0x258>)
 80085fa:	4650      	mov	r0, sl
 80085fc:	f003 fbb4 	bl	800bd68 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008600:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008604:	f7fe ffb2 	bl	800756c <pbuf_clen>
 8008608:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800860c:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800860e:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008610:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008614:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008616:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800861a:	4640      	mov	r0, r8
        recv_acked += next->len;
 800861c:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 800861e:	f7ff f979 	bl	8007914 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008622:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008626:	2b00      	cmp	r3, #0
 8008628:	d0b3      	beq.n	8008592 <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800862a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1b0      	bne.n	8008592 <tcp_receive+0x172>
 8008630:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008632:	2b00      	cmp	r3, #0
 8008634:	d1ad      	bne.n	8008592 <tcp_receive+0x172>
 8008636:	464b      	mov	r3, r9
 8008638:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800863c:	490f      	ldr	r1, [pc, #60]	; (800867c <tcp_receive+0x25c>)
 800863e:	4650      	mov	r0, sl
 8008640:	f003 fb92 	bl	800bd68 <iprintf>
 8008644:	e7a5      	b.n	8008592 <tcp_receive+0x172>
        pcb->rtime = 0;
 8008646:	8623      	strh	r3, [r4, #48]	; 0x30
 8008648:	e7ac      	b.n	80085a4 <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 800864a:	4620      	mov	r0, r4
 800864c:	f001 fa94 	bl	8009b78 <tcp_send_empty_ack>
 8008650:	e75b      	b.n	800850a <tcp_receive+0xea>
 8008652:	bf00      	nop
 8008654:	0800dfd8 	.word	0x0800dfd8
 8008658:	0800e00a 	.word	0x0800e00a
 800865c:	0800cb76 	.word	0x0800cb76
 8008660:	20003f40 	.word	0x20003f40
 8008664:	20003f60 	.word	0x20003f60
 8008668:	20003f3c 	.word	0x20003f3c
 800866c:	20003f68 	.word	0x20003f68
 8008670:	20003f54 	.word	0x20003f54
 8008674:	20003f76 	.word	0x20003f76
 8008678:	0800e023 	.word	0x0800e023
 800867c:	0800e04b 	.word	0x0800e04b
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008680:	682a      	ldr	r2, [r5, #0]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	9201      	str	r2, [sp, #4]
 8008686:	6858      	ldr	r0, [r3, #4]
 8008688:	f7fb ff03 	bl	8004492 <lwip_htonl>
 800868c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800868e:	4683      	mov	fp, r0
 8008690:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008694:	68db      	ldr	r3, [r3, #12]
 8008696:	8998      	ldrh	r0, [r3, #12]
 8008698:	f7fb fef8 	bl	800448c <lwip_htons>
 800869c:	9a01      	ldr	r2, [sp, #4]
 800869e:	f010 0003 	ands.w	r0, r0, #3
 80086a2:	eba2 0808 	sub.w	r8, r2, r8
 80086a6:	bf18      	it	ne
 80086a8:	2001      	movne	r0, #1
 80086aa:	eba8 080b 	sub.w	r8, r8, fp
 80086ae:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 80086b2:	f1b8 0f00 	cmp.w	r8, #0
 80086b6:	db3d      	blt.n	8008734 <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80086bc:	1a9b      	subs	r3, r3, r2
 80086be:	2b00      	cmp	r3, #0
 80086c0:	dc38      	bgt.n	8008734 <tcp_receive+0x314>
      next = pcb->unsent;
 80086c2:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 80086c6:	f8d8 3000 	ldr.w	r3, [r8]
 80086ca:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 80086cc:	b90b      	cbnz	r3, 80086d2 <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 80086ce:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80086d2:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 80086d6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086da:	f7fe ff47 	bl	800756c <pbuf_clen>
 80086de:	4583      	cmp	fp, r0
 80086e0:	d206      	bcs.n	80086f0 <tcp_receive+0x2d0>
 80086e2:	4653      	mov	r3, sl
 80086e4:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80086e8:	49ba      	ldr	r1, [pc, #744]	; (80089d4 <tcp_receive+0x5b4>)
 80086ea:	4648      	mov	r0, r9
 80086ec:	f003 fb3c 	bl	800bd68 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80086f0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80086f4:	f7fe ff3a 	bl	800756c <pbuf_clen>
 80086f8:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 80086fc:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80086fe:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008700:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008704:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008706:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800870a:	4640      	mov	r0, r8
      recv_acked += next->len;
 800870c:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800870e:	f7ff f901 	bl	8007914 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008712:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008716:	b153      	cbz	r3, 800872e <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008718:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800871a:	b943      	cbnz	r3, 800872e <tcp_receive+0x30e>
 800871c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800871e:	b933      	cbnz	r3, 800872e <tcp_receive+0x30e>
 8008720:	4653      	mov	r3, sl
 8008722:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008726:	49ac      	ldr	r1, [pc, #688]	; (80089d8 <tcp_receive+0x5b8>)
 8008728:	4648      	mov	r0, r9
 800872a:	f003 fb1d 	bl	800bd68 <iprintf>
    while (pcb->unsent != NULL &&
 800872e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1a5      	bne.n	8008680 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8008734:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8008738:	883a      	ldrh	r2, [r7, #0]
 800873a:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800873c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 800873e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008742:	2a00      	cmp	r2, #0
 8008744:	f040 8117 	bne.w	8008976 <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8008748:	4fa4      	ldr	r7, [pc, #656]	; (80089dc <tcp_receive+0x5bc>)
 800874a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800874c:	8838      	ldrh	r0, [r7, #0]
 800874e:	2800      	cmp	r0, #0
 8008750:	f000 831f 	beq.w	8008d92 <tcp_receive+0x972>
 8008754:	7d23      	ldrb	r3, [r4, #20]
 8008756:	2b06      	cmp	r3, #6
 8008758:	f200 831b 	bhi.w	8008d92 <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800875c:	6833      	ldr	r3, [r6, #0]
 800875e:	1ad5      	subs	r5, r2, r3
 8008760:	2d01      	cmp	r5, #1
 8008762:	f100 815c 	bmi.w	8008a1e <tcp_receive+0x5fe>
 8008766:	f1c3 0101 	rsb	r1, r3, #1
 800876a:	1a09      	subs	r1, r1, r0
 800876c:	4411      	add	r1, r2
 800876e:	2900      	cmp	r1, #0
 8008770:	f300 8155 	bgt.w	8008a1e <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8008774:	4b9a      	ldr	r3, [pc, #616]	; (80089e0 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 8008776:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 8008778:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800877c:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800877e:	f1b9 0f00 	cmp.w	r9, #0
 8008782:	d106      	bne.n	8008792 <tcp_receive+0x372>
 8008784:	4b97      	ldr	r3, [pc, #604]	; (80089e4 <tcp_receive+0x5c4>)
 8008786:	f240 523c 	movw	r2, #1340	; 0x53c
 800878a:	4997      	ldr	r1, [pc, #604]	; (80089e8 <tcp_receive+0x5c8>)
 800878c:	4897      	ldr	r0, [pc, #604]	; (80089ec <tcp_receive+0x5cc>)
 800878e:	f003 faeb 	bl	800bd68 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008792:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008796:	429d      	cmp	r5, r3
 8008798:	dd06      	ble.n	80087a8 <tcp_receive+0x388>
 800879a:	4b92      	ldr	r3, [pc, #584]	; (80089e4 <tcp_receive+0x5c4>)
 800879c:	f240 523d 	movw	r2, #1341	; 0x53d
 80087a0:	4993      	ldr	r1, [pc, #588]	; (80089f0 <tcp_receive+0x5d0>)
 80087a2:	4892      	ldr	r0, [pc, #584]	; (80089ec <tcp_receive+0x5cc>)
 80087a4:	f003 fae0 	bl	800bd68 <iprintf>
      if (inseg.p->len < off) {
 80087a8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80087ac:	8943      	ldrh	r3, [r0, #10]
 80087ae:	429d      	cmp	r5, r3
 80087b0:	f340 812a 	ble.w	8008a08 <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80087b4:	8903      	ldrh	r3, [r0, #8]
 80087b6:	429d      	cmp	r5, r3
 80087b8:	dd06      	ble.n	80087c8 <tcp_receive+0x3a8>
 80087ba:	4b8a      	ldr	r3, [pc, #552]	; (80089e4 <tcp_receive+0x5c4>)
 80087bc:	f240 523f 	movw	r2, #1343	; 0x53f
 80087c0:	498c      	ldr	r1, [pc, #560]	; (80089f4 <tcp_receive+0x5d4>)
 80087c2:	488a      	ldr	r0, [pc, #552]	; (80089ec <tcp_receive+0x5cc>)
 80087c4:	f003 fad0 	bl	800bd68 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80087c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 80087cc:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80087ce:	8919      	ldrh	r1, [r3, #8]
 80087d0:	1b4d      	subs	r5, r1, r5
 80087d2:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 80087d4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 80087d8:	459a      	cmp	sl, r3
 80087da:	f300 80f1 	bgt.w	80089c0 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 80087de:	f1ca 0100 	rsb	r1, sl, #0
 80087e2:	4648      	mov	r0, r9
 80087e4:	b209      	sxth	r1, r1
 80087e6:	f7fe fd05 	bl	80071f4 <pbuf_header>
 80087ea:	b130      	cbz	r0, 80087fa <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80087ec:	4b7d      	ldr	r3, [pc, #500]	; (80089e4 <tcp_receive+0x5c4>)
 80087ee:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80087f2:	4981      	ldr	r1, [pc, #516]	; (80089f8 <tcp_receive+0x5d8>)
 80087f4:	487d      	ldr	r0, [pc, #500]	; (80089ec <tcp_receive+0x5cc>)
 80087f6:	f003 fab7 	bl	800bd68 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80087fa:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 80087fe:	6833      	ldr	r3, [r6, #0]
 8008800:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008802:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008804:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008806:	1a9b      	subs	r3, r3, r2
 8008808:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800880c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008810:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008812:	6831      	ldr	r1, [r6, #0]
 8008814:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008816:	1a8b      	subs	r3, r1, r2
 8008818:	2b00      	cmp	r3, #0
 800881a:	f2c0 82b4 	blt.w	8008d86 <tcp_receive+0x966>
 800881e:	1c4b      	adds	r3, r1, #1
 8008820:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	1a1b      	subs	r3, r3, r0
 8008826:	2b00      	cmp	r3, #0
 8008828:	f300 82ad 	bgt.w	8008d86 <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800882c:	4291      	cmp	r1, r2
 800882e:	f040 81ca 	bne.w	8008bc6 <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008832:	4d6b      	ldr	r5, [pc, #428]	; (80089e0 <tcp_receive+0x5c0>)
 8008834:	68eb      	ldr	r3, [r5, #12]
 8008836:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 800883a:	8998      	ldrh	r0, [r3, #12]
 800883c:	f7fb fe26 	bl	800448c <lwip_htons>
 8008840:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 8008844:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 8008846:	bf18      	it	ne
 8008848:	2001      	movne	r0, #1
 800884a:	4440      	add	r0, r8
 800884c:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 800884e:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 8008850:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 8008852:	d241      	bcs.n	80088d8 <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008854:	68eb      	ldr	r3, [r5, #12]
 8008856:	8998      	ldrh	r0, [r3, #12]
 8008858:	f7fb fe18 	bl	800448c <lwip_htons>
 800885c:	07c2      	lsls	r2, r0, #31
 800885e:	d510      	bpl.n	8008882 <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008860:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8008864:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008868:	4640      	mov	r0, r8
 800886a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800886e:	f7fb fe0d 	bl	800448c <lwip_htons>
 8008872:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008876:	f7fb fe09 	bl	800448c <lwip_htons>
 800887a:	ea40 0808 	orr.w	r8, r0, r8
 800887e:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008882:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008884:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008886:	68eb      	ldr	r3, [r5, #12]
 8008888:	8998      	ldrh	r0, [r3, #12]
 800888a:	f7fb fdff 	bl	800448c <lwip_htons>
 800888e:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008890:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008892:	bf42      	ittt	mi
 8008894:	892b      	ldrhmi	r3, [r5, #8]
 8008896:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 800889a:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800889c:	8929      	ldrh	r1, [r5, #8]
 800889e:	f7fe fdf5 	bl	800748c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80088a2:	68eb      	ldr	r3, [r5, #12]
 80088a4:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80088a8:	8998      	ldrh	r0, [r3, #12]
 80088aa:	f7fb fdef 	bl	800448c <lwip_htons>
 80088ae:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088b2:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 80088b4:	bf18      	it	ne
 80088b6:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088b8:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 80088ba:	4440      	add	r0, r8
 80088bc:	b280      	uxth	r0, r0
 80088be:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088c0:	4418      	add	r0, r3
 80088c2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80088c4:	4413      	add	r3, r2
 80088c6:	4298      	cmp	r0, r3
 80088c8:	d006      	beq.n	80088d8 <tcp_receive+0x4b8>
 80088ca:	4b46      	ldr	r3, [pc, #280]	; (80089e4 <tcp_receive+0x5c4>)
 80088cc:	f240 527f 	movw	r2, #1407	; 0x57f
 80088d0:	494a      	ldr	r1, [pc, #296]	; (80089fc <tcp_receive+0x5dc>)
 80088d2:	4846      	ldr	r0, [pc, #280]	; (80089ec <tcp_receive+0x5cc>)
 80088d4:	f003 fa48 	bl	800bd68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80088d8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 80ae 	beq.w	8008a3c <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80088e0:	68eb      	ldr	r3, [r5, #12]
 80088e2:	8998      	ldrh	r0, [r3, #12]
 80088e4:	f7fb fdd2 	bl	800448c <lwip_htons>
 80088e8:	07c0      	lsls	r0, r0, #31
 80088ea:	f100 80a4 	bmi.w	8008a36 <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 80088ee:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80088f2:	f1b8 0f00 	cmp.w	r8, #0
 80088f6:	d03b      	beq.n	8008970 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80088f8:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 80088fc:	6830      	ldr	r0, [r6, #0]
 80088fe:	883b      	ldrh	r3, [r7, #0]
 8008900:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008904:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008908:	4403      	add	r3, r0
 800890a:	4411      	add	r1, r2
 800890c:	1a59      	subs	r1, r3, r1
            while (next &&
 800890e:	2900      	cmp	r1, #0
 8008910:	f280 80d1 	bge.w	8008ab6 <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008914:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008916:	2b00      	cmp	r3, #0
 8008918:	dd2a      	ble.n	8008970 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800891a:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800891c:	1a12      	subs	r2, r2, r0
 800891e:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008920:	8998      	ldrh	r0, [r3, #12]
 8008922:	f7fb fdb3 	bl	800448c <lwip_htons>
 8008926:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008928:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800892a:	bf42      	ittt	mi
 800892c:	892b      	ldrhmi	r3, [r5, #8]
 800892e:	f103 33ff 	addmi.w	r3, r3, #4294967295	; 0xffffffff
 8008932:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 8008934:	8929      	ldrh	r1, [r5, #8]
 8008936:	f7fe fda9 	bl	800748c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800893a:	68eb      	ldr	r3, [r5, #12]
 800893c:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 8008940:	8998      	ldrh	r0, [r3, #12]
 8008942:	f7fb fda3 	bl	800448c <lwip_htons>
 8008946:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800894a:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 800894c:	bf18      	it	ne
 800894e:	2001      	movne	r0, #1
 8008950:	4448      	add	r0, r9
 8008952:	b280      	uxth	r0, r0
 8008954:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008956:	4418      	add	r0, r3
 8008958:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	4298      	cmp	r0, r3
 8008960:	d006      	beq.n	8008970 <tcp_receive+0x550>
 8008962:	4b20      	ldr	r3, [pc, #128]	; (80089e4 <tcp_receive+0x5c4>)
 8008964:	f240 52af 	movw	r2, #1455	; 0x5af
 8008968:	4925      	ldr	r1, [pc, #148]	; (8008a00 <tcp_receive+0x5e0>)
 800896a:	4820      	ldr	r0, [pc, #128]	; (80089ec <tcp_receive+0x5cc>)
 800896c:	f003 f9fc 	bl	800bd68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008970:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 8008974:	e062      	b.n	8008a3c <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8008976:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008978:	6829      	ldr	r1, [r5, #0]
 800897a:	1a5b      	subs	r3, r3, r1
 800897c:	2b00      	cmp	r3, #0
 800897e:	f6bf aee3 	bge.w	8008748 <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008982:	4b20      	ldr	r3, [pc, #128]	; (8008a04 <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 8008984:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8008988:	6819      	ldr	r1, [r3, #0]
 800898a:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 800898c:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 8008990:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 8008994:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 8008998:	b289      	uxth	r1, r1
 800899a:	b20b      	sxth	r3, r1
      pcb->sa += m;
 800899c:	4408      	add	r0, r1
      if (m < 0) {
 800899e:	2b00      	cmp	r3, #0
      pcb->sa += m;
 80089a0:	b200      	sxth	r0, r0
        m = -m;
 80089a2:	bfb8      	it	lt
 80089a4:	4249      	neglt	r1, r1
      pcb->sa += m;
 80089a6:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 80089a8:	bfb8      	it	lt
 80089aa:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 80089ac:	4413      	add	r3, r2
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80089b2:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 80089b6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 80089ba:	2300      	movs	r3, #0
 80089bc:	6363      	str	r3, [r4, #52]	; 0x34
 80089be:	e6c3      	b.n	8008748 <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 80089c0:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 80089c4:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 80089c8:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 80089cc:	f8d9 9000 	ldr.w	r9, [r9]
 80089d0:	e700      	b.n	80087d4 <tcp_receive+0x3b4>
 80089d2:	bf00      	nop
 80089d4:	0800e023 	.word	0x0800e023
 80089d8:	0800e04b 	.word	0x0800e04b
 80089dc:	20003f76 	.word	0x20003f76
 80089e0:	20003f44 	.word	0x20003f44
 80089e4:	0800dfd8 	.word	0x0800dfd8
 80089e8:	0800e06b 	.word	0x0800e06b
 80089ec:	0800cb76 	.word	0x0800cb76
 80089f0:	0800e07b 	.word	0x0800e07b
 80089f4:	0800e08a 	.word	0x0800e08a
 80089f8:	0800e09a 	.word	0x0800e09a
 80089fc:	0800e0ad 	.word	0x0800e0ad
 8008a00:	0800e0e4 	.word	0x0800e0e4
 8008a04:	200076f0 	.word	0x200076f0
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008a08:	4269      	negs	r1, r5
 8008a0a:	b209      	sxth	r1, r1
 8008a0c:	f7fe fbf2 	bl	80071f4 <pbuf_header>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	f43f aef2 	beq.w	80087fa <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 8008a16:	4b9d      	ldr	r3, [pc, #628]	; (8008c8c <tcp_receive+0x86c>)
 8008a18:	f240 5251 	movw	r2, #1361	; 0x551
 8008a1c:	e6e9      	b.n	80087f2 <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008a1e:	1a9b      	subs	r3, r3, r2
 8008a20:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008a22:	bfbe      	ittt	lt
 8008a24:	7ea3      	ldrblt	r3, [r4, #26]
 8008a26:	f043 0302 	orrlt.w	r3, r3, #2
 8008a2a:	76a3      	strblt	r3, [r4, #26]
 8008a2c:	e6f1      	b.n	8008812 <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 8008a2e:	6803      	ldr	r3, [r0, #0]
 8008a30:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8008a32:	f7fe ff6f 	bl	8007914 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008a36:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8008a38:	2800      	cmp	r0, #0
 8008a3a:	d1f8      	bne.n	8008a2e <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008a3c:	883a      	ldrh	r2, [r7, #0]
 8008a3e:	6833      	ldr	r3, [r6, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008a44:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d206      	bcs.n	8008a58 <tcp_receive+0x638>
 8008a4a:	4b90      	ldr	r3, [pc, #576]	; (8008c8c <tcp_receive+0x86c>)
 8008a4c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8008a50:	498f      	ldr	r1, [pc, #572]	; (8008c90 <tcp_receive+0x870>)
 8008a52:	4890      	ldr	r0, [pc, #576]	; (8008c94 <tcp_receive+0x874>)
 8008a54:	f003 f988 	bl	800bd68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008a58:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008a5a:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 8008a5c:	883a      	ldrh	r2, [r7, #0]
 8008a5e:	1a9b      	subs	r3, r3, r2
 8008a60:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 8008a62:	f7fe feed 	bl	8007840 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008a66:	686b      	ldr	r3, [r5, #4]
 8008a68:	891a      	ldrh	r2, [r3, #8]
 8008a6a:	b11a      	cbz	r2, 8008a74 <tcp_receive+0x654>
          recv_data = inseg.p;
 8008a6c:	4a8a      	ldr	r2, [pc, #552]	; (8008c98 <tcp_receive+0x878>)
 8008a6e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a74:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a76:	4f85      	ldr	r7, [pc, #532]	; (8008c8c <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008a78:	8998      	ldrh	r0, [r3, #12]
 8008a7a:	f7fb fd07 	bl	800448c <lwip_htons>
 8008a7e:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a80:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8008ca4 <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 8008a84:	bf48      	it	mi
 8008a86:	4a85      	ldrmi	r2, [pc, #532]	; (8008c9c <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008a88:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008c94 <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 8008a8c:	bf42      	ittt	mi
 8008a8e:	7813      	ldrbmi	r3, [r2, #0]
 8008a90:	f043 0320 	orrmi.w	r3, r3, #32
 8008a94:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8008a96:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008a98:	b125      	cbz	r5, 8008aa4 <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008a9a:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 8008a9c:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8008a9e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8008aa0:	428b      	cmp	r3, r1
 8008aa2:	d033      	beq.n	8008b0c <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008aa4:	7ea3      	ldrb	r3, [r4, #26]
 8008aa6:	07d9      	lsls	r1, r3, #31
 8008aa8:	f140 8087 	bpl.w	8008bba <tcp_receive+0x79a>
 8008aac:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8008ab0:	f043 0302 	orr.w	r3, r3, #2
 8008ab4:	e083      	b.n	8008bbe <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008ab6:	f8be 000c 	ldrh.w	r0, [lr, #12]
 8008aba:	f7fb fce7 	bl	800448c <lwip_htons>
 8008abe:	07c1      	lsls	r1, r0, #31
 8008ac0:	d51d      	bpl.n	8008afe <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008ac2:	68eb      	ldr	r3, [r5, #12]
 8008ac4:	8998      	ldrh	r0, [r3, #12]
 8008ac6:	f7fb fce1 	bl	800448c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008aca:	0782      	lsls	r2, r0, #30
 8008acc:	d417      	bmi.n	8008afe <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008ace:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008ad2:	2001      	movs	r0, #1
 8008ad4:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8008ad8:	f7fb fcd8 	bl	800448c <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 8008adc:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008ade:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8008ae2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008ae6:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008aea:	8998      	ldrh	r0, [r3, #12]
 8008aec:	f7fb fcce 	bl	800448c <lwip_htons>
 8008af0:	f010 0003 	ands.w	r0, r0, #3
 8008af4:	bf18      	it	ne
 8008af6:	2001      	movne	r0, #1
 8008af8:	4481      	add	r9, r0
 8008afa:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 8008afe:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8008b02:	4640      	mov	r0, r8
 8008b04:	f7fe ff06 	bl	8007914 <tcp_seg_free>
              next = next->next;
 8008b08:	46c8      	mov	r8, r9
 8008b0a:	e6f2      	b.n	80088f2 <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 8008b0c:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b0e:	8990      	ldrh	r0, [r2, #12]
 8008b10:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008b14:	f7fb fcba 	bl	800448c <lwip_htons>
 8008b18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008b1a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b1e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b22:	bf18      	it	ne
 8008b24:	2001      	movne	r0, #1
 8008b26:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b28:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b2a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b2c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008b30:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008b32:	8998      	ldrh	r0, [r3, #12]
 8008b34:	f7fb fcaa 	bl	800448c <lwip_htons>
 8008b38:	f010 0003 	ands.w	r0, r0, #3
 8008b3c:	bf18      	it	ne
 8008b3e:	2001      	movne	r0, #1
 8008b40:	4458      	add	r0, fp
 8008b42:	4582      	cmp	sl, r0
 8008b44:	d206      	bcs.n	8008b54 <tcp_receive+0x734>
 8008b46:	463b      	mov	r3, r7
 8008b48:	f240 52de 	movw	r2, #1502	; 0x5de
 8008b4c:	4641      	mov	r1, r8
 8008b4e:	4648      	mov	r0, r9
 8008b50:	f003 f90a 	bl	800bd68 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008b54:	68eb      	ldr	r3, [r5, #12]
 8008b56:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008b5a:	8998      	ldrh	r0, [r3, #12]
 8008b5c:	f7fb fc96 	bl	800448c <lwip_htons>
 8008b60:	f010 0003 	ands.w	r0, r0, #3
 8008b64:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008b66:	bf18      	it	ne
 8008b68:	2001      	movne	r0, #1
 8008b6a:	4450      	add	r0, sl
 8008b6c:	1a18      	subs	r0, r3, r0
 8008b6e:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 8008b70:	4620      	mov	r0, r4
 8008b72:	f7fe fe65 	bl	8007840 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 8008b76:	6869      	ldr	r1, [r5, #4]
 8008b78:	890b      	ldrh	r3, [r1, #8]
 8008b7a:	b133      	cbz	r3, 8008b8a <tcp_receive+0x76a>
            if (recv_data) {
 8008b7c:	4b46      	ldr	r3, [pc, #280]	; (8008c98 <tcp_receive+0x878>)
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	b1c8      	cbz	r0, 8008bb6 <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 8008b82:	f7fe fd17 	bl	80075b4 <pbuf_cat>
            cseg->p = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008b8a:	68eb      	ldr	r3, [r5, #12]
 8008b8c:	8998      	ldrh	r0, [r3, #12]
 8008b8e:	f7fb fc7d 	bl	800448c <lwip_htons>
 8008b92:	07c0      	lsls	r0, r0, #31
 8008b94:	d509      	bpl.n	8008baa <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 8008b96:	4a41      	ldr	r2, [pc, #260]	; (8008c9c <tcp_receive+0x87c>)
 8008b98:	7813      	ldrb	r3, [r2, #0]
 8008b9a:	f043 0320 	orr.w	r3, r3, #32
 8008b9e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008ba0:	7d23      	ldrb	r3, [r4, #20]
 8008ba2:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8008ba4:	bf04      	itt	eq
 8008ba6:	2307      	moveq	r3, #7
 8008ba8:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 8008baa:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 8008bac:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 8008bae:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8008bb0:	f7fe feb0 	bl	8007914 <tcp_seg_free>
 8008bb4:	e76f      	b.n	8008a96 <tcp_receive+0x676>
              recv_data = cseg->p;
 8008bb6:	6019      	str	r1, [r3, #0]
 8008bb8:	e7e5      	b.n	8008b86 <tcp_receive+0x766>
        tcp_ack(pcb);
 8008bba:	f043 0301 	orr.w	r3, r3, #1
 8008bbe:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8008bc0:	b003      	add	sp, #12
 8008bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8008bc6:	4620      	mov	r0, r4
 8008bc8:	f000 ffd6 	bl	8009b78 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 8008bcc:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008bce:	b925      	cbnz	r5, 8008bda <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008bd0:	4833      	ldr	r0, [pc, #204]	; (8008ca0 <tcp_receive+0x880>)
 8008bd2:	f7fe feb5 	bl	8007940 <tcp_seg_copy>
 8008bd6:	6720      	str	r0, [r4, #112]	; 0x70
 8008bd8:	e7f2      	b.n	8008bc0 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 8008bda:	6833      	ldr	r3, [r6, #0]
 8008bdc:	f04f 0800 	mov.w	r8, #0
 8008be0:	f103 3eff 	add.w	lr, r3, #4294967295	; 0xffffffff
 8008be4:	f103 0c01 	add.w	ip, r3, #1
 8008be8:	68e8      	ldr	r0, [r5, #12]
 8008bea:	6842      	ldr	r2, [r0, #4]
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d117      	bne.n	8008c20 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8008bf0:	482b      	ldr	r0, [pc, #172]	; (8008ca0 <tcp_receive+0x880>)
 8008bf2:	892b      	ldrh	r3, [r5, #8]
 8008bf4:	8902      	ldrh	r2, [r0, #8]
 8008bf6:	429a      	cmp	r2, r3
 8008bf8:	d9e2      	bls.n	8008bc0 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 8008bfa:	f7fe fea1 	bl	8007940 <tcp_seg_copy>
                if (cseg != NULL) {
 8008bfe:	2800      	cmp	r0, #0
 8008c00:	d0de      	beq.n	8008bc0 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 8008c02:	f1b8 0f00 	cmp.w	r8, #0
 8008c06:	d009      	beq.n	8008c1c <tcp_receive+0x7fc>
                    prev->next = cseg;
 8008c08:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008c0c:	4629      	mov	r1, r5
}
 8008c0e:	b003      	add	sp, #12
 8008c10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8008c14:	f7ff bbc6 	b.w	80083a4 <tcp_oos_insert_segment>
 8008c18:	460d      	mov	r5, r1
 8008c1a:	e7e5      	b.n	8008be8 <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 8008c1c:	6720      	str	r0, [r4, #112]	; 0x70
 8008c1e:	e7f5      	b.n	8008c0c <tcp_receive+0x7ec>
              if (prev == NULL) {
 8008c20:	f1b8 0f00 	cmp.w	r8, #0
 8008c24:	d109      	bne.n	8008c3a <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008c26:	1a99      	subs	r1, r3, r2
 8008c28:	2900      	cmp	r1, #0
 8008c2a:	da3d      	bge.n	8008ca8 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8008c2c:	481c      	ldr	r0, [pc, #112]	; (8008ca0 <tcp_receive+0x880>)
 8008c2e:	f7fe fe87 	bl	8007940 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008c32:	2800      	cmp	r0, #0
 8008c34:	d0c4      	beq.n	8008bc0 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 8008c36:	6720      	str	r0, [r4, #112]	; 0x70
 8008c38:	e7e8      	b.n	8008c0c <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8008c3a:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8008c3e:	6849      	ldr	r1, [r1, #4]
 8008c40:	ebae 0101 	sub.w	r1, lr, r1
 8008c44:	2900      	cmp	r1, #0
 8008c46:	db2f      	blt.n	8008ca8 <tcp_receive+0x888>
 8008c48:	ebac 0102 	sub.w	r1, ip, r2
 8008c4c:	2900      	cmp	r1, #0
 8008c4e:	dc2b      	bgt.n	8008ca8 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 8008c50:	4813      	ldr	r0, [pc, #76]	; (8008ca0 <tcp_receive+0x880>)
 8008c52:	f7fe fe75 	bl	8007940 <tcp_seg_copy>
                  if (cseg != NULL) {
 8008c56:	4604      	mov	r4, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d0b1      	beq.n	8008bc0 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8008c5c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c60:	6831      	ldr	r1, [r6, #0]
 8008c62:	685a      	ldr	r2, [r3, #4]
 8008c64:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008c68:	4413      	add	r3, r2
 8008c6a:	1a5b      	subs	r3, r3, r1
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	dd07      	ble.n	8008c80 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008c70:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 8008c72:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8008c76:	b289      	uxth	r1, r1
 8008c78:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 8008c7c:	f7fe fc06 	bl	800748c <pbuf_realloc>
                    prev->next = cseg;
 8008c80:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 8008c84:	4629      	mov	r1, r5
 8008c86:	4620      	mov	r0, r4
 8008c88:	e7c1      	b.n	8008c0e <tcp_receive+0x7ee>
 8008c8a:	bf00      	nop
 8008c8c:	0800dfd8 	.word	0x0800dfd8
 8008c90:	0800e11f 	.word	0x0800e11f
 8008c94:	0800cb76 	.word	0x0800cb76
 8008c98:	20003f58 	.word	0x20003f58
 8008c9c:	20003f5c 	.word	0x20003f5c
 8008ca0:	20003f44 	.word	0x20003f44
 8008ca4:	0800e13e 	.word	0x0800e13e
              if (next->next == NULL &&
 8008ca8:	6829      	ldr	r1, [r5, #0]
 8008caa:	46a8      	mov	r8, r5
 8008cac:	2900      	cmp	r1, #0
 8008cae:	d1b3      	bne.n	8008c18 <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008cb0:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dd84      	ble.n	8008bc0 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008cb6:	8980      	ldrh	r0, [r0, #12]
 8008cb8:	f7fb fbe8 	bl	800448c <lwip_htons>
 8008cbc:	07c2      	lsls	r2, r0, #31
 8008cbe:	f53f af7f 	bmi.w	8008bc0 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 8008cc2:	483d      	ldr	r0, [pc, #244]	; (8008db8 <tcp_receive+0x998>)
 8008cc4:	f7fe fe3c 	bl	8007940 <tcp_seg_copy>
 8008cc8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 8008cca:	2800      	cmp	r0, #0
 8008ccc:	f43f af78 	beq.w	8008bc0 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008cd0:	68eb      	ldr	r3, [r5, #12]
 8008cd2:	6831      	ldr	r1, [r6, #0]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	892b      	ldrh	r3, [r5, #8]
 8008cd8:	4413      	add	r3, r2
 8008cda:	1a5b      	subs	r3, r3, r1
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	dd05      	ble.n	8008cec <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008ce0:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8008ce2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008ce4:	b289      	uxth	r1, r1
 8008ce6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008ce8:	f7fe fbd0 	bl	800748c <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8008cec:	6832      	ldr	r2, [r6, #0]
 8008cee:	883b      	ldrh	r3, [r7, #0]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008cf4:	1a9b      	subs	r3, r3, r2
 8008cf6:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008cf8:	1a9b      	subs	r3, r3, r2
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f77f af60 	ble.w	8008bc0 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008d00:	682b      	ldr	r3, [r5, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	8998      	ldrh	r0, [r3, #12]
 8008d06:	f7fb fbc1 	bl	800448c <lwip_htons>
 8008d0a:	07c3      	lsls	r3, r0, #31
 8008d0c:	d511      	bpl.n	8008d32 <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8008d0e:	682b      	ldr	r3, [r5, #0]
 8008d10:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8008d14:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008d18:	4640      	mov	r0, r8
 8008d1a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 8008d1e:	f7fb fbb5 	bl	800448c <lwip_htons>
 8008d22:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008d26:	f7fb fbb1 	bl	800448c <lwip_htons>
 8008d2a:	ea40 0808 	orr.w	r8, r0, r8
 8008d2e:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008d32:	6832      	ldr	r2, [r6, #0]
 8008d34:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8008d36:	682b      	ldr	r3, [r5, #0]
 8008d38:	1a89      	subs	r1, r1, r2
 8008d3a:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 8008d3c:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8008d3e:	4411      	add	r1, r2
 8008d40:	b289      	uxth	r1, r1
 8008d42:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8008d44:	f7fe fba2 	bl	800748c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	891d      	ldrh	r5, [r3, #8]
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	8998      	ldrh	r0, [r3, #12]
 8008d50:	f7fb fb9c 	bl	800448c <lwip_htons>
 8008d54:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d58:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 8008d5a:	bf18      	it	ne
 8008d5c:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d5e:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 8008d60:	4428      	add	r0, r5
 8008d62:	b280      	uxth	r0, r0
 8008d64:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d66:	4418      	add	r0, r3
 8008d68:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008d6a:	4413      	add	r3, r2
 8008d6c:	4298      	cmp	r0, r3
 8008d6e:	f43f af27 	beq.w	8008bc0 <tcp_receive+0x7a0>
 8008d72:	4b12      	ldr	r3, [pc, #72]	; (8008dbc <tcp_receive+0x99c>)
 8008d74:	f240 627b 	movw	r2, #1659	; 0x67b
 8008d78:	4911      	ldr	r1, [pc, #68]	; (8008dc0 <tcp_receive+0x9a0>)
 8008d7a:	4812      	ldr	r0, [pc, #72]	; (8008dc4 <tcp_receive+0x9a4>)
}
 8008d7c:	b003      	add	sp, #12
 8008d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008d82:	f002 bff1 	b.w	800bd68 <iprintf>
      tcp_send_empty_ack(pcb);
 8008d86:	4620      	mov	r0, r4
}
 8008d88:	b003      	add	sp, #12
 8008d8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 8008d8e:	f000 bef3 	b.w	8009b78 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008d92:	6833      	ldr	r3, [r6, #0]
 8008d94:	1a99      	subs	r1, r3, r2
 8008d96:	2900      	cmp	r1, #0
 8008d98:	db06      	blt.n	8008da8 <tcp_receive+0x988>
 8008d9a:	3301      	adds	r3, #1
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008da0:	1a9b      	subs	r3, r3, r2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f77f af0c 	ble.w	8008bc0 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 8008da8:	7ea3      	ldrb	r3, [r4, #26]
 8008daa:	e681      	b.n	8008ab0 <tcp_receive+0x690>
        pcb->dupacks = 0;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008db2:	f7ff bbaa 	b.w	800850a <tcp_receive+0xea>
 8008db6:	bf00      	nop
 8008db8:	20003f44 	.word	0x20003f44
 8008dbc:	0800dfd8 	.word	0x0800dfd8
 8008dc0:	0800e0ad 	.word	0x0800e0ad
 8008dc4:	0800cb76 	.word	0x0800cb76

08008dc8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008dc8:	4b0b      	ldr	r3, [pc, #44]	; (8008df8 <tcp_getoptbyte+0x30>)
 8008dca:	4a0c      	ldr	r2, [pc, #48]	; (8008dfc <tcp_getoptbyte+0x34>)
 8008dcc:	6819      	ldr	r1, [r3, #0]
{
 8008dce:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008dd0:	b121      	cbz	r1, 8008ddc <tcp_getoptbyte+0x14>
 8008dd2:	480b      	ldr	r0, [pc, #44]	; (8008e00 <tcp_getoptbyte+0x38>)
 8008dd4:	8813      	ldrh	r3, [r2, #0]
 8008dd6:	8800      	ldrh	r0, [r0, #0]
 8008dd8:	4283      	cmp	r3, r0
 8008dda:	d207      	bcs.n	8008dec <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008ddc:	4b09      	ldr	r3, [pc, #36]	; (8008e04 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 8008dde:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008de0:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008de2:	1c48      	adds	r0, r1, #1
 8008de4:	440b      	add	r3, r1
 8008de6:	8010      	strh	r0, [r2, #0]
 8008de8:	7d18      	ldrb	r0, [r3, #20]
 8008dea:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008dec:	1c5c      	adds	r4, r3, #1
 8008dee:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8008df0:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008df2:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8008df4:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008df6:	bd10      	pop	{r4, pc}
 8008df8:	20003f70 	.word	0x20003f70
 8008dfc:	20003f64 	.word	0x20003f64
 8008e00:	20003f6c 	.word	0x20003f6c
 8008e04:	20003f68 	.word	0x20003f68

08008e08 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008e0a:	4d19      	ldr	r5, [pc, #100]	; (8008e70 <tcp_parseopt.isra.1.part.2+0x68>)
 8008e0c:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 8008e0e:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008e10:	4e18      	ldr	r6, [pc, #96]	; (8008e74 <tcp_parseopt.isra.1.part.2+0x6c>)
 8008e12:	802b      	strh	r3, [r5, #0]
 8008e14:	8834      	ldrh	r4, [r6, #0]
 8008e16:	882b      	ldrh	r3, [r5, #0]
 8008e18:	42a3      	cmp	r3, r4
 8008e1a:	d300      	bcc.n	8008e1e <tcp_parseopt.isra.1.part.2+0x16>
 8008e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 8008e1e:	f7ff ffd3 	bl	8008dc8 <tcp_getoptbyte>
      switch (opt) {
 8008e22:	2801      	cmp	r0, #1
 8008e24:	d0f6      	beq.n	8008e14 <tcp_parseopt.isra.1.part.2+0xc>
 8008e26:	d3f9      	bcc.n	8008e1c <tcp_parseopt.isra.1.part.2+0x14>
 8008e28:	2802      	cmp	r0, #2
 8008e2a:	d117      	bne.n	8008e5c <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8008e2c:	f7ff ffcc 	bl	8008dc8 <tcp_getoptbyte>
 8008e30:	2804      	cmp	r0, #4
 8008e32:	d1f3      	bne.n	8008e1c <tcp_parseopt.isra.1.part.2+0x14>
 8008e34:	882b      	ldrh	r3, [r5, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	42a3      	cmp	r3, r4
 8008e3a:	daef      	bge.n	8008e1c <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8008e3c:	f7ff ffc4 	bl	8008dc8 <tcp_getoptbyte>
 8008e40:	0200      	lsls	r0, r0, #8
 8008e42:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 8008e44:	f7ff ffc0 	bl	8008dc8 <tcp_getoptbyte>
 8008e48:	4320      	orrs	r0, r4
 8008e4a:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8008e4c:	1e43      	subs	r3, r0, #1
 8008e4e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8008e52:	bf28      	it	cs
 8008e54:	f44f 7006 	movcs.w	r0, #536	; 0x218
 8008e58:	8038      	strh	r0, [r7, #0]
 8008e5a:	e7db      	b.n	8008e14 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8008e5c:	f7ff ffb4 	bl	8008dc8 <tcp_getoptbyte>
        if (data < 2) {
 8008e60:	2801      	cmp	r0, #1
 8008e62:	d9db      	bls.n	8008e1c <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8008e64:	882b      	ldrh	r3, [r5, #0]
 8008e66:	3b02      	subs	r3, #2
 8008e68:	4418      	add	r0, r3
 8008e6a:	8028      	strh	r0, [r5, #0]
 8008e6c:	e7d2      	b.n	8008e14 <tcp_parseopt.isra.1.part.2+0xc>
 8008e6e:	bf00      	nop
 8008e70:	20003f64 	.word	0x20003f64
 8008e74:	20003f74 	.word	0x20003f74

08008e78 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 8008e78:	4b0d      	ldr	r3, [pc, #52]	; (8008eb0 <tcp_input_delayed_close+0x38>)
{
 8008e7a:	b510      	push	{r4, lr}
 8008e7c:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 8008e7e:	7818      	ldrb	r0, [r3, #0]
 8008e80:	f010 0010 	ands.w	r0, r0, #16
 8008e84:	d012      	beq.n	8008eac <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 8008e86:	7ea3      	ldrb	r3, [r4, #26]
 8008e88:	06db      	lsls	r3, r3, #27
 8008e8a:	d406      	bmi.n	8008e9a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8008e8c:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008e90:	b11b      	cbz	r3, 8008e9a <tcp_input_delayed_close+0x22>
 8008e92:	f06f 010e 	mvn.w	r1, #14
 8008e96:	6920      	ldr	r0, [r4, #16]
 8008e98:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	4805      	ldr	r0, [pc, #20]	; (8008eb4 <tcp_input_delayed_close+0x3c>)
 8008e9e:	f7fe ff67 	bl	8007d70 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	4621      	mov	r1, r4
 8008ea6:	f7fe f825 	bl	8006ef4 <memp_free>
 8008eaa:	2001      	movs	r0, #1
}
 8008eac:	bd10      	pop	{r4, pc}
 8008eae:	bf00      	nop
 8008eb0:	20003f5c 	.word	0x20003f5c
 8008eb4:	200076ec 	.word	0x200076ec

08008eb8 <tcp_input>:
{
 8008eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8008ebc:	6843      	ldr	r3, [r0, #4]
{
 8008ebe:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8008ec0:	4e9e      	ldr	r6, [pc, #632]	; (800913c <tcp_input+0x284>)
{
 8008ec2:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8008ec4:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008ec6:	8943      	ldrh	r3, [r0, #10]
 8008ec8:	2b13      	cmp	r3, #19
 8008eca:	f240 81b2 	bls.w	8009232 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ece:	4f9c      	ldr	r7, [pc, #624]	; (8009140 <tcp_input+0x288>)
 8008ed0:	6839      	ldr	r1, [r7, #0]
 8008ed2:	46b8      	mov	r8, r7
 8008ed4:	6978      	ldr	r0, [r7, #20]
 8008ed6:	f7fd f9c8 	bl	800626a <ip4_addr_isbroadcast_u32>
 8008eda:	4604      	mov	r4, r0
 8008edc:	2800      	cmp	r0, #0
 8008ede:	f040 81a8 	bne.w	8009232 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008ee8:	2be0      	cmp	r3, #224	; 0xe0
 8008eea:	f000 81a2 	beq.w	8009232 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008eee:	6833      	ldr	r3, [r6, #0]
 8008ef0:	8998      	ldrh	r0, [r3, #12]
 8008ef2:	f7fb facb 	bl	800448c <lwip_htons>
 8008ef6:	0a81      	lsrs	r1, r0, #10
 8008ef8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008efc:	2913      	cmp	r1, #19
 8008efe:	f240 8198 	bls.w	8009232 <tcp_input+0x37a>
 8008f02:	b289      	uxth	r1, r1
 8008f04:	892b      	ldrh	r3, [r5, #8]
 8008f06:	428b      	cmp	r3, r1
 8008f08:	f0c0 8193 	bcc.w	8009232 <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008f0c:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8008f10:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008f12:	4a8c      	ldr	r2, [pc, #560]	; (8009144 <tcp_input+0x28c>)
 8008f14:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8008f16:	4f8c      	ldr	r7, [pc, #560]	; (8009148 <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8008f18:	4288      	cmp	r0, r1
 8008f1a:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8008f1c:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008f1e:	8013      	strh	r3, [r2, #0]
 8008f20:	4c8a      	ldr	r4, [pc, #552]	; (800914c <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8008f22:	d344      	bcc.n	8008fae <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008f24:	4249      	negs	r1, r1
 8008f26:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8008f28:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008f2a:	f7fe f963 	bl	80071f4 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008f2e:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8008f30:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008f34:	f8df b268 	ldr.w	fp, [pc, #616]	; 80091a0 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008f38:	8820      	ldrh	r0, [r4, #0]
 8008f3a:	f7fb faa7 	bl	800448c <lwip_htons>
 8008f3e:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008f40:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008f42:	4f83      	ldr	r7, [pc, #524]	; (8009150 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008f44:	8860      	ldrh	r0, [r4, #2]
 8008f46:	f7fb faa1 	bl	800448c <lwip_htons>
 8008f4a:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008f4c:	6834      	ldr	r4, [r6, #0]
 8008f4e:	6860      	ldr	r0, [r4, #4]
 8008f50:	f7fb fa9f 	bl	8004492 <lwip_htonl>
 8008f54:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008f56:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008f58:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008f5c:	68a0      	ldr	r0, [r4, #8]
 8008f5e:	f7fb fa98 	bl	8004492 <lwip_htonl>
 8008f62:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008f64:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008f66:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008f68:	89e0      	ldrh	r0, [r4, #14]
 8008f6a:	f7fb fa8f 	bl	800448c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8008f6e:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008f70:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008f72:	8998      	ldrh	r0, [r3, #12]
 8008f74:	f7fb fa8a 	bl	800448c <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008f78:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8008f7a:	b2c0      	uxtb	r0, r0
 8008f7c:	4a75      	ldr	r2, [pc, #468]	; (8009154 <tcp_input+0x29c>)
 8008f7e:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008f82:	f010 0003 	ands.w	r0, r0, #3
 8008f86:	9203      	str	r2, [sp, #12]
 8008f88:	bf18      	it	ne
 8008f8a:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 8008f8c:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008f8e:	4b72      	ldr	r3, [pc, #456]	; (8009158 <tcp_input+0x2a0>)
 8008f90:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f92:	4972      	ldr	r1, [pc, #456]	; (800915c <tcp_input+0x2a4>)
 8008f94:	9304      	str	r3, [sp, #16]
 8008f96:	680c      	ldr	r4, [r1, #0]
 8008f98:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008f9a:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008f9c:	2c00      	cmp	r4, #0
 8008f9e:	d140      	bne.n	8009022 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fa0:	4b6f      	ldr	r3, [pc, #444]	; (8009160 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fa2:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8009164 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fa6:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008fa8:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 80091a4 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008fac:	e148      	b.n	8009240 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008fae:	682b      	ldr	r3, [r5, #0]
 8008fb0:	b92b      	cbnz	r3, 8008fbe <tcp_input+0x106>
 8008fb2:	4b6c      	ldr	r3, [pc, #432]	; (8009164 <tcp_input+0x2ac>)
 8008fb4:	22b2      	movs	r2, #178	; 0xb2
 8008fb6:	496c      	ldr	r1, [pc, #432]	; (8009168 <tcp_input+0x2b0>)
 8008fb8:	486c      	ldr	r0, [pc, #432]	; (800916c <tcp_input+0x2b4>)
 8008fba:	f002 fed5 	bl	800bd68 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8008fbe:	f06f 0113 	mvn.w	r1, #19
 8008fc2:	4628      	mov	r0, r5
 8008fc4:	f7fe f916 	bl	80071f4 <pbuf_header>
    tcphdr_opt1len = p->len;
 8008fc8:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008fca:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008fcc:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8008fce:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008fd0:	881c      	ldrh	r4, [r3, #0]
 8008fd2:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008fd4:	4249      	negs	r1, r1
 8008fd6:	b209      	sxth	r1, r1
 8008fd8:	f7fe f90c 	bl	80071f4 <pbuf_header>
    if (opt2len > p->next->len) {
 8008fdc:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008fde:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008fe0:	8943      	ldrh	r3, [r0, #10]
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	f0c0 8125 	bcc.w	8009232 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8008fe8:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008fea:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008fec:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008fee:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008ff0:	f7fe f900 	bl	80071f4 <pbuf_header>
    p->tot_len -= opt2len;
 8008ff4:	892b      	ldrh	r3, [r5, #8]
 8008ff6:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008ff8:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8008ffa:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008ffc:	b12b      	cbz	r3, 800900a <tcp_input+0x152>
 8008ffe:	4b59      	ldr	r3, [pc, #356]	; (8009164 <tcp_input+0x2ac>)
 8009000:	22cf      	movs	r2, #207	; 0xcf
 8009002:	495b      	ldr	r1, [pc, #364]	; (8009170 <tcp_input+0x2b8>)
 8009004:	4859      	ldr	r0, [pc, #356]	; (800916c <tcp_input+0x2b4>)
 8009006:	f002 feaf 	bl	800bd68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800900a:	682b      	ldr	r3, [r5, #0]
 800900c:	892a      	ldrh	r2, [r5, #8]
 800900e:	891b      	ldrh	r3, [r3, #8]
 8009010:	429a      	cmp	r2, r3
 8009012:	d08c      	beq.n	8008f2e <tcp_input+0x76>
 8009014:	4b53      	ldr	r3, [pc, #332]	; (8009164 <tcp_input+0x2ac>)
 8009016:	22d0      	movs	r2, #208	; 0xd0
 8009018:	4956      	ldr	r1, [pc, #344]	; (8009174 <tcp_input+0x2bc>)
 800901a:	4854      	ldr	r0, [pc, #336]	; (800916c <tcp_input+0x2b4>)
 800901c:	f002 fea4 	bl	800bd68 <iprintf>
 8009020:	e785      	b.n	8008f2e <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8009022:	7d23      	ldrb	r3, [r4, #20]
 8009024:	b92b      	cbnz	r3, 8009032 <tcp_input+0x17a>
 8009026:	4b4f      	ldr	r3, [pc, #316]	; (8009164 <tcp_input+0x2ac>)
 8009028:	22e2      	movs	r2, #226	; 0xe2
 800902a:	4953      	ldr	r1, [pc, #332]	; (8009178 <tcp_input+0x2c0>)
 800902c:	484f      	ldr	r0, [pc, #316]	; (800916c <tcp_input+0x2b4>)
 800902e:	f002 fe9b 	bl	800bd68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8009032:	7d23      	ldrb	r3, [r4, #20]
 8009034:	2b0a      	cmp	r3, #10
 8009036:	d105      	bne.n	8009044 <tcp_input+0x18c>
 8009038:	4b4a      	ldr	r3, [pc, #296]	; (8009164 <tcp_input+0x2ac>)
 800903a:	22e3      	movs	r2, #227	; 0xe3
 800903c:	494f      	ldr	r1, [pc, #316]	; (800917c <tcp_input+0x2c4>)
 800903e:	484b      	ldr	r0, [pc, #300]	; (800916c <tcp_input+0x2b4>)
 8009040:	f002 fe92 	bl	800bd68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8009044:	7d23      	ldrb	r3, [r4, #20]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d105      	bne.n	8009056 <tcp_input+0x19e>
 800904a:	4b46      	ldr	r3, [pc, #280]	; (8009164 <tcp_input+0x2ac>)
 800904c:	22e4      	movs	r2, #228	; 0xe4
 800904e:	494c      	ldr	r1, [pc, #304]	; (8009180 <tcp_input+0x2c8>)
 8009050:	4846      	ldr	r0, [pc, #280]	; (800916c <tcp_input+0x2b4>)
 8009052:	f002 fe89 	bl	800bd68 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8009056:	6832      	ldr	r2, [r6, #0]
 8009058:	8b21      	ldrh	r1, [r4, #24]
 800905a:	8813      	ldrh	r3, [r2, #0]
 800905c:	4299      	cmp	r1, r3
 800905e:	68e3      	ldr	r3, [r4, #12]
 8009060:	d169      	bne.n	8009136 <tcp_input+0x27e>
 8009062:	8ae1      	ldrh	r1, [r4, #22]
 8009064:	8852      	ldrh	r2, [r2, #2]
 8009066:	4291      	cmp	r1, r2
 8009068:	d165      	bne.n	8009136 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 800906a:	6861      	ldr	r1, [r4, #4]
 800906c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009070:	4291      	cmp	r1, r2
 8009072:	d160      	bne.n	8009136 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8009074:	6821      	ldr	r1, [r4, #0]
 8009076:	f8d8 2014 	ldr.w	r2, [r8, #20]
 800907a:	4291      	cmp	r1, r2
 800907c:	d15b      	bne.n	8009136 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800907e:	429c      	cmp	r4, r3
 8009080:	f040 8406 	bne.w	8009890 <tcp_input+0x9d8>
 8009084:	4b37      	ldr	r3, [pc, #220]	; (8009164 <tcp_input+0x2ac>)
 8009086:	22ec      	movs	r2, #236	; 0xec
 8009088:	493e      	ldr	r1, [pc, #248]	; (8009184 <tcp_input+0x2cc>)
 800908a:	4838      	ldr	r0, [pc, #224]	; (800916c <tcp_input+0x2b4>)
 800908c:	f002 fe6c 	bl	800bd68 <iprintf>
      if (prev != NULL) {
 8009090:	f1ba 0f00 	cmp.w	sl, #0
 8009094:	d007      	beq.n	80090a6 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8009096:	68e3      	ldr	r3, [r4, #12]
 8009098:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 800909c:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 80090a0:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 80090a4:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80090a6:	68e3      	ldr	r3, [r4, #12]
 80090a8:	429c      	cmp	r4, r3
 80090aa:	d105      	bne.n	80090b8 <tcp_input+0x200>
 80090ac:	4b2d      	ldr	r3, [pc, #180]	; (8009164 <tcp_input+0x2ac>)
 80090ae:	22f4      	movs	r2, #244	; 0xf4
 80090b0:	4935      	ldr	r1, [pc, #212]	; (8009188 <tcp_input+0x2d0>)
 80090b2:	482e      	ldr	r0, [pc, #184]	; (800916c <tcp_input+0x2b4>)
 80090b4:	f002 fe58 	bl	800bd68 <iprintf>
    inseg.next = NULL;
 80090b8:	4b34      	ldr	r3, [pc, #208]	; (800918c <tcp_input+0x2d4>)
 80090ba:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 80090bc:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 80090be:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80090c0:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 80090c2:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 80090c4:	4832      	ldr	r0, [pc, #200]	; (8009190 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 80090c6:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 80090c8:	605d      	str	r5, [r3, #4]
 80090ca:	4680      	mov	r8, r0
    recv_data = NULL;
 80090cc:	4b31      	ldr	r3, [pc, #196]	; (8009194 <tcp_input+0x2dc>)
    recv_acked = 0;
 80090ce:	4932      	ldr	r1, [pc, #200]	; (8009198 <tcp_input+0x2e0>)
    recv_data = NULL;
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	469a      	mov	sl, r3
    recv_flags = 0;
 80090d4:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 80090d6:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 80090d8:	9a03      	ldr	r2, [sp, #12]
 80090da:	9105      	str	r1, [sp, #20]
 80090dc:	7812      	ldrb	r2, [r2, #0]
 80090de:	f012 0f08 	tst.w	r2, #8
 80090e2:	d003      	beq.n	80090ec <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 80090e4:	7b6b      	ldrb	r3, [r5, #13]
 80090e6:	f043 0301 	orr.w	r3, r3, #1
 80090ea:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 80090ec:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80090ee:	4d2b      	ldr	r5, [pc, #172]	; (800919c <tcp_input+0x2e4>)
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 8137 	beq.w	8009364 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80090f6:	4620      	mov	r0, r4
 80090f8:	f7fe ff4c 	bl	8007f94 <tcp_process_refused_data>
 80090fc:	300d      	adds	r0, #13
 80090fe:	d008      	beq.n	8009112 <tcp_input+0x25a>
 8009100:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009102:	2b00      	cmp	r3, #0
 8009104:	f000 812e 	beq.w	8009364 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8009108:	9b04      	ldr	r3, [sp, #16]
 800910a:	881b      	ldrh	r3, [r3, #0]
 800910c:	2b00      	cmp	r3, #0
 800910e:	f000 8129 	beq.w	8009364 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8009112:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8009114:	b913      	cbnz	r3, 800911c <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8009116:	4620      	mov	r0, r4
 8009118:	f000 fd2e 	bl	8009b78 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 800911c:	2400      	movs	r4, #0
 800911e:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8009120:	4d1a      	ldr	r5, [pc, #104]	; (800918c <tcp_input+0x2d4>)
    recv_data = NULL;
 8009122:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8009126:	6868      	ldr	r0, [r5, #4]
 8009128:	b110      	cbz	r0, 8009130 <tcp_input+0x278>
      pbuf_free(inseg.p);
 800912a:	f7fe f869 	bl	8007200 <pbuf_free>
      inseg.p = NULL;
 800912e:	606c      	str	r4, [r5, #4]
}
 8009130:	b009      	add	sp, #36	; 0x24
 8009132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8009136:	46a2      	mov	sl, r4
 8009138:	461c      	mov	r4, r3
 800913a:	e72f      	b.n	8008f9c <tcp_input+0xe4>
 800913c:	20003f68 	.word	0x20003f68
 8009140:	20003fa0 	.word	0x20003fa0
 8009144:	20003f74 	.word	0x20003f74
 8009148:	20003f70 	.word	0x20003f70
 800914c:	20003f6c 	.word	0x20003f6c
 8009150:	20003f3c 	.word	0x20003f3c
 8009154:	20003f40 	.word	0x20003f40
 8009158:	20003f76 	.word	0x20003f76
 800915c:	200076ec 	.word	0x200076ec
 8009160:	200076fc 	.word	0x200076fc
 8009164:	0800dfd8 	.word	0x0800dfd8
 8009168:	0800de22 	.word	0x0800de22
 800916c:	0800cb76 	.word	0x0800cb76
 8009170:	0800de32 	.word	0x0800de32
 8009174:	0800de3e 	.word	0x0800de3e
 8009178:	0800de5d 	.word	0x0800de5d
 800917c:	0800de84 	.word	0x0800de84
 8009180:	0800deae 	.word	0x0800deae
 8009184:	0800ded5 	.word	0x0800ded5
 8009188:	0800df00 	.word	0x0800df00
 800918c:	20003f44 	.word	0x20003f44
 8009190:	20003f5c 	.word	0x20003f5c
 8009194:	20003f58 	.word	0x20003f58
 8009198:	20003f54 	.word	0x20003f54
 800919c:	20007700 	.word	0x20007700
 80091a0:	20003f60 	.word	0x20003f60
 80091a4:	0800df2a 	.word	0x0800df2a
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80091a8:	7d23      	ldrb	r3, [r4, #20]
 80091aa:	2b0a      	cmp	r3, #10
 80091ac:	d005      	beq.n	80091ba <tcp_input+0x302>
 80091ae:	4653      	mov	r3, sl
 80091b0:	22fe      	movs	r2, #254	; 0xfe
 80091b2:	4649      	mov	r1, r9
 80091b4:	489d      	ldr	r0, [pc, #628]	; (800942c <tcp_input+0x574>)
 80091b6:	f002 fdd7 	bl	800bd68 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80091ba:	6833      	ldr	r3, [r6, #0]
 80091bc:	8b22      	ldrh	r2, [r4, #24]
 80091be:	8818      	ldrh	r0, [r3, #0]
 80091c0:	4290      	cmp	r0, r2
 80091c2:	d13c      	bne.n	800923e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80091c4:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 80091c6:	885a      	ldrh	r2, [r3, #2]
 80091c8:	428a      	cmp	r2, r1
 80091ca:	d138      	bne.n	800923e <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80091d2:	4299      	cmp	r1, r3
 80091d4:	d133      	bne.n	800923e <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80091d6:	6821      	ldr	r1, [r4, #0]
 80091d8:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80091dc:	4299      	cmp	r1, r3
 80091de:	d12e      	bne.n	800923e <tcp_input+0x386>
  if (flags & TCP_RST) {
 80091e0:	9b03      	ldr	r3, [sp, #12]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	0759      	lsls	r1, r3, #29
 80091e6:	d424      	bmi.n	8009232 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 80091e8:	079e      	lsls	r6, r3, #30
 80091ea:	d513      	bpl.n	8009214 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80091ec:	f8db 1000 	ldr.w	r1, [fp]
 80091f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80091f2:	1acb      	subs	r3, r1, r3
 80091f4:	d413      	bmi.n	800921e <tcp_input+0x366>
 80091f6:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 80091f8:	1b9b      	subs	r3, r3, r6
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	dc0f      	bgt.n	800921e <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80091fe:	9b04      	ldr	r3, [sp, #16]
 8009200:	881c      	ldrh	r4, [r3, #0]
 8009202:	9001      	str	r0, [sp, #4]
 8009204:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009206:	4b8a      	ldr	r3, [pc, #552]	; (8009430 <tcp_input+0x578>)
 8009208:	4421      	add	r1, r4
 800920a:	1d1a      	adds	r2, r3, #4
 800920c:	6838      	ldr	r0, [r7, #0]
 800920e:	f000 fe67 	bl	8009ee0 <tcp_rst>
 8009212:	e00e      	b.n	8009232 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8009214:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8009216:	bf42      	ittt	mi
 8009218:	4b86      	ldrmi	r3, [pc, #536]	; (8009434 <tcp_input+0x57c>)
 800921a:	681b      	ldrmi	r3, [r3, #0]
 800921c:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 800921e:	9b04      	ldr	r3, [sp, #16]
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b133      	cbz	r3, 8009232 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8009224:	7ea3      	ldrb	r3, [r4, #26]
 8009226:	f043 0302 	orr.w	r3, r3, #2
 800922a:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 800922c:	4620      	mov	r0, r4
 800922e:	f000 fcd9 	bl	8009be4 <tcp_output>
  pbuf_free(p);
 8009232:	4628      	mov	r0, r5
}
 8009234:	b009      	add	sp, #36	; 0x24
 8009236:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 800923a:	f7fd bfe1 	b.w	8007200 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800923e:	68e4      	ldr	r4, [r4, #12]
 8009240:	2c00      	cmp	r4, #0
 8009242:	d1b1      	bne.n	80091a8 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009244:	4b7c      	ldr	r3, [pc, #496]	; (8009438 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8009246:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009248:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800924a:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800924e:	4689      	mov	r9, r1
 8009250:	f1b9 0f00 	cmp.w	r9, #0
 8009254:	d111      	bne.n	800927a <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8009256:	8990      	ldrh	r0, [r2, #12]
 8009258:	f7fb f918 	bl	800448c <lwip_htons>
 800925c:	0743      	lsls	r3, r0, #29
 800925e:	d4e8      	bmi.n	8009232 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009260:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009262:	9a04      	ldr	r2, [sp, #16]
 8009264:	f8db 1000 	ldr.w	r1, [fp]
 8009268:	8810      	ldrh	r0, [r2, #0]
 800926a:	881a      	ldrh	r2, [r3, #0]
 800926c:	4401      	add	r1, r0
 800926e:	9201      	str	r2, [sp, #4]
 8009270:	885b      	ldrh	r3, [r3, #2]
 8009272:	9300      	str	r3, [sp, #0]
 8009274:	4b6e      	ldr	r3, [pc, #440]	; (8009430 <tcp_input+0x578>)
 8009276:	1d1a      	adds	r2, r3, #4
 8009278:	e7c8      	b.n	800920c <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 800927a:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 800927e:	8853      	ldrh	r3, [r2, #2]
 8009280:	4283      	cmp	r3, r0
 8009282:	d107      	bne.n	8009294 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8009284:	f8d9 3000 	ldr.w	r3, [r9]
 8009288:	4573      	cmp	r3, lr
 800928a:	f000 82dd 	beq.w	8009848 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800928e:	2b00      	cmp	r3, #0
 8009290:	f000 82da 	beq.w	8009848 <tcp_input+0x990>
 8009294:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8009296:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800929a:	e7d9      	b.n	8009250 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 800929c:	0798      	lsls	r0, r3, #30
 800929e:	d5c8      	bpl.n	8009232 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 80092a0:	f899 0015 	ldrb.w	r0, [r9, #21]
 80092a4:	f7fe ffb4 	bl	8008210 <tcp_alloc>
    if (npcb == NULL) {
 80092a8:	4604      	mov	r4, r0
 80092aa:	b950      	cbnz	r0, 80092c2 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80092ac:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d0be      	beq.n	8009232 <tcp_input+0x37a>
 80092b4:	4601      	mov	r1, r0
 80092b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80092ba:	f8d9 0010 	ldr.w	r0, [r9, #16]
 80092be:	4798      	blx	r3
 80092c0:	e7b7      	b.n	8009232 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80092c2:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 80092c6:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80092c8:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80092ca:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80092ce:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 80092d0:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 80092d4:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 80092d6:	7813      	ldrb	r3, [r2, #0]
 80092d8:	7852      	ldrb	r2, [r2, #1]
 80092da:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80092de:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 80092e0:	2303      	movs	r3, #3
 80092e2:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 80092e4:	f8db 3000 	ldr.w	r3, [fp]
 80092e8:	3301      	adds	r3, #1
 80092ea:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80092ec:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80092ee:	f7ff f817 	bl	8008320 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80092f2:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 80092f6:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80092f8:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 80092fa:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 80092fc:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80092fe:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8009300:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 8009304:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8009306:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8009308:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800930c:	f899 3008 	ldrb.w	r3, [r9, #8]
 8009310:	f003 030c 	and.w	r3, r3, #12
 8009314:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8009316:	4b49      	ldr	r3, [pc, #292]	; (800943c <tcp_input+0x584>)
 8009318:	681a      	ldr	r2, [r3, #0]
 800931a:	601c      	str	r4, [r3, #0]
 800931c:	60e2      	str	r2, [r4, #12]
 800931e:	f000 ff81 	bl	800a224 <tcp_timer_needed>
 8009322:	4b47      	ldr	r3, [pc, #284]	; (8009440 <tcp_input+0x588>)
 8009324:	2201      	movs	r2, #1
 8009326:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8009328:	9b06      	ldr	r3, [sp, #24]
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	b11b      	cbz	r3, 8009336 <tcp_input+0x47e>
 800932e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8009332:	f7ff fd69 	bl	8008e08 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8009336:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009338:	1d21      	adds	r1, r4, #4
 800933a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 800933c:	89db      	ldrh	r3, [r3, #14]
 800933e:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8009342:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8009346:	f7fe fff7 	bl	8008338 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800934a:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800934c:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800934e:	4620      	mov	r0, r4
 8009350:	f000 fb5a 	bl	8009a08 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8009354:	2800      	cmp	r0, #0
 8009356:	f43f af69 	beq.w	800922c <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 800935a:	2100      	movs	r1, #0
 800935c:	4620      	mov	r0, r4
 800935e:	f7fe fe9f 	bl	80080a0 <tcp_abandon>
 8009362:	e766      	b.n	8009232 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8009364:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8009366:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8009368:	781b      	ldrb	r3, [r3, #0]
 800936a:	0759      	lsls	r1, r3, #29
 800936c:	d535      	bpl.n	80093da <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 800936e:	7d21      	ldrb	r1, [r4, #20]
 8009370:	2902      	cmp	r1, #2
 8009372:	d122      	bne.n	80093ba <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8009374:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009376:	683b      	ldr	r3, [r7, #0]
 8009378:	429a      	cmp	r2, r3
 800937a:	d109      	bne.n	8009390 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 800937c:	f898 3000 	ldrb.w	r3, [r8]
 8009380:	f043 0308 	orr.w	r3, r3, #8
 8009384:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8009388:	7ea3      	ldrb	r3, [r4, #26]
 800938a:	f023 0301 	bic.w	r3, r3, #1
 800938e:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8009390:	f898 3000 	ldrb.w	r3, [r8]
 8009394:	0719      	lsls	r1, r3, #28
 8009396:	f140 81ed 	bpl.w	8009774 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800939a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 800939e:	b11b      	cbz	r3, 80093a8 <tcp_input+0x4f0>
 80093a0:	f06f 010d 	mvn.w	r1, #13
 80093a4:	6920      	ldr	r0, [r4, #16]
 80093a6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80093a8:	4621      	mov	r1, r4
 80093aa:	4824      	ldr	r0, [pc, #144]	; (800943c <tcp_input+0x584>)
 80093ac:	f7fe fce0 	bl	8007d70 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 80093b0:	4621      	mov	r1, r4
 80093b2:	2001      	movs	r0, #1
 80093b4:	f7fd fd9e 	bl	8006ef4 <memp_free>
 80093b8:	e6b0      	b.n	800911c <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 80093ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80093bc:	f8db 3000 	ldr.w	r3, [fp]
 80093c0:	429a      	cmp	r2, r3
 80093c2:	f000 825a 	beq.w	800987a <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	d4e2      	bmi.n	8009390 <tcp_input+0x4d8>
 80093ca:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 80093cc:	1a9b      	subs	r3, r3, r2
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	dcde      	bgt.n	8009390 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80093d2:	7ea3      	ldrb	r3, [r4, #26]
 80093d4:	f043 0302 	orr.w	r3, r3, #2
 80093d8:	e7d9      	b.n	800938e <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80093da:	f013 0102 	ands.w	r1, r3, #2
 80093de:	d003      	beq.n	80093e8 <tcp_input+0x530>
 80093e0:	7d22      	ldrb	r2, [r4, #20]
 80093e2:	3a02      	subs	r2, #2
 80093e4:	2a01      	cmp	r2, #1
 80093e6:	d8f4      	bhi.n	80093d2 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80093e8:	7ea2      	ldrb	r2, [r4, #26]
 80093ea:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 80093ec:	bf5e      	ittt	pl
 80093ee:	4a11      	ldrpl	r2, [pc, #68]	; (8009434 <tcp_input+0x57c>)
 80093f0:	6812      	ldrpl	r2, [r2, #0]
 80093f2:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 80093f4:	2200      	movs	r2, #0
 80093f6:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 80093fa:	9a06      	ldr	r2, [sp, #24]
 80093fc:	8812      	ldrh	r2, [r2, #0]
 80093fe:	b13a      	cbz	r2, 8009410 <tcp_input+0x558>
 8009400:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8009404:	9107      	str	r1, [sp, #28]
 8009406:	9306      	str	r3, [sp, #24]
 8009408:	f7ff fcfe 	bl	8008e08 <tcp_parseopt.isra.1.part.2>
 800940c:	9907      	ldr	r1, [sp, #28]
 800940e:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8009410:	7d22      	ldrb	r2, [r4, #20]
 8009412:	3a02      	subs	r2, #2
 8009414:	2a07      	cmp	r2, #7
 8009416:	d8bb      	bhi.n	8009390 <tcp_input+0x4d8>
 8009418:	e8df f012 	tbh	[pc, r2, lsl #1]
 800941c:	00940014 	.word	0x00940014
 8009420:	010000fc 	.word	0x010000fc
 8009424:	00fc014a 	.word	0x00fc014a
 8009428:	01830164 	.word	0x01830164
 800942c:	0800cb76 	.word	0x0800cb76
 8009430:	20003fb0 	.word	0x20003fb0
 8009434:	200076f0 	.word	0x200076f0
 8009438:	200076f4 	.word	0x200076f4
 800943c:	200076ec 	.word	0x200076ec
 8009440:	200076e8 	.word	0x200076e8
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8009444:	f003 0212 	and.w	r2, r3, #18
 8009448:	2a12      	cmp	r2, #18
 800944a:	d15e      	bne.n	800950a <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 800944c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800944e:	6839      	ldr	r1, [r7, #0]
 8009450:	3201      	adds	r2, #1
 8009452:	428a      	cmp	r2, r1
 8009454:	d159      	bne.n	800950a <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8009456:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 800945a:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 800945c:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 800945e:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8009460:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009462:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8009464:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8009466:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8009468:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800946a:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800946c:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 800946e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8009472:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009476:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8009478:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800947a:	f7fe ff5d 	bl	8008338 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800947e:	f241 121c 	movw	r2, #4380	; 0x111c
 8009482:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8009484:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009486:	0080      	lsls	r0, r0, #2
 8009488:	4293      	cmp	r3, r2
 800948a:	bf38      	it	cc
 800948c:	4613      	movcc	r3, r2
 800948e:	4283      	cmp	r3, r0
 8009490:	bf28      	it	cs
 8009492:	4603      	movcs	r3, r0
 8009494:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009498:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800949c:	b933      	cbnz	r3, 80094ac <tcp_input+0x5f4>
 800949e:	4bad      	ldr	r3, [pc, #692]	; (8009754 <tcp_input+0x89c>)
 80094a0:	f240 321a 	movw	r2, #794	; 0x31a
 80094a4:	49ac      	ldr	r1, [pc, #688]	; (8009758 <tcp_input+0x8a0>)
 80094a6:	48ad      	ldr	r0, [pc, #692]	; (800975c <tcp_input+0x8a4>)
 80094a8:	f002 fc5e 	bl	800bd68 <iprintf>
      --pcb->snd_queuelen;
 80094ac:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 80094b0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 80094b2:	3b01      	subs	r3, #1
 80094b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 80094b8:	b9fe      	cbnz	r6, 80094fa <tcp_input+0x642>
        rseg = pcb->unsent;
 80094ba:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 80094bc:	b936      	cbnz	r6, 80094cc <tcp_input+0x614>
 80094be:	4ba5      	ldr	r3, [pc, #660]	; (8009754 <tcp_input+0x89c>)
 80094c0:	f240 3222 	movw	r2, #802	; 0x322
 80094c4:	49a6      	ldr	r1, [pc, #664]	; (8009760 <tcp_input+0x8a8>)
 80094c6:	48a5      	ldr	r0, [pc, #660]	; (800975c <tcp_input+0x8a4>)
 80094c8:	f002 fc4e 	bl	800bd68 <iprintf>
        pcb->unsent = rseg->next;
 80094cc:	6833      	ldr	r3, [r6, #0]
 80094ce:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 80094d0:	4630      	mov	r0, r6
 80094d2:	f7fe fa1f 	bl	8007914 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 80094d6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80094d8:	b993      	cbnz	r3, 8009500 <tcp_input+0x648>
        pcb->rtime = -1;
 80094da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80094de:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80094e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f43f af74 	beq.w	80093d2 <tcp_input+0x51a>
 80094ea:	2200      	movs	r2, #0
 80094ec:	4621      	mov	r1, r4
 80094ee:	6920      	ldr	r0, [r4, #16]
 80094f0:	4798      	blx	r3
      if (err == ERR_ABRT) {
 80094f2:	300d      	adds	r0, #13
 80094f4:	f47f af6d 	bne.w	80093d2 <tcp_input+0x51a>
 80094f8:	e610      	b.n	800911c <tcp_input+0x264>
        pcb->unacked = rseg->next;
 80094fa:	6833      	ldr	r3, [r6, #0]
 80094fc:	66e3      	str	r3, [r4, #108]	; 0x6c
 80094fe:	e7e7      	b.n	80094d0 <tcp_input+0x618>
        pcb->rtime = 0;
 8009500:	2300      	movs	r3, #0
 8009502:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009504:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009508:	e7ea      	b.n	80094e0 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 800950a:	06db      	lsls	r3, r3, #27
 800950c:	f57f af40 	bpl.w	8009390 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009510:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009512:	9a04      	ldr	r2, [sp, #16]
 8009514:	f8db 1000 	ldr.w	r1, [fp]
 8009518:	8810      	ldrh	r0, [r2, #0]
 800951a:	881a      	ldrh	r2, [r3, #0]
 800951c:	4401      	add	r1, r0
 800951e:	9201      	str	r2, [sp, #4]
 8009520:	885b      	ldrh	r3, [r3, #2]
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	4b8f      	ldr	r3, [pc, #572]	; (8009764 <tcp_input+0x8ac>)
 8009526:	6838      	ldr	r0, [r7, #0]
 8009528:	1d1a      	adds	r2, r3, #4
 800952a:	f000 fcd9 	bl	8009ee0 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800952e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009532:	2b05      	cmp	r3, #5
 8009534:	f63f af2c 	bhi.w	8009390 <tcp_input+0x4d8>
        pcb->rtime = 0;
 8009538:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 800953a:	4620      	mov	r0, r4
        pcb->rtime = 0;
 800953c:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800953e:	f000 fd29 	bl	8009f94 <tcp_rexmit_rto>
 8009542:	e725      	b.n	8009390 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 8009544:	06d8      	lsls	r0, r3, #27
 8009546:	d557      	bpl.n	80095f8 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8009548:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800954a:	6838      	ldr	r0, [r7, #0]
 800954c:	43db      	mvns	r3, r3
 800954e:	42c3      	cmn	r3, r0
 8009550:	d443      	bmi.n	80095da <tcp_input+0x722>
 8009552:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009554:	1ac3      	subs	r3, r0, r3
 8009556:	2b00      	cmp	r3, #0
 8009558:	dc3f      	bgt.n	80095da <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 800955a:	2304      	movs	r3, #4
 800955c:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800955e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009560:	b143      	cbz	r3, 8009574 <tcp_input+0x6bc>
 8009562:	699b      	ldr	r3, [r3, #24]
 8009564:	b933      	cbnz	r3, 8009574 <tcp_input+0x6bc>
 8009566:	4b7b      	ldr	r3, [pc, #492]	; (8009754 <tcp_input+0x89c>)
 8009568:	f240 3251 	movw	r2, #849	; 0x351
 800956c:	497e      	ldr	r1, [pc, #504]	; (8009768 <tcp_input+0x8b0>)
 800956e:	487b      	ldr	r0, [pc, #492]	; (800975c <tcp_input+0x8a4>)
 8009570:	f002 fbfa 	bl	800bd68 <iprintf>
        if (pcb->listener == NULL) {
 8009574:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8009576:	b91b      	cbnz	r3, 8009580 <tcp_input+0x6c8>
            tcp_abort(pcb);
 8009578:	4620      	mov	r0, r4
 800957a:	f7fe fe07 	bl	800818c <tcp_abort>
            goto aborted;
 800957e:	e5cd      	b.n	800911c <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0f8      	beq.n	8009578 <tcp_input+0x6c0>
 8009586:	2200      	movs	r2, #0
 8009588:	4621      	mov	r1, r4
 800958a:	6920      	ldr	r0, [r4, #16]
 800958c:	4798      	blx	r3
        if (err != ERR_OK) {
 800958e:	b110      	cbz	r0, 8009596 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8009590:	300d      	adds	r0, #13
 8009592:	d1f1      	bne.n	8009578 <tcp_input+0x6c0>
 8009594:	e5c2      	b.n	800911c <tcp_input+0x264>
        tcp_receive(pcb);
 8009596:	4620      	mov	r0, r4
 8009598:	f7fe ff42 	bl	8008420 <tcp_receive>
        if (recv_acked != 0) {
 800959c:	9b05      	ldr	r3, [sp, #20]
 800959e:	881b      	ldrh	r3, [r3, #0]
 80095a0:	b113      	cbz	r3, 80095a8 <tcp_input+0x6f0>
          recv_acked--;
 80095a2:	3b01      	subs	r3, #1
 80095a4:	9a05      	ldr	r2, [sp, #20]
 80095a6:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80095a8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80095aa:	f241 111c 	movw	r1, #4380	; 0x111c
 80095ae:	0053      	lsls	r3, r2, #1
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	428b      	cmp	r3, r1
 80095b4:	bf38      	it	cc
 80095b6:	460b      	movcc	r3, r1
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bf28      	it	cs
 80095bc:	4613      	movcs	r3, r2
 80095be:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80095c2:	f898 3000 	ldrb.w	r3, [r8]
 80095c6:	069a      	lsls	r2, r3, #26
 80095c8:	f57f aee2 	bpl.w	8009390 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80095cc:	7ea3      	ldrb	r3, [r4, #26]
 80095ce:	f043 0302 	orr.w	r3, r3, #2
 80095d2:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 80095d4:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 80095d6:	7523      	strb	r3, [r4, #20]
 80095d8:	e6da      	b.n	8009390 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80095da:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80095dc:	9a04      	ldr	r2, [sp, #16]
 80095de:	f8db 1000 	ldr.w	r1, [fp]
 80095e2:	8816      	ldrh	r6, [r2, #0]
 80095e4:	881a      	ldrh	r2, [r3, #0]
 80095e6:	4431      	add	r1, r6
 80095e8:	9201      	str	r2, [sp, #4]
 80095ea:	885b      	ldrh	r3, [r3, #2]
 80095ec:	9300      	str	r3, [sp, #0]
 80095ee:	4b5d      	ldr	r3, [pc, #372]	; (8009764 <tcp_input+0x8ac>)
 80095f0:	1d1a      	adds	r2, r3, #4
 80095f2:	f000 fc75 	bl	8009ee0 <tcp_rst>
 80095f6:	e6cb      	b.n	8009390 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80095f8:	2900      	cmp	r1, #0
 80095fa:	f43f aec9 	beq.w	8009390 <tcp_input+0x4d8>
 80095fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009600:	f8db 2000 	ldr.w	r2, [fp]
 8009604:	3b01      	subs	r3, #1
 8009606:	4293      	cmp	r3, r2
 8009608:	f47f aec2 	bne.w	8009390 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 800960c:	4620      	mov	r0, r4
 800960e:	f000 fcdd 	bl	8009fcc <tcp_rexmit>
 8009612:	e6bd      	b.n	8009390 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8009614:	4620      	mov	r0, r4
 8009616:	f7fe ff03 	bl	8008420 <tcp_receive>
 800961a:	e7d2      	b.n	80095c2 <tcp_input+0x70a>
    tcp_receive(pcb);
 800961c:	4620      	mov	r0, r4
 800961e:	f7fe feff 	bl	8008420 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009622:	f898 3000 	ldrb.w	r3, [r8]
 8009626:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800962a:	9b03      	ldr	r3, [sp, #12]
 800962c:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800962e:	d031      	beq.n	8009694 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009630:	f013 0f10 	tst.w	r3, #16
 8009634:	7ea3      	ldrb	r3, [r4, #26]
 8009636:	d028      	beq.n	800968a <tcp_input+0x7d2>
 8009638:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800963a:	683a      	ldr	r2, [r7, #0]
 800963c:	4291      	cmp	r1, r2
 800963e:	d124      	bne.n	800968a <tcp_input+0x7d2>
 8009640:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 8009642:	bb12      	cbnz	r2, 800968a <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 8009644:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 8009648:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 800964a:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 800964c:	f7fe f98e 	bl	800796c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8009650:	f8d9 3000 	ldr.w	r3, [r9]
 8009654:	429c      	cmp	r4, r3
 8009656:	d10a      	bne.n	800966e <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 8009658:	68e3      	ldr	r3, [r4, #12]
 800965a:	f8c9 3000 	str.w	r3, [r9]
 800965e:	e008      	b.n	8009672 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 8009660:	68da      	ldr	r2, [r3, #12]
 8009662:	4294      	cmp	r4, r2
 8009664:	d102      	bne.n	800966c <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 8009666:	68e2      	ldr	r2, [r4, #12]
 8009668:	60da      	str	r2, [r3, #12]
 800966a:	e002      	b.n	8009672 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 800966c:	4613      	mov	r3, r2
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1f6      	bne.n	8009660 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 8009672:	2201      	movs	r2, #1
 8009674:	4b3d      	ldr	r3, [pc, #244]	; (800976c <tcp_input+0x8b4>)
 8009676:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 8009678:	230a      	movs	r3, #10
 800967a:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800967c:	4b3c      	ldr	r3, [pc, #240]	; (8009770 <tcp_input+0x8b8>)
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	601c      	str	r4, [r3, #0]
 8009682:	60e2      	str	r2, [r4, #12]
 8009684:	f000 fdce 	bl	800a224 <tcp_timer_needed>
 8009688:	e682      	b.n	8009390 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 800968a:	f043 0302 	orr.w	r3, r3, #2
 800968e:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009690:	2308      	movs	r3, #8
 8009692:	e7a0      	b.n	80095d6 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009694:	06db      	lsls	r3, r3, #27
 8009696:	f57f ae7b 	bpl.w	8009390 <tcp_input+0x4d8>
 800969a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	429a      	cmp	r2, r3
 80096a0:	f47f ae76 	bne.w	8009390 <tcp_input+0x4d8>
 80096a4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	f47f ae72 	bne.w	8009390 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 80096ac:	2306      	movs	r3, #6
 80096ae:	e792      	b.n	80095d6 <tcp_input+0x71e>
    tcp_receive(pcb);
 80096b0:	4620      	mov	r0, r4
 80096b2:	f7fe feb5 	bl	8008420 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80096b6:	f898 3000 	ldrb.w	r3, [r8]
 80096ba:	069f      	lsls	r7, r3, #26
 80096bc:	f57f ae68 	bpl.w	8009390 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 80096c0:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80096c2:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 80096c4:	f043 0302 	orr.w	r3, r3, #2
 80096c8:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 80096ca:	f7fe f94f 	bl	800796c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80096ce:	f8d9 3000 	ldr.w	r3, [r9]
 80096d2:	429c      	cmp	r4, r3
 80096d4:	d0c0      	beq.n	8009658 <tcp_input+0x7a0>
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0cb      	beq.n	8009672 <tcp_input+0x7ba>
 80096da:	68da      	ldr	r2, [r3, #12]
 80096dc:	4294      	cmp	r4, r2
 80096de:	d0c2      	beq.n	8009666 <tcp_input+0x7ae>
 80096e0:	4613      	mov	r3, r2
 80096e2:	e7f8      	b.n	80096d6 <tcp_input+0x81e>
    tcp_receive(pcb);
 80096e4:	4620      	mov	r0, r4
 80096e6:	f7fe fe9b 	bl	8008420 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80096ea:	9b03      	ldr	r3, [sp, #12]
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	06de      	lsls	r6, r3, #27
 80096f0:	f57f ae4e 	bpl.w	8009390 <tcp_input+0x4d8>
 80096f4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80096f6:	683b      	ldr	r3, [r7, #0]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	f47f ae49 	bne.w	8009390 <tcp_input+0x4d8>
 80096fe:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009700:	2b00      	cmp	r3, #0
 8009702:	f47f ae45 	bne.w	8009390 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8009706:	4620      	mov	r0, r4
 8009708:	f7fe f930 	bl	800796c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800970c:	f8d9 3000 	ldr.w	r3, [r9]
 8009710:	429c      	cmp	r4, r3
 8009712:	d0a1      	beq.n	8009658 <tcp_input+0x7a0>
 8009714:	2b00      	cmp	r3, #0
 8009716:	d0ac      	beq.n	8009672 <tcp_input+0x7ba>
 8009718:	68da      	ldr	r2, [r3, #12]
 800971a:	4294      	cmp	r4, r2
 800971c:	d0a3      	beq.n	8009666 <tcp_input+0x7ae>
 800971e:	4613      	mov	r3, r2
 8009720:	e7f8      	b.n	8009714 <tcp_input+0x85c>
    tcp_receive(pcb);
 8009722:	4620      	mov	r0, r4
 8009724:	f7fe fe7c 	bl	8008420 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009728:	9b03      	ldr	r3, [sp, #12]
 800972a:	781b      	ldrb	r3, [r3, #0]
 800972c:	06d8      	lsls	r0, r3, #27
 800972e:	f57f ae2f 	bpl.w	8009390 <tcp_input+0x4d8>
 8009732:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	f47f ae2a 	bne.w	8009390 <tcp_input+0x4d8>
 800973c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800973e:	2b00      	cmp	r3, #0
 8009740:	f47f ae26 	bne.w	8009390 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 8009744:	f898 3000 	ldrb.w	r3, [r8]
 8009748:	f043 0310 	orr.w	r3, r3, #16
 800974c:	f888 3000 	strb.w	r3, [r8]
 8009750:	e61e      	b.n	8009390 <tcp_input+0x4d8>
 8009752:	bf00      	nop
 8009754:	0800dfd8 	.word	0x0800dfd8
 8009758:	0800df77 	.word	0x0800df77
 800975c:	0800cb76 	.word	0x0800cb76
 8009760:	0800df8d 	.word	0x0800df8d
 8009764:	20003fb0 	.word	0x20003fb0
 8009768:	0800dfa0 	.word	0x0800dfa0
 800976c:	200076e8 	.word	0x200076e8
 8009770:	200076fc 	.word	0x200076fc
        if (recv_acked > 0) {
 8009774:	9b05      	ldr	r3, [sp, #20]
 8009776:	881a      	ldrh	r2, [r3, #0]
 8009778:	b122      	cbz	r2, 8009784 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800977a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800977c:	b9eb      	cbnz	r3, 80097ba <tcp_input+0x902>
          recv_acked = 0;
 800977e:	2300      	movs	r3, #0
 8009780:	9a05      	ldr	r2, [sp, #20]
 8009782:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009784:	4620      	mov	r0, r4
 8009786:	f7ff fb77 	bl	8008e78 <tcp_input_delayed_close>
 800978a:	2800      	cmp	r0, #0
 800978c:	f47f acc6 	bne.w	800911c <tcp_input+0x264>
        if (recv_data != NULL) {
 8009790:	f8da 3000 	ldr.w	r3, [sl]
 8009794:	b33b      	cbz	r3, 80097e6 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009796:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009798:	b133      	cbz	r3, 80097a8 <tcp_input+0x8f0>
 800979a:	4b40      	ldr	r3, [pc, #256]	; (800989c <tcp_input+0x9e4>)
 800979c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 80097a0:	493f      	ldr	r1, [pc, #252]	; (80098a0 <tcp_input+0x9e8>)
 80097a2:	4840      	ldr	r0, [pc, #256]	; (80098a4 <tcp_input+0x9ec>)
 80097a4:	f002 fae0 	bl	800bd68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80097a8:	7ea3      	ldrb	r3, [r4, #26]
 80097aa:	f013 0310 	ands.w	r3, r3, #16
 80097ae:	d00a      	beq.n	80097c6 <tcp_input+0x90e>
            pbuf_free(recv_data);
 80097b0:	f8da 0000 	ldr.w	r0, [sl]
 80097b4:	f7fd fd24 	bl	8007200 <pbuf_free>
 80097b8:	e6de      	b.n	8009578 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80097ba:	4621      	mov	r1, r4
 80097bc:	6920      	ldr	r0, [r4, #16]
 80097be:	4798      	blx	r3
            if (err == ERR_ABRT) {
 80097c0:	300d      	adds	r0, #13
 80097c2:	d1dc      	bne.n	800977e <tcp_input+0x8c6>
 80097c4:	e4aa      	b.n	800911c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80097c6:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 80097ca:	b31e      	cbz	r6, 8009814 <tcp_input+0x95c>
 80097cc:	f8da 2000 	ldr.w	r2, [sl]
 80097d0:	4621      	mov	r1, r4
 80097d2:	6920      	ldr	r0, [r4, #16]
 80097d4:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 80097d6:	f110 0f0d 	cmn.w	r0, #13
 80097da:	f43f ac9f 	beq.w	800911c <tcp_input+0x264>
          if (err != ERR_OK) {
 80097de:	b110      	cbz	r0, 80097e6 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 80097e0:	f8da 3000 	ldr.w	r3, [sl]
 80097e4:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 80097e6:	f898 3000 	ldrb.w	r3, [r8]
 80097ea:	069a      	lsls	r2, r3, #26
 80097ec:	d505      	bpl.n	80097fa <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 80097ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80097f0:	b1c3      	cbz	r3, 8009824 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80097f2:	7b5a      	ldrb	r2, [r3, #13]
 80097f4:	f042 0220 	orr.w	r2, r2, #32
 80097f8:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 80097fa:	2200      	movs	r2, #0
 80097fc:	4b2a      	ldr	r3, [pc, #168]	; (80098a8 <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 80097fe:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009800:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009802:	f7ff fb39 	bl	8008e78 <tcp_input_delayed_close>
 8009806:	2800      	cmp	r0, #0
 8009808:	f47f ac88 	bne.w	800911c <tcp_input+0x264>
        tcp_output(pcb);
 800980c:	4620      	mov	r0, r4
 800980e:	f000 f9e9 	bl	8009be4 <tcp_output>
 8009812:	e483      	b.n	800911c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009814:	4633      	mov	r3, r6
 8009816:	f8da 2000 	ldr.w	r2, [sl]
 800981a:	4621      	mov	r1, r4
 800981c:	4630      	mov	r0, r6
 800981e:	f7fe fba7 	bl	8007f70 <tcp_recv_null>
 8009822:	e7d8      	b.n	80097d6 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009824:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009826:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800982a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800982e:	bf1c      	itt	ne
 8009830:	3301      	addne	r3, #1
 8009832:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009834:	2e00      	cmp	r6, #0
 8009836:	d0e0      	beq.n	80097fa <tcp_input+0x942>
 8009838:	2300      	movs	r3, #0
 800983a:	4621      	mov	r1, r4
 800983c:	6920      	ldr	r0, [r4, #16]
 800983e:	461a      	mov	r2, r3
 8009840:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 8009842:	300d      	adds	r0, #13
 8009844:	d1d9      	bne.n	80097fa <tcp_input+0x942>
 8009846:	e469      	b.n	800911c <tcp_input+0x264>
      if (prev != NULL) {
 8009848:	b13c      	cbz	r4, 800985a <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800984a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800984e:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009850:	4b16      	ldr	r3, [pc, #88]	; (80098ac <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8009852:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8009856:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 800985a:	9b03      	ldr	r3, [sp, #12]
 800985c:	781b      	ldrb	r3, [r3, #0]
 800985e:	0759      	lsls	r1, r3, #29
 8009860:	f53f ace7 	bmi.w	8009232 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 8009864:	06dc      	lsls	r4, r3, #27
 8009866:	f57f ad19 	bpl.w	800929c <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800986a:	9b04      	ldr	r3, [sp, #16]
 800986c:	f8db 1000 	ldr.w	r1, [fp]
 8009870:	881c      	ldrh	r4, [r3, #0]
 8009872:	8813      	ldrh	r3, [r2, #0]
 8009874:	e88d 0009 	stmia.w	sp, {r0, r3}
 8009878:	e4c5      	b.n	8009206 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800987a:	2900      	cmp	r1, #0
 800987c:	f47f ad7e 	bne.w	800937c <tcp_input+0x4c4>
 8009880:	4b06      	ldr	r3, [pc, #24]	; (800989c <tcp_input+0x9e4>)
 8009882:	f240 22e7 	movw	r2, #743	; 0x2e7
 8009886:	490a      	ldr	r1, [pc, #40]	; (80098b0 <tcp_input+0x9f8>)
 8009888:	4806      	ldr	r0, [pc, #24]	; (80098a4 <tcp_input+0x9ec>)
 800988a:	f002 fa6d 	bl	800bd68 <iprintf>
 800988e:	e575      	b.n	800937c <tcp_input+0x4c4>
      if (prev != NULL) {
 8009890:	f1ba 0f00 	cmp.w	sl, #0
 8009894:	f47f abff 	bne.w	8009096 <tcp_input+0x1de>
 8009898:	e40e      	b.n	80090b8 <tcp_input+0x200>
 800989a:	bf00      	nop
 800989c:	0800dfd8 	.word	0x0800dfd8
 80098a0:	0800dfbe 	.word	0x0800dfbe
 80098a4:	0800cb76 	.word	0x0800cb76
 80098a8:	20007700 	.word	0x20007700
 80098ac:	200076f4 	.word	0x200076f4
 80098b0:	0800df57 	.word	0x0800df57

080098b4 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 80098b4:	4a02      	ldr	r2, [pc, #8]	; (80098c0 <tcp_trigger_input_pcb_close+0xc>)
 80098b6:	7813      	ldrb	r3, [r2, #0]
 80098b8:	f043 0310 	orr.w	r3, r3, #16
 80098bc:	7013      	strb	r3, [r2, #0]
 80098be:	4770      	bx	lr
 80098c0:	20003f5c 	.word	0x20003f5c

080098c4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80098c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c8:	f89d a020 	ldrb.w	sl, [sp, #32]
 80098cc:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80098ce:	2003      	movs	r0, #3
{
 80098d0:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80098d2:	f01a 0f01 	tst.w	sl, #1
{
 80098d6:	4616      	mov	r6, r2
 80098d8:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80098da:	bf14      	ite	ne
 80098dc:	2504      	movne	r5, #4
 80098de:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80098e0:	f7fd faec 	bl	8006ebc <memp_malloc>
 80098e4:	4604      	mov	r4, r0
 80098e6:	b928      	cbnz	r0, 80098f4 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80098e8:	4638      	mov	r0, r7
 80098ea:	f7fd fc89 	bl	8007200 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 80098ee:	4620      	mov	r0, r4
 80098f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 80098f4:	2300      	movs	r3, #0
  seg->flags = optflags;
 80098f6:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80098fa:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 80098fe:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009902:	893b      	ldrh	r3, [r7, #8]
 8009904:	4553      	cmp	r3, sl
 8009906:	d205      	bcs.n	8009914 <tcp_create_segment+0x50>
 8009908:	4b1e      	ldr	r3, [pc, #120]	; (8009984 <tcp_create_segment+0xc0>)
 800990a:	22ba      	movs	r2, #186	; 0xba
 800990c:	491e      	ldr	r1, [pc, #120]	; (8009988 <tcp_create_segment+0xc4>)
 800990e:	481f      	ldr	r0, [pc, #124]	; (800998c <tcp_create_segment+0xc8>)
 8009910:	f002 fa2a 	bl	800bd68 <iprintf>
  seg->len = p->tot_len - optlen;
 8009914:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009916:	4638      	mov	r0, r7
 8009918:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800991a:	eba3 030a 	sub.w	r3, r3, sl
 800991e:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009920:	f7fd fc68 	bl	80071f4 <pbuf_header>
 8009924:	4607      	mov	r7, r0
 8009926:	b120      	cbz	r0, 8009932 <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 8009928:	4620      	mov	r0, r4
    return NULL;
 800992a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800992c:	f7fd fff2 	bl	8007914 <tcp_seg_free>
    return NULL;
 8009930:	e7dd      	b.n	80098ee <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009932:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009934:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009936:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800993a:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800993e:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009940:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8009944:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009948:	f7fa fda0 	bl	800448c <lwip_htons>
 800994c:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009950:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009954:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 8009958:	f7fa fd98 	bl	800448c <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800995c:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009960:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009964:	4648      	mov	r0, r9
 8009966:	f7fa fd94 	bl	8004492 <lwip_htonl>
 800996a:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800996e:	b2a8      	uxth	r0, r5
 8009970:	f8d4 800c 	ldr.w	r8, [r4, #12]
 8009974:	f7fa fd8a 	bl	800448c <lwip_htons>
  seg->tcphdr->urgp = 0;
 8009978:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 800997a:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 800997e:	749f      	strb	r7, [r3, #18]
 8009980:	74df      	strb	r7, [r3, #19]
  return seg;
 8009982:	e7b4      	b.n	80098ee <tcp_create_segment+0x2a>
 8009984:	0800e2db 	.word	0x0800e2db
 8009988:	0800e163 	.word	0x0800e163
 800998c:	0800cb76 	.word	0x0800cb76

08009990 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009990:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009992:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009994:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009996:	4605      	mov	r5, r0
 8009998:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800999a:	2001      	movs	r0, #1
 800999c:	2200      	movs	r2, #0
 800999e:	f7fd fc99 	bl	80072d4 <pbuf_alloc>
  if (p != NULL) {
 80099a2:	4606      	mov	r6, r0
 80099a4:	b340      	cbz	r0, 80099f8 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80099a6:	8943      	ldrh	r3, [r0, #10]
 80099a8:	2b13      	cmp	r3, #19
 80099aa:	dc05      	bgt.n	80099b8 <tcp_output_alloc_header.constprop.0+0x28>
 80099ac:	4b13      	ldr	r3, [pc, #76]	; (80099fc <tcp_output_alloc_header.constprop.0+0x6c>)
 80099ae:	2273      	movs	r2, #115	; 0x73
 80099b0:	4913      	ldr	r1, [pc, #76]	; (8009a00 <tcp_output_alloc_header.constprop.0+0x70>)
 80099b2:	4814      	ldr	r0, [pc, #80]	; (8009a04 <tcp_output_alloc_header.constprop.0+0x74>)
 80099b4:	f002 f9d8 	bl	800bd68 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 80099b8:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 80099ba:	8ae8      	ldrh	r0, [r5, #22]
 80099bc:	f7fa fd66 	bl	800448c <lwip_htons>
 80099c0:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80099c2:	8b28      	ldrh	r0, [r5, #24]
 80099c4:	f7fa fd62 	bl	800448c <lwip_htons>
    tcphdr->seqno = seqno_be;
 80099c8:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80099ca:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80099cc:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80099ce:	f7fa fd60 	bl	8004492 <lwip_htonl>
 80099d2:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80099d4:	f245 0010 	movw	r0, #20496	; 0x5010
 80099d8:	f7fa fd58 	bl	800448c <lwip_htons>
 80099dc:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80099de:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 80099e0:	f7fa fd54 	bl	800448c <lwip_htons>
    tcphdr->chksum = 0;
 80099e4:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80099e6:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 80099e8:	7423      	strb	r3, [r4, #16]
 80099ea:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 80099ec:	74a3      	strb	r3, [r4, #18]
 80099ee:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80099f0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80099f2:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80099f4:	4413      	add	r3, r2
 80099f6:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 80099f8:	4630      	mov	r0, r6
 80099fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099fc:	0800e2db 	.word	0x0800e2db
 8009a00:	0800e2ad 	.word	0x0800e2ad
 8009a04:	0800cb76 	.word	0x0800cb76

08009a08 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009a08:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a0c:	f011 0803 	ands.w	r8, r1, #3
{
 8009a10:	4604      	mov	r4, r0
 8009a12:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009a14:	d106      	bne.n	8009a24 <tcp_enqueue_flags+0x1c>
 8009a16:	4b40      	ldr	r3, [pc, #256]	; (8009b18 <tcp_enqueue_flags+0x110>)
 8009a18:	f240 321b 	movw	r2, #795	; 0x31b
 8009a1c:	493f      	ldr	r1, [pc, #252]	; (8009b1c <tcp_enqueue_flags+0x114>)
 8009a1e:	4840      	ldr	r0, [pc, #256]	; (8009b20 <tcp_enqueue_flags+0x118>)
 8009a20:	f002 f9a2 	bl	800bd68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009a24:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009a28:	2b08      	cmp	r3, #8
 8009a2a:	d90a      	bls.n	8009a42 <tcp_enqueue_flags+0x3a>
 8009a2c:	07f1      	lsls	r1, r6, #31
 8009a2e:	d408      	bmi.n	8009a42 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 8009a30:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    pcb->flags |= TF_NAGLEMEMERR;
 8009a36:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009a3a:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 8009a3c:	b003      	add	sp, #12
 8009a3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a42:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a46:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 8009a48:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	bf15      	itete	ne
 8009a4e:	2704      	movne	r7, #4
 8009a50:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 8009a52:	f04f 0901 	movne.w	r9, #1
 8009a56:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7fd fc3a 	bl	80072d4 <pbuf_alloc>
 8009a60:	4605      	mov	r5, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d0e4      	beq.n	8009a30 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009a66:	8943      	ldrh	r3, [r0, #10]
 8009a68:	42bb      	cmp	r3, r7
 8009a6a:	d206      	bcs.n	8009a7a <tcp_enqueue_flags+0x72>
 8009a6c:	4b2a      	ldr	r3, [pc, #168]	; (8009b18 <tcp_enqueue_flags+0x110>)
 8009a6e:	f240 3241 	movw	r2, #833	; 0x341
 8009a72:	492c      	ldr	r1, [pc, #176]	; (8009b24 <tcp_enqueue_flags+0x11c>)
 8009a74:	482a      	ldr	r0, [pc, #168]	; (8009b20 <tcp_enqueue_flags+0x118>)
 8009a76:	f002 f977 	bl	800bd68 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009a7a:	f8cd 9000 	str.w	r9, [sp]
 8009a7e:	4629      	mov	r1, r5
 8009a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009a82:	4632      	mov	r2, r6
 8009a84:	4620      	mov	r0, r4
 8009a86:	f7ff ff1d 	bl	80098c4 <tcp_create_segment>
 8009a8a:	4605      	mov	r5, r0
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d0cf      	beq.n	8009a30 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009a90:	68c3      	ldr	r3, [r0, #12]
 8009a92:	079a      	lsls	r2, r3, #30
 8009a94:	d006      	beq.n	8009aa4 <tcp_enqueue_flags+0x9c>
 8009a96:	4b20      	ldr	r3, [pc, #128]	; (8009b18 <tcp_enqueue_flags+0x110>)
 8009a98:	f240 3249 	movw	r2, #841	; 0x349
 8009a9c:	4922      	ldr	r1, [pc, #136]	; (8009b28 <tcp_enqueue_flags+0x120>)
 8009a9e:	4820      	ldr	r0, [pc, #128]	; (8009b20 <tcp_enqueue_flags+0x118>)
 8009aa0:	f002 f962 	bl	800bd68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009aa4:	892b      	ldrh	r3, [r5, #8]
 8009aa6:	b133      	cbz	r3, 8009ab6 <tcp_enqueue_flags+0xae>
 8009aa8:	4b1b      	ldr	r3, [pc, #108]	; (8009b18 <tcp_enqueue_flags+0x110>)
 8009aaa:	f240 324a 	movw	r2, #842	; 0x34a
 8009aae:	491f      	ldr	r1, [pc, #124]	; (8009b2c <tcp_enqueue_flags+0x124>)
 8009ab0:	481b      	ldr	r0, [pc, #108]	; (8009b20 <tcp_enqueue_flags+0x118>)
 8009ab2:	f002 f959 	bl	800bd68 <iprintf>
  if (pcb->unsent == NULL) {
 8009ab6:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009ab8:	bb4b      	cbnz	r3, 8009b0e <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 8009aba:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009ac2:	f1b8 0f00 	cmp.w	r8, #0
 8009ac6:	d002      	beq.n	8009ace <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 8009ac8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009aca:	3301      	adds	r3, #1
 8009acc:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 8009ace:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8009ad0:	bf42      	ittt	mi
 8009ad2:	7ea3      	ldrbmi	r3, [r4, #26]
 8009ad4:	f043 0320 	orrmi.w	r3, r3, #32
 8009ad8:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009ada:	6868      	ldr	r0, [r5, #4]
 8009adc:	f7fd fd46 	bl	800756c <pbuf_clen>
 8009ae0:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009ae4:	4418      	add	r0, r3
 8009ae6:	b280      	uxth	r0, r0
 8009ae8:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d0a5      	beq.n	8009a3c <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009af0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009af2:	b948      	cbnz	r0, 8009b08 <tcp_enqueue_flags+0x100>
 8009af4:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8009af6:	2c00      	cmp	r4, #0
 8009af8:	d1a0      	bne.n	8009a3c <tcp_enqueue_flags+0x34>
 8009afa:	4b07      	ldr	r3, [pc, #28]	; (8009b18 <tcp_enqueue_flags+0x110>)
 8009afc:	f240 326d 	movw	r2, #877	; 0x36d
 8009b00:	490b      	ldr	r1, [pc, #44]	; (8009b30 <tcp_enqueue_flags+0x128>)
 8009b02:	4807      	ldr	r0, [pc, #28]	; (8009b20 <tcp_enqueue_flags+0x118>)
 8009b04:	f002 f930 	bl	800bd68 <iprintf>
  return ERR_OK;
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e797      	b.n	8009a3c <tcp_enqueue_flags+0x34>
 8009b0c:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009b0e:	681a      	ldr	r2, [r3, #0]
 8009b10:	2a00      	cmp	r2, #0
 8009b12:	d1fb      	bne.n	8009b0c <tcp_enqueue_flags+0x104>
    useg->next = seg;
 8009b14:	601d      	str	r5, [r3, #0]
 8009b16:	e7d1      	b.n	8009abc <tcp_enqueue_flags+0xb4>
 8009b18:	0800e2db 	.word	0x0800e2db
 8009b1c:	0800e178 	.word	0x0800e178
 8009b20:	0800cb76 	.word	0x0800cb76
 8009b24:	0800e1cd 	.word	0x0800e1cd
 8009b28:	0800e206 	.word	0x0800e206
 8009b2c:	0800e21e 	.word	0x0800e21e
 8009b30:	0800e248 	.word	0x0800e248

08009b34 <tcp_send_fin>:
{
 8009b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 8009b36:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 8009b38:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 8009b3a:	b934      	cbnz	r4, 8009b4a <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	2101      	movs	r1, #1
}
 8009b40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8009b44:	f7ff bf60 	b.w	8009a08 <tcp_enqueue_flags>
 8009b48:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009b4a:	6823      	ldr	r3, [r4, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d1fb      	bne.n	8009b48 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8009b50:	68e3      	ldr	r3, [r4, #12]
 8009b52:	8998      	ldrh	r0, [r3, #12]
 8009b54:	f7fa fc9a 	bl	800448c <lwip_htons>
 8009b58:	f010 0707 	ands.w	r7, r0, #7
 8009b5c:	d1ee      	bne.n	8009b3c <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009b5e:	68e6      	ldr	r6, [r4, #12]
 8009b60:	2001      	movs	r0, #1
 8009b62:	89b4      	ldrh	r4, [r6, #12]
 8009b64:	f7fa fc92 	bl	800448c <lwip_htons>
 8009b68:	4320      	orrs	r0, r4
 8009b6a:	81b0      	strh	r0, [r6, #12]
}
 8009b6c:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 8009b6e:	7eab      	ldrb	r3, [r5, #26]
 8009b70:	f043 0320 	orr.w	r3, r3, #32
 8009b74:	76ab      	strb	r3, [r5, #26]
}
 8009b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009b78 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8009b78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009b7a:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8009b7c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009b7e:	f7fa fc88 	bl	8004492 <lwip_htonl>
 8009b82:	2100      	movs	r1, #0
 8009b84:	4602      	mov	r2, r0
 8009b86:	4620      	mov	r0, r4
 8009b88:	f7ff ff02 	bl	8009990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009b8c:	4606      	mov	r6, r0
 8009b8e:	b940      	cbnz	r0, 8009ba2 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009b90:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009b92:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009b96:	f043 0303 	orr.w	r3, r3, #3
 8009b9a:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 8009b9c:	4628      	mov	r0, r5
 8009b9e:	b004      	add	sp, #16
 8009ba0:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009ba2:	1d25      	adds	r5, r4, #4
 8009ba4:	4628      	mov	r0, r5
 8009ba6:	f7fc f9dd 	bl	8005f64 <ip4_route>
  if (netif == NULL) {
 8009baa:	b1a0      	cbz	r0, 8009bd6 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8009bac:	2206      	movs	r2, #6
 8009bae:	9002      	str	r0, [sp, #8]
 8009bb0:	7aa3      	ldrb	r3, [r4, #10]
 8009bb2:	4621      	mov	r1, r4
 8009bb4:	9201      	str	r2, [sp, #4]
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	7a62      	ldrb	r2, [r4, #9]
 8009bba:	9200      	str	r2, [sp, #0]
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	f7fc fb43 	bl	8006248 <ip4_output_if>
 8009bc2:	4605      	mov	r5, r0
  pbuf_free(p);
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f7fd fb1b 	bl	8007200 <pbuf_free>
 8009bca:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 8009bcc:	b135      	cbz	r5, 8009bdc <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009bce:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009bd2:	76a3      	strb	r3, [r4, #26]
 8009bd4:	e7e2      	b.n	8009b9c <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8009bd6:	f06f 0503 	mvn.w	r5, #3
 8009bda:	e7f3      	b.n	8009bc4 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009bdc:	f023 0303 	bic.w	r3, r3, #3
 8009be0:	e7f7      	b.n	8009bd2 <tcp_send_empty_ack+0x5a>
	...

08009be4 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009be4:	7d03      	ldrb	r3, [r0, #20]
 8009be6:	2b01      	cmp	r3, #1
{
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bec:	4604      	mov	r4, r0
 8009bee:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009bf0:	d106      	bne.n	8009c00 <tcp_output+0x1c>
 8009bf2:	4ba5      	ldr	r3, [pc, #660]	; (8009e88 <tcp_output+0x2a4>)
 8009bf4:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009bf8:	49a4      	ldr	r1, [pc, #656]	; (8009e8c <tcp_output+0x2a8>)
 8009bfa:	48a5      	ldr	r0, [pc, #660]	; (8009e90 <tcp_output+0x2ac>)
 8009bfc:	f002 f8b4 	bl	800bd68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009c00:	4ba4      	ldr	r3, [pc, #656]	; (8009e94 <tcp_output+0x2b0>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	429c      	cmp	r4, r3
 8009c06:	d052      	beq.n	8009cae <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009c08:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009c0c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009c10:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009c12:	429f      	cmp	r7, r3
 8009c14:	bf28      	it	cs
 8009c16:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009c18:	7ea3      	ldrb	r3, [r4, #26]
 8009c1a:	0799      	lsls	r1, r3, #30
 8009c1c:	d510      	bpl.n	8009c40 <tcp_output+0x5c>
 8009c1e:	b92d      	cbnz	r5, 8009c2c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8009c20:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8009c22:	b007      	add	sp, #28
 8009c24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8009c28:	f7ff bfa6 	b.w	8009b78 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 8009c2c:	68eb      	ldr	r3, [r5, #12]
 8009c2e:	6858      	ldr	r0, [r3, #4]
 8009c30:	f7fa fc2f 	bl	8004492 <lwip_htonl>
 8009c34:	892b      	ldrh	r3, [r5, #8]
 8009c36:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009c38:	1a9b      	subs	r3, r3, r2
 8009c3a:	4418      	add	r0, r3
     (seg == NULL ||
 8009c3c:	4287      	cmp	r7, r0
 8009c3e:	d3ef      	bcc.n	8009c20 <tcp_output+0x3c>
  useg = pcb->unacked;
 8009c40:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 8009c42:	2e00      	cmp	r6, #0
 8009c44:	d136      	bne.n	8009cb4 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009c46:	f104 0804 	add.w	r8, r4, #4
 8009c4a:	4640      	mov	r0, r8
 8009c4c:	f7fc f98a 	bl	8005f64 <ip4_route>
  if (netif == NULL) {
 8009c50:	4681      	mov	r9, r0
 8009c52:	2800      	cmp	r0, #0
 8009c54:	f000 813c 	beq.w	8009ed0 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 8009c58:	b10c      	cbz	r4, 8009c5e <tcp_output+0x7a>
 8009c5a:	6823      	ldr	r3, [r4, #0]
 8009c5c:	b913      	cbnz	r3, 8009c64 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009c5e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009c62:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 8009c64:	b1d5      	cbz	r5, 8009c9c <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009c66:	68eb      	ldr	r3, [r5, #12]
 8009c68:	6858      	ldr	r0, [r3, #4]
 8009c6a:	f7fa fc12 	bl	8004492 <lwip_htonl>
 8009c6e:	892b      	ldrh	r3, [r5, #8]
 8009c70:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8009c72:	1a9b      	subs	r3, r3, r2
 8009c74:	4418      	add	r0, r3
  if (seg != NULL &&
 8009c76:	4287      	cmp	r7, r0
 8009c78:	d26f      	bcs.n	8009d5a <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8009c7a:	2f00      	cmp	r7, #0
 8009c7c:	d06d      	beq.n	8009d5a <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8009c7e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 8009c82:	429f      	cmp	r7, r3
 8009c84:	d169      	bne.n	8009d5a <tcp_output+0x176>
 8009c86:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d166      	bne.n	8009d5a <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 8009c8c:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009c90:	b923      	cbnz	r3, 8009c9c <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8009c92:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009c96:	2301      	movs	r3, #1
 8009c98:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 8009c9c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009c9e:	b913      	cbnz	r3, 8009ca6 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009ca6:	7ea3      	ldrb	r3, [r4, #26]
 8009ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009cac:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 8009cae:	2000      	movs	r0, #0
 8009cb0:	e0e6      	b.n	8009e80 <tcp_output+0x29c>
 8009cb2:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8009cb4:	6833      	ldr	r3, [r6, #0]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d1fb      	bne.n	8009cb2 <tcp_output+0xce>
 8009cba:	e7c4      	b.n	8009c46 <tcp_output+0x62>
    pcb->unsent = seg->next;
 8009cbc:	682b      	ldr	r3, [r5, #0]
 8009cbe:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009cc0:	7d23      	ldrb	r3, [r4, #20]
 8009cc2:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009cc4:	bf1e      	ittt	ne
 8009cc6:	7ea3      	ldrbne	r3, [r4, #26]
 8009cc8:	f023 0303 	bicne.w	r3, r3, #3
 8009ccc:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009cce:	68eb      	ldr	r3, [r5, #12]
 8009cd0:	6858      	ldr	r0, [r3, #4]
 8009cd2:	f7fa fbde 	bl	8004492 <lwip_htonl>
 8009cd6:	68e9      	ldr	r1, [r5, #12]
 8009cd8:	4683      	mov	fp, r0
 8009cda:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8009cde:	8988      	ldrh	r0, [r1, #12]
 8009ce0:	f7fa fbd4 	bl	800448c <lwip_htons>
 8009ce4:	f010 0003 	ands.w	r0, r0, #3
 8009ce8:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 8009cec:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009cee:	bf18      	it	ne
 8009cf0:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 8009cf2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009cf6:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009cf8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8009cfa:	1a1b      	subs	r3, r3, r0
 8009cfc:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 8009cfe:	bfb8      	it	lt
 8009d00:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009d02:	8990      	ldrh	r0, [r2, #12]
 8009d04:	f7fa fbc2 	bl	800448c <lwip_htons>
 8009d08:	f010 0003 	ands.w	r0, r0, #3
 8009d0c:	bf18      	it	ne
 8009d0e:	2001      	movne	r0, #1
 8009d10:	eb10 0f0a 	cmn.w	r0, sl
 8009d14:	f000 80d8 	beq.w	8009ec8 <tcp_output+0x2e4>
      seg->next = NULL;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 8009d1c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d1e:	b913      	cbnz	r3, 8009d26 <tcp_output+0x142>
        pcb->unacked = seg;
 8009d20:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8009d22:	462e      	mov	r6, r5
 8009d24:	e016      	b.n	8009d54 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009d26:	68eb      	ldr	r3, [r5, #12]
 8009d28:	6858      	ldr	r0, [r3, #4]
 8009d2a:	f7fa fbb2 	bl	8004492 <lwip_htonl>
 8009d2e:	68f2      	ldr	r2, [r6, #12]
 8009d30:	4682      	mov	sl, r0
 8009d32:	6850      	ldr	r0, [r2, #4]
 8009d34:	f7fa fbad 	bl	8004492 <lwip_htonl>
 8009d38:	ebaa 0000 	sub.w	r0, sl, r0
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	f280 80c1 	bge.w	8009ec4 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009d42:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	f040 80a9 	bne.w	8009ea0 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 8009d52:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 8009d54:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 8009d56:	2d00      	cmp	r5, #0
 8009d58:	d0a2      	beq.n	8009ca0 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009d5a:	68eb      	ldr	r3, [r5, #12]
 8009d5c:	6858      	ldr	r0, [r3, #4]
 8009d5e:	f7fa fb98 	bl	8004492 <lwip_htonl>
 8009d62:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009d64:	1ac0      	subs	r0, r0, r3
 8009d66:	892b      	ldrh	r3, [r5, #8]
 8009d68:	4418      	add	r0, r3
  while (seg != NULL &&
 8009d6a:	4287      	cmp	r7, r0
 8009d6c:	d396      	bcc.n	8009c9c <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 8009d6e:	68eb      	ldr	r3, [r5, #12]
 8009d70:	8998      	ldrh	r0, [r3, #12]
 8009d72:	f7fa fb8b 	bl	800448c <lwip_htons>
 8009d76:	0742      	lsls	r2, r0, #29
 8009d78:	d506      	bpl.n	8009d88 <tcp_output+0x1a4>
 8009d7a:	4b43      	ldr	r3, [pc, #268]	; (8009e88 <tcp_output+0x2a4>)
 8009d7c:	f240 4246 	movw	r2, #1094	; 0x446
 8009d80:	4945      	ldr	r1, [pc, #276]	; (8009e98 <tcp_output+0x2b4>)
 8009d82:	4843      	ldr	r0, [pc, #268]	; (8009e90 <tcp_output+0x2ac>)
 8009d84:	f001 fff0 	bl	800bd68 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d88:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009d8a:	b19b      	cbz	r3, 8009db4 <tcp_output+0x1d0>
 8009d8c:	7ea2      	ldrb	r2, [r4, #26]
 8009d8e:	f012 0f44 	tst.w	r2, #68	; 0x44
 8009d92:	d10f      	bne.n	8009db4 <tcp_output+0x1d0>
 8009d94:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009d96:	b12b      	cbz	r3, 8009da4 <tcp_output+0x1c0>
 8009d98:	6819      	ldr	r1, [r3, #0]
 8009d9a:	b959      	cbnz	r1, 8009db4 <tcp_output+0x1d0>
 8009d9c:	8919      	ldrh	r1, [r3, #8]
 8009d9e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009da0:	4299      	cmp	r1, r3
 8009da2:	d207      	bcs.n	8009db4 <tcp_output+0x1d0>
 8009da4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009da8:	b123      	cbz	r3, 8009db4 <tcp_output+0x1d0>
 8009daa:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009dae:	2b08      	cmp	r3, #8
 8009db0:	f240 8091 	bls.w	8009ed6 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8009db4:	7d23      	ldrb	r3, [r4, #20]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d00a      	beq.n	8009dd0 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009dba:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009dbe:	2010      	movs	r0, #16
 8009dc0:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8009dc4:	f7fa fb62 	bl	800448c <lwip_htons>
 8009dc8:	ea4b 0000 	orr.w	r0, fp, r0
 8009dcc:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009dd0:	686b      	ldr	r3, [r5, #4]
 8009dd2:	89db      	ldrh	r3, [r3, #14]
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	f47f af71 	bne.w	8009cbc <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8009dda:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009dde:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009de0:	f7fa fb57 	bl	8004492 <lwip_htonl>
 8009de4:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009de8:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 8009dea:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8009dee:	f7fa fb4d 	bl	800448c <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009df2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009df6:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009dfa:	4413      	add	r3, r2
 8009dfc:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8009dfe:	7aab      	ldrb	r3, [r5, #10]
 8009e00:	07db      	lsls	r3, r3, #31
 8009e02:	d50c      	bpl.n	8009e1e <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009e04:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009e08:	4641      	mov	r1, r8
 8009e0a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8009e0e:	f7fe fa93 	bl	8008338 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009e12:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009e16:	f7fa fb3c 	bl	8004492 <lwip_htonl>
 8009e1a:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8009e1e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009e22:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8009e24:	bfbc      	itt	lt
 8009e26:	2300      	movlt	r3, #0
 8009e28:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8009e2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009e2c:	b93b      	cbnz	r3, 8009e3e <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 8009e2e:	4b1b      	ldr	r3, [pc, #108]	; (8009e9c <tcp_output+0x2b8>)
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8009e34:	68eb      	ldr	r3, [r5, #12]
 8009e36:	6858      	ldr	r0, [r3, #4]
 8009e38:	f7fa fb2b 	bl	8004492 <lwip_htonl>
 8009e3c:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009e3e:	6868      	ldr	r0, [r5, #4]
 8009e40:	68ea      	ldr	r2, [r5, #12]
 8009e42:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8009e44:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009e46:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 8009e48:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8009e4a:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 8009e4c:	1ac9      	subs	r1, r1, r3
 8009e4e:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 8009e50:	8901      	ldrh	r1, [r0, #8]
 8009e52:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009e54:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 8009e56:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	7413      	strb	r3, [r2, #16]
 8009e5c:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009e5e:	2206      	movs	r2, #6
 8009e60:	7aa3      	ldrb	r3, [r4, #10]
 8009e62:	9201      	str	r2, [sp, #4]
 8009e64:	7a62      	ldrb	r2, [r4, #9]
 8009e66:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e6a:	9200      	str	r2, [sp, #0]
 8009e6c:	4642      	mov	r2, r8
 8009e6e:	f7fc f9eb 	bl	8006248 <ip4_output_if>
    if (err != ERR_OK) {
 8009e72:	2800      	cmp	r0, #0
 8009e74:	f43f af22 	beq.w	8009cbc <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 8009e78:	7ea3      	ldrb	r3, [r4, #26]
 8009e7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009e7e:	76a3      	strb	r3, [r4, #26]
}
 8009e80:	b007      	add	sp, #28
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e86:	bf00      	nop
 8009e88:	0800e2db 	.word	0x0800e2db
 8009e8c:	0800e270 	.word	0x0800e270
 8009e90:	0800cb76 	.word	0x0800cb76
 8009e94:	20007700 	.word	0x20007700
 8009e98:	0800e296 	.word	0x0800e296
 8009e9c:	200076f0 	.word	0x200076f0
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ea0:	68d2      	ldr	r2, [r2, #12]
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	6850      	ldr	r0, [r2, #4]
 8009ea6:	f7fa faf4 	bl	8004492 <lwip_htonl>
 8009eaa:	68e9      	ldr	r1, [r5, #12]
 8009eac:	4682      	mov	sl, r0
 8009eae:	6848      	ldr	r0, [r1, #4]
 8009eb0:	f7fa faef 	bl	8004492 <lwip_htonl>
 8009eb4:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8009eb8:	9b05      	ldr	r3, [sp, #20]
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	f6bf af47 	bge.w	8009d4e <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	e740      	b.n	8009d46 <tcp_output+0x162>
          useg->next = seg;
 8009ec4:	6035      	str	r5, [r6, #0]
 8009ec6:	e72c      	b.n	8009d22 <tcp_output+0x13e>
      tcp_seg_free(seg);
 8009ec8:	4628      	mov	r0, r5
 8009eca:	f7fd fd23 	bl	8007914 <tcp_seg_free>
 8009ece:	e741      	b.n	8009d54 <tcp_output+0x170>
    return ERR_RTE;
 8009ed0:	f06f 0003 	mvn.w	r0, #3
 8009ed4:	e7d4      	b.n	8009e80 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009ed6:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8009eda:	f47f af6b 	bne.w	8009db4 <tcp_output+0x1d0>
 8009ede:	e6dd      	b.n	8009c9c <tcp_output+0xb8>

08009ee0 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee4:	b085      	sub	sp, #20
 8009ee6:	4681      	mov	r9, r0
 8009ee8:	460e      	mov	r6, r1
 8009eea:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009eec:	2114      	movs	r1, #20
 8009eee:	2200      	movs	r2, #0
 8009ef0:	2001      	movs	r0, #1
{
 8009ef2:	461f      	mov	r7, r3
 8009ef4:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8009ef8:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009efc:	f7fd f9ea 	bl	80072d4 <pbuf_alloc>
  if (p == NULL) {
 8009f00:	4605      	mov	r5, r0
 8009f02:	2800      	cmp	r0, #0
 8009f04:	d03c      	beq.n	8009f80 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009f06:	8943      	ldrh	r3, [r0, #10]
 8009f08:	2b13      	cmp	r3, #19
 8009f0a:	d806      	bhi.n	8009f1a <tcp_rst+0x3a>
 8009f0c:	4b1e      	ldr	r3, [pc, #120]	; (8009f88 <tcp_rst+0xa8>)
 8009f0e:	f240 524d 	movw	r2, #1357	; 0x54d
 8009f12:	491e      	ldr	r1, [pc, #120]	; (8009f8c <tcp_rst+0xac>)
 8009f14:	481e      	ldr	r0, [pc, #120]	; (8009f90 <tcp_rst+0xb0>)
 8009f16:	f001 ff27 	bl	800bd68 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009f1a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8009f1c:	4658      	mov	r0, fp
 8009f1e:	f7fa fab5 	bl	800448c <lwip_htons>
 8009f22:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009f24:	4650      	mov	r0, sl
 8009f26:	f7fa fab1 	bl	800448c <lwip_htons>
 8009f2a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009f2c:	4648      	mov	r0, r9
 8009f2e:	f7fa fab0 	bl	8004492 <lwip_htonl>
 8009f32:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009f34:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009f36:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8009f38:	f7fa faab 	bl	8004492 <lwip_htonl>
 8009f3c:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009f3e:	f245 0014 	movw	r0, #20500	; 0x5014
 8009f42:	f7fa faa3 	bl	800448c <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009f46:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009f48:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009f4a:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009f4c:	73a3      	strb	r3, [r4, #14]
 8009f4e:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 8009f50:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009f52:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 8009f54:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8009f56:	74a6      	strb	r6, [r4, #18]
 8009f58:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 8009f5a:	f7fc f803 	bl	8005f64 <ip4_route>
  if (netif != NULL) {
 8009f5e:	b148      	cbz	r0, 8009f74 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009f60:	2306      	movs	r3, #6
 8009f62:	9002      	str	r0, [sp, #8]
 8009f64:	9600      	str	r6, [sp, #0]
 8009f66:	463a      	mov	r2, r7
 8009f68:	9301      	str	r3, [sp, #4]
 8009f6a:	4641      	mov	r1, r8
 8009f6c:	23ff      	movs	r3, #255	; 0xff
 8009f6e:	4628      	mov	r0, r5
 8009f70:	f7fc f96a 	bl	8006248 <ip4_output_if>
  }
  pbuf_free(p);
 8009f74:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009f76:	b005      	add	sp, #20
 8009f78:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009f7c:	f7fd b940 	b.w	8007200 <pbuf_free>
}
 8009f80:	b005      	add	sp, #20
 8009f82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f86:	bf00      	nop
 8009f88:	0800e2db 	.word	0x0800e2db
 8009f8c:	0800e2ad 	.word	0x0800e2ad
 8009f90:	0800cb76 	.word	0x0800cb76

08009f94 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009f94:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8009f96:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8009f98:	b1aa      	cbz	r2, 8009fc6 <tcp_rexmit_rto+0x32>
 8009f9a:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009f9c:	680b      	ldr	r3, [r1, #0]
 8009f9e:	b983      	cbnz	r3, 8009fc2 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009fa0:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8009fa2:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009fa4:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009fa6:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8009faa:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009fac:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009fae:	bf1c      	itt	ne
 8009fb0:	3301      	addne	r3, #1
 8009fb2:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009fb6:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8009fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 8009fbc:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 8009fbe:	f7ff be11 	b.w	8009be4 <tcp_output>
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	e7ea      	b.n	8009f9c <tcp_rexmit_rto+0x8>
}
 8009fc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009fca:	4770      	bx	lr

08009fcc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009fce:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8009fd0:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8009fd2:	b1ad      	cbz	r5, 800a000 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009fd4:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8009fd6:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8009fda:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8009fdc:	6833      	ldr	r3, [r6, #0]
 8009fde:	b983      	cbnz	r3, 800a002 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8009fe0:	6833      	ldr	r3, [r6, #0]
 8009fe2:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009fe4:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009fe6:	682b      	ldr	r3, [r5, #0]
 8009fe8:	b90b      	cbnz	r3, 8009fee <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009fea:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009fee:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009ff2:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009ff4:	bf1c      	itt	ne
 8009ff6:	3301      	addne	r3, #1
 8009ff8:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	6363      	str	r3, [r4, #52]	; 0x34
 800a000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a002:	68db      	ldr	r3, [r3, #12]
 800a004:	6858      	ldr	r0, [r3, #4]
 800a006:	f7fa fa44 	bl	8004492 <lwip_htonl>
 800a00a:	68eb      	ldr	r3, [r5, #12]
 800a00c:	4607      	mov	r7, r0
 800a00e:	6858      	ldr	r0, [r3, #4]
 800a010:	f7fa fa3f 	bl	8004492 <lwip_htonl>
 800a014:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 800a016:	2800      	cmp	r0, #0
 800a018:	dae2      	bge.n	8009fe0 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 800a01a:	6836      	ldr	r6, [r6, #0]
 800a01c:	e7de      	b.n	8009fdc <tcp_rexmit+0x10>

0800a01e <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a01e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 800a020:	b510      	push	{r4, lr}
 800a022:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a024:	b30b      	cbz	r3, 800a06a <tcp_rexmit_fast+0x4c>
 800a026:	7e83      	ldrb	r3, [r0, #26]
 800a028:	075b      	lsls	r3, r3, #29
 800a02a:	d41e      	bmi.n	800a06a <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 800a02c:	f7ff ffce 	bl	8009fcc <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a030:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 800a034:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800a038:	4293      	cmp	r3, r2
 800a03a:	bf38      	it	cc
 800a03c:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a03e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a040:	bf28      	it	cs
 800a042:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a044:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a046:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 800a04a:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a04c:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 800a04e:	bf38      	it	cc
 800a050:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a054:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 800a058:	4413      	add	r3, r2
 800a05a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 800a05e:	7ea3      	ldrb	r3, [r4, #26]
 800a060:	f043 0304 	orr.w	r3, r3, #4
 800a064:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 800a066:	2300      	movs	r3, #0
 800a068:	8623      	strh	r3, [r4, #48]	; 0x30
 800a06a:	bd10      	pop	{r4, pc}

0800a06c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a06c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800a06e:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a070:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800a072:	3801      	subs	r0, #1
 800a074:	f7fa fa0d 	bl	8004492 <lwip_htonl>
 800a078:	2100      	movs	r1, #0
 800a07a:	4602      	mov	r2, r0
 800a07c:	4620      	mov	r0, r4
 800a07e:	f7ff fc87 	bl	8009990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a082:	4605      	mov	r5, r0
 800a084:	b1c8      	cbz	r0, 800a0ba <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a086:	1d26      	adds	r6, r4, #4
 800a088:	4630      	mov	r0, r6
 800a08a:	f7fb ff6b 	bl	8005f64 <ip4_route>
  if (netif == NULL) {
 800a08e:	b188      	cbz	r0, 800a0b4 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 800a090:	2100      	movs	r1, #0
 800a092:	2206      	movs	r2, #6
 800a094:	7aa3      	ldrb	r3, [r4, #10]
 800a096:	9002      	str	r0, [sp, #8]
 800a098:	4628      	mov	r0, r5
 800a09a:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a09e:	4621      	mov	r1, r4
 800a0a0:	4632      	mov	r2, r6
 800a0a2:	f7fc f8d1 	bl	8006248 <ip4_output_if>
 800a0a6:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 800a0a8:	4628      	mov	r0, r5
 800a0aa:	f7fd f8a9 	bl	8007200 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a0ae:	4620      	mov	r0, r4
 800a0b0:	b004      	add	sp, #16
 800a0b2:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 800a0b4:	f06f 0403 	mvn.w	r4, #3
 800a0b8:	e7f6      	b.n	800a0a8 <tcp_keepalive+0x3c>
    return ERR_MEM;
 800a0ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a0be:	e7f6      	b.n	800a0ae <tcp_keepalive+0x42>

0800a0c0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a0c0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 800a0c4:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 800a0c6:	4606      	mov	r6, r0

  if (seg == NULL) {
 800a0c8:	b914      	cbnz	r4, 800a0d0 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 800a0ca:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 800a0cc:	2c00      	cmp	r4, #0
 800a0ce:	d041      	beq.n	800a154 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a0d0:	68e3      	ldr	r3, [r4, #12]
 800a0d2:	8998      	ldrh	r0, [r3, #12]
 800a0d4:	f7fa f9da 	bl	800448c <lwip_htons>
 800a0d8:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a0dc:	68e3      	ldr	r3, [r4, #12]
 800a0de:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a0e0:	bf18      	it	ne
 800a0e2:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a0e4:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a0e6:	bf1c      	itt	ne
 800a0e8:	fab5 f585 	clzne	r5, r5
 800a0ec:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 800a0ee:	f085 0101 	eor.w	r1, r5, #1
 800a0f2:	f7ff fc4d 	bl	8009990 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 800a0f6:	4607      	mov	r7, r0
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d03d      	beq.n	800a178 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a0fc:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 800a100:	b365      	cbz	r5, 800a15c <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a102:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 800a106:	2011      	movs	r0, #17
 800a108:	f7fa f9c0 	bl	800448c <lwip_htons>
 800a10c:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 800a110:	b2ad      	uxth	r5, r5
 800a112:	4328      	orrs	r0, r5
 800a114:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a118:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a11a:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a11c:	6858      	ldr	r0, [r3, #4]
 800a11e:	f7fa f9b8 	bl	8004492 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a122:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800a124:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800a126:	1a1b      	subs	r3, r3, r0
 800a128:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 800a12a:	bfb8      	it	lt
 800a12c:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a12e:	4620      	mov	r0, r4
 800a130:	f7fb ff18 	bl	8005f64 <ip4_route>
  if (netif == NULL) {
 800a134:	b1e8      	cbz	r0, 800a172 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a136:	2100      	movs	r1, #0
 800a138:	2206      	movs	r2, #6
 800a13a:	9002      	str	r0, [sp, #8]
 800a13c:	4638      	mov	r0, r7
 800a13e:	7ab3      	ldrb	r3, [r6, #10]
 800a140:	e88d 0006 	stmia.w	sp, {r1, r2}
 800a144:	4622      	mov	r2, r4
 800a146:	4631      	mov	r1, r6
 800a148:	f7fc f87e 	bl	8006248 <ip4_output_if>
 800a14c:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 800a14e:	4638      	mov	r0, r7
 800a150:	f7fd f856 	bl	8007200 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 800a154:	4620      	mov	r0, r4
 800a156:	b004      	add	sp, #16
 800a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a15c:	6860      	ldr	r0, [r4, #4]
 800a15e:	f108 0114 	add.w	r1, r8, #20
 800a162:	8922      	ldrh	r2, [r4, #8]
 800a164:	8903      	ldrh	r3, [r0, #8]
 800a166:	1a9b      	subs	r3, r3, r2
 800a168:	2201      	movs	r2, #1
 800a16a:	b29b      	uxth	r3, r3
 800a16c:	f7fd faf0 	bl	8007750 <pbuf_copy_partial>
 800a170:	e7d2      	b.n	800a118 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 800a172:	f06f 0403 	mvn.w	r4, #3
 800a176:	e7ea      	b.n	800a14e <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 800a178:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a17c:	e7ea      	b.n	800a154 <tcp_zero_window_probe+0x94>
	...

0800a180 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800a180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a184:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a186:	200a      	movs	r0, #10
{
 800a188:	460f      	mov	r7, r1
 800a18a:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800a18c:	f7fc fe96 	bl	8006ebc <memp_malloc>
  if (timeout == NULL) {
 800a190:	4604      	mov	r4, r0
 800a192:	b938      	cbnz	r0, 800a1a4 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a194:	4b1e      	ldr	r3, [pc, #120]	; (800a210 <sys_timeout+0x90>)
 800a196:	22d4      	movs	r2, #212	; 0xd4
 800a198:	491e      	ldr	r1, [pc, #120]	; (800a214 <sys_timeout+0x94>)
 800a19a:	481f      	ldr	r0, [pc, #124]	; (800a218 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 800a19c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800a1a0:	f001 bde2 	b.w	800bd68 <iprintf>
  now = sys_now();
 800a1a4:	f000 fddc 	bl	800ad60 <sys_now>
  if (next_timeout == NULL) {
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <sys_timeout+0x9c>)
 800a1aa:	491d      	ldr	r1, [pc, #116]	; (800a220 <sys_timeout+0xa0>)
 800a1ac:	6813      	ldr	r3, [r2, #0]
 800a1ae:	b95b      	cbnz	r3, 800a1c8 <sys_timeout+0x48>
    timeouts_last_time = now;
 800a1b0:	6008      	str	r0, [r1, #0]
    diff = 0;
 800a1b2:	4618      	mov	r0, r3
  timeout->next = NULL;
 800a1b4:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 800a1b6:	4428      	add	r0, r5
  timeout->h = handler;
 800a1b8:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 800a1ba:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 800a1bc:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 800a1be:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 800a1c0:	b92b      	cbnz	r3, 800a1ce <sys_timeout+0x4e>
    next_timeout = timeout;
 800a1c2:	6014      	str	r4, [r2, #0]
 800a1c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 800a1c8:	6809      	ldr	r1, [r1, #0]
 800a1ca:	1a40      	subs	r0, r0, r1
 800a1cc:	e7f2      	b.n	800a1b4 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 800a1ce:	6859      	ldr	r1, [r3, #4]
 800a1d0:	428d      	cmp	r5, r1
 800a1d2:	d217      	bcs.n	800a204 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 800a1d4:	1b4d      	subs	r5, r1, r5
 800a1d6:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 800a1d8:	6023      	str	r3, [r4, #0]
 800a1da:	e7f2      	b.n	800a1c2 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 800a1dc:	684e      	ldr	r6, [r1, #4]
 800a1de:	42b2      	cmp	r2, r6
 800a1e0:	d312      	bcc.n	800a208 <sys_timeout+0x88>
 800a1e2:	4608      	mov	r0, r1
      timeout->time -= t->time;
 800a1e4:	6841      	ldr	r1, [r0, #4]
 800a1e6:	6862      	ldr	r2, [r4, #4]
 800a1e8:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 800a1ea:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 800a1ec:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 800a1ee:	2900      	cmp	r1, #0
 800a1f0:	d1f4      	bne.n	800a1dc <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 800a1f2:	4295      	cmp	r5, r2
 800a1f4:	d202      	bcs.n	800a1fc <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 800a1f6:	685b      	ldr	r3, [r3, #4]
 800a1f8:	441d      	add	r5, r3
 800a1fa:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 800a1fc:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 800a1fe:	6004      	str	r4, [r0, #0]
        break;
 800a200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a204:	4618      	mov	r0, r3
 800a206:	e7ed      	b.n	800a1e4 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 800a208:	1ab2      	subs	r2, r6, r2
 800a20a:	604a      	str	r2, [r1, #4]
 800a20c:	e7f6      	b.n	800a1fc <sys_timeout+0x7c>
 800a20e:	bf00      	nop
 800a210:	0800e34c 	.word	0x0800e34c
 800a214:	0800e380 	.word	0x0800e380
 800a218:	0800cb76 	.word	0x0800cb76
 800a21c:	20003f78 	.word	0x20003f78
 800a220:	20003f80 	.word	0x20003f80

0800a224 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800a224:	4b08      	ldr	r3, [pc, #32]	; (800a248 <tcp_timer_needed+0x24>)
 800a226:	681a      	ldr	r2, [r3, #0]
 800a228:	b962      	cbnz	r2, 800a244 <tcp_timer_needed+0x20>
 800a22a:	4a08      	ldr	r2, [pc, #32]	; (800a24c <tcp_timer_needed+0x28>)
 800a22c:	6812      	ldr	r2, [r2, #0]
 800a22e:	b912      	cbnz	r2, 800a236 <tcp_timer_needed+0x12>
 800a230:	4a07      	ldr	r2, [pc, #28]	; (800a250 <tcp_timer_needed+0x2c>)
 800a232:	6812      	ldr	r2, [r2, #0]
 800a234:	b132      	cbz	r2, 800a244 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 800a236:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a238:	4906      	ldr	r1, [pc, #24]	; (800a254 <tcp_timer_needed+0x30>)
 800a23a:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 800a23c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a23e:	2200      	movs	r2, #0
 800a240:	f7ff bf9e 	b.w	800a180 <sys_timeout>
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	20003f7c 	.word	0x20003f7c
 800a24c:	200076ec 	.word	0x200076ec
 800a250:	200076fc 	.word	0x200076fc
 800a254:	0800a259 	.word	0x0800a259

0800a258 <tcpip_tcp_timer>:
{
 800a258:	b508      	push	{r3, lr}
  tcp_tmr();
 800a25a:	f7fd ff0f 	bl	800807c <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800a25e:	4b08      	ldr	r3, [pc, #32]	; (800a280 <tcpip_tcp_timer+0x28>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	b913      	cbnz	r3, 800a26a <tcpip_tcp_timer+0x12>
 800a264:	4b07      	ldr	r3, [pc, #28]	; (800a284 <tcpip_tcp_timer+0x2c>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	b133      	cbz	r3, 800a278 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a26a:	2200      	movs	r2, #0
 800a26c:	4906      	ldr	r1, [pc, #24]	; (800a288 <tcpip_tcp_timer+0x30>)
 800a26e:	20fa      	movs	r0, #250	; 0xfa
}
 800a270:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800a274:	f7ff bf84 	b.w	800a180 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 800a278:	4a04      	ldr	r2, [pc, #16]	; (800a28c <tcpip_tcp_timer+0x34>)
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	bd08      	pop	{r3, pc}
 800a27e:	bf00      	nop
 800a280:	200076ec 	.word	0x200076ec
 800a284:	200076fc 	.word	0x200076fc
 800a288:	0800a259 	.word	0x0800a259
 800a28c:	20003f7c 	.word	0x20003f7c

0800a290 <sys_timeouts_init>:
{
 800a290:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 800a292:	4d11      	ldr	r5, [pc, #68]	; (800a2d8 <sys_timeouts_init+0x48>)
 800a294:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a298:	4c10      	ldr	r4, [pc, #64]	; (800a2dc <sys_timeouts_init+0x4c>)
 800a29a:	f105 0208 	add.w	r2, r5, #8
 800a29e:	4621      	mov	r1, r4
 800a2a0:	f7ff ff6e 	bl	800a180 <sys_timeout>
 800a2a4:	f105 0210 	add.w	r2, r5, #16
 800a2a8:	4621      	mov	r1, r4
 800a2aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a2ae:	f7ff ff67 	bl	800a180 <sys_timeout>
 800a2b2:	f105 0218 	add.w	r2, r5, #24
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	f64e 2060 	movw	r0, #60000	; 0xea60
 800a2bc:	f7ff ff60 	bl	800a180 <sys_timeout>
 800a2c0:	f105 0220 	add.w	r2, r5, #32
 800a2c4:	4621      	mov	r1, r4
 800a2c6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a2ca:	f7ff ff59 	bl	800a180 <sys_timeout>
  timeouts_last_time = sys_now();
 800a2ce:	f000 fd47 	bl	800ad60 <sys_now>
 800a2d2:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <sys_timeouts_init+0x50>)
 800a2d4:	6018      	str	r0, [r3, #0]
 800a2d6:	bd38      	pop	{r3, r4, r5, pc}
 800a2d8:	0800e324 	.word	0x0800e324
 800a2dc:	0800a2e5 	.word	0x0800a2e5
 800a2e0:	20003f80 	.word	0x20003f80

0800a2e4 <cyclic_timer>:
{
 800a2e4:	b510      	push	{r4, lr}
 800a2e6:	4604      	mov	r4, r0
  cyclic->handler();
 800a2e8:	6843      	ldr	r3, [r0, #4]
 800a2ea:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a2ec:	4903      	ldr	r1, [pc, #12]	; (800a2fc <cyclic_timer+0x18>)
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	6820      	ldr	r0, [r4, #0]
}
 800a2f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 800a2f6:	f7ff bf43 	b.w	800a180 <sys_timeout>
 800a2fa:	bf00      	nop
 800a2fc:	0800a2e5 	.word	0x0800a2e5

0800a300 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 800a304:	4d24      	ldr	r5, [pc, #144]	; (800a398 <sys_timeouts_mbox_fetch+0x98>)
{
 800a306:	4681      	mov	r9, r0
 800a308:	468a      	mov	sl, r1
  diff = sys_now() - timeouts_last_time;
 800a30a:	4c24      	ldr	r4, [pc, #144]	; (800a39c <sys_timeouts_mbox_fetch+0x9c>)
 800a30c:	462e      	mov	r6, r5
  if (!next_timeout) {
 800a30e:	682a      	ldr	r2, [r5, #0]
 800a310:	b932      	cbnz	r2, 800a320 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a312:	4651      	mov	r1, sl
 800a314:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 800a316:	b003      	add	sp, #12
 800a318:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a31c:	f000 bac4 	b.w	800a8a8 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 800a320:	f000 fd1e 	bl	800ad60 <sys_now>
 800a324:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 800a326:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 800a328:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 800a32a:	685a      	ldr	r2, [r3, #4]
 800a32c:	4290      	cmp	r0, r2
 800a32e:	d928      	bls.n	800a382 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 800a330:	6833      	ldr	r3, [r6, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d0eb      	beq.n	800a30e <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 800a336:	f000 fd13 	bl	800ad60 <sys_now>
    diff = now - timeouts_last_time;
 800a33a:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 800a33c:	4f18      	ldr	r7, [pc, #96]	; (800a3a0 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 800a33e:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 800a342:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 800a344:	2900      	cmp	r1, #0
 800a346:	d0e2      	beq.n	800a30e <sys_timeouts_mbox_fetch+0xe>
 800a348:	684a      	ldr	r2, [r1, #4]
 800a34a:	455a      	cmp	r2, fp
 800a34c:	d8df      	bhi.n	800a30e <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 800a34e:	6820      	ldr	r0, [r4, #0]
        diff -= tmptimeout->time;
 800a350:	ebab 0b02 	sub.w	fp, fp, r2
        handler = tmptimeout->h;
 800a354:	f8d1 8008 	ldr.w	r8, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 800a358:	4410      	add	r0, r2
        arg = tmptimeout->arg;
 800a35a:	68cb      	ldr	r3, [r1, #12]
        next_timeout = tmptimeout->next;
 800a35c:	680a      	ldr	r2, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 800a35e:	6020      	str	r0, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a360:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 800a362:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 800a364:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800a366:	f7fc fdc5 	bl	8006ef4 <memp_free>
        if (handler != NULL) {
 800a36a:	f1b8 0f00 	cmp.w	r8, #0
 800a36e:	d0e8      	beq.n	800a342 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 800a370:	4638      	mov	r0, r7
 800a372:	f000 fadc 	bl	800a92e <sys_mutex_lock>
          handler(arg);
 800a376:	9801      	ldr	r0, [sp, #4]
 800a378:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 800a37a:	4638      	mov	r0, r7
 800a37c:	f000 fadc 	bl	800a938 <sys_mutex_unlock>
 800a380:	e7df      	b.n	800a342 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 800a382:	1a12      	subs	r2, r2, r0
 800a384:	d0d4      	beq.n	800a330 <sys_timeouts_mbox_fetch+0x30>
 800a386:	4651      	mov	r1, sl
 800a388:	4648      	mov	r0, r9
 800a38a:	f000 fa8d 	bl	800a8a8 <sys_arch_mbox_fetch>
 800a38e:	3001      	adds	r0, #1
 800a390:	d0ce      	beq.n	800a330 <sys_timeouts_mbox_fetch+0x30>
}
 800a392:	b003      	add	sp, #12
 800a394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a398:	20003f78 	.word	0x20003f78
 800a39c:	20003f80 	.word	0x20003f80
 800a3a0:	20003f9c 	.word	0x20003f9c

0800a3a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800a3a4:	4770      	bx	lr
	...

0800a3a8 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800a3a8:	8943      	ldrh	r3, [r0, #10]
 800a3aa:	2b07      	cmp	r3, #7
{
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	4605      	mov	r5, r0
 800a3b2:	b085      	sub	sp, #20
 800a3b4:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 800a3b6:	d805      	bhi.n	800a3c4 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800a3b8:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800a3ba:	b005      	add	sp, #20
 800a3bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 800a3c0:	f7fc bf1e 	b.w	8007200 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a3c4:	4e3e      	ldr	r6, [pc, #248]	; (800a4c0 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 800a3c6:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800a3c8:	6831      	ldr	r1, [r6, #0]
 800a3ca:	6970      	ldr	r0, [r6, #20]
 800a3cc:	f7fb ff4d 	bl	800626a <ip4_addr_isbroadcast_u32>
 800a3d0:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 800a3d2:	8820      	ldrh	r0, [r4, #0]
 800a3d4:	f7fa f85a 	bl	800448c <lwip_htons>
 800a3d8:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 800a3da:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 800a3dc:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 800a3de:	f7fa f855 	bl	800448c <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e2:	4a38      	ldr	r2, [pc, #224]	; (800a4c4 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 800a3e4:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a3e6:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3e8:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 800a3ea:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800a3ec:	f8d6 e010 	ldr.w	lr, [r6, #16]
 800a3f0:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a3f2:	4603      	mov	r3, r0
 800a3f4:	9603      	str	r6, [sp, #12]
 800a3f6:	b92b      	cbnz	r3, 800a404 <udp_input+0x5c>
  if (pcb != NULL) {
 800a3f8:	bb0c      	cbnz	r4, 800a43e <udp_input+0x96>
  if (for_us) {
 800a3fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800a3fe:	428b      	cmp	r3, r1
 800a400:	d1da      	bne.n	800a3b8 <udp_input+0x10>
 800a402:	e01c      	b.n	800a43e <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 800a404:	8a5a      	ldrh	r2, [r3, #18]
 800a406:	4552      	cmp	r2, sl
 800a408:	d12b      	bne.n	800a462 <udp_input+0xba>
 800a40a:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 800a40c:	b32f      	cbz	r7, 800a45a <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a40e:	b13a      	cbz	r2, 800a420 <udp_input+0x78>
 800a410:	1c4e      	adds	r6, r1, #1
 800a412:	d005      	beq.n	800a420 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800a414:	404a      	eors	r2, r1
 800a416:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800a418:	f8d9 2008 	ldr.w	r2, [r9, #8]
 800a41c:	4216      	tst	r6, r2
 800a41e:	d120      	bne.n	800a462 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 800a420:	7c1a      	ldrb	r2, [r3, #16]
 800a422:	0752      	lsls	r2, r2, #29
 800a424:	d402      	bmi.n	800a42c <udp_input+0x84>
 800a426:	2c00      	cmp	r4, #0
 800a428:	bf08      	it	eq
 800a42a:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 800a42c:	8a9a      	ldrh	r2, [r3, #20]
 800a42e:	4542      	cmp	r2, r8
 800a430:	d117      	bne.n	800a462 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a432:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 800a434:	b9c2      	cbnz	r2, 800a468 <udp_input+0xc0>
        if (prev != NULL) {
 800a436:	f1bc 0f00 	cmp.w	ip, #0
 800a43a:	d118      	bne.n	800a46e <udp_input+0xc6>
 800a43c:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 800a43e:	f06f 0107 	mvn.w	r1, #7
 800a442:	4628      	mov	r0, r5
 800a444:	f7fc fed6 	bl	80071f4 <pbuf_header>
 800a448:	b1c0      	cbz	r0, 800a47c <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 800a44a:	4b1f      	ldr	r3, [pc, #124]	; (800a4c8 <udp_input+0x120>)
 800a44c:	f240 1255 	movw	r2, #341	; 0x155
 800a450:	491e      	ldr	r1, [pc, #120]	; (800a4cc <udp_input+0x124>)
 800a452:	481f      	ldr	r0, [pc, #124]	; (800a4d0 <udp_input+0x128>)
 800a454:	f001 fc88 	bl	800bd68 <iprintf>
 800a458:	e7ae      	b.n	800a3b8 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800a45a:	2a00      	cmp	r2, #0
 800a45c:	d0e0      	beq.n	800a420 <udp_input+0x78>
 800a45e:	428a      	cmp	r2, r1
 800a460:	d0de      	beq.n	800a420 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a462:	469c      	mov	ip, r3
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	e7c6      	b.n	800a3f6 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800a468:	4572      	cmp	r2, lr
 800a46a:	d1fa      	bne.n	800a462 <udp_input+0xba>
 800a46c:	e7e3      	b.n	800a436 <udp_input+0x8e>
          prev->next = pcb->next;
 800a46e:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 800a470:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 800a474:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 800a478:	60d8      	str	r0, [r3, #12]
 800a47a:	e7df      	b.n	800a43c <udp_input+0x94>
    if (pcb != NULL) {
 800a47c:	b164      	cbz	r4, 800a498 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 800a47e:	69a6      	ldr	r6, [r4, #24]
 800a480:	2e00      	cmp	r6, #0
 800a482:	d099      	beq.n	800a3b8 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800a484:	f8cd 8000 	str.w	r8, [sp]
 800a488:	462a      	mov	r2, r5
 800a48a:	4b12      	ldr	r3, [pc, #72]	; (800a4d4 <udp_input+0x12c>)
 800a48c:	4621      	mov	r1, r4
 800a48e:	69e0      	ldr	r0, [r4, #28]
 800a490:	47b0      	blx	r6
}
 800a492:	b005      	add	sp, #20
 800a494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a498:	2f00      	cmp	r7, #0
 800a49a:	d18d      	bne.n	800a3b8 <udp_input+0x10>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	695b      	ldr	r3, [r3, #20]
 800a4a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a4a4:	2be0      	cmp	r3, #224	; 0xe0
 800a4a6:	d087      	beq.n	800a3b8 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a4a8:	9b03      	ldr	r3, [sp, #12]
 800a4aa:	4628      	mov	r0, r5
 800a4ac:	8999      	ldrh	r1, [r3, #12]
 800a4ae:	3108      	adds	r1, #8
 800a4b0:	b209      	sxth	r1, r1
 800a4b2:	f7fc fea2 	bl	80071fa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a4b6:	2103      	movs	r1, #3
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	f7fb fd49 	bl	8005f50 <icmp_dest_unreach>
 800a4be:	e77b      	b.n	800a3b8 <udp_input+0x10>
 800a4c0:	20003fa0 	.word	0x20003fa0
 800a4c4:	20007704 	.word	0x20007704
 800a4c8:	0800e3bd 	.word	0x0800e3bd
 800a4cc:	0800e3ec 	.word	0x0800e3ec
 800a4d0:	0800cb76 	.word	0x0800cb76
 800a4d4:	20003fb0 	.word	0x20003fb0

0800a4d8 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800a4d8:	4b26      	ldr	r3, [pc, #152]	; (800a574 <udp_bind+0x9c>)
{
 800a4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800a4de:	2900      	cmp	r1, #0
 800a4e0:	bf08      	it	eq
 800a4e2:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	d040      	beq.n	800a56a <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a4e8:	4e23      	ldr	r6, [pc, #140]	; (800a578 <udp_bind+0xa0>)
 800a4ea:	f8d6 e000 	ldr.w	lr, [r6]
 800a4ee:	4675      	mov	r5, lr
 800a4f0:	b96d      	cbnz	r5, 800a50e <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a4f2:	b192      	cbz	r2, 800a51a <udp_bind+0x42>
 800a4f4:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a4f6:	b1fb      	cbz	r3, 800a538 <udp_bind+0x60>
      if (pcb != ipcb) {
 800a4f8:	4283      	cmp	r3, r0
 800a4fa:	d006      	beq.n	800a50a <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a4fc:	8a5c      	ldrh	r4, [r3, #18]
 800a4fe:	4294      	cmp	r4, r2
 800a500:	d103      	bne.n	800a50a <udp_bind+0x32>
 800a502:	681f      	ldr	r7, [r3, #0]
 800a504:	680c      	ldr	r4, [r1, #0]
 800a506:	42a7      	cmp	r7, r4
 800a508:	d029      	beq.n	800a55e <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	e7f3      	b.n	800a4f6 <udp_bind+0x1e>
    if (pcb == ipcb) {
 800a50e:	4285      	cmp	r5, r0
 800a510:	d001      	beq.n	800a516 <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a512:	68ed      	ldr	r5, [r5, #12]
 800a514:	e7ec      	b.n	800a4f0 <udp_bind+0x18>
      rebind = 1;
 800a516:	2501      	movs	r5, #1
 800a518:	e7eb      	b.n	800a4f2 <udp_bind+0x1a>
 800a51a:	4b18      	ldr	r3, [pc, #96]	; (800a57c <udp_bind+0xa4>)
  if (port == 0) {
 800a51c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a520:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800a524:	881a      	ldrh	r2, [r3, #0]
 800a526:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a528:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a52a:	bf16      	itet	ne
 800a52c:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a52e:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a532:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a534:	b957      	cbnz	r7, 800a54c <udp_bind+0x74>
 800a536:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a538:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800a53a:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a53c:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a53e:	b915      	cbnz	r5, 800a546 <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a540:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800a544:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a546:	2000      	movs	r0, #0
 800a548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800a54c:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800a550:	4590      	cmp	r8, r2
 800a552:	d108      	bne.n	800a566 <udp_bind+0x8e>
 800a554:	3c01      	subs	r4, #1
 800a556:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a558:	2c00      	cmp	r4, #0
 800a55a:	d1e4      	bne.n	800a526 <udp_bind+0x4e>
 800a55c:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800a55e:	f06f 0007 	mvn.w	r0, #7
 800a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a566:	68ff      	ldr	r7, [r7, #12]
 800a568:	e7e4      	b.n	800a534 <udp_bind+0x5c>
    return ERR_VAL;
 800a56a:	f06f 0005 	mvn.w	r0, #5
}
 800a56e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a572:	bf00      	nop
 800a574:	0800d2e0 	.word	0x0800d2e0
 800a578:	20007704 	.word	0x20007704
 800a57c:	2000000c 	.word	0x2000000c

0800a580 <udp_sendto_if_src>:
{
 800a580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a584:	460e      	mov	r6, r1
 800a586:	b085      	sub	sp, #20
 800a588:	4690      	mov	r8, r2
 800a58a:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a58c:	4607      	mov	r7, r0
 800a58e:	2800      	cmp	r0, #0
 800a590:	d050      	beq.n	800a634 <udp_sendto_if_src+0xb4>
 800a592:	2a00      	cmp	r2, #0
 800a594:	d04e      	beq.n	800a634 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 800a596:	8a42      	ldrh	r2, [r0, #18]
 800a598:	2a00      	cmp	r2, #0
 800a59a:	d033      	beq.n	800a604 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800a59c:	2108      	movs	r1, #8
 800a59e:	4630      	mov	r0, r6
 800a5a0:	f7fc fe28 	bl	80071f4 <pbuf_header>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d137      	bne.n	800a618 <udp_sendto_if_src+0x98>
 800a5a8:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a5aa:	8963      	ldrh	r3, [r4, #10]
 800a5ac:	2b07      	cmp	r3, #7
 800a5ae:	d806      	bhi.n	800a5be <udp_sendto_if_src+0x3e>
 800a5b0:	4b23      	ldr	r3, [pc, #140]	; (800a640 <udp_sendto_if_src+0xc0>)
 800a5b2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a5b6:	4923      	ldr	r1, [pc, #140]	; (800a644 <udp_sendto_if_src+0xc4>)
 800a5b8:	4823      	ldr	r0, [pc, #140]	; (800a648 <udp_sendto_if_src+0xc8>)
 800a5ba:	f001 fbd5 	bl	800bd68 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800a5be:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800a5c0:	8a78      	ldrh	r0, [r7, #18]
 800a5c2:	f7f9 ff63 	bl	800448c <lwip_htons>
 800a5c6:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a5c8:	4648      	mov	r0, r9
 800a5ca:	f7f9 ff5f 	bl	800448c <lwip_htons>
  udphdr->chksum = 0x0000;
 800a5ce:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800a5d0:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 800a5d2:	71ab      	strb	r3, [r5, #6]
 800a5d4:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800a5d6:	8920      	ldrh	r0, [r4, #8]
 800a5d8:	f7f9 ff58 	bl	800448c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a5dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800a5de:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a5e0:	4620      	mov	r0, r4
 800a5e2:	7abb      	ldrb	r3, [r7, #10]
 800a5e4:	9202      	str	r2, [sp, #8]
 800a5e6:	2211      	movs	r2, #17
 800a5e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a5ea:	9201      	str	r2, [sp, #4]
 800a5ec:	7a7a      	ldrb	r2, [r7, #9]
 800a5ee:	9200      	str	r2, [sp, #0]
 800a5f0:	4642      	mov	r2, r8
 800a5f2:	f7fb fdb1 	bl	8006158 <ip4_output_if_src>
  if (q != p) {
 800a5f6:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a5f8:	4605      	mov	r5, r0
  if (q != p) {
 800a5fa:	d009      	beq.n	800a610 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800a5fc:	4620      	mov	r0, r4
 800a5fe:	f7fc fdff 	bl	8007200 <pbuf_free>
 800a602:	e005      	b.n	800a610 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a604:	4601      	mov	r1, r0
 800a606:	f7ff ff67 	bl	800a4d8 <udp_bind>
    if (err != ERR_OK) {
 800a60a:	4605      	mov	r5, r0
 800a60c:	2800      	cmp	r0, #0
 800a60e:	d0c5      	beq.n	800a59c <udp_sendto_if_src+0x1c>
}
 800a610:	4628      	mov	r0, r5
 800a612:	b005      	add	sp, #20
 800a614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a618:	2200      	movs	r2, #0
 800a61a:	2108      	movs	r1, #8
 800a61c:	2001      	movs	r0, #1
 800a61e:	f7fc fe59 	bl	80072d4 <pbuf_alloc>
    if (q == NULL) {
 800a622:	4604      	mov	r4, r0
 800a624:	b148      	cbz	r0, 800a63a <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800a626:	8933      	ldrh	r3, [r6, #8]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d0be      	beq.n	800a5aa <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800a62c:	4631      	mov	r1, r6
 800a62e:	f7fc fffb 	bl	8007628 <pbuf_chain>
 800a632:	e7ba      	b.n	800a5aa <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 800a634:	f06f 0505 	mvn.w	r5, #5
 800a638:	e7ea      	b.n	800a610 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800a63a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800a63e:	e7e7      	b.n	800a610 <udp_sendto_if_src+0x90>
 800a640:	0800e3bd 	.word	0x0800e3bd
 800a644:	0800e400 	.word	0x0800e400
 800a648:	0800cb76 	.word	0x0800cb76

0800a64c <udp_sendto_if>:
{
 800a64c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a64e:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a650:	b190      	cbz	r0, 800a678 <udp_sendto_if+0x2c>
 800a652:	b18a      	cbz	r2, 800a678 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a654:	6805      	ldr	r5, [r0, #0]
 800a656:	b11d      	cbz	r5, 800a660 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a658:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a65c:	2ee0      	cmp	r6, #224	; 0xe0
 800a65e:	d106      	bne.n	800a66e <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800a660:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a662:	e88d 0030 	stmia.w	sp, {r4, r5}
 800a666:	f7ff ff8b 	bl	800a580 <udp_sendto_if_src>
}
 800a66a:	b002      	add	sp, #8
 800a66c:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a66e:	6866      	ldr	r6, [r4, #4]
 800a670:	42b5      	cmp	r5, r6
 800a672:	d104      	bne.n	800a67e <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a674:	4605      	mov	r5, r0
 800a676:	e7f4      	b.n	800a662 <udp_sendto_if+0x16>
    return ERR_VAL;
 800a678:	f06f 0005 	mvn.w	r0, #5
 800a67c:	e7f5      	b.n	800a66a <udp_sendto_if+0x1e>
      return ERR_RTE;
 800a67e:	f06f 0003 	mvn.w	r0, #3
 800a682:	e7f2      	b.n	800a66a <udp_sendto_if+0x1e>

0800a684 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a684:	b570      	push	{r4, r5, r6, lr}
 800a686:	460d      	mov	r5, r1
 800a688:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a68a:	4604      	mov	r4, r0
 800a68c:	b1d0      	cbz	r0, 800a6c4 <udp_connect+0x40>
 800a68e:	b1c9      	cbz	r1, 800a6c4 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800a690:	8a42      	ldrh	r2, [r0, #18]
 800a692:	b16a      	cbz	r2, 800a6b0 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a694:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800a696:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a698:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a69a:	7c23      	ldrb	r3, [r4, #16]
 800a69c:	f043 0304 	orr.w	r3, r3, #4
 800a6a0:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a6a2:	4b0b      	ldr	r3, [pc, #44]	; (800a6d0 <udp_connect+0x4c>)
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	4610      	mov	r0, r2
 800a6a8:	b940      	cbnz	r0, 800a6bc <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a6aa:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800a6ac:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800a6ae:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a6b0:	4601      	mov	r1, r0
 800a6b2:	f7ff ff11 	bl	800a4d8 <udp_bind>
    if (err != ERR_OK) {
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d0ec      	beq.n	800a694 <udp_connect+0x10>
 800a6ba:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800a6bc:	42a0      	cmp	r0, r4
 800a6be:	d004      	beq.n	800a6ca <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a6c0:	68c0      	ldr	r0, [r0, #12]
 800a6c2:	e7f1      	b.n	800a6a8 <udp_connect+0x24>
    return ERR_VAL;
 800a6c4:	f06f 0005 	mvn.w	r0, #5
 800a6c8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800a6ca:	2000      	movs	r0, #0
}
 800a6cc:	bd70      	pop	{r4, r5, r6, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20007704 	.word	0x20007704

0800a6d4 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a6d4:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800a6d6:	61c2      	str	r2, [r0, #28]
 800a6d8:	4770      	bx	lr
	...

0800a6dc <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a6dc:	4a0a      	ldr	r2, [pc, #40]	; (800a708 <udp_remove+0x2c>)
{
 800a6de:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800a6e0:	6813      	ldr	r3, [r2, #0]
 800a6e2:	4283      	cmp	r3, r0
 800a6e4:	d104      	bne.n	800a6f0 <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a6e6:	68c3      	ldr	r3, [r0, #12]
 800a6e8:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	f7fc bc02 	b.w	8006ef4 <memp_free>
{
 800a6f0:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d0f9      	beq.n	800a6ea <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d0f6      	beq.n	800a6ea <udp_remove+0xe>
 800a6fc:	4299      	cmp	r1, r3
 800a6fe:	d1f7      	bne.n	800a6f0 <udp_remove+0x14>
        pcb2->next = pcb->next;
 800a700:	68cb      	ldr	r3, [r1, #12]
 800a702:	60d3      	str	r3, [r2, #12]
        break;
 800a704:	e7f1      	b.n	800a6ea <udp_remove+0xe>
 800a706:	bf00      	nop
 800a708:	20007704 	.word	0x20007704

0800a70c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a70c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a70e:	2000      	movs	r0, #0
 800a710:	f7fc fbd4 	bl	8006ebc <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a714:	4604      	mov	r4, r0
 800a716:	b128      	cbz	r0, 800a724 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a718:	2220      	movs	r2, #32
 800a71a:	2100      	movs	r1, #0
 800a71c:	f001 fa70 	bl	800bc00 <memset>
    pcb->ttl = UDP_TTL;
 800a720:	23ff      	movs	r3, #255	; 0xff
 800a722:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800a724:	4620      	mov	r0, r4
 800a726:	bd10      	pop	{r4, pc}

0800a728 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a728:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a72a:	b138      	cbz	r0, 800a73c <udp_netif_ip_addr_changed+0x14>
 800a72c:	6803      	ldr	r3, [r0, #0]
 800a72e:	b12b      	cbz	r3, 800a73c <udp_netif_ip_addr_changed+0x14>
 800a730:	b121      	cbz	r1, 800a73c <udp_netif_ip_addr_changed+0x14>
 800a732:	680b      	ldr	r3, [r1, #0]
 800a734:	b113      	cbz	r3, 800a73c <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a736:	4b06      	ldr	r3, [pc, #24]	; (800a750 <udp_netif_ip_addr_changed+0x28>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	b903      	cbnz	r3, 800a73e <udp_netif_ip_addr_changed+0x16>
 800a73c:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a73e:	681c      	ldr	r4, [r3, #0]
 800a740:	6802      	ldr	r2, [r0, #0]
 800a742:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a744:	bf04      	itt	eq
 800a746:	680a      	ldreq	r2, [r1, #0]
 800a748:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	e7f5      	b.n	800a73a <udp_netif_ip_addr_changed+0x12>
 800a74e:	bf00      	nop
 800a750:	20007704 	.word	0x20007704

0800a754 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800a754:	8943      	ldrh	r3, [r0, #10]
 800a756:	2b0e      	cmp	r3, #14
{
 800a758:	b570      	push	{r4, r5, r6, lr}
 800a75a:	4604      	mov	r4, r0
 800a75c:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800a75e:	d914      	bls.n	800a78a <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a760:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a762:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800a764:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800a766:	07d9      	lsls	r1, r3, #31
 800a768:	d50a      	bpl.n	800a780 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a76a:	2b01      	cmp	r3, #1
 800a76c:	d111      	bne.n	800a792 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a76e:	7843      	ldrb	r3, [r0, #1]
 800a770:	b933      	cbnz	r3, 800a780 <ethernet_input+0x2c>
 800a772:	7883      	ldrb	r3, [r0, #2]
 800a774:	2b5e      	cmp	r3, #94	; 0x5e
 800a776:	d103      	bne.n	800a780 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a778:	7b63      	ldrb	r3, [r4, #13]
 800a77a:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a77e:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a780:	2e08      	cmp	r6, #8
 800a782:	d010      	beq.n	800a7a6 <ethernet_input+0x52>
 800a784:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a788:	d01e      	beq.n	800a7c8 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a78a:	4620      	mov	r0, r4
 800a78c:	f7fc fd38 	bl	8007200 <pbuf_free>
  return ERR_OK;
 800a790:	e018      	b.n	800a7c4 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a792:	2206      	movs	r2, #6
 800a794:	4914      	ldr	r1, [pc, #80]	; (800a7e8 <ethernet_input+0x94>)
 800a796:	f001 fa19 	bl	800bbcc <memcmp>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	d1f0      	bne.n	800a780 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800a79e:	7b63      	ldrb	r3, [r4, #13]
 800a7a0:	f043 0308 	orr.w	r3, r3, #8
 800a7a4:	e7eb      	b.n	800a77e <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a7a6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a7aa:	071a      	lsls	r2, r3, #28
 800a7ac:	d5ed      	bpl.n	800a78a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a7ae:	f06f 010d 	mvn.w	r1, #13
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f7fc fd1e 	bl	80071f4 <pbuf_header>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	d1e6      	bne.n	800a78a <ethernet_input+0x36>
        ip4_input(p, netif);
 800a7bc:	4629      	mov	r1, r5
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f7fb fbfc 	bl	8005fbc <ip4_input>
}
 800a7c4:	2000      	movs	r0, #0
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a7c8:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a7cc:	071b      	lsls	r3, r3, #28
 800a7ce:	d5dc      	bpl.n	800a78a <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a7d0:	f06f 010d 	mvn.w	r1, #13
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f7fc fd0d 	bl	80071f4 <pbuf_header>
 800a7da:	2800      	cmp	r0, #0
 800a7dc:	d1d5      	bne.n	800a78a <ethernet_input+0x36>
        etharp_input(p, netif);
 800a7de:	4629      	mov	r1, r5
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f7fb f855 	bl	8005890 <etharp_input>
      break;
 800a7e6:	e7ed      	b.n	800a7c4 <ethernet_input+0x70>
 800a7e8:	0800e42e 	.word	0x0800e42e

0800a7ec <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800a7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7f0:	460d      	mov	r5, r1
 800a7f2:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a7f4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800a7f8:	4616      	mov	r6, r2
 800a7fa:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800a7fc:	f7f9 fe46 	bl	800448c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a800:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800a802:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a804:	4628      	mov	r0, r5
 800a806:	f7fc fcf5 	bl	80071f4 <pbuf_header>
 800a80a:	b9e0      	cbnz	r0, 800a846 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800a80c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800a80e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	600b      	str	r3, [r1, #0]
 800a816:	88bb      	ldrh	r3, [r7, #4]
 800a818:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800a81a:	6833      	ldr	r3, [r6, #0]
 800a81c:	f8c1 3006 	str.w	r3, [r1, #6]
 800a820:	88b3      	ldrh	r3, [r6, #4]
 800a822:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a824:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a828:	2b06      	cmp	r3, #6
 800a82a:	d006      	beq.n	800a83a <ethernet_output+0x4e>
 800a82c:	4b08      	ldr	r3, [pc, #32]	; (800a850 <ethernet_output+0x64>)
 800a82e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a832:	4908      	ldr	r1, [pc, #32]	; (800a854 <ethernet_output+0x68>)
 800a834:	4808      	ldr	r0, [pc, #32]	; (800a858 <ethernet_output+0x6c>)
 800a836:	f001 fa97 	bl	800bd68 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a83a:	69a3      	ldr	r3, [r4, #24]
 800a83c:	4629      	mov	r1, r5
 800a83e:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800a840:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800a844:	4718      	bx	r3
}
 800a846:	f06f 0001 	mvn.w	r0, #1
 800a84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a84e:	bf00      	nop
 800a850:	0800e434 	.word	0x0800e434
 800a854:	0800e469 	.word	0x0800e469
 800a858:	0800cb76 	.word	0x0800cb76

0800a85c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800a85c:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800a85e:	2304      	movs	r3, #4
{
 800a860:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800a862:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800a864:	4668      	mov	r0, sp
 800a866:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800a868:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800a86a:	f7f8 f9bd 	bl	8002be8 <osMessageCreate>
 800a86e:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800a870:	fab0 f080 	clz	r0, r0
 800a874:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800a876:	4240      	negs	r0, r0
 800a878:	b002      	add	sp, #8
 800a87a:	bd10      	pop	{r4, pc}

0800a87c <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800a87c:	b538      	push	{r3, r4, r5, lr}
 800a87e:	4604      	mov	r4, r0
 800a880:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800a882:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a886:	4629      	mov	r1, r5
 800a888:	6820      	ldr	r0, [r4, #0]
 800a88a:	f7f8 f9b1 	bl	8002bf0 <osMessagePut>
 800a88e:	2800      	cmp	r0, #0
 800a890:	d1f7      	bne.n	800a882 <sys_mbox_post+0x6>
}
 800a892:	bd38      	pop	{r3, r4, r5, pc}

0800a894 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800a894:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800a896:	2200      	movs	r2, #0
 800a898:	6800      	ldr	r0, [r0, #0]
 800a89a:	f7f8 f9a9 	bl	8002bf0 <osMessagePut>
 800a89e:	3000      	adds	r0, #0
 800a8a0:	bf18      	it	ne
 800a8a2:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800a8a4:	4240      	negs	r0, r0
 800a8a6:	bd08      	pop	{r3, pc}

0800a8a8 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800a8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8aa:	4617      	mov	r7, r2
 800a8ac:	b085      	sub	sp, #20
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	460d      	mov	r5, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800a8b2:	f7f8 f8e4 	bl	8002a7e <osKernelSysTick>
 800a8b6:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800a8b8:	b177      	cbz	r7, 800a8d8 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800a8ba:	463a      	mov	r2, r7
 800a8bc:	6831      	ldr	r1, [r6, #0]
 800a8be:	a801      	add	r0, sp, #4
 800a8c0:	f7f8 f9be 	bl	8002c40 <osMessageGet>
    
    if(event.status == osEventMessage)
 800a8c4:	9b01      	ldr	r3, [sp, #4]
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d10d      	bne.n	800a8e6 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800a8ca:	9b02      	ldr	r3, [sp, #8]
 800a8cc:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800a8ce:	f7f8 f8d6 	bl	8002a7e <osKernelSysTick>
 800a8d2:	1b00      	subs	r0, r0, r4
  }
}
 800a8d4:	b005      	add	sp, #20
 800a8d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800a8d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8dc:	6831      	ldr	r1, [r6, #0]
 800a8de:	a801      	add	r0, sp, #4
 800a8e0:	f7f8 f9ae 	bl	8002c40 <osMessageGet>
 800a8e4:	e7f1      	b.n	800a8ca <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800a8e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a8ea:	e7f3      	b.n	800a8d4 <sys_arch_mbox_fetch+0x2c>

0800a8ec <sys_mbox_valid>:
 800a8ec:	6800      	ldr	r0, [r0, #0]
 800a8ee:	3000      	adds	r0, #0
 800a8f0:	bf18      	it	ne
 800a8f2:	2001      	movne	r0, #1
 800a8f4:	4770      	bx	lr
	...

0800a8f8 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800a8f8:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800a8fa:	4803      	ldr	r0, [pc, #12]	; (800a908 <sys_init+0x10>)
 800a8fc:	f7f8 f8e6 	bl	8002acc <osMutexCreate>
 800a900:	4b02      	ldr	r3, [pc, #8]	; (800a90c <sys_init+0x14>)
 800a902:	6018      	str	r0, [r3, #0]
 800a904:	bd08      	pop	{r3, pc}
 800a906:	bf00      	nop
 800a908:	0800e4a0 	.word	0x0800e4a0
 800a90c:	2000770c 	.word	0x2000770c

0800a910 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800a910:	b513      	push	{r0, r1, r4, lr}
  
  osMutexDef(MUTEX);
 800a912:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800a914:	4604      	mov	r4, r0
  osMutexDef(MUTEX);
 800a916:	a802      	add	r0, sp, #8
 800a918:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800a91c:	f7f8 f8d6 	bl	8002acc <osMutexCreate>
 800a920:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800a922:	fab0 f080 	clz	r0, r0
 800a926:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800a928:	4240      	negs	r0, r0
 800a92a:	b002      	add	sp, #8
 800a92c:	bd10      	pop	{r4, pc}

0800a92e <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800a92e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a932:	6800      	ldr	r0, [r0, #0]
 800a934:	f7f8 b8ce 	b.w	8002ad4 <osMutexWait>

0800a938 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800a938:	6800      	ldr	r0, [r0, #0]
 800a93a:	f7f8 b953 	b.w	8002be4 <osMutexRelease>

0800a93e <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800a93e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800a940:	9102      	str	r1, [sp, #8]
 800a942:	9908      	ldr	r1, [sp, #32]
 800a944:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 800a946:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800a948:	f8ad 100c 	strh.w	r1, [sp, #12]
 800a94c:	2100      	movs	r1, #0
 800a94e:	9305      	str	r3, [sp, #20]
 800a950:	9104      	str	r1, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800a952:	4611      	mov	r1, r2
 800a954:	f7f8 f89a 	bl	8002a8c <osThreadCreate>
}
 800a958:	b007      	add	sp, #28
 800a95a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a960 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800a960:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <sys_arch_protect+0x14>)
 800a964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	f7f8 f8b3 	bl	8002ad4 <osMutexWait>
  return (sys_prot_t)1;
}
 800a96e:	2001      	movs	r0, #1
 800a970:	bd08      	pop	{r3, pc}
 800a972:	bf00      	nop
 800a974:	2000770c 	.word	0x2000770c

0800a978 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800a978:	4b01      	ldr	r3, [pc, #4]	; (800a980 <sys_arch_unprotect+0x8>)
 800a97a:	6818      	ldr	r0, [r3, #0]
 800a97c:	f7f8 b932 	b.w	8002be4 <osMutexRelease>
 800a980:	2000770c 	.word	0x2000770c

0800a984 <debug_init>:
	
}

void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 800a984:	4b01      	ldr	r3, [pc, #4]	; (800a98c <debug_init+0x8>)
 800a986:	6018      	str	r0, [r3, #0]
 800a988:	4770      	bx	lr
 800a98a:	bf00      	nop
 800a98c:	20003f84 	.word	0x20003f84

0800a990 <debug_chr>:
{
	#if USE_HAL
	HAL_UART_Transmit(pUart,
	(uint8_t*)&chr, 1, 1000);
	#else
	while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 800a990:	4b03      	ldr	r3, [pc, #12]	; (800a9a0 <debug_chr+0x10>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	69da      	ldr	r2, [r3, #28]
 800a998:	0612      	lsls	r2, r2, #24
 800a99a:	d5fc      	bpl.n	800a996 <debug_chr+0x6>
	pUart->Instance->TDR = (uint16_t)chr;
 800a99c:	6298      	str	r0, [r3, #40]	; 0x28
 800a99e:	4770      	bx	lr
 800a9a0:	20003f84 	.word	0x20003f84

0800a9a4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a9a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a9a8:	4a25      	ldr	r2, [pc, #148]	; (800aa40 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800a9aa:	f04f 0800 	mov.w	r8, #0
{
 800a9ae:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9b0:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a9b4:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800a9b6:	4647      	mov	r7, r8
 800a9b8:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a9ba:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800a9bc:	b92c      	cbnz	r4, 800a9ca <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a9be:	4639      	mov	r1, r7
 800a9c0:	481f      	ldr	r0, [pc, #124]	; (800aa40 <low_level_output+0x9c>)
 800a9c2:	f7f5 ffb1 	bl	8000928 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	e004      	b.n	800a9d4 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a9ca:	682a      	ldr	r2, [r5, #0]
 800a9cc:	2a00      	cmp	r2, #0
 800a9ce:	da11      	bge.n	800a9f4 <low_level_output+0x50>
        errval = ERR_USE;
 800a9d0:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a9d4:	9b00      	ldr	r3, [sp, #0]
 800a9d6:	f241 0214 	movw	r2, #4116	; 0x1014
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	5899      	ldr	r1, [r3, r2]
 800a9de:	0689      	lsls	r1, r1, #26
 800a9e0:	d505      	bpl.n	800a9ee <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a9e2:	2120      	movs	r1, #32
 800a9e4:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f241 0204 	movw	r2, #4100	; 0x1004
 800a9ec:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800a9ee:	b003      	add	sp, #12
 800a9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800a9f4:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9f8:	4646      	mov	r6, r8
      payloadoffset = 0;
 800a9fa:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a9fe:	eb06 0809 	add.w	r8, r6, r9
 800aa02:	1998      	adds	r0, r3, r6
 800aa04:	6861      	ldr	r1, [r4, #4]
 800aa06:	45d8      	cmp	r8, fp
 800aa08:	d808      	bhi.n	800aa1c <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800aa0a:	464a      	mov	r2, r9
 800aa0c:	4451      	add	r1, sl
 800aa0e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800aa10:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800aa12:	f001 f8ea 	bl	800bbea <memcpy>
  for(q = p; q != NULL; q = q->next)
 800aa16:	6824      	ldr	r4, [r4, #0]
 800aa18:	9b01      	ldr	r3, [sp, #4]
 800aa1a:	e7cf      	b.n	800a9bc <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800aa1c:	ebab 0606 	sub.w	r6, fp, r6
 800aa20:	4451      	add	r1, sl
 800aa22:	4632      	mov	r2, r6
 800aa24:	f001 f8e1 	bl	800bbea <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800aa28:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800aa2a:	682b      	ldr	r3, [r5, #0]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	dbcf      	blt.n	800a9d0 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800aa30:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800aa32:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800aa34:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800aa36:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800aa3a:	2600      	movs	r6, #0
 800aa3c:	e7df      	b.n	800a9fe <low_level_output+0x5a>
 800aa3e:	bf00      	nop
 800aa40:	20008fe0 	.word	0x20008fe0

0800aa44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800aa44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa48:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800aa4a:	4c37      	ldr	r4, [pc, #220]	; (800ab28 <ethernetif_input+0xe4>)
 800aa4c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	f7f8 f87b 	bl	8002b4c <osSemaphoreWait>
 800aa56:	2800      	cmp	r0, #0
 800aa58:	d1f8      	bne.n	800aa4c <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800aa5a:	4c34      	ldr	r4, [pc, #208]	; (800ab2c <ethernetif_input+0xe8>)
 800aa5c:	4620      	mov	r0, r4
 800aa5e:	f7f5 ffd5 	bl	8000a0c <HAL_ETH_GetReceivedFrame_IT>
 800aa62:	4605      	mov	r5, r0
 800aa64:	2800      	cmp	r0, #0
 800aa66:	d1f0      	bne.n	800aa4a <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800aa68:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800aa6a:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800aa6c:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800aa6e:	bb01      	cbnz	r1, 800aab2 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 800aa70:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aa72:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800aa74:	2200      	movs	r2, #0
 800aa76:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800aa78:	4282      	cmp	r2, r0
 800aa7a:	d14d      	bne.n	800ab18 <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 800aa7c:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800aa7e:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800aa82:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800aa84:	6823      	ldr	r3, [r4, #0]
 800aa86:	5899      	ldr	r1, [r3, r2]
 800aa88:	0609      	lsls	r1, r1, #24
 800aa8a:	d505      	bpl.n	800aa98 <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800aa8c:	2180      	movs	r1, #128	; 0x80
 800aa8e:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800aa90:	f241 0208 	movw	r2, #4104	; 0x1008
 800aa94:	2100      	movs	r1, #0
 800aa96:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800aa98:	2f00      	cmp	r7, #0
 800aa9a:	d0d6      	beq.n	800aa4a <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800aa9c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800aaa0:	4651      	mov	r1, sl
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	4798      	blx	r3
 800aaa6:	2800      	cmp	r0, #0
 800aaa8:	d0d7      	beq.n	800aa5a <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800aaaa:	4638      	mov	r0, r7
 800aaac:	f7fc fba8 	bl	8007200 <pbuf_free>
 800aab0:	e7d3      	b.n	800aa5a <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800aab2:	2203      	movs	r2, #3
 800aab4:	2004      	movs	r0, #4
 800aab6:	f7fc fc0d 	bl	80072d4 <pbuf_alloc>
  if (p != NULL)
 800aaba:	4607      	mov	r7, r0
 800aabc:	2800      	cmp	r0, #0
 800aabe:	d0d7      	beq.n	800aa70 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800aac0:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800aac4:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800aac6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800aaca:	462e      	mov	r6, r5
      payloadoffset = 0;
 800aacc:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800aad0:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800aad4:	18b5      	adds	r5, r6, r2
 800aad6:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800aada:	429d      	cmp	r5, r3
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	eb03 0106 	add.w	r1, r3, r6
 800aae2:	d808      	bhi.n	800aaf6 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800aae4:	4448      	add	r0, r9
 800aae6:	f001 f880 	bl	800bbea <memcpy>
    for(q = p; q != NULL; q = q->next)
 800aaea:	f8d8 8000 	ldr.w	r8, [r8]
 800aaee:	f1b8 0f00 	cmp.w	r8, #0
 800aaf2:	d1e8      	bne.n	800aac6 <ethernetif_input+0x82>
 800aaf4:	e7bd      	b.n	800aa72 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800aaf6:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800aafa:	4448      	add	r0, r9
 800aafc:	3604      	adds	r6, #4
 800aafe:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800ab00:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800ab02:	f001 f872 	bl	800bbea <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ab06:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800ab0a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800ab0e:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800ab10:	f8db 3008 	ldr.w	r3, [fp, #8]
 800ab14:	9301      	str	r3, [sp, #4]
 800ab16:	e7db      	b.n	800aad0 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ab18:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800ab1a:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800ab1c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800ab20:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	e7a8      	b.n	800aa78 <ethernetif_input+0x34>
 800ab26:	bf00      	nop
 800ab28:	20003f88 	.word	0x20003f88
 800ab2c:	20008fe0 	.word	0x20008fe0

0800ab30 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800ab30:	6802      	ldr	r2, [r0, #0]
 800ab32:	4b2d      	ldr	r3, [pc, #180]	; (800abe8 <HAL_ETH_MspInit+0xb8>)
 800ab34:	429a      	cmp	r2, r3
{
 800ab36:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab38:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800ab3a:	d152      	bne.n	800abe2 <HAL_ETH_MspInit+0xb2>
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab3c:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab40:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab42:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab44:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab48:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab4a:	a903      	add	r1, sp, #12
 800ab4c:	4827      	ldr	r0, [pc, #156]	; (800abec <HAL_ETH_MspInit+0xbc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab4e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800ab52:	631a      	str	r2, [r3, #48]	; 0x30
 800ab54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab56:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800ab5a:	9200      	str	r2, [sp, #0]
 800ab5c:	9a00      	ldr	r2, [sp, #0]
 800ab5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab60:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800ab64:	631a      	str	r2, [r3, #48]	; 0x30
 800ab66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab68:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800ab6c:	9201      	str	r2, [sp, #4]
 800ab6e:	9a01      	ldr	r2, [sp, #4]
 800ab70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab72:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800ab76:	631a      	str	r2, [r3, #48]	; 0x30
 800ab78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab7a:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab80:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab82:	9606      	str	r6, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 800ab84:	9302      	str	r3, [sp, #8]
 800ab86:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ab88:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ab8a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800ab8c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ab8e:	f7f6 f965 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ab92:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ab94:	a903      	add	r1, sp, #12
 800ab96:	4816      	ldr	r0, [pc, #88]	; (800abf0 <HAL_ETH_MspInit+0xc0>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800ab98:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab9a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab9c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab9e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800aba0:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aba2:	f7f6 f95b 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800aba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800abaa:	a903      	add	r1, sp, #12
 800abac:	4811      	ldr	r0, [pc, #68]	; (800abf4 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800abae:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abb0:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abb2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abb4:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abb6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800abb8:	f7f6 f950 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800abbc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800abc0:	a903      	add	r1, sp, #12
 800abc2:	480d      	ldr	r0, [pc, #52]	; (800abf8 <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800abc4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800abc6:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800abc8:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800abca:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800abcc:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800abce:	f7f6 f945 	bl	8000e5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800abd2:	203d      	movs	r0, #61	; 0x3d
 800abd4:	4622      	mov	r2, r4
 800abd6:	2105      	movs	r1, #5
 800abd8:	f7f5 fd34 	bl	8000644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800abdc:	203d      	movs	r0, #61	; 0x3d
 800abde:	f7f5 fd69 	bl	80006b4 <HAL_NVIC_EnableIRQ>
}
 800abe2:	b009      	add	sp, #36	; 0x24
 800abe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe6:	bf00      	nop
 800abe8:	40028000 	.word	0x40028000
 800abec:	40020800 	.word	0x40020800
 800abf0:	40020000 	.word	0x40020000
 800abf4:	40020400 	.word	0x40020400
 800abf8:	40021800 	.word	0x40021800

0800abfc <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800abfc:	4b01      	ldr	r3, [pc, #4]	; (800ac04 <HAL_ETH_RxCpltCallback+0x8>)
 800abfe:	6818      	ldr	r0, [r3, #0]
 800ac00:	f7f7 bfcc 	b.w	8002b9c <osSemaphoreRelease>
 800ac04:	20003f88 	.word	0x20003f88

0800ac08 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ac08:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ac0a:	4604      	mov	r4, r0
{
 800ac0c:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ac0e:	b930      	cbnz	r0, 800ac1e <ethernetif_init+0x16>
 800ac10:	4b46      	ldr	r3, [pc, #280]	; (800ad2c <ethernetif_init+0x124>)
 800ac12:	f240 2247 	movw	r2, #583	; 0x247
 800ac16:	4946      	ldr	r1, [pc, #280]	; (800ad30 <ethernetif_init+0x128>)
 800ac18:	4846      	ldr	r0, [pc, #280]	; (800ad34 <ethernetif_init+0x12c>)
 800ac1a:	f001 f8a5 	bl	800bd68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800ac1e:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800ac20:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800ac22:	4d45      	ldr	r5, [pc, #276]	; (800ad38 <ethernetif_init+0x130>)
  netif->name[0] = IFNAME0;
 800ac24:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800ac28:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800ac2a:	4a44      	ldr	r2, [pc, #272]	; (800ad3c <ethernetif_init+0x134>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ac2c:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800ac2e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ac32:	4b43      	ldr	r3, [pc, #268]	; (800ad40 <ethernetif_init+0x138>)
  MACAddr[1] = 0x80;
 800ac34:	f88d 100d 	strb.w	r1, [sp, #13]
  MACAddr[2] = 0xE1;
 800ac38:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800ac3a:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ac3c:	4b41      	ldr	r3, [pc, #260]	; (800ad44 <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 800ac3e:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ac40:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800ac42:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800ac44:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800ac46:	f88d 100e 	strb.w	r1, [sp, #14]
  heth.Init.MACAddr = &MACAddr[0];
 800ac4a:	a903      	add	r1, sp, #12
  uint32_t regvalue = 0;
 800ac4c:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800ac4e:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800ac50:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[3] = 0x00;
 800ac54:	f88d 300f 	strb.w	r3, [sp, #15]
  MACAddr[4] = 0x00;
 800ac58:	f88d 3010 	strb.w	r3, [sp, #16]
  MACAddr[5] = 0x00;
 800ac5c:	f88d 3011 	strb.w	r3, [sp, #17]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800ac60:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ac62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800ac66:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800ac68:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800ac6a:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800ac6c:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800ac6e:	f7f5 ffbd 	bl	8000bec <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800ac72:	b928      	cbnz	r0, 800ac80 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800ac74:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800ac78:	f043 0304 	orr.w	r3, r3, #4
 800ac7c:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ac80:	2304      	movs	r3, #4
 800ac82:	4a31      	ldr	r2, [pc, #196]	; (800ad48 <ethernetif_init+0x140>)
 800ac84:	4931      	ldr	r1, [pc, #196]	; (800ad4c <ethernetif_init+0x144>)
  osSemaphoreDef(SEM);
 800ac86:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800ac88:	482b      	ldr	r0, [pc, #172]	; (800ad38 <ethernetif_init+0x130>)
 800ac8a:	f7f5 fdd3 	bl	8000834 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800ac8e:	2304      	movs	r3, #4
 800ac90:	4a2f      	ldr	r2, [pc, #188]	; (800ad50 <ethernetif_init+0x148>)
 800ac92:	4930      	ldr	r1, [pc, #192]	; (800ad54 <ethernetif_init+0x14c>)
 800ac94:	4828      	ldr	r0, [pc, #160]	; (800ad38 <ethernetif_init+0x130>)
 800ac96:	f7f5 fe0a 	bl	80008ae <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800ac9a:	2306      	movs	r3, #6
  osSemaphoreDef(SEM);
 800ac9c:	a80a      	add	r0, sp, #40	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800ac9e:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800aca0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800aca4:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800aca6:	ad05      	add	r5, sp, #20
 800aca8:	4e2b      	ldr	r6, [pc, #172]	; (800ad58 <ethernetif_init+0x150>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800acaa:	781a      	ldrb	r2, [r3, #0]
 800acac:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800acb0:	785a      	ldrb	r2, [r3, #1]
 800acb2:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800acb6:	789a      	ldrb	r2, [r3, #2]
 800acb8:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800acbc:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800acbe:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800acc2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800acc6:	791a      	ldrb	r2, [r3, #4]
 800acc8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800accc:	795b      	ldrb	r3, [r3, #5]
 800acce:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800acd2:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800acd6:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800acd8:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800acdc:	f043 030a 	orr.w	r3, r3, #10
 800ace0:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800ace4:	f7f7 ff1e 	bl	8002b24 <osSemaphoreCreate>
 800ace8:	4b1c      	ldr	r3, [pc, #112]	; (800ad5c <ethernetif_init+0x154>)
 800acea:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800acec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800acee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800acf0:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800acf2:	4621      	mov	r1, r4
 800acf4:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800acf6:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800acf8:	f7f7 fec8 	bl	8002a8c <osThreadCreate>
  HAL_ETH_Start(&heth);
 800acfc:	480e      	ldr	r0, [pc, #56]	; (800ad38 <ethernetif_init+0x130>)
 800acfe:	f7f6 f86f 	bl	8000de0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800ad02:	aa01      	add	r2, sp, #4
 800ad04:	210b      	movs	r1, #11
 800ad06:	480c      	ldr	r0, [pc, #48]	; (800ad38 <ethernetif_init+0x130>)
 800ad08:	f7f5 feff 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800ad0c:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ad0e:	210b      	movs	r1, #11
 800ad10:	4809      	ldr	r0, [pc, #36]	; (800ad38 <ethernetif_init+0x130>)
  regvalue |= (PHY_ISFR_INT4);
 800ad12:	f042 020b 	orr.w	r2, r2, #11
 800ad16:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800ad18:	f7f5 ff31 	bl	8000b7e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800ad1c:	aa01      	add	r2, sp, #4
 800ad1e:	210b      	movs	r1, #11
 800ad20:	4805      	ldr	r0, [pc, #20]	; (800ad38 <ethernetif_init+0x130>)
 800ad22:	f7f5 fef2 	bl	8000b0a <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800ad26:	4638      	mov	r0, r7
 800ad28:	b00b      	add	sp, #44	; 0x2c
 800ad2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad2c:	0800e4a4 	.word	0x0800e4a4
 800ad30:	0800cba9 	.word	0x0800cba9
 800ad34:	0800cb76 	.word	0x0800cb76
 800ad38:	20008fe0 	.word	0x20008fe0
 800ad3c:	40028000 	.word	0x40028000
 800ad40:	08005c65 	.word	0x08005c65
 800ad44:	0800a9a5 	.word	0x0800a9a5
 800ad48:	20009028 	.word	0x20009028
 800ad4c:	20007710 	.word	0x20007710
 800ad50:	20007790 	.word	0x20007790
 800ad54:	20008f60 	.word	0x20008f60
 800ad58:	0800ca8c 	.word	0x0800ca8c
 800ad5c:	20003f88 	.word	0x20003f88

0800ad60 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800ad60:	f7f5 bc46 	b.w	80005f0 <HAL_GetTick>

0800ad64 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800ad64:	2100      	movs	r1, #0
{
 800ad66:	b530      	push	{r4, r5, lr}
  tcpip_init( NULL, NULL );
 800ad68:	4608      	mov	r0, r1
{
 800ad6a:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 800ad6c:	f7f9 fb4e 	bl	800440c <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ad70:	4d11      	ldr	r5, [pc, #68]	; (800adb8 <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800ad72:	2000      	movs	r0, #0
  gw.addr = 0;
 800ad74:	4b11      	ldr	r3, [pc, #68]	; (800adbc <MX_LWIP_Init+0x58>)
  ipaddr.addr = 0;
 800ad76:	4912      	ldr	r1, [pc, #72]	; (800adc0 <MX_LWIP_Init+0x5c>)
  netmask.addr = 0;
 800ad78:	4a12      	ldr	r2, [pc, #72]	; (800adc4 <MX_LWIP_Init+0x60>)
  gw.addr = 0;
 800ad7a:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800ad7c:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800ad7e:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800ad80:	4c11      	ldr	r4, [pc, #68]	; (800adc8 <MX_LWIP_Init+0x64>)
 800ad82:	9502      	str	r5, [sp, #8]
 800ad84:	4d11      	ldr	r5, [pc, #68]	; (800adcc <MX_LWIP_Init+0x68>)
 800ad86:	e88d 0021 	stmia.w	sp, {r0, r5}
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	f7fc f914 	bl	8006fb8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ad90:	4620      	mov	r0, r4
 800ad92:	f7fc f94f 	bl	8007034 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ad96:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800ad9a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800ad9c:	075b      	lsls	r3, r3, #29
 800ad9e:	d507      	bpl.n	800adb0 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 800ada0:	f7fc f94e 	bl	8007040 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800ada4:	4808      	ldr	r0, [pc, #32]	; (800adc8 <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ada6:	b005      	add	sp, #20
 800ada8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800adac:	f7fa baa8 	b.w	8005300 <dhcp_start>
    netif_set_down(&gnetif);
 800adb0:	f7fc f955 	bl	800705e <netif_set_down>
 800adb4:	e7f6      	b.n	800ada4 <MX_LWIP_Init+0x40>
 800adb6:	bf00      	nop
 800adb8:	08004391 	.word	0x08004391
 800adbc:	2000a834 	.word	0x2000a834
 800adc0:	2000a82c 	.word	0x2000a82c
 800adc4:	2000a830 	.word	0x2000a830
 800adc8:	2000a7f8 	.word	0x2000a7f8
 800adcc:	0800ac09 	.word	0x0800ac09

0800add0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800add0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800add2:	4e1f      	ldr	r6, [pc, #124]	; (800ae50 <StartDefaultTask+0x80>)
  MX_LWIP_Init();
 800add4:	f7ff ffc6 	bl	800ad64 <MX_LWIP_Init>
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	xprintf("\n\r");
 800add8:	4c1e      	ldr	r4, [pc, #120]	; (800ae54 <StartDefaultTask+0x84>)
	} else {
		if (status == MI_TIMEOUT) {
			xprintf((char *)"No tag found.\n\r");
		}
		if (status == MI_ERR) {
			xprintf((char *)"Error.\n\r");
 800adda:	4d1f      	ldr	r5, [pc, #124]	; (800ae58 <StartDefaultTask+0x88>)
  xprintf("Start!! <3\n\r");
 800addc:	481f      	ldr	r0, [pc, #124]	; (800ae5c <StartDefaultTask+0x8c>)
 800adde:	f000 fe3b 	bl	800ba58 <xprintf>
    osDelay(1000);
 800ade2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800ade6:	f7f7 fe69 	bl	8002abc <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800adea:	2101      	movs	r1, #1
 800adec:	4630      	mov	r0, r6
 800adee:	f7f6 f924 	bl	800103a <HAL_GPIO_TogglePin>
	xprintf("\n\r");
 800adf2:	4818      	ldr	r0, [pc, #96]	; (800ae54 <StartDefaultTask+0x84>)
 800adf4:	f000 fe30 	bl	800ba58 <xprintf>
    int status = TM_MFRC522_Check(CardID, &type);
 800adf8:	f10d 0107 	add.w	r1, sp, #7
 800adfc:	a802      	add	r0, sp, #8
 800adfe:	f000 fbc7 	bl	800b590 <TM_MFRC522_Check>
	if (status == MI_OK) {
 800ae02:	b9e8      	cbnz	r0, 800ae40 <StartDefaultTask+0x70>
		xprintf ((char *)"Found tag: ");
 800ae04:	4816      	ldr	r0, [pc, #88]	; (800ae60 <StartDefaultTask+0x90>)
 800ae06:	f000 fe27 	bl	800ba58 <xprintf>
		bin_to_strhex((unsigned char *)CardID, sizeof(CardID), &result);
 800ae0a:	aa03      	add	r2, sp, #12
 800ae0c:	2104      	movs	r1, #4
 800ae0e:	a802      	add	r0, sp, #8
 800ae10:	f000 fbfe 	bl	800b610 <bin_to_strhex>
		xprintf((char *)result);
 800ae14:	9803      	ldr	r0, [sp, #12]
 800ae16:	f000 fe1f 	bl	800ba58 <xprintf>
		xprintf((char *)"\n\r");
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fe1c 	bl	800ba58 <xprintf>
		xprintf((char *)"Type is: ");
 800ae20:	4810      	ldr	r0, [pc, #64]	; (800ae64 <StartDefaultTask+0x94>)
 800ae22:	f000 fe19 	bl	800ba58 <xprintf>
		bin_to_strhex((unsigned char *)&type, 1, &result);
 800ae26:	aa03      	add	r2, sp, #12
 800ae28:	2101      	movs	r1, #1
 800ae2a:	f10d 0007 	add.w	r0, sp, #7
 800ae2e:	f000 fbef 	bl	800b610 <bin_to_strhex>
		xprintf((char *)result);
 800ae32:	9803      	ldr	r0, [sp, #12]
 800ae34:	f000 fe10 	bl	800ba58 <xprintf>
		xprintf((char *)"\n\r");
 800ae38:	4620      	mov	r0, r4
			xprintf((char *)"Error.\n\r");
 800ae3a:	f000 fe0d 	bl	800ba58 <xprintf>
  {
 800ae3e:	e7d0      	b.n	800ade2 <StartDefaultTask+0x12>
		if (status == MI_TIMEOUT) {
 800ae40:	2803      	cmp	r0, #3
 800ae42:	d101      	bne.n	800ae48 <StartDefaultTask+0x78>
			xprintf((char *)"No tag found.\n\r");
 800ae44:	4808      	ldr	r0, [pc, #32]	; (800ae68 <StartDefaultTask+0x98>)
 800ae46:	e7f8      	b.n	800ae3a <StartDefaultTask+0x6a>
		if (status == MI_ERR) {
 800ae48:	2802      	cmp	r0, #2
 800ae4a:	d1ca      	bne.n	800ade2 <StartDefaultTask+0x12>
			xprintf((char *)"Error.\n\r");
 800ae4c:	4628      	mov	r0, r5
 800ae4e:	e7f4      	b.n	800ae3a <StartDefaultTask+0x6a>
 800ae50:	40020400 	.word	0x40020400
 800ae54:	0800e556 	.word	0x0800e556
 800ae58:	0800e4f1 	.word	0x0800e4f1
 800ae5c:	0800e4be 	.word	0x0800e4be
 800ae60:	0800e4cb 	.word	0x0800e4cb
 800ae64:	0800e4d7 	.word	0x0800e4d7
 800ae68:	0800e4e1 	.word	0x0800e4e1

0800ae6c <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae6c:	4b2c      	ldr	r3, [pc, #176]	; (800af20 <SystemClock_Config+0xb4>)
 800ae6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800ae74:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae76:	641a      	str	r2, [r3, #64]	; 0x40
{
 800ae78:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae7c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ae7e:	4a29      	ldr	r2, [pc, #164]	; (800af24 <SystemClock_Config+0xb8>)
  RCC_OscInitStruct.PLL.PLLM = 4;
 800ae80:	2604      	movs	r6, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800ae86:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ae8c:	6813      	ldr	r3, [r2, #0]
 800ae8e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800ae92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800ae9a:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800ae9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 800aea0:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800aea2:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800aeac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800aeb0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800aeb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aeb6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 72;
 800aeb8:	2348      	movs	r3, #72	; 0x48
 800aeba:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800aebc:	2303      	movs	r3, #3
 800aebe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800aec0:	f7f6 f946 	bl	8001150 <HAL_RCC_OscConfig>
 800aec4:	b100      	cbz	r0, 800aec8 <SystemClock_Config+0x5c>
 800aec6:	e7fe      	b.n	800aec6 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aec8:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800aeca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800aece:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800aed0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800aed2:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800aed4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800aed6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800aed8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800aeda:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800aedc:	f7f6 fafa 	bl	80014d4 <HAL_RCC_ClockConfig>
 800aee0:	b100      	cbz	r0, 800aee4 <SystemClock_Config+0x78>
 800aee2:	e7fe      	b.n	800aee2 <SystemClock_Config+0x76>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800aee4:	4b10      	ldr	r3, [pc, #64]	; (800af28 <SystemClock_Config+0xbc>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800aee6:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800aee8:	9032      	str	r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aeea:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800aeec:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aeee:	f7f6 fbd3 	bl	8001698 <HAL_RCCEx_PeriphCLKConfig>
 800aef2:	4604      	mov	r4, r0
 800aef4:	b100      	cbz	r0, 800aef8 <SystemClock_Config+0x8c>
 800aef6:	e7fe      	b.n	800aef6 <SystemClock_Config+0x8a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800aef8:	f7f6 fb8a 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800aefc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af00:	fbb0 f0f3 	udiv	r0, r0, r3
 800af04:	f7f5 fbe2 	bl	80006cc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800af08:	4630      	mov	r0, r6
 800af0a:	f7f5 fbf5 	bl	80006f8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800af0e:	4622      	mov	r2, r4
 800af10:	4629      	mov	r1, r5
 800af12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af16:	f7f5 fb95 	bl	8000644 <HAL_NVIC_SetPriority>
}
 800af1a:	b034      	add	sp, #208	; 0xd0
 800af1c:	bd70      	pop	{r4, r5, r6, pc}
 800af1e:	bf00      	nop
 800af20:	40023800 	.word	0x40023800
 800af24:	40007000 	.word	0x40007000
 800af28:	00200100 	.word	0x00200100

0800af2c <main>:
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af2c:	4c6e      	ldr	r4, [pc, #440]	; (800b0e8 <main+0x1bc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af2e:	2500      	movs	r5, #0
  huart3.Instance = USART3;
 800af30:	4e6e      	ldr	r6, [pc, #440]	; (800b0ec <main+0x1c0>)
{
 800af32:	b580      	push	{r7, lr}
 800af34:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800af36:	2701      	movs	r7, #1
  HAL_Init();
 800af38:	f7f5 fb42 	bl	80005c0 <HAL_Init>
  SystemClock_Config();
 800af3c:	f7ff ff96 	bl	800ae6c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af40:	6b23      	ldr	r3, [r4, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800af42:	2200      	movs	r2, #0
 800af44:	f244 0181 	movw	r1, #16513	; 0x4081
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af48:	f043 0304 	orr.w	r3, r3, #4
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800af4c:	4868      	ldr	r0, [pc, #416]	; (800b0f0 <main+0x1c4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800af4e:	6323      	str	r3, [r4, #48]	; 0x30
 800af50:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af52:	f003 0304 	and.w	r3, r3, #4
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800af5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af60:	6323      	str	r3, [r4, #48]	; 0x30
 800af62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af68:	9302      	str	r3, [sp, #8]
 800af6a:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800af6c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af6e:	f043 0301 	orr.w	r3, r3, #1
 800af72:	6323      	str	r3, [r4, #48]	; 0x30
 800af74:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	9303      	str	r3, [sp, #12]
 800af7c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800af7e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af80:	f043 0302 	orr.w	r3, r3, #2
 800af84:	6323      	str	r3, [r4, #48]	; 0x30
 800af86:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af88:	f003 0302 	and.w	r3, r3, #2
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800af90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af92:	f043 0308 	orr.w	r3, r3, #8
 800af96:	6323      	str	r3, [r4, #48]	; 0x30
 800af98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800af9a:	f003 0308 	and.w	r3, r3, #8
 800af9e:	9305      	str	r3, [sp, #20]
 800afa0:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800afa2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afa4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800afa8:	6323      	str	r3, [r4, #48]	; 0x30
 800afaa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800afac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afb0:	9306      	str	r3, [sp, #24]
 800afb2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800afb4:	f7f6 f83c 	bl	8001030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800afb8:	2200      	movs	r2, #0
 800afba:	2140      	movs	r1, #64	; 0x40
 800afbc:	484d      	ldr	r0, [pc, #308]	; (800b0f4 <main+0x1c8>)
 800afbe:	f7f6 f837 	bl	8001030 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800afc2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800afc6:	a907      	add	r1, sp, #28
 800afc8:	484b      	ldr	r0, [pc, #300]	; (800b0f8 <main+0x1cc>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800afca:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800afcc:	4b4b      	ldr	r3, [pc, #300]	; (800b0fc <main+0x1d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afce:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800afd0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800afd2:	f7f5 ff43 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800afd6:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afda:	a907      	add	r1, sp, #28
 800afdc:	4844      	ldr	r0, [pc, #272]	; (800b0f0 <main+0x1c4>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800afde:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800afe0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800afe2:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800afe4:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800afe6:	f7f5 ff39 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800afea:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800afec:	a907      	add	r1, sp, #28
 800afee:	4841      	ldr	r0, [pc, #260]	; (800b0f4 <main+0x1c8>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800aff0:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aff2:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aff4:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aff6:	950a      	str	r5, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aff8:	f7f5 ff30 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800affc:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800affe:	483d      	ldr	r0, [pc, #244]	; (800b0f4 <main+0x1c8>)
 800b000:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b002:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800b004:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b006:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800b008:	f7f5 ff28 	bl	8000e5c <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800b00c:	483c      	ldr	r0, [pc, #240]	; (800b100 <main+0x1d4>)
 800b00e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b012:	60b5      	str	r5, [r6, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b014:	60f5      	str	r5, [r6, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b016:	6135      	str	r5, [r6, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b018:	61b5      	str	r5, [r6, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b01a:	61f5      	str	r5, [r6, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b01c:	6235      	str	r5, [r6, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b01e:	6275      	str	r5, [r6, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800b020:	e886 0009 	stmia.w	r6, {r0, r3}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b024:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b026:	4630      	mov	r0, r6
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b028:	6173      	str	r3, [r6, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b02a:	f7f7 fb92 	bl	8002752 <HAL_UART_Init>
 800b02e:	b100      	cbz	r0, 800b032 <main+0x106>
 800b030:	e7fe      	b.n	800b030 <main+0x104>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b032:	4b34      	ldr	r3, [pc, #208]	; (800b104 <main+0x1d8>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b034:	2206      	movs	r2, #6
 800b036:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b03a:	6118      	str	r0, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800b03c:	6158      	str	r0, [r3, #20]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b03e:	6218      	str	r0, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b040:	6258      	str	r0, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b042:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b044:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800b046:	61df      	str	r7, [r3, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b048:	62df      	str	r7, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b04a:	e883 0006 	stmia.w	r3, {r1, r2}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b04e:	2202      	movs	r2, #2
 800b050:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b052:	619a      	str	r2, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b054:	f7f5 fff5 	bl	8001042 <HAL_PCD_Init>
 800b058:	b100      	cbz	r0, 800b05c <main+0x130>
 800b05a:	e7fe      	b.n	800b05a <main+0x12e>
	SPIx_FORCE_RESET();
 800b05c:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b05e:	4a2a      	ldr	r2, [pc, #168]	; (800b108 <main+0x1dc>)
	SPIx_FORCE_RESET();
 800b060:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b064:	6263      	str	r3, [r4, #36]	; 0x24
	SPIx_RELEASE_RESET();
 800b066:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b06c:	6263      	str	r3, [r4, #36]	; 0x24
	SPIx_CLK_ENABLE();
 800b06e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b070:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b074:	6463      	str	r3, [r4, #68]	; 0x44
 800b076:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hspi1.Instance = SPI1;
 800b078:	4c24      	ldr	r4, [pc, #144]	; (800b10c <main+0x1e0>)
	SPIx_CLK_ENABLE();
 800b07a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800b07e:	60a0      	str	r0, [r4, #8]
	SPIx_CLK_ENABLE();
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	9b00      	ldr	r3, [sp, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b084:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800b088:	6120      	str	r0, [r4, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800b08a:	6160      	str	r0, [r4, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b08c:	61e0      	str	r0, [r4, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800b08e:	6220      	str	r0, [r4, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800b090:	6260      	str	r0, [r4, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b092:	62a0      	str	r0, [r4, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800b094:	6320      	str	r0, [r4, #48]	; 0x30
  HAL_Delay(20);
 800b096:	2014      	movs	r0, #20
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800b098:	e884 000c 	stmia.w	r4, {r2, r3}
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800b09c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b0a0:	60e3      	str	r3, [r4, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800b0a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b0a6:	61a3      	str	r3, [r4, #24]
  hspi1.Init.CRCPolynomial = 7;
 800b0a8:	2307      	movs	r3, #7
 800b0aa:	62e3      	str	r3, [r4, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800b0ac:	2308      	movs	r3, #8
 800b0ae:	6363      	str	r3, [r4, #52]	; 0x34
  HAL_Delay(20);
 800b0b0:	f7f5 faa4 	bl	80005fc <HAL_Delay>
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7f6 fdfd 	bl	8001cb4 <HAL_SPI_Init>
 800b0ba:	4607      	mov	r7, r0
 800b0bc:	b100      	cbz	r0, 800b0c0 <main+0x194>
 800b0be:	e7fe      	b.n	800b0be <main+0x192>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b0c0:	4d13      	ldr	r5, [pc, #76]	; (800b110 <main+0x1e4>)
  RFID_RC522_Init();
 800b0c2:	f000 fa7f 	bl	800b5c4 <RFID_RC522_Init>
  debug_init(&huart3);
 800b0c6:	4630      	mov	r0, r6
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b0c8:	ac07      	add	r4, sp, #28
  debug_init(&huart3);
 800b0ca:	f7ff fc5b 	bl	800a984 <debug_init>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b0d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b0d2:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b0d4:	4639      	mov	r1, r7
 800b0d6:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800b0d8:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800b0da:	f7f7 fcd7 	bl	8002a8c <osThreadCreate>
 800b0de:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <main+0x1e8>)
 800b0e0:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800b0e2:	f7f7 fcc7 	bl	8002a74 <osKernelStart>
 800b0e6:	e7fe      	b.n	800b0e6 <main+0x1ba>
 800b0e8:	40023800 	.word	0x40023800
 800b0ec:	2000a83c 	.word	0x2000a83c
 800b0f0:	40020400 	.word	0x40020400
 800b0f4:	40021800 	.word	0x40021800
 800b0f8:	40020800 	.word	0x40020800
 800b0fc:	10110000 	.word	0x10110000
 800b100:	40004800 	.word	0x40004800
 800b104:	2000a8ac 	.word	0x2000a8ac
 800b108:	40013000 	.word	0x40013000
 800b10c:	2000acac 	.word	0x2000acac
 800b110:	0800caa0 	.word	0x0800caa0
 800b114:	2000a838 	.word	0x2000a838

0800b118 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800b118:	6802      	ldr	r2, [r0, #0]
 800b11a:	4b03      	ldr	r3, [pc, #12]	; (800b128 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800b11c:	429a      	cmp	r2, r3
 800b11e:	d101      	bne.n	800b124 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800b120:	f7f5 ba5a 	b.w	80005d8 <HAL_IncTick>
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	40010000 	.word	0x40010000

0800b12c <handleError>:
	return MI_OK;
}

void handleError() {
	while(1) {
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800b12c:	4c09      	ldr	r4, [pc, #36]	; (800b154 <handleError+0x28>)
void handleError() {
 800b12e:	b508      	push	{r3, lr}
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800b130:	2180      	movs	r1, #128	; 0x80
 800b132:	4620      	mov	r0, r4
 800b134:	f7f5 ff81 	bl	800103a <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800b138:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b13c:	f7f5 fa5e 	bl	80005fc <HAL_Delay>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800b140:	4620      	mov	r0, r4
 800b142:	2180      	movs	r1, #128	; 0x80
 800b144:	f7f5 ff79 	bl	800103a <HAL_GPIO_TogglePin>
		HAL_Delay(300);
 800b148:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800b14c:	f7f5 fa56 	bl	80005fc <HAL_Delay>
 800b150:	e7ee      	b.n	800b130 <handleError+0x4>
 800b152:	bf00      	nop
 800b154:	40020400 	.word	0x40020400

0800b158 <TM_MFRC522_CS_Write>:

	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
}

void TM_MFRC522_CS_Write(uint8_t val) {
	HAL_GPIO_WritePin(SPIx_CS_GPIO_PORT, SPIx_CS_PIN, val);
 800b158:	4602      	mov	r2, r0
 800b15a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b15e:	4801      	ldr	r0, [pc, #4]	; (800b164 <TM_MFRC522_CS_Write+0xc>)
 800b160:	f7f5 bf66 	b.w	8001030 <HAL_GPIO_WritePin>
 800b164:	40020c00 	.word	0x40020c00

0800b168 <TM_MFRC522_WriteRegister>:
void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800b168:	b507      	push	{r0, r1, r2, lr}
 800b16a:	f88d 0007 	strb.w	r0, [sp, #7]
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 800b16e:	2000      	movs	r0, #0
void TM_MFRC522_WriteRegister(uint8_t addr, uint8_t val) {
 800b170:	f88d 1006 	strb.w	r1, [sp, #6]
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 800b174:	f7ff fff0 	bl	800b158 <TM_MFRC522_CS_Write>
	addr = (addr << 1) & 0x7E;
 800b178:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b17c:	a902      	add	r1, sp, #8
	transmitStatus = HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800b17e:	2201      	movs	r2, #1
 800b180:	480e      	ldr	r0, [pc, #56]	; (800b1bc <TM_MFRC522_WriteRegister+0x54>)
	addr = (addr << 1) & 0x7E;
 800b182:	005b      	lsls	r3, r3, #1
 800b184:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800b188:	f801 3d01 	strb.w	r3, [r1, #-1]!
	transmitStatus = HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800b18c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b190:	f7f6 fde5 	bl	8001d5e <HAL_SPI_Transmit>
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800b194:	b108      	cbz	r0, 800b19a <TM_MFRC522_WriteRegister+0x32>
		handleError();
 800b196:	f7ff ffc9 	bl	800b12c <handleError>
	transmitStatus = HAL_SPI_Transmit(&hspi1, &val, 1, HAL_MAX_DELAY);
 800b19a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f10d 0106 	add.w	r1, sp, #6
 800b1a4:	4805      	ldr	r0, [pc, #20]	; (800b1bc <TM_MFRC522_WriteRegister+0x54>)
 800b1a6:	f7f6 fdda 	bl	8001d5e <HAL_SPI_Transmit>
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d1f3      	bne.n	800b196 <TM_MFRC522_WriteRegister+0x2e>
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 800b1ae:	2001      	movs	r0, #1
 800b1b0:	f7ff ffd2 	bl	800b158 <TM_MFRC522_CS_Write>
}
 800b1b4:	b003      	add	sp, #12
 800b1b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1ba:	bf00      	nop
 800b1bc:	2000acac 	.word	0x2000acac

0800b1c0 <TM_MFRC522_Reset>:
void TM_MFRC522_Reset(void) {
 800b1c0:	b508      	push	{r3, lr}
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 800b1c2:	2001      	movs	r0, #1
 800b1c4:	210f      	movs	r1, #15
 800b1c6:	f7ff ffcf 	bl	800b168 <TM_MFRC522_WriteRegister>
	HAL_Delay(50);
 800b1ca:	2032      	movs	r0, #50	; 0x32
}
 800b1cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(50);
 800b1d0:	f7f5 ba14 	b.w	80005fc <HAL_Delay>

0800b1d4 <TM_MFRC522_ReadRegister>:
uint8_t TM_MFRC522_ReadRegister(uint8_t addr) {
 800b1d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b1d6:	f88d 000f 	strb.w	r0, [sp, #15]
	uint8_t val = 0x00;
 800b1da:	2000      	movs	r0, #0
 800b1dc:	f88d 0016 	strb.w	r0, [sp, #22]
	TM_MFRC522_CS_Write(GPIO_PIN_RESET);
 800b1e0:	f7ff ffba 	bl	800b158 <TM_MFRC522_CS_Write>
	addr = (addr << 1) | 0x80;
 800b1e4:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800b1e8:	a906      	add	r1, sp, #24
	transmitStatus = HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	4811      	ldr	r0, [pc, #68]	; (800b234 <TM_MFRC522_ReadRegister+0x60>)
	addr = (addr << 1) | 0x80;
 800b1ee:	005b      	lsls	r3, r3, #1
 800b1f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b1f4:	f801 3d09 	strb.w	r3, [r1, #-9]!
	transmitStatus = HAL_SPI_Transmit(&hspi1, &addr, 1, HAL_MAX_DELAY);
 800b1f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b1fc:	f7f6 fdaf 	bl	8001d5e <HAL_SPI_Transmit>
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800b200:	b108      	cbz	r0, 800b206 <TM_MFRC522_ReadRegister+0x32>
		handleError();
 800b202:	f7ff ff93 	bl	800b12c <handleError>
	transmitStatus = HAL_SPI_TransmitReceive(&hspi1, &dummy, &val, 1, HAL_MAX_DELAY);
 800b206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	uint8_t dummy = MFRC522_DUMMY;
 800b20a:	f88d 0017 	strb.w	r0, [sp, #23]
	transmitStatus = HAL_SPI_TransmitReceive(&hspi1, &dummy, &val, 1, HAL_MAX_DELAY);
 800b20e:	f10d 0216 	add.w	r2, sp, #22
 800b212:	f10d 0117 	add.w	r1, sp, #23
 800b216:	9300      	str	r3, [sp, #0]
 800b218:	2301      	movs	r3, #1
 800b21a:	4806      	ldr	r0, [pc, #24]	; (800b234 <TM_MFRC522_ReadRegister+0x60>)
 800b21c:	f7f6 fe43 	bl	8001ea6 <HAL_SPI_TransmitReceive>
	if (transmitStatus != HAL_SPI_ERROR_NONE) {
 800b220:	2800      	cmp	r0, #0
 800b222:	d1ee      	bne.n	800b202 <TM_MFRC522_ReadRegister+0x2e>
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 800b224:	2001      	movs	r0, #1
 800b226:	f7ff ff97 	bl	800b158 <TM_MFRC522_CS_Write>
}
 800b22a:	f89d 0016 	ldrb.w	r0, [sp, #22]
 800b22e:	b007      	add	sp, #28
 800b230:	f85d fb04 	ldr.w	pc, [sp], #4
 800b234:	2000acac 	.word	0x2000acac

0800b238 <TM_MFRC522_SetBitMask>:
void TM_MFRC522_SetBitMask(uint8_t reg, uint8_t mask) {
 800b238:	b538      	push	{r3, r4, r5, lr}
 800b23a:	460c      	mov	r4, r1
 800b23c:	4605      	mov	r5, r0
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 800b23e:	f7ff ffc9 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b242:	ea40 0104 	orr.w	r1, r0, r4
 800b246:	4628      	mov	r0, r5
 800b248:	b2c9      	uxtb	r1, r1
}
 800b24a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) | mask);
 800b24e:	f7ff bf8b 	b.w	800b168 <TM_MFRC522_WriteRegister>

0800b252 <TM_MFRC522_ClearBitMask>:
void TM_MFRC522_ClearBitMask(uint8_t reg, uint8_t mask){
 800b252:	b538      	push	{r3, r4, r5, lr}
 800b254:	460c      	mov	r4, r1
 800b256:	4605      	mov	r5, r0
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 800b258:	f7ff ffbc 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b25c:	ea20 0104 	bic.w	r1, r0, r4
 800b260:	4628      	mov	r0, r5
 800b262:	b2c9      	uxtb	r1, r1
}
 800b264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	TM_MFRC522_WriteRegister(reg, TM_MFRC522_ReadRegister(reg) & (~mask));
 800b268:	f7ff bf7e 	b.w	800b168 <TM_MFRC522_WriteRegister>

0800b26c <TM_MFRC522_AntennaOn>:
void TM_MFRC522_AntennaOn(void) {
 800b26c:	b508      	push	{r3, lr}
	temp = TM_MFRC522_ReadRegister(MFRC522_REG_TX_CONTROL);
 800b26e:	2014      	movs	r0, #20
 800b270:	f7ff ffb0 	bl	800b1d4 <TM_MFRC522_ReadRegister>
	if (!(temp & 0x03)) {
 800b274:	0783      	lsls	r3, r0, #30
 800b276:	d105      	bne.n	800b284 <TM_MFRC522_AntennaOn+0x18>
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800b278:	2103      	movs	r1, #3
 800b27a:	2014      	movs	r0, #20
}
 800b27c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		TM_MFRC522_SetBitMask(MFRC522_REG_TX_CONTROL, 0x03);
 800b280:	f7ff bfda 	b.w	800b238 <TM_MFRC522_SetBitMask>
 800b284:	bd08      	pop	{r3, pc}
	...

0800b288 <TM_MFRC522_ToCard>:
	switch (command) {
 800b288:	280c      	cmp	r0, #12
									) {
 800b28a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b28e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b292:	4605      	mov	r5, r0
 800b294:	4688      	mov	r8, r1
 800b296:	4614      	mov	r4, r2
 800b298:	461f      	mov	r7, r3
	switch (command) {
 800b29a:	d048      	beq.n	800b32e <TM_MFRC522_ToCard+0xa6>
 800b29c:	280e      	cmp	r0, #14
 800b29e:	d049      	beq.n	800b334 <TM_MFRC522_ToCard+0xac>
	uint8_t waitIRq = 0x00;
 800b2a0:	2600      	movs	r6, #0
	uint8_t irqEn = 0x00;
 800b2a2:	4631      	mov	r1, r6
	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800b2a4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800b2a8:	2002      	movs	r0, #2
 800b2aa:	f7ff ff5d 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 800b2ae:	2100      	movs	r1, #0
 800b2b0:	2001      	movs	r0, #1
	for (i = 0; i < sendLen; i++) {
 800b2b2:	46c2      	mov	sl, r8
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 800b2b4:	f7ff ff58 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_ClearBitMask(MFRC522_REG_COLL, 0x80); // clear collision register
 800b2b8:	2180      	movs	r1, #128	; 0x80
 800b2ba:	200e      	movs	r0, #14
	for (i = 0; i < sendLen; i++) {
 800b2bc:	b2a4      	uxth	r4, r4
	TM_MFRC522_ClearBitMask(MFRC522_REG_COLL, 0x80); // clear collision register
 800b2be:	f7ff ffc8 	bl	800b252 <TM_MFRC522_ClearBitMask>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMM_IRQ, 0x7F); // Clear all seven interrupt request bits via ComIrqReg[7] - Set1, when 0, clear interrupts
 800b2c2:	217f      	movs	r1, #127	; 0x7f
 800b2c4:	2004      	movs	r0, #4
 800b2c6:	f7ff ff4f 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80); // FlushBuffer = 1, FIFO initialization
 800b2ca:	2180      	movs	r1, #128	; 0x80
 800b2cc:	200a      	movs	r0, #10
 800b2ce:	f7ff ffb3 	bl	800b238 <TM_MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) {
 800b2d2:	ebaa 0308 	sub.w	r3, sl, r8
 800b2d6:	b29b      	uxth	r3, r3
 800b2d8:	429c      	cmp	r4, r3
 800b2da:	d82e      	bhi.n	800b33a <TM_MFRC522_ToCard+0xb2>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, command);
 800b2dc:	4629      	mov	r1, r5
 800b2de:	2001      	movs	r0, #1
 800b2e0:	f7ff ff42 	bl	800b168 <TM_MFRC522_WriteRegister>
	if (command == PCD_TRANSCEIVE) {
 800b2e4:	2d0c      	cmp	r5, #12
 800b2e6:	d103      	bne.n	800b2f0 <TM_MFRC522_ToCard+0x68>
		TM_MFRC522_SetBitMask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=1,transmission of data starts
 800b2e8:	2180      	movs	r1, #128	; 0x80
 800b2ea:	200d      	movs	r0, #13
 800b2ec:	f7ff ffa4 	bl	800b238 <TM_MFRC522_SetBitMask>
	for (i = 0; i < sendLen; i++) {
 800b2f0:	f648 44a0 	movw	r4, #36000	; 0x8ca0
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
 800b2f4:	f046 0801 	orr.w	r8, r6, #1
		i--;
 800b2f8:	3c01      	subs	r4, #1
		n = TM_MFRC522_ReadRegister(MFRC522_REG_COMM_IRQ);
 800b2fa:	2004      	movs	r0, #4
 800b2fc:	f7ff ff6a 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b300:	4682      	mov	sl, r0
		i--;
 800b302:	b2a4      	uxth	r4, r4
			);
 800b304:	b114      	cbz	r4, 800b30c <TM_MFRC522_ToCard+0x84>
				&& !(n&waitIRq) // one of the interrupts that signal success has been sent
 800b306:	ea10 0f08 	tst.w	r0, r8
 800b30a:	d0f5      	beq.n	800b2f8 <TM_MFRC522_ToCard+0x70>
	TM_MFRC522_ClearBitMask(MFRC522_REG_BIT_FRAMING, 0x80);			//StartSend=0
 800b30c:	2180      	movs	r1, #128	; 0x80
 800b30e:	200d      	movs	r0, #13
 800b310:	f7ff ff9f 	bl	800b252 <TM_MFRC522_ClearBitMask>
	errorRegValue = TM_MFRC522_ReadRegister(MFRC522_REG_ERROR);
 800b314:	2006      	movs	r0, #6
 800b316:	f7ff ff5d 	bl	800b1d4 <TM_MFRC522_ReadRegister>
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr	
 800b31a:	f010 0f13 	tst.w	r0, #19
	errorRegValue = TM_MFRC522_ReadRegister(MFRC522_REG_ERROR);
 800b31e:	4680      	mov	r8, r0
	if (errorRegValue & 0x13) {	 // BufferOvfl ParityErr ProtocolErr	
 800b320:	d011      	beq.n	800b346 <TM_MFRC522_ToCard+0xbe>
		xprintf("error z powodu przerwania polaczenia, chyba \n\r");
 800b322:	482e      	ldr	r0, [pc, #184]	; (800b3dc <TM_MFRC522_ToCard+0x154>)
			xprintf("ostatni error, cos nie smiga\n\r");
 800b324:	f000 fb98 	bl	800ba58 <xprintf>
			return MI_ERR;
 800b328:	2002      	movs	r0, #2
 800b32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			waitIRq = 0x30; // bit 4 IdleIRq, 5 RxIRq
 800b32e:	2630      	movs	r6, #48	; 0x30
			irqEn = 0x77; //
 800b330:	2177      	movs	r1, #119	; 0x77
			break;
 800b332:	e7b7      	b.n	800b2a4 <TM_MFRC522_ToCard+0x1c>
			waitIRq = 0x10; // bit 4
 800b334:	2610      	movs	r6, #16
			irqEn = 0x12;
 800b336:	2112      	movs	r1, #18
 800b338:	e7b4      	b.n	800b2a4 <TM_MFRC522_ToCard+0x1c>
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, sendData[i]);
 800b33a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800b33e:	2009      	movs	r0, #9
 800b340:	f7ff ff12 	bl	800b168 <TM_MFRC522_WriteRegister>
 800b344:	e7c5      	b.n	800b2d2 <TM_MFRC522_ToCard+0x4a>
	if (i == 0) {
 800b346:	b92c      	cbnz	r4, 800b354 <TM_MFRC522_ToCard+0xcc>
		xprintf("timeout bo skonczyl sie czas \n\r");
 800b348:	4825      	ldr	r0, [pc, #148]	; (800b3e0 <TM_MFRC522_ToCard+0x158>)
		xprintf("timeout nie wiemy czemu\n\r");
 800b34a:	f000 fb85 	bl	800ba58 <xprintf>
		return MI_TIMEOUT;
 800b34e:	2003      	movs	r0, #3
 800b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (n & 0x01 && !(n&waitIRq)) {
 800b354:	f01a 0f01 	tst.w	sl, #1
 800b358:	d004      	beq.n	800b364 <TM_MFRC522_ToCard+0xdc>
 800b35a:	ea16 0f0a 	tst.w	r6, sl
 800b35e:	d101      	bne.n	800b364 <TM_MFRC522_ToCard+0xdc>
		xprintf("timeout nie wiemy czemu\n\r");
 800b360:	4820      	ldr	r0, [pc, #128]	; (800b3e4 <TM_MFRC522_ToCard+0x15c>)
 800b362:	e7f2      	b.n	800b34a <TM_MFRC522_ToCard+0xc2>
		if (!(TM_MFRC522_ReadRegister(MFRC522_REG_ERROR) & 0x1B)) {
 800b364:	2006      	movs	r0, #6
 800b366:	f7ff ff35 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b36a:	f010 0f1b 	tst.w	r0, #27
 800b36e:	d133      	bne.n	800b3d8 <TM_MFRC522_ToCard+0x150>
			if (command == PCD_TRANSCEIVE) {
 800b370:	2d0c      	cmp	r5, #12
 800b372:	d124      	bne.n	800b3be <TM_MFRC522_ToCard+0x136>
				n = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_LEVEL);
 800b374:	200a      	movs	r0, #10
 800b376:	f7ff ff2d 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b37a:	4604      	mov	r4, r0
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800b37c:	4628      	mov	r0, r5
				for (i = 0; i < n; i++) {
 800b37e:	463d      	mov	r5, r7
				lastBits = TM_MFRC522_ReadRegister(MFRC522_REG_CONTROL) & 0x07;
 800b380:	f7ff ff28 	bl	800b1d4 <TM_MFRC522_ReadRegister>
					n = 1;
 800b384:	2c00      	cmp	r4, #0
 800b386:	bf08      	it	eq
 800b388:	2401      	moveq	r4, #1
				if (lastBits) {
 800b38a:	f010 0007 	ands.w	r0, r0, #7
					*backLen = (n - 1) * 8 + lastBits;
 800b38e:	bf15      	itete	ne
 800b390:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
					*backLen = n * 8;
 800b394:	00e3      	lsleq	r3, r4, #3
					*backLen = (n - 1) * 8 + lastBits;
 800b396:	eb00 00c3 	addne.w	r0, r0, r3, lsl #3
					*backLen = n * 8;
 800b39a:	f8a9 3000 	strheq.w	r3, [r9]
					*backLen = (n - 1) * 8 + lastBits;
 800b39e:	bf18      	it	ne
 800b3a0:	f8a9 0000 	strhne.w	r0, [r9]
				xprintf("backLen: %d", *backLen);
 800b3a4:	4810      	ldr	r0, [pc, #64]	; (800b3e8 <TM_MFRC522_ToCard+0x160>)
 800b3a6:	f8b9 1000 	ldrh.w	r1, [r9]
 800b3aa:	f000 fb55 	bl	800ba58 <xprintf>
 800b3ae:	2c10      	cmp	r4, #16
 800b3b0:	bf28      	it	cs
 800b3b2:	2410      	movcs	r4, #16
				for (i = 0; i < n; i++) {
 800b3b4:	b2e4      	uxtb	r4, r4
 800b3b6:	1beb      	subs	r3, r5, r7
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	429c      	cmp	r4, r3
 800b3bc:	d806      	bhi.n	800b3cc <TM_MFRC522_ToCard+0x144>
	return status;
 800b3be:	f018 0f08 	tst.w	r8, #8
 800b3c2:	bf14      	ite	ne
 800b3c4:	2002      	movne	r0, #2
 800b3c6:	2000      	moveq	r0, #0
}
 800b3c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					backData[i] = TM_MFRC522_ReadRegister(MFRC522_REG_FIFO_DATA);
 800b3cc:	2009      	movs	r0, #9
 800b3ce:	f7ff ff01 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b3d2:	f805 0b01 	strb.w	r0, [r5], #1
 800b3d6:	e7ee      	b.n	800b3b6 <TM_MFRC522_ToCard+0x12e>
			xprintf("ostatni error, cos nie smiga\n\r");
 800b3d8:	4804      	ldr	r0, [pc, #16]	; (800b3ec <TM_MFRC522_ToCard+0x164>)
 800b3da:	e7a3      	b.n	800b324 <TM_MFRC522_ToCard+0x9c>
 800b3dc:	0800e52a 	.word	0x0800e52a
 800b3e0:	0800e559 	.word	0x0800e559
 800b3e4:	0800e579 	.word	0x0800e579
 800b3e8:	0800e593 	.word	0x0800e593
 800b3ec:	0800e59f 	.word	0x0800e59f

0800b3f0 <TM_MFRC522_Request>:
TM_MFRC522_Status_t TM_MFRC522_Request(uint8_t reqMode, uint8_t* TagType) {
 800b3f0:	b530      	push	{r4, r5, lr}
 800b3f2:	b085      	sub	sp, #20
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	4605      	mov	r5, r0
	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 800b3f8:	2107      	movs	r1, #7
 800b3fa:	200d      	movs	r0, #13
 800b3fc:	f7ff feb4 	bl	800b168 <TM_MFRC522_WriteRegister>
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800b400:	f10d 030e 	add.w	r3, sp, #14
	TagType[0] = reqMode;
 800b404:	7025      	strb	r5, [r4, #0]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 800b406:	2201      	movs	r2, #1
 800b408:	9300      	str	r3, [sp, #0]
 800b40a:	4621      	mov	r1, r4
 800b40c:	4623      	mov	r3, r4
 800b40e:	200c      	movs	r0, #12
 800b410:	f7ff ff3a 	bl	800b288 <TM_MFRC522_ToCard>
	if (status == MI_OK && backBits != 0x10) {
 800b414:	b938      	cbnz	r0, 800b426 <TM_MFRC522_Request+0x36>
 800b416:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b41a:	2b10      	cmp	r3, #16
 800b41c:	d003      	beq.n	800b426 <TM_MFRC522_Request+0x36>
		xprintf("MI_OK in request\n\r");
 800b41e:	4803      	ldr	r0, [pc, #12]	; (800b42c <TM_MFRC522_Request+0x3c>)
 800b420:	f000 fb1a 	bl	800ba58 <xprintf>
		status = MI_ERR;
 800b424:	2002      	movs	r0, #2
}
 800b426:	b005      	add	sp, #20
 800b428:	bd30      	pop	{r4, r5, pc}
 800b42a:	bf00      	nop
 800b42c:	0800e517 	.word	0x0800e517

0800b430 <TM_MFRC522_Anticoll>:
TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800b430:	b530      	push	{r4, r5, lr}
	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800b432:	2100      	movs	r1, #0
TM_MFRC522_Status_t TM_MFRC522_Anticoll(uint8_t* serNum) {
 800b434:	4604      	mov	r4, r0
 800b436:	b085      	sub	sp, #20
	TM_MFRC522_WriteRegister(MFRC522_REG_BIT_FRAMING, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800b438:	200d      	movs	r0, #13
 800b43a:	f7ff fe95 	bl	800b168 <TM_MFRC522_WriteRegister>
	serNum[0] = PICC_ANTICOLL;
 800b43e:	2393      	movs	r3, #147	; 0x93
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800b440:	2202      	movs	r2, #2
 800b442:	4621      	mov	r1, r4
	serNum[0] = PICC_ANTICOLL;
 800b444:	7023      	strb	r3, [r4, #0]
	serNum[1] = 0x20;
 800b446:	2320      	movs	r3, #32
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800b448:	200c      	movs	r0, #12
	serNum[1] = 0x20;
 800b44a:	7063      	strb	r3, [r4, #1]
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800b44c:	f10d 030e 	add.w	r3, sp, #14
 800b450:	9300      	str	r3, [sp, #0]
 800b452:	4623      	mov	r3, r4
 800b454:	f7ff ff18 	bl	800b288 <TM_MFRC522_ToCard>
	if (status == MI_OK) {
 800b458:	b960      	cbnz	r0, 800b474 <TM_MFRC522_Anticoll+0x44>
 800b45a:	1e62      	subs	r2, r4, #1
 800b45c:	1ce1      	adds	r1, r4, #3
 800b45e:	4603      	mov	r3, r0
			serNumCheck ^= serNum[i];
 800b460:	f812 5f01 	ldrb.w	r5, [r2, #1]!
		for (i = 0; i < 4; i++) {
 800b464:	428a      	cmp	r2, r1
			serNumCheck ^= serNum[i];
 800b466:	ea83 0305 	eor.w	r3, r3, r5
		for (i = 0; i < 4; i++) {
 800b46a:	d1f9      	bne.n	800b460 <TM_MFRC522_Anticoll+0x30>
		if (serNumCheck != serNum[i]) {
 800b46c:	7922      	ldrb	r2, [r4, #4]
			status = MI_ERR;
 800b46e:	429a      	cmp	r2, r3
 800b470:	bf18      	it	ne
 800b472:	2002      	movne	r0, #2
}
 800b474:	b005      	add	sp, #20
 800b476:	bd30      	pop	{r4, r5, pc}

0800b478 <TM_MFRC522_CalculateCRC>:
TM_MFRC522_Status_t TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800b478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b47a:	460e      	mov	r6, r1
 800b47c:	4604      	mov	r4, r0
	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800b47e:	2104      	movs	r1, #4
 800b480:	2005      	movs	r0, #5
 800b482:	3e01      	subs	r6, #1
TM_MFRC522_Status_t TM_MFRC522_CalculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData) {
 800b484:	4617      	mov	r7, r2
 800b486:	1e65      	subs	r5, r4, #1
	TM_MFRC522_ClearBitMask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 800b488:	f7ff fee3 	bl	800b252 <TM_MFRC522_ClearBitMask>
 800b48c:	4434      	add	r4, r6
	TM_MFRC522_SetBitMask(MFRC522_REG_FIFO_LEVEL, 0x80);			//Clear the FIFO pointer
 800b48e:	2180      	movs	r1, #128	; 0x80
 800b490:	200a      	movs	r0, #10
 800b492:	f7ff fed1 	bl	800b238 <TM_MFRC522_SetBitMask>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_IDLE); // Stop any active command.
 800b496:	2100      	movs	r1, #0
 800b498:	2001      	movs	r0, #1
 800b49a:	f7ff fe65 	bl	800b168 <TM_MFRC522_WriteRegister>
	for (i = 0; i < len; i++) {
 800b49e:	42a5      	cmp	r5, r4
 800b4a0:	d117      	bne.n	800b4d2 <TM_MFRC522_CalculateCRC+0x5a>
	TM_MFRC522_WriteRegister(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800b4a2:	24ff      	movs	r4, #255	; 0xff
 800b4a4:	2103      	movs	r1, #3
 800b4a6:	2001      	movs	r0, #1
 800b4a8:	f7ff fe5e 	bl	800b168 <TM_MFRC522_WriteRegister>
 800b4ac:	3c01      	subs	r4, #1
		n = TM_MFRC522_ReadRegister(MFRC522_REG_DIV_IRQ);
 800b4ae:	2005      	movs	r0, #5
 800b4b0:	f7ff fe90 	bl	800b1d4 <TM_MFRC522_ReadRegister>
	} while ((i!=0) && !(n&0x04));			//CRCIrq = 1
 800b4b4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800b4b8:	d011      	beq.n	800b4de <TM_MFRC522_CalculateCRC+0x66>
 800b4ba:	0743      	lsls	r3, r0, #29
 800b4bc:	d5f6      	bpl.n	800b4ac <TM_MFRC522_CalculateCRC+0x34>
	pOutData[0] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_L);
 800b4be:	2022      	movs	r0, #34	; 0x22
 800b4c0:	f7ff fe88 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b4c4:	7038      	strb	r0, [r7, #0]
	pOutData[1] = TM_MFRC522_ReadRegister(MFRC522_REG_CRC_RESULT_M);
 800b4c6:	2021      	movs	r0, #33	; 0x21
 800b4c8:	f7ff fe84 	bl	800b1d4 <TM_MFRC522_ReadRegister>
 800b4cc:	7078      	strb	r0, [r7, #1]
 800b4ce:	2000      	movs	r0, #0
}
 800b4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		TM_MFRC522_WriteRegister(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800b4d2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 800b4d6:	2009      	movs	r0, #9
 800b4d8:	f7ff fe46 	bl	800b168 <TM_MFRC522_WriteRegister>
 800b4dc:	e7df      	b.n	800b49e <TM_MFRC522_CalculateCRC+0x26>
		return MI_TIMEOUT;
 800b4de:	2003      	movs	r0, #3
 800b4e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b4e2 <TM_MFRC522_SelectTag>:
TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 800b4e2:	b510      	push	{r4, lr}
	uint8_t sak[3] = {0};
 800b4e4:	2300      	movs	r3, #0
TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 800b4e6:	b088      	sub	sp, #32
	buffer[1] = 0x70;
 800b4e8:	2270      	movs	r2, #112	; 0x70
TM_MFRC522_Status_t TM_MFRC522_SelectTag(uint8_t* serNum, uint8_t* type) {
 800b4ea:	460c      	mov	r4, r1
	uint8_t sak[3] = {0};
 800b4ec:	f8ad 3010 	strh.w	r3, [sp, #16]
 800b4f0:	f88d 3012 	strb.w	r3, [sp, #18]
	buffer[0] = PICC_SElECTTAG;
 800b4f4:	2393      	movs	r3, #147	; 0x93
 800b4f6:	f88d 3014 	strb.w	r3, [sp, #20]
	buffer[1] = 0x70;
 800b4fa:	ab08      	add	r3, sp, #32
 800b4fc:	f803 2d0b 	strb.w	r2, [r3, #-11]!
 800b500:	1e42      	subs	r2, r0, #1
 800b502:	3003      	adds	r0, #3
		buffer[i+2] = *(serNum+i);
 800b504:	f812 1f01 	ldrb.w	r1, [r2, #1]!
	for (i = 0; i < 4; i++) {
 800b508:	4282      	cmp	r2, r0
		buffer[i+2] = *(serNum+i);
 800b50a:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (i = 0; i < 4; i++) {
 800b50e:	d1f9      	bne.n	800b504 <TM_MFRC522_SelectTag+0x22>
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 800b510:	f89d 2017 	ldrb.w	r2, [sp, #23]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800b514:	2107      	movs	r1, #7
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 800b516:	f89d 3016 	ldrb.w	r3, [sp, #22]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800b51a:	a805      	add	r0, sp, #20
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 800b51c:	4053      	eors	r3, r2
 800b51e:	f89d 2018 	ldrb.w	r2, [sp, #24]
 800b522:	4053      	eors	r3, r2
 800b524:	f89d 2019 	ldrb.w	r2, [sp, #25]
 800b528:	4053      	eors	r3, r2
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800b52a:	f10d 021b 	add.w	r2, sp, #27
	buffer[6] = buffer[2] ^ buffer[3] ^ buffer[4] ^ buffer[5]; // Calculate BCC - Block Check Character
 800b52e:	f88d 301a 	strb.w	r3, [sp, #26]
	status = TM_MFRC522_CalculateCRC(buffer, 7, &buffer[7]);		//??
 800b532:	f7ff ffa1 	bl	800b478 <TM_MFRC522_CalculateCRC>
	if (status != MI_OK) {
 800b536:	b980      	cbnz	r0, 800b55a <TM_MFRC522_SelectTag+0x78>
	status = TM_MFRC522_ToCard(PCD_TRANSCEIVE, buffer, 9, sak, &recvBits);
 800b538:	f10d 030e 	add.w	r3, sp, #14
 800b53c:	2209      	movs	r2, #9
 800b53e:	a905      	add	r1, sp, #20
 800b540:	200c      	movs	r0, #12
 800b542:	9300      	str	r3, [sp, #0]
 800b544:	ab04      	add	r3, sp, #16
 800b546:	f7ff fe9f 	bl	800b288 <TM_MFRC522_ToCard>
	if (recvBits != 24) { // SAK must be exactly 24 bits (1 byte + CRC_A).
 800b54a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800b54e:	2b18      	cmp	r3, #24
	*type = sak[0];
 800b550:	bf0a      	itet	eq
 800b552:	f89d 3010 	ldrbeq.w	r3, [sp, #16]
		return MI_ERR;
 800b556:	2002      	movne	r0, #2
	*type = sak[0];
 800b558:	7023      	strbeq	r3, [r4, #0]
}
 800b55a:	b008      	add	sp, #32
 800b55c:	bd10      	pop	{r4, pc}

0800b55e <TM_MFRC522_Halt>:
void TM_MFRC522_Halt(void) {
 800b55e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buff[0] = PICC_HALT;
 800b560:	2350      	movs	r3, #80	; 0x50
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800b562:	f10d 020e 	add.w	r2, sp, #14
 800b566:	2102      	movs	r1, #2
 800b568:	a803      	add	r0, sp, #12
	buff[0] = PICC_HALT;
 800b56a:	f88d 300c 	strb.w	r3, [sp, #12]
	buff[1] = 0;
 800b56e:	2300      	movs	r3, #0
 800b570:	f88d 300d 	strb.w	r3, [sp, #13]
	TM_MFRC522_CalculateCRC(buff, 2, &buff[2]);
 800b574:	f7ff ff80 	bl	800b478 <TM_MFRC522_CalculateCRC>
	TM_MFRC522_ToCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 800b578:	f10d 030a 	add.w	r3, sp, #10
 800b57c:	2204      	movs	r2, #4
 800b57e:	200c      	movs	r0, #12
 800b580:	9300      	str	r3, [sp, #0]
 800b582:	ab03      	add	r3, sp, #12
 800b584:	4619      	mov	r1, r3
 800b586:	f7ff fe7f 	bl	800b288 <TM_MFRC522_ToCard>
}
 800b58a:	b005      	add	sp, #20
 800b58c:	f85d fb04 	ldr.w	pc, [sp], #4

0800b590 <TM_MFRC522_Check>:
TM_MFRC522_Status_t TM_MFRC522_Check(uint8_t* id, uint8_t* type) {
 800b590:	b570      	push	{r4, r5, r6, lr}
 800b592:	4605      	mov	r5, r0
 800b594:	460e      	mov	r6, r1
	status = TM_MFRC522_Request(PICC_REQIDL, id);
 800b596:	4601      	mov	r1, r0
 800b598:	2026      	movs	r0, #38	; 0x26
 800b59a:	f7ff ff29 	bl	800b3f0 <TM_MFRC522_Request>
	if (status == MI_OK) {
 800b59e:	4604      	mov	r4, r0
 800b5a0:	b950      	cbnz	r0, 800b5b8 <TM_MFRC522_Check+0x28>
		xprintf("MI_OK in check\n\r");
 800b5a2:	4807      	ldr	r0, [pc, #28]	; (800b5c0 <TM_MFRC522_Check+0x30>)
 800b5a4:	f000 fa58 	bl	800ba58 <xprintf>
		status = TM_MFRC522_Anticoll(id);
 800b5a8:	4628      	mov	r0, r5
 800b5aa:	f7ff ff41 	bl	800b430 <TM_MFRC522_Anticoll>
		status = TM_MFRC522_SelectTag(id, type);
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	f7ff ff96 	bl	800b4e2 <TM_MFRC522_SelectTag>
 800b5b6:	4604      	mov	r4, r0
	TM_MFRC522_Halt();			//Command card into hibernation
 800b5b8:	f7ff ffd1 	bl	800b55e <TM_MFRC522_Halt>
}
 800b5bc:	4620      	mov	r0, r4
 800b5be:	bd70      	pop	{r4, r5, r6, pc}
 800b5c0:	0800e506 	.word	0x0800e506

0800b5c4 <RFID_RC522_Init>:
void RFID_RC522_Init(void) {
 800b5c4:	b508      	push	{r3, lr}
	TM_MFRC522_CS_Write(GPIO_PIN_SET);
 800b5c6:	2001      	movs	r0, #1
 800b5c8:	f7ff fdc6 	bl	800b158 <TM_MFRC522_CS_Write>
	TM_MFRC522_Reset();
 800b5cc:	f7ff fdf8 	bl	800b1c0 <TM_MFRC522_Reset>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_MODE, 0x8D);
 800b5d0:	218d      	movs	r1, #141	; 0x8d
 800b5d2:	202a      	movs	r0, #42	; 0x2a
 800b5d4:	f7ff fdc8 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_PRESCALER, 0x3E);
 800b5d8:	213e      	movs	r1, #62	; 0x3e
 800b5da:	202b      	movs	r0, #43	; 0x2b
 800b5dc:	f7ff fdc4 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_H, 0x03);
 800b5e0:	2103      	movs	r1, #3
 800b5e2:	202c      	movs	r0, #44	; 0x2c
 800b5e4:	f7ff fdc0 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_T_RELOAD_L, 0xE8);
 800b5e8:	21e8      	movs	r1, #232	; 0xe8
 800b5ea:	202d      	movs	r0, #45	; 0x2d
 800b5ec:	f7ff fdbc 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_RF_CFG, 0x70);
 800b5f0:	2170      	movs	r1, #112	; 0x70
 800b5f2:	2026      	movs	r0, #38	; 0x26
 800b5f4:	f7ff fdb8 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(MFRC522_REG_TX_AUTO, 0x40);
 800b5f8:	2140      	movs	r1, #64	; 0x40
 800b5fa:	2015      	movs	r0, #21
 800b5fc:	f7ff fdb4 	bl	800b168 <TM_MFRC522_WriteRegister>
	TM_MFRC522_WriteRegister(ModeReg, 0x3D);
 800b600:	213d      	movs	r1, #61	; 0x3d
 800b602:	2011      	movs	r0, #17
 800b604:	f7ff fdb0 	bl	800b168 <TM_MFRC522_WriteRegister>
}
 800b608:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	TM_MFRC522_AntennaOn();		//Open the antenna
 800b60c:	f7ff be2e 	b.w	800b26c <TM_MFRC522_AntennaOn>

0800b610 <bin_to_strhex>:
}

void bin_to_strhex(unsigned char *bin, unsigned int binsz, char **result)
{
 800b610:	b5f0      	push	{r4, r5, r6, r7, lr}
  char          hex_str[]= "0123456789abcdef";
 800b612:	4b1d      	ldr	r3, [pc, #116]	; (800b688 <bin_to_strhex+0x78>)
{
 800b614:	b087      	sub	sp, #28
 800b616:	4616      	mov	r6, r2
 800b618:	4604      	mov	r4, r0
 800b61a:	460d      	mov	r5, r1
  char          hex_str[]= "0123456789abcdef";
 800b61c:	aa01      	add	r2, sp, #4
 800b61e:	f103 0e10 	add.w	lr, r3, #16
 800b622:	6818      	ldr	r0, [r3, #0]
 800b624:	3308      	adds	r3, #8
 800b626:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800b62a:	4617      	mov	r7, r2
 800b62c:	4573      	cmp	r3, lr
 800b62e:	c703      	stmia	r7!, {r0, r1}
 800b630:	463a      	mov	r2, r7
 800b632:	d1f6      	bne.n	800b622 <bin_to_strhex+0x12>
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	703b      	strb	r3, [r7, #0]
  unsigned int  i;

  *result = (char *)malloc(binsz * 2 + 3);
 800b638:	006f      	lsls	r7, r5, #1
 800b63a:	1cf8      	adds	r0, r7, #3
 800b63c:	f000 fabe 	bl	800bbbc <malloc>
  (*result)[binsz * 2 + 2] = 0;
 800b640:	2300      	movs	r3, #0
 800b642:	4407      	add	r7, r0
  *result = (char *)malloc(binsz * 2 + 3);
 800b644:	6030      	str	r0, [r6, #0]
  (*result)[binsz * 2 + 2] = 0;
 800b646:	70bb      	strb	r3, [r7, #2]

  if (!binsz)
 800b648:	b1dd      	cbz	r5, 800b682 <bin_to_strhex+0x72>
    return;

  (*result)[0] = '0';
 800b64a:	2230      	movs	r2, #48	; 0x30
 800b64c:	3c01      	subs	r4, #1
 800b64e:	7002      	strb	r2, [r0, #0]
  (*result)[1] = 'x';
 800b650:	2278      	movs	r2, #120	; 0x78
 800b652:	7042      	strb	r2, [r0, #1]

  for (i = 0; i < binsz; i++)
    {
      (*result)[i * 2 + 2] = hex_str[(bin[i] >> 4) & 0x0F];
 800b654:	7862      	ldrb	r2, [r4, #1]
 800b656:	a806      	add	r0, sp, #24
 800b658:	3301      	adds	r3, #1
 800b65a:	6831      	ldr	r1, [r6, #0]
 800b65c:	eb00 1212 	add.w	r2, r0, r2, lsr #4
  for (i = 0; i < binsz; i++)
 800b660:	429d      	cmp	r5, r3
      (*result)[i * 2 + 2] = hex_str[(bin[i] >> 4) & 0x0F];
 800b662:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b666:	f801 2013 	strb.w	r2, [r1, r3, lsl #1]
      (*result)[i * 2 + 3] = hex_str[(bin[i]     ) & 0x0F];
 800b66a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800b66e:	6832      	ldr	r2, [r6, #0]
 800b670:	f001 010f 	and.w	r1, r1, #15
 800b674:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800b678:	4401      	add	r1, r0
 800b67a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800b67e:	7051      	strb	r1, [r2, #1]
  for (i = 0; i < binsz; i++)
 800b680:	d1e8      	bne.n	800b654 <bin_to_strhex+0x44>
    }  
}
 800b682:	b007      	add	sp, #28
 800b684:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b686:	bf00      	nop
 800b688:	0800e5be 	.word	0x0800e5be

0800b68c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800b68c:	4b21      	ldr	r3, [pc, #132]	; (800b714 <HAL_MspInit+0x88>)
{
 800b68e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b692:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800b694:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b698:	641a      	str	r2, [r3, #64]	; 0x40
 800b69a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b69c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b6a0:	9200      	str	r2, [sp, #0]
 800b6a2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b6a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b6a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b6aa:	645a      	str	r2, [r3, #68]	; 0x44
 800b6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b6ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b6b6:	f7f4 ffb3 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f06f 000b 	mvn.w	r0, #11
 800b6c0:	4611      	mov	r1, r2
 800b6c2:	f7f4 ffbf 	bl	8000644 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	f06f 000a 	mvn.w	r0, #10
 800b6cc:	4611      	mov	r1, r2
 800b6ce:	f7f4 ffb9 	bl	8000644 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f06f 0009 	mvn.w	r0, #9
 800b6d8:	4611      	mov	r1, r2
 800b6da:	f7f4 ffb3 	bl	8000644 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800b6de:	2200      	movs	r2, #0
 800b6e0:	f06f 0004 	mvn.w	r0, #4
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	f7f4 ffad 	bl	8000644 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f06f 0003 	mvn.w	r0, #3
 800b6f0:	4611      	mov	r1, r2
 800b6f2:	f7f4 ffa7 	bl	8000644 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	210f      	movs	r1, #15
 800b6fa:	f06f 0001 	mvn.w	r0, #1
 800b6fe:	f7f4 ffa1 	bl	8000644 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800b702:	2200      	movs	r2, #0
 800b704:	210f      	movs	r1, #15
 800b706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b70a:	f7f4 ff9b 	bl	8000644 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800b70e:	b003      	add	sp, #12
 800b710:	f85d fb04 	ldr.w	pc, [sp], #4
 800b714:	40023800 	.word	0x40023800

0800b718 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800b718:	6802      	ldr	r2, [r0, #0]
 800b71a:	4b15      	ldr	r3, [pc, #84]	; (800b770 <HAL_SPI_MspInit+0x58>)
 800b71c:	429a      	cmp	r2, r3
{
 800b71e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b720:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 800b722:	d122      	bne.n	800b76a <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b724:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b728:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b72a:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b72c:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b72e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b730:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b732:	a901      	add	r1, sp, #4
 800b734:	480f      	ldr	r0, [pc, #60]	; (800b774 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b736:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b73a:	645a      	str	r2, [r3, #68]	; 0x44
 800b73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b73e:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b744:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b746:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b74c:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b74e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800b750:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b752:	f7f5 fb83 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b756:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b758:	a901      	add	r1, sp, #4
 800b75a:	4807      	ldr	r0, [pc, #28]	; (800b778 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800b75c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b75e:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b760:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b762:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800b764:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b766:	f7f5 fb79 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800b76a:	b007      	add	sp, #28
 800b76c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b76e:	bf00      	nop
 800b770:	40013000 	.word	0x40013000
 800b774:	40020000 	.word	0x40020000
 800b778:	40020400 	.word	0x40020400

0800b77c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800b77c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800b77e:	6802      	ldr	r2, [r0, #0]
 800b780:	4b0f      	ldr	r3, [pc, #60]	; (800b7c0 <HAL_UART_MspInit+0x44>)
 800b782:	429a      	cmp	r2, r3
 800b784:	d119      	bne.n	800b7ba <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800b786:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b78a:	a901      	add	r1, sp, #4
 800b78c:	480d      	ldr	r0, [pc, #52]	; (800b7c4 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800b78e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b790:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800b794:	641a      	str	r2, [r3, #64]	; 0x40
 800b796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800b7a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b7a4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7a6:	2302      	movs	r3, #2
 800b7a8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7ae:	2303      	movs	r3, #3
 800b7b0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800b7b2:	2307      	movs	r3, #7
 800b7b4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b7b6:	f7f5 fb51 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800b7ba:	b007      	add	sp, #28
 800b7bc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b7c0:	40004800 	.word	0x40004800
 800b7c4:	40020c00 	.word	0x40020c00

0800b7c8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB_OTG_FS)
 800b7c8:	6803      	ldr	r3, [r0, #0]
 800b7ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800b7ce:	b510      	push	{r4, lr}
 800b7d0:	b088      	sub	sp, #32
  if(hpcd->Instance==USB_OTG_FS)
 800b7d2:	d12a      	bne.n	800b82a <HAL_PCD_MspInit+0x62>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b7d4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7d8:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7da:	a903      	add	r1, sp, #12
 800b7dc:	4814      	ldr	r0, [pc, #80]	; (800b830 <HAL_PCD_MspInit+0x68>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800b7de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e0:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7e2:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b7e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b7e6:	2303      	movs	r3, #3
 800b7e8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b7ea:	230a      	movs	r3, #10
 800b7ec:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b7ee:	f7f5 fb35 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b7f6:	a903      	add	r1, sp, #12
 800b7f8:	480d      	ldr	r0, [pc, #52]	; (800b830 <HAL_PCD_MspInit+0x68>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800b7fa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b7fc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b7fe:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800b800:	f7f5 fb2c 	bl	8000e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b804:	4b0b      	ldr	r3, [pc, #44]	; (800b834 <HAL_PCD_MspInit+0x6c>)
 800b806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b808:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b80c:	635a      	str	r2, [r3, #52]	; 0x34
 800b80e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b810:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800b814:	9201      	str	r2, [sp, #4]
 800b816:	9a01      	ldr	r2, [sp, #4]
 800b818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b81a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b81e:	645a      	str	r2, [r3, #68]	; 0x44
 800b820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b822:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b826:	9302      	str	r3, [sp, #8]
 800b828:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800b82a:	b008      	add	sp, #32
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	bf00      	nop
 800b830:	40020000 	.word	0x40020000
 800b834:	40023800 	.word	0x40023800

0800b838 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800b838:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b83a:	4601      	mov	r1, r0
{
 800b83c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800b83e:	2200      	movs	r2, #0
 800b840:	2019      	movs	r0, #25
 800b842:	f7f4 feff 	bl	8000644 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800b846:	2019      	movs	r0, #25
 800b848:	f7f4 ff34 	bl	80006b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b84c:	4b14      	ldr	r3, [pc, #80]	; (800b8a0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b84e:	a901      	add	r1, sp, #4
 800b850:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800b854:	4c13      	ldr	r4, [pc, #76]	; (800b8a4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800b856:	f042 0201 	orr.w	r2, r2, #1
 800b85a:	645a      	str	r2, [r3, #68]	; 0x44
 800b85c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b85e:	f003 0301 	and.w	r3, r3, #1
 800b862:	9302      	str	r3, [sp, #8]
 800b864:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800b866:	f7f5 fef9 	bl	800165c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800b86a:	f7f5 fee7 	bl	800163c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800b86e:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <HAL_InitTick+0x70>)
 800b870:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800b872:	f240 33e7 	movw	r3, #999	; 0x3e7
 800b876:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800b878:	4b0c      	ldr	r3, [pc, #48]	; (800b8ac <HAL_InitTick+0x74>)
 800b87a:	fbb0 f0f3 	udiv	r0, r0, r3
 800b87e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800b880:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800b882:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b884:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800b886:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b888:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800b88a:	f7f6 fd55 	bl	8002338 <HAL_TIM_Base_Init>
 800b88e:	b920      	cbnz	r0, 800b89a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800b890:	4620      	mov	r0, r4
 800b892:	f7f6 fc2a 	bl	80020ea <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800b896:	b008      	add	sp, #32
 800b898:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800b89a:	2001      	movs	r0, #1
 800b89c:	e7fb      	b.n	800b896 <HAL_InitTick+0x5e>
 800b89e:	bf00      	nop
 800b8a0:	40023800 	.word	0x40023800
 800b8a4:	2000ad10 	.word	0x2000ad10
 800b8a8:	40010000 	.word	0x40010000
 800b8ac:	000f4240 	.word	0x000f4240

0800b8b0 <NMI_Handler>:
 800b8b0:	4770      	bx	lr

0800b8b2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800b8b2:	e7fe      	b.n	800b8b2 <HardFault_Handler>

0800b8b4 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800b8b4:	e7fe      	b.n	800b8b4 <MemManage_Handler>

0800b8b6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800b8b6:	e7fe      	b.n	800b8b6 <BusFault_Handler>

0800b8b8 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800b8b8:	e7fe      	b.n	800b8b8 <UsageFault_Handler>

0800b8ba <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800b8ba:	4770      	bx	lr

0800b8bc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800b8bc:	f7f7 b9fa 	b.w	8002cb4 <osSystickHandler>

0800b8c0 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800b8c0:	4801      	ldr	r0, [pc, #4]	; (800b8c8 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800b8c2:	f7f6 bc21 	b.w	8002108 <HAL_TIM_IRQHandler>
 800b8c6:	bf00      	nop
 800b8c8:	2000ad10 	.word	0x2000ad10

0800b8cc <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800b8cc:	4801      	ldr	r0, [pc, #4]	; (800b8d4 <ETH_IRQHandler+0x8>)
 800b8ce:	f7f5 b8e4 	b.w	8000a9a <HAL_ETH_IRQHandler>
 800b8d2:	bf00      	nop
 800b8d4:	20008fe0 	.word	0x20008fe0

0800b8d8 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800b8d8:	4b0b      	ldr	r3, [pc, #44]	; (800b908 <_sbrk+0x30>)
{
 800b8da:	4602      	mov	r2, r0
	if (heap_end == 0)
 800b8dc:	6819      	ldr	r1, [r3, #0]
 800b8de:	b909      	cbnz	r1, 800b8e4 <_sbrk+0xc>
		heap_end = &end;
 800b8e0:	490a      	ldr	r1, [pc, #40]	; (800b90c <_sbrk+0x34>)
 800b8e2:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b8e4:	490a      	ldr	r1, [pc, #40]	; (800b910 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 800b8e6:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b8e8:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800b8ea:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800b8ec:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800b8ee:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800b8f2:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 800b8f4:	bf83      	ittte	hi
 800b8f6:	220c      	movhi	r2, #12
 800b8f8:	4b06      	ldrhi	r3, [pc, #24]	; (800b914 <_sbrk+0x3c>)
		return (caddr_t) -1;
 800b8fa:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
	}

	heap_end += incr;
 800b8fe:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800b900:	bf88      	it	hi
 800b902:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800b904:	4770      	bx	lr
 800b906:	bf00      	nop
 800b908:	20003f8c 	.word	0x20003f8c
 800b90c:	2000ad50 	.word	0x2000ad50
 800b910:	e000ed08 	.word	0xe000ed08
 800b914:	20007708 	.word	0x20007708

0800b918 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800b918:	b570      	push	{r4, r5, r6, lr}
 800b91a:	460e      	mov	r6, r1
 800b91c:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b91e:	460c      	mov	r4, r1
 800b920:	1ba3      	subs	r3, r4, r6
 800b922:	429d      	cmp	r5, r3
 800b924:	dc01      	bgt.n	800b92a <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800b926:	4628      	mov	r0, r5
 800b928:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 800b92a:	f814 0b01 	ldrb.w	r0, [r4], #1
 800b92e:	f3af 8000 	nop.w
 800b932:	e7f5      	b.n	800b920 <_write+0x8>

0800b934 <_close>:

int _close(int file)
{
	return -1;
}
 800b934:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b938:	4770      	bx	lr

0800b93a <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800b93a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800b93e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800b940:	604b      	str	r3, [r1, #4]
}
 800b942:	4770      	bx	lr

0800b944 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800b944:	2001      	movs	r0, #1
 800b946:	4770      	bx	lr

0800b948 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800b948:	2000      	movs	r0, #0
 800b94a:	4770      	bx	lr

0800b94c <_read>:

int _read(int file, char *ptr, int len)
{
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	460e      	mov	r6, r1
 800b950:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800b952:	460c      	mov	r4, r1
 800b954:	1ba3      	subs	r3, r4, r6
 800b956:	429d      	cmp	r5, r3
 800b958:	dc01      	bgt.n	800b95e <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800b95a:	4628      	mov	r0, r5
 800b95c:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800b95e:	f3af 8000 	nop.w
 800b962:	f804 0b01 	strb.w	r0, [r4], #1
 800b966:	e7f5      	b.n	800b954 <_read+0x8>

0800b968 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b968:	490f      	ldr	r1, [pc, #60]	; (800b9a8 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800b96a:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800b96c:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800b970:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800b978:	4b0c      	ldr	r3, [pc, #48]	; (800b9ac <SystemInit+0x44>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	f042 0201 	orr.w	r2, r2, #1
 800b980:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800b982:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800b984:	681a      	ldr	r2, [r3, #0]
 800b986:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800b98a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b98e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800b990:	4a07      	ldr	r2, [pc, #28]	; (800b9b0 <SystemInit+0x48>)
 800b992:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800b994:	681a      	ldr	r2, [r3, #0]
 800b996:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b99a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800b99c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800b99e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b9a2:	608b      	str	r3, [r1, #8]
 800b9a4:	4770      	bx	lr
 800b9a6:	bf00      	nop
 800b9a8:	e000ed00 	.word	0xe000ed00
 800b9ac:	40023800 	.word	0x40023800
 800b9b0:	24003010 	.word	0x24003010

0800b9b4 <xputs>:




void xputs (const char* str)
{
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	1e44      	subs	r4, r0, #1
	while (*str)
 800b9b8:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800b9bc:	b900      	cbnz	r0, 800b9c0 <xputs+0xc>
		xputc(*str++);
}
 800b9be:	bd10      	pop	{r4, pc}
	debug_chr(c);
 800b9c0:	f7fe ffe6 	bl	800a990 <debug_chr>
 800b9c4:	e7f8      	b.n	800b9b8 <xputs+0x4>

0800b9c6 <xitoa>:
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 800b9c6:	2900      	cmp	r1, #0
{
 800b9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ca:	b087      	sub	sp, #28
	if (radix < 0) {
 800b9cc:	da39      	bge.n	800ba42 <xitoa+0x7c>
		radix = -radix;
		if (val < 0) {
 800b9ce:	2800      	cmp	r0, #0
		radix = -radix;
 800b9d0:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 800b9d4:	da35      	bge.n	800ba42 <xitoa+0x7c>
			val = -val;
 800b9d6:	4240      	negs	r0, r0
			sgn = '-';
 800b9d8:	272d      	movs	r7, #45	; 0x2d
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 800b9da:	2a00      	cmp	r2, #0
		len = -len;
 800b9dc:	bfba      	itte	lt
 800b9de:	4252      	neglt	r2, r2
		pad = '0';
 800b9e0:	2630      	movlt	r6, #48	; 0x30
	uint8_t c, r, sgn = 0, pad = ' ';
 800b9e2:	2620      	movge	r6, #32
	}
	if (len > 20) return;
 800b9e4:	2a14      	cmp	r2, #20
 800b9e6:	dc2a      	bgt.n	800ba3e <xitoa+0x78>
	v = val;
 800b9e8:	2500      	movs	r5, #0
	do {
		c = (uint8_t)(v % r);
 800b9ea:	b2c9      	uxtb	r1, r1
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
 800b9ec:	1c6b      	adds	r3, r5, #1
		c = (uint8_t)(v % r);
 800b9ee:	fbb0 fef1 	udiv	lr, r0, r1
 800b9f2:	fb01 001e 	mls	r0, r1, lr, r0
		s[i++] = c;
 800b9f6:	b2db      	uxtb	r3, r3
		c = (uint8_t)(v % r);
 800b9f8:	b2c4      	uxtb	r4, r0
		if (c >= 10) c += 7;
 800b9fa:	2809      	cmp	r0, #9
		s[i++] = c;
 800b9fc:	a806      	add	r0, sp, #24
		if (c >= 10) c += 7;
 800b9fe:	bf88      	it	hi
 800ba00:	3407      	addhi	r4, #7
		s[i++] = c;
 800ba02:	4428      	add	r0, r5
		if (c >= 10) c += 7;
 800ba04:	bf88      	it	hi
 800ba06:	b2e4      	uxtbhi	r4, r4
		c += '0';
 800ba08:	3430      	adds	r4, #48	; 0x30
		s[i++] = c;
 800ba0a:	f800 4c14 	strb.w	r4, [r0, #-20]
		v /= r;
 800ba0e:	4670      	mov	r0, lr
	} while (v);
 800ba10:	b9c8      	cbnz	r0, 800ba46 <xitoa+0x80>
	if (sgn) s[i++] = sgn;
 800ba12:	b12f      	cbz	r7, 800ba20 <xitoa+0x5a>
 800ba14:	a906      	add	r1, sp, #24
 800ba16:	3502      	adds	r5, #2
 800ba18:	440b      	add	r3, r1
 800ba1a:	f803 7c14 	strb.w	r7, [r3, #-20]
 800ba1e:	b2eb      	uxtb	r3, r5
	while (i < len)
 800ba20:	429a      	cmp	r2, r3
 800ba22:	4619      	mov	r1, r3
 800ba24:	dc11      	bgt.n	800ba4a <xitoa+0x84>
 800ba26:	3b01      	subs	r3, #1
 800ba28:	aa01      	add	r2, sp, #4
 800ba2a:	f10d 0503 	add.w	r5, sp, #3
 800ba2e:	fa52 f483 	uxtab	r4, r2, r3
	debug_chr(c);
 800ba32:	f814 0901 	ldrb.w	r0, [r4], #-1
 800ba36:	f7fe ffab 	bl	800a990 <debug_chr>
		s[i++] = pad;
	do
		xputc(s[--i]);
	while (i);
 800ba3a:	42a5      	cmp	r5, r4
 800ba3c:	d1f9      	bne.n	800ba32 <xitoa+0x6c>
}
 800ba3e:	b007      	add	sp, #28
 800ba40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t c, r, sgn = 0, pad = ' ';
 800ba42:	2700      	movs	r7, #0
 800ba44:	e7c9      	b.n	800b9da <xitoa+0x14>
		s[i++] = c;
 800ba46:	461d      	mov	r5, r3
 800ba48:	e7d0      	b.n	800b9ec <xitoa+0x26>
		s[i++] = pad;
 800ba4a:	a806      	add	r0, sp, #24
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	4401      	add	r1, r0
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	f801 6c14 	strb.w	r6, [r1, #-20]
 800ba56:	e7e3      	b.n	800ba20 <xitoa+0x5a>

0800ba58 <xprintf>:

void xprintf (const char* str, ...)
{
 800ba58:	b40f      	push	{r0, r1, r2, r3}
 800ba5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba5c:	ab06      	add	r3, sp, #24
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 800ba5e:	250a      	movs	r5, #10
{
 800ba60:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(arp, str);
 800ba64:	9301      	str	r3, [sp, #4]
	while ((d = *str++) != 0) {
 800ba66:	7820      	ldrb	r0, [r4, #0]
 800ba68:	b920      	cbnz	r0, 800ba74 <xprintf+0x1c>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800ba6a:	b003      	add	sp, #12
 800ba6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ba70:	b004      	add	sp, #16
 800ba72:	4770      	bx	lr
		if (d != '%') {
 800ba74:	2825      	cmp	r0, #37	; 0x25
 800ba76:	d003      	beq.n	800ba80 <xprintf+0x28>
	while ((d = *str++) != 0) {
 800ba78:	3401      	adds	r4, #1
	debug_chr(c);
 800ba7a:	f7fe ff89 	bl	800a990 <debug_chr>
			continue;
 800ba7e:	e7f2      	b.n	800ba66 <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800ba80:	7863      	ldrb	r3, [r4, #1]
 800ba82:	2200      	movs	r2, #0
		if (d == '0') {
 800ba84:	2b30      	cmp	r3, #48	; 0x30
			d = *str++; s = 1;
 800ba86:	bf0d      	iteet	eq
 800ba88:	78a3      	ldrbeq	r3, [r4, #2]
		d = *str++; w = r = s = l = 0;
 800ba8a:	3402      	addne	r4, #2
 800ba8c:	2000      	movne	r0, #0
			d = *str++; s = 1;
 800ba8e:	3403      	addeq	r4, #3
 800ba90:	bf08      	it	eq
 800ba92:	2001      	moveq	r0, #1
		while ((d >= '0')&&(d <= '9')) {
 800ba94:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800ba98:	2909      	cmp	r1, #9
 800ba9a:	d912      	bls.n	800bac2 <xprintf+0x6a>
		if (s) w = -w;
 800ba9c:	b100      	cbz	r0, 800baa0 <xprintf+0x48>
 800ba9e:	4252      	negs	r2, r2
		if (d == 'l') {
 800baa0:	2b6c      	cmp	r3, #108	; 0x6c
			d = *str++;
 800baa2:	bf03      	ittte	eq
 800baa4:	7823      	ldrbeq	r3, [r4, #0]
			l = 1;
 800baa6:	2101      	moveq	r1, #1
			d = *str++;
 800baa8:	3401      	addeq	r4, #1
		d = *str++; w = r = s = l = 0;
 800baaa:	2100      	movne	r1, #0
		if (!d) break;
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0dc      	beq.n	800ba6a <xprintf+0x12>
		if (d == 's') {
 800bab0:	2b73      	cmp	r3, #115	; 0x73
 800bab2:	d10c      	bne.n	800bace <xprintf+0x76>
			xputs(va_arg(arp, char*));
 800bab4:	9b01      	ldr	r3, [sp, #4]
 800bab6:	1d1a      	adds	r2, r3, #4
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	9201      	str	r2, [sp, #4]
 800babc:	f7ff ff7a 	bl	800b9b4 <xputs>
			continue;
 800bac0:	e7d1      	b.n	800ba66 <xprintf+0xe>
			w += w * 10 + (d - '0');
 800bac2:	fb05 1102 	mla	r1, r5, r2, r1
			d = *str++;
 800bac6:	f814 3b01 	ldrb.w	r3, [r4], #1
			w += w * 10 + (d - '0');
 800baca:	440a      	add	r2, r1
 800bacc:	e7e2      	b.n	800ba94 <xprintf+0x3c>
		if (d == 'c') {
 800bace:	2b63      	cmp	r3, #99	; 0x63
 800bad0:	d104      	bne.n	800badc <xprintf+0x84>
			xputc((char)va_arg(arp, int));
 800bad2:	9b01      	ldr	r3, [sp, #4]
 800bad4:	1d1a      	adds	r2, r3, #4
	debug_chr(c);
 800bad6:	7818      	ldrb	r0, [r3, #0]
			xputc((char)va_arg(arp, int));
 800bad8:	9201      	str	r2, [sp, #4]
 800bada:	e7ce      	b.n	800ba7a <xprintf+0x22>
		if (d == 'u') r = 10;
 800badc:	2b75      	cmp	r3, #117	; 0x75
 800bade:	d011      	beq.n	800bb04 <xprintf+0xac>
		if (d == 'd') r = -10;
 800bae0:	2b64      	cmp	r3, #100	; 0x64
 800bae2:	d011      	beq.n	800bb08 <xprintf+0xb0>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 800bae4:	2b58      	cmp	r3, #88	; 0x58
 800bae6:	d00b      	beq.n	800bb00 <xprintf+0xa8>
 800bae8:	2b78      	cmp	r3, #120	; 0x78
 800baea:	d009      	beq.n	800bb00 <xprintf+0xa8>
		if (d == 'b') r = 2;
 800baec:	2b62      	cmp	r3, #98	; 0x62
 800baee:	d1bc      	bne.n	800ba6a <xprintf+0x12>
 800baf0:	2102      	movs	r1, #2
 800baf2:	e00d      	b.n	800bb10 <xprintf+0xb8>
				xitoa((long)va_arg(arp, int), r, w);
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	1d19      	adds	r1, r3, #4
 800baf8:	9101      	str	r1, [sp, #4]
 800bafa:	f06f 0109 	mvn.w	r1, #9
 800bafe:	e00a      	b.n	800bb16 <xprintf+0xbe>
		if (l) {
 800bb00:	2110      	movs	r1, #16
 800bb02:	e005      	b.n	800bb10 <xprintf+0xb8>
		if (d == 'u') r = 10;
 800bb04:	210a      	movs	r1, #10
 800bb06:	e003      	b.n	800bb10 <xprintf+0xb8>
		if (l) {
 800bb08:	2900      	cmp	r1, #0
 800bb0a:	d0f3      	beq.n	800baf4 <xprintf+0x9c>
		if (d == 'd') r = -10;
 800bb0c:	f06f 0109 	mvn.w	r1, #9
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800bb10:	9b01      	ldr	r3, [sp, #4]
 800bb12:	1d18      	adds	r0, r3, #4
 800bb14:	9001      	str	r0, [sp, #4]
				xitoa((long)va_arg(arp, int), r, w);
 800bb16:	6818      	ldr	r0, [r3, #0]
 800bb18:	f7ff ff55 	bl	800b9c6 <xitoa>
 800bb1c:	e7a3      	b.n	800ba66 <xprintf+0xe>
	...

0800bb20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800bb20:	f8df d034 	ldr.w	sp, [pc, #52]	; 800bb58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800bb24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800bb26:	e003      	b.n	800bb30 <LoopCopyDataInit>

0800bb28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800bb28:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800bb2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800bb2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800bb2e:	3104      	adds	r1, #4

0800bb30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800bb30:	480b      	ldr	r0, [pc, #44]	; (800bb60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800bb32:	4b0c      	ldr	r3, [pc, #48]	; (800bb64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800bb34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800bb36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800bb38:	d3f6      	bcc.n	800bb28 <CopyDataInit>
  ldr  r2, =_sbss
 800bb3a:	4a0b      	ldr	r2, [pc, #44]	; (800bb68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800bb3c:	e002      	b.n	800bb44 <LoopFillZerobss>

0800bb3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800bb3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800bb40:	f842 3b04 	str.w	r3, [r2], #4

0800bb44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800bb44:	4b09      	ldr	r3, [pc, #36]	; (800bb6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800bb46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800bb48:	d3f9      	bcc.n	800bb3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800bb4a:	f7ff ff0d 	bl	800b968 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800bb4e:	f000 f811 	bl	800bb74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bb52:	f7ff f9eb 	bl	800af2c <main>
  bx  lr    
 800bb56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800bb58:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800bb5c:	0800e680 	.word	0x0800e680
  ldr  r0, =_sdata
 800bb60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800bb64:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800bb68:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800bb6c:	2000ad50 	.word	0x2000ad50

0800bb70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bb70:	e7fe      	b.n	800bb70 <ADC_IRQHandler>
	...

0800bb74 <__libc_init_array>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4e0d      	ldr	r6, [pc, #52]	; (800bbac <__libc_init_array+0x38>)
 800bb78:	4c0d      	ldr	r4, [pc, #52]	; (800bbb0 <__libc_init_array+0x3c>)
 800bb7a:	1ba4      	subs	r4, r4, r6
 800bb7c:	10a4      	asrs	r4, r4, #2
 800bb7e:	2500      	movs	r5, #0
 800bb80:	42a5      	cmp	r5, r4
 800bb82:	d109      	bne.n	800bb98 <__libc_init_array+0x24>
 800bb84:	4e0b      	ldr	r6, [pc, #44]	; (800bbb4 <__libc_init_array+0x40>)
 800bb86:	4c0c      	ldr	r4, [pc, #48]	; (800bbb8 <__libc_init_array+0x44>)
 800bb88:	f000 ff74 	bl	800ca74 <_init>
 800bb8c:	1ba4      	subs	r4, r4, r6
 800bb8e:	10a4      	asrs	r4, r4, #2
 800bb90:	2500      	movs	r5, #0
 800bb92:	42a5      	cmp	r5, r4
 800bb94:	d105      	bne.n	800bba2 <__libc_init_array+0x2e>
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb9c:	4798      	blx	r3
 800bb9e:	3501      	adds	r5, #1
 800bba0:	e7ee      	b.n	800bb80 <__libc_init_array+0xc>
 800bba2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bba6:	4798      	blx	r3
 800bba8:	3501      	adds	r5, #1
 800bbaa:	e7f2      	b.n	800bb92 <__libc_init_array+0x1e>
 800bbac:	0800e678 	.word	0x0800e678
 800bbb0:	0800e678 	.word	0x0800e678
 800bbb4:	0800e678 	.word	0x0800e678
 800bbb8:	0800e67c 	.word	0x0800e67c

0800bbbc <malloc>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <malloc+0xc>)
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	6818      	ldr	r0, [r3, #0]
 800bbc2:	f000 b873 	b.w	800bcac <_malloc_r>
 800bbc6:	bf00      	nop
 800bbc8:	20000014 	.word	0x20000014

0800bbcc <memcmp>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	3901      	subs	r1, #1
 800bbd0:	4402      	add	r2, r0
 800bbd2:	4290      	cmp	r0, r2
 800bbd4:	d101      	bne.n	800bbda <memcmp+0xe>
 800bbd6:	2000      	movs	r0, #0
 800bbd8:	bd10      	pop	{r4, pc}
 800bbda:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbde:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	d0f5      	beq.n	800bbd2 <memcmp+0x6>
 800bbe6:	1b18      	subs	r0, r3, r4
 800bbe8:	bd10      	pop	{r4, pc}

0800bbea <memcpy>:
 800bbea:	b510      	push	{r4, lr}
 800bbec:	1e43      	subs	r3, r0, #1
 800bbee:	440a      	add	r2, r1
 800bbf0:	4291      	cmp	r1, r2
 800bbf2:	d100      	bne.n	800bbf6 <memcpy+0xc>
 800bbf4:	bd10      	pop	{r4, pc}
 800bbf6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbfa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbfe:	e7f7      	b.n	800bbf0 <memcpy+0x6>

0800bc00 <memset>:
 800bc00:	4402      	add	r2, r0
 800bc02:	4603      	mov	r3, r0
 800bc04:	4293      	cmp	r3, r2
 800bc06:	d100      	bne.n	800bc0a <memset+0xa>
 800bc08:	4770      	bx	lr
 800bc0a:	f803 1b01 	strb.w	r1, [r3], #1
 800bc0e:	e7f9      	b.n	800bc04 <memset+0x4>

0800bc10 <_free_r>:
 800bc10:	b538      	push	{r3, r4, r5, lr}
 800bc12:	4605      	mov	r5, r0
 800bc14:	2900      	cmp	r1, #0
 800bc16:	d045      	beq.n	800bca4 <_free_r+0x94>
 800bc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc1c:	1f0c      	subs	r4, r1, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	bfb8      	it	lt
 800bc22:	18e4      	addlt	r4, r4, r3
 800bc24:	f000 f9cc 	bl	800bfc0 <__malloc_lock>
 800bc28:	4a1f      	ldr	r2, [pc, #124]	; (800bca8 <_free_r+0x98>)
 800bc2a:	6813      	ldr	r3, [r2, #0]
 800bc2c:	4610      	mov	r0, r2
 800bc2e:	b933      	cbnz	r3, 800bc3e <_free_r+0x2e>
 800bc30:	6063      	str	r3, [r4, #4]
 800bc32:	6014      	str	r4, [r2, #0]
 800bc34:	4628      	mov	r0, r5
 800bc36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc3a:	f000 b9c2 	b.w	800bfc2 <__malloc_unlock>
 800bc3e:	42a3      	cmp	r3, r4
 800bc40:	d90c      	bls.n	800bc5c <_free_r+0x4c>
 800bc42:	6821      	ldr	r1, [r4, #0]
 800bc44:	1862      	adds	r2, r4, r1
 800bc46:	4293      	cmp	r3, r2
 800bc48:	bf04      	itt	eq
 800bc4a:	681a      	ldreq	r2, [r3, #0]
 800bc4c:	685b      	ldreq	r3, [r3, #4]
 800bc4e:	6063      	str	r3, [r4, #4]
 800bc50:	bf04      	itt	eq
 800bc52:	1852      	addeq	r2, r2, r1
 800bc54:	6022      	streq	r2, [r4, #0]
 800bc56:	6004      	str	r4, [r0, #0]
 800bc58:	e7ec      	b.n	800bc34 <_free_r+0x24>
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	685a      	ldr	r2, [r3, #4]
 800bc5e:	b10a      	cbz	r2, 800bc64 <_free_r+0x54>
 800bc60:	42a2      	cmp	r2, r4
 800bc62:	d9fa      	bls.n	800bc5a <_free_r+0x4a>
 800bc64:	6819      	ldr	r1, [r3, #0]
 800bc66:	1858      	adds	r0, r3, r1
 800bc68:	42a0      	cmp	r0, r4
 800bc6a:	d10b      	bne.n	800bc84 <_free_r+0x74>
 800bc6c:	6820      	ldr	r0, [r4, #0]
 800bc6e:	4401      	add	r1, r0
 800bc70:	1858      	adds	r0, r3, r1
 800bc72:	4282      	cmp	r2, r0
 800bc74:	6019      	str	r1, [r3, #0]
 800bc76:	d1dd      	bne.n	800bc34 <_free_r+0x24>
 800bc78:	6810      	ldr	r0, [r2, #0]
 800bc7a:	6852      	ldr	r2, [r2, #4]
 800bc7c:	605a      	str	r2, [r3, #4]
 800bc7e:	4401      	add	r1, r0
 800bc80:	6019      	str	r1, [r3, #0]
 800bc82:	e7d7      	b.n	800bc34 <_free_r+0x24>
 800bc84:	d902      	bls.n	800bc8c <_free_r+0x7c>
 800bc86:	230c      	movs	r3, #12
 800bc88:	602b      	str	r3, [r5, #0]
 800bc8a:	e7d3      	b.n	800bc34 <_free_r+0x24>
 800bc8c:	6820      	ldr	r0, [r4, #0]
 800bc8e:	1821      	adds	r1, r4, r0
 800bc90:	428a      	cmp	r2, r1
 800bc92:	bf04      	itt	eq
 800bc94:	6811      	ldreq	r1, [r2, #0]
 800bc96:	6852      	ldreq	r2, [r2, #4]
 800bc98:	6062      	str	r2, [r4, #4]
 800bc9a:	bf04      	itt	eq
 800bc9c:	1809      	addeq	r1, r1, r0
 800bc9e:	6021      	streq	r1, [r4, #0]
 800bca0:	605c      	str	r4, [r3, #4]
 800bca2:	e7c7      	b.n	800bc34 <_free_r+0x24>
 800bca4:	bd38      	pop	{r3, r4, r5, pc}
 800bca6:	bf00      	nop
 800bca8:	20003f90 	.word	0x20003f90

0800bcac <_malloc_r>:
 800bcac:	b570      	push	{r4, r5, r6, lr}
 800bcae:	1ccd      	adds	r5, r1, #3
 800bcb0:	f025 0503 	bic.w	r5, r5, #3
 800bcb4:	3508      	adds	r5, #8
 800bcb6:	2d0c      	cmp	r5, #12
 800bcb8:	bf38      	it	cc
 800bcba:	250c      	movcc	r5, #12
 800bcbc:	2d00      	cmp	r5, #0
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	db01      	blt.n	800bcc6 <_malloc_r+0x1a>
 800bcc2:	42a9      	cmp	r1, r5
 800bcc4:	d903      	bls.n	800bcce <_malloc_r+0x22>
 800bcc6:	230c      	movs	r3, #12
 800bcc8:	6033      	str	r3, [r6, #0]
 800bcca:	2000      	movs	r0, #0
 800bccc:	bd70      	pop	{r4, r5, r6, pc}
 800bcce:	f000 f977 	bl	800bfc0 <__malloc_lock>
 800bcd2:	4a23      	ldr	r2, [pc, #140]	; (800bd60 <_malloc_r+0xb4>)
 800bcd4:	6814      	ldr	r4, [r2, #0]
 800bcd6:	4621      	mov	r1, r4
 800bcd8:	b991      	cbnz	r1, 800bd00 <_malloc_r+0x54>
 800bcda:	4c22      	ldr	r4, [pc, #136]	; (800bd64 <_malloc_r+0xb8>)
 800bcdc:	6823      	ldr	r3, [r4, #0]
 800bcde:	b91b      	cbnz	r3, 800bce8 <_malloc_r+0x3c>
 800bce0:	4630      	mov	r0, r6
 800bce2:	f000 f893 	bl	800be0c <_sbrk_r>
 800bce6:	6020      	str	r0, [r4, #0]
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f000 f88e 	bl	800be0c <_sbrk_r>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	d126      	bne.n	800bd42 <_malloc_r+0x96>
 800bcf4:	230c      	movs	r3, #12
 800bcf6:	6033      	str	r3, [r6, #0]
 800bcf8:	4630      	mov	r0, r6
 800bcfa:	f000 f962 	bl	800bfc2 <__malloc_unlock>
 800bcfe:	e7e4      	b.n	800bcca <_malloc_r+0x1e>
 800bd00:	680b      	ldr	r3, [r1, #0]
 800bd02:	1b5b      	subs	r3, r3, r5
 800bd04:	d41a      	bmi.n	800bd3c <_malloc_r+0x90>
 800bd06:	2b0b      	cmp	r3, #11
 800bd08:	d90f      	bls.n	800bd2a <_malloc_r+0x7e>
 800bd0a:	600b      	str	r3, [r1, #0]
 800bd0c:	50cd      	str	r5, [r1, r3]
 800bd0e:	18cc      	adds	r4, r1, r3
 800bd10:	4630      	mov	r0, r6
 800bd12:	f000 f956 	bl	800bfc2 <__malloc_unlock>
 800bd16:	f104 000b 	add.w	r0, r4, #11
 800bd1a:	1d23      	adds	r3, r4, #4
 800bd1c:	f020 0007 	bic.w	r0, r0, #7
 800bd20:	1ac3      	subs	r3, r0, r3
 800bd22:	d01b      	beq.n	800bd5c <_malloc_r+0xb0>
 800bd24:	425a      	negs	r2, r3
 800bd26:	50e2      	str	r2, [r4, r3]
 800bd28:	bd70      	pop	{r4, r5, r6, pc}
 800bd2a:	428c      	cmp	r4, r1
 800bd2c:	bf0d      	iteet	eq
 800bd2e:	6863      	ldreq	r3, [r4, #4]
 800bd30:	684b      	ldrne	r3, [r1, #4]
 800bd32:	6063      	strne	r3, [r4, #4]
 800bd34:	6013      	streq	r3, [r2, #0]
 800bd36:	bf18      	it	ne
 800bd38:	460c      	movne	r4, r1
 800bd3a:	e7e9      	b.n	800bd10 <_malloc_r+0x64>
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	6849      	ldr	r1, [r1, #4]
 800bd40:	e7ca      	b.n	800bcd8 <_malloc_r+0x2c>
 800bd42:	1cc4      	adds	r4, r0, #3
 800bd44:	f024 0403 	bic.w	r4, r4, #3
 800bd48:	42a0      	cmp	r0, r4
 800bd4a:	d005      	beq.n	800bd58 <_malloc_r+0xac>
 800bd4c:	1a21      	subs	r1, r4, r0
 800bd4e:	4630      	mov	r0, r6
 800bd50:	f000 f85c 	bl	800be0c <_sbrk_r>
 800bd54:	3001      	adds	r0, #1
 800bd56:	d0cd      	beq.n	800bcf4 <_malloc_r+0x48>
 800bd58:	6025      	str	r5, [r4, #0]
 800bd5a:	e7d9      	b.n	800bd10 <_malloc_r+0x64>
 800bd5c:	bd70      	pop	{r4, r5, r6, pc}
 800bd5e:	bf00      	nop
 800bd60:	20003f90 	.word	0x20003f90
 800bd64:	20003f94 	.word	0x20003f94

0800bd68 <iprintf>:
 800bd68:	b40f      	push	{r0, r1, r2, r3}
 800bd6a:	4b0a      	ldr	r3, [pc, #40]	; (800bd94 <iprintf+0x2c>)
 800bd6c:	b513      	push	{r0, r1, r4, lr}
 800bd6e:	681c      	ldr	r4, [r3, #0]
 800bd70:	b124      	cbz	r4, 800bd7c <iprintf+0x14>
 800bd72:	69a3      	ldr	r3, [r4, #24]
 800bd74:	b913      	cbnz	r3, 800bd7c <iprintf+0x14>
 800bd76:	4620      	mov	r0, r4
 800bd78:	f000 f898 	bl	800beac <__sinit>
 800bd7c:	ab05      	add	r3, sp, #20
 800bd7e:	9a04      	ldr	r2, [sp, #16]
 800bd80:	68a1      	ldr	r1, [r4, #8]
 800bd82:	9301      	str	r3, [sp, #4]
 800bd84:	4620      	mov	r0, r4
 800bd86:	f000 f947 	bl	800c018 <_vfiprintf_r>
 800bd8a:	b002      	add	sp, #8
 800bd8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd90:	b004      	add	sp, #16
 800bd92:	4770      	bx	lr
 800bd94:	20000014 	.word	0x20000014

0800bd98 <rand>:
 800bd98:	4b19      	ldr	r3, [pc, #100]	; (800be00 <rand+0x68>)
 800bd9a:	b510      	push	{r4, lr}
 800bd9c:	681c      	ldr	r4, [r3, #0]
 800bd9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bda0:	b9d3      	cbnz	r3, 800bdd8 <rand+0x40>
 800bda2:	2018      	movs	r0, #24
 800bda4:	f7ff ff0a 	bl	800bbbc <malloc>
 800bda8:	f243 330e 	movw	r3, #13070	; 0x330e
 800bdac:	63a0      	str	r0, [r4, #56]	; 0x38
 800bdae:	8003      	strh	r3, [r0, #0]
 800bdb0:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800bdb4:	8043      	strh	r3, [r0, #2]
 800bdb6:	f241 2334 	movw	r3, #4660	; 0x1234
 800bdba:	8083      	strh	r3, [r0, #4]
 800bdbc:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800bdc0:	80c3      	strh	r3, [r0, #6]
 800bdc2:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800bdc6:	8103      	strh	r3, [r0, #8]
 800bdc8:	2305      	movs	r3, #5
 800bdca:	8143      	strh	r3, [r0, #10]
 800bdcc:	230b      	movs	r3, #11
 800bdce:	8183      	strh	r3, [r0, #12]
 800bdd0:	2201      	movs	r2, #1
 800bdd2:	2300      	movs	r3, #0
 800bdd4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800bdd8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800bdda:	480a      	ldr	r0, [pc, #40]	; (800be04 <rand+0x6c>)
 800bddc:	690a      	ldr	r2, [r1, #16]
 800bdde:	694b      	ldr	r3, [r1, #20]
 800bde0:	4c09      	ldr	r4, [pc, #36]	; (800be08 <rand+0x70>)
 800bde2:	4350      	muls	r0, r2
 800bde4:	fb04 0003 	mla	r0, r4, r3, r0
 800bde8:	fba2 2304 	umull	r2, r3, r2, r4
 800bdec:	3201      	adds	r2, #1
 800bdee:	4403      	add	r3, r0
 800bdf0:	f143 0300 	adc.w	r3, r3, #0
 800bdf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800bdf8:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800bdfc:	bd10      	pop	{r4, pc}
 800bdfe:	bf00      	nop
 800be00:	20000014 	.word	0x20000014
 800be04:	5851f42d 	.word	0x5851f42d
 800be08:	4c957f2d 	.word	0x4c957f2d

0800be0c <_sbrk_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4c06      	ldr	r4, [pc, #24]	; (800be28 <_sbrk_r+0x1c>)
 800be10:	2300      	movs	r3, #0
 800be12:	4605      	mov	r5, r0
 800be14:	4608      	mov	r0, r1
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	f7ff fd5e 	bl	800b8d8 <_sbrk>
 800be1c:	1c43      	adds	r3, r0, #1
 800be1e:	d102      	bne.n	800be26 <_sbrk_r+0x1a>
 800be20:	6823      	ldr	r3, [r4, #0]
 800be22:	b103      	cbz	r3, 800be26 <_sbrk_r+0x1a>
 800be24:	602b      	str	r3, [r5, #0]
 800be26:	bd38      	pop	{r3, r4, r5, pc}
 800be28:	20007708 	.word	0x20007708

0800be2c <_cleanup_r>:
 800be2c:	4901      	ldr	r1, [pc, #4]	; (800be34 <_cleanup_r+0x8>)
 800be2e:	f000 b8a9 	b.w	800bf84 <_fwalk_reent>
 800be32:	bf00      	nop
 800be34:	0800c8cd 	.word	0x0800c8cd

0800be38 <std.isra.0>:
 800be38:	2300      	movs	r3, #0
 800be3a:	b510      	push	{r4, lr}
 800be3c:	4604      	mov	r4, r0
 800be3e:	6003      	str	r3, [r0, #0]
 800be40:	6043      	str	r3, [r0, #4]
 800be42:	6083      	str	r3, [r0, #8]
 800be44:	8181      	strh	r1, [r0, #12]
 800be46:	6643      	str	r3, [r0, #100]	; 0x64
 800be48:	81c2      	strh	r2, [r0, #14]
 800be4a:	6103      	str	r3, [r0, #16]
 800be4c:	6143      	str	r3, [r0, #20]
 800be4e:	6183      	str	r3, [r0, #24]
 800be50:	4619      	mov	r1, r3
 800be52:	2208      	movs	r2, #8
 800be54:	305c      	adds	r0, #92	; 0x5c
 800be56:	f7ff fed3 	bl	800bc00 <memset>
 800be5a:	4b05      	ldr	r3, [pc, #20]	; (800be70 <std.isra.0+0x38>)
 800be5c:	6263      	str	r3, [r4, #36]	; 0x24
 800be5e:	4b05      	ldr	r3, [pc, #20]	; (800be74 <std.isra.0+0x3c>)
 800be60:	62a3      	str	r3, [r4, #40]	; 0x28
 800be62:	4b05      	ldr	r3, [pc, #20]	; (800be78 <std.isra.0+0x40>)
 800be64:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be66:	4b05      	ldr	r3, [pc, #20]	; (800be7c <std.isra.0+0x44>)
 800be68:	6224      	str	r4, [r4, #32]
 800be6a:	6323      	str	r3, [r4, #48]	; 0x30
 800be6c:	bd10      	pop	{r4, pc}
 800be6e:	bf00      	nop
 800be70:	0800c571 	.word	0x0800c571
 800be74:	0800c593 	.word	0x0800c593
 800be78:	0800c5cb 	.word	0x0800c5cb
 800be7c:	0800c5ef 	.word	0x0800c5ef

0800be80 <__sfmoreglue>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	1e4a      	subs	r2, r1, #1
 800be84:	2568      	movs	r5, #104	; 0x68
 800be86:	4355      	muls	r5, r2
 800be88:	460e      	mov	r6, r1
 800be8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be8e:	f7ff ff0d 	bl	800bcac <_malloc_r>
 800be92:	4604      	mov	r4, r0
 800be94:	b140      	cbz	r0, 800bea8 <__sfmoreglue+0x28>
 800be96:	2100      	movs	r1, #0
 800be98:	e880 0042 	stmia.w	r0, {r1, r6}
 800be9c:	300c      	adds	r0, #12
 800be9e:	60a0      	str	r0, [r4, #8]
 800bea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bea4:	f7ff feac 	bl	800bc00 <memset>
 800bea8:	4620      	mov	r0, r4
 800beaa:	bd70      	pop	{r4, r5, r6, pc}

0800beac <__sinit>:
 800beac:	6983      	ldr	r3, [r0, #24]
 800beae:	b510      	push	{r4, lr}
 800beb0:	4604      	mov	r4, r0
 800beb2:	bb33      	cbnz	r3, 800bf02 <__sinit+0x56>
 800beb4:	6483      	str	r3, [r0, #72]	; 0x48
 800beb6:	64c3      	str	r3, [r0, #76]	; 0x4c
 800beb8:	6503      	str	r3, [r0, #80]	; 0x50
 800beba:	4b12      	ldr	r3, [pc, #72]	; (800bf04 <__sinit+0x58>)
 800bebc:	4a12      	ldr	r2, [pc, #72]	; (800bf08 <__sinit+0x5c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	6282      	str	r2, [r0, #40]	; 0x28
 800bec2:	4298      	cmp	r0, r3
 800bec4:	bf04      	itt	eq
 800bec6:	2301      	moveq	r3, #1
 800bec8:	6183      	streq	r3, [r0, #24]
 800beca:	f000 f81f 	bl	800bf0c <__sfp>
 800bece:	6060      	str	r0, [r4, #4]
 800bed0:	4620      	mov	r0, r4
 800bed2:	f000 f81b 	bl	800bf0c <__sfp>
 800bed6:	60a0      	str	r0, [r4, #8]
 800bed8:	4620      	mov	r0, r4
 800beda:	f000 f817 	bl	800bf0c <__sfp>
 800bede:	2200      	movs	r2, #0
 800bee0:	60e0      	str	r0, [r4, #12]
 800bee2:	2104      	movs	r1, #4
 800bee4:	6860      	ldr	r0, [r4, #4]
 800bee6:	f7ff ffa7 	bl	800be38 <std.isra.0>
 800beea:	2201      	movs	r2, #1
 800beec:	2109      	movs	r1, #9
 800beee:	68a0      	ldr	r0, [r4, #8]
 800bef0:	f7ff ffa2 	bl	800be38 <std.isra.0>
 800bef4:	2202      	movs	r2, #2
 800bef6:	2112      	movs	r1, #18
 800bef8:	68e0      	ldr	r0, [r4, #12]
 800befa:	f7ff ff9d 	bl	800be38 <std.isra.0>
 800befe:	2301      	movs	r3, #1
 800bf00:	61a3      	str	r3, [r4, #24]
 800bf02:	bd10      	pop	{r4, pc}
 800bf04:	0800e648 	.word	0x0800e648
 800bf08:	0800be2d 	.word	0x0800be2d

0800bf0c <__sfp>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	4b1c      	ldr	r3, [pc, #112]	; (800bf80 <__sfp+0x74>)
 800bf10:	681e      	ldr	r6, [r3, #0]
 800bf12:	69b3      	ldr	r3, [r6, #24]
 800bf14:	4607      	mov	r7, r0
 800bf16:	b913      	cbnz	r3, 800bf1e <__sfp+0x12>
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f7ff ffc7 	bl	800beac <__sinit>
 800bf1e:	3648      	adds	r6, #72	; 0x48
 800bf20:	68b4      	ldr	r4, [r6, #8]
 800bf22:	6873      	ldr	r3, [r6, #4]
 800bf24:	3b01      	subs	r3, #1
 800bf26:	d503      	bpl.n	800bf30 <__sfp+0x24>
 800bf28:	6833      	ldr	r3, [r6, #0]
 800bf2a:	b133      	cbz	r3, 800bf3a <__sfp+0x2e>
 800bf2c:	6836      	ldr	r6, [r6, #0]
 800bf2e:	e7f7      	b.n	800bf20 <__sfp+0x14>
 800bf30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf34:	b16d      	cbz	r5, 800bf52 <__sfp+0x46>
 800bf36:	3468      	adds	r4, #104	; 0x68
 800bf38:	e7f4      	b.n	800bf24 <__sfp+0x18>
 800bf3a:	2104      	movs	r1, #4
 800bf3c:	4638      	mov	r0, r7
 800bf3e:	f7ff ff9f 	bl	800be80 <__sfmoreglue>
 800bf42:	6030      	str	r0, [r6, #0]
 800bf44:	2800      	cmp	r0, #0
 800bf46:	d1f1      	bne.n	800bf2c <__sfp+0x20>
 800bf48:	230c      	movs	r3, #12
 800bf4a:	603b      	str	r3, [r7, #0]
 800bf4c:	4604      	mov	r4, r0
 800bf4e:	4620      	mov	r0, r4
 800bf50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800bf56:	81e3      	strh	r3, [r4, #14]
 800bf58:	2301      	movs	r3, #1
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	6665      	str	r5, [r4, #100]	; 0x64
 800bf5e:	6025      	str	r5, [r4, #0]
 800bf60:	60a5      	str	r5, [r4, #8]
 800bf62:	6065      	str	r5, [r4, #4]
 800bf64:	6125      	str	r5, [r4, #16]
 800bf66:	6165      	str	r5, [r4, #20]
 800bf68:	61a5      	str	r5, [r4, #24]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	4629      	mov	r1, r5
 800bf6e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf72:	f7ff fe45 	bl	800bc00 <memset>
 800bf76:	6365      	str	r5, [r4, #52]	; 0x34
 800bf78:	63a5      	str	r5, [r4, #56]	; 0x38
 800bf7a:	64a5      	str	r5, [r4, #72]	; 0x48
 800bf7c:	64e5      	str	r5, [r4, #76]	; 0x4c
 800bf7e:	e7e6      	b.n	800bf4e <__sfp+0x42>
 800bf80:	0800e648 	.word	0x0800e648

0800bf84 <_fwalk_reent>:
 800bf84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf88:	4680      	mov	r8, r0
 800bf8a:	4689      	mov	r9, r1
 800bf8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bf90:	2600      	movs	r6, #0
 800bf92:	b914      	cbnz	r4, 800bf9a <_fwalk_reent+0x16>
 800bf94:	4630      	mov	r0, r6
 800bf96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf9a:	68a5      	ldr	r5, [r4, #8]
 800bf9c:	6867      	ldr	r7, [r4, #4]
 800bf9e:	3f01      	subs	r7, #1
 800bfa0:	d501      	bpl.n	800bfa6 <_fwalk_reent+0x22>
 800bfa2:	6824      	ldr	r4, [r4, #0]
 800bfa4:	e7f5      	b.n	800bf92 <_fwalk_reent+0xe>
 800bfa6:	89ab      	ldrh	r3, [r5, #12]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	d907      	bls.n	800bfbc <_fwalk_reent+0x38>
 800bfac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	d003      	beq.n	800bfbc <_fwalk_reent+0x38>
 800bfb4:	4629      	mov	r1, r5
 800bfb6:	4640      	mov	r0, r8
 800bfb8:	47c8      	blx	r9
 800bfba:	4306      	orrs	r6, r0
 800bfbc:	3568      	adds	r5, #104	; 0x68
 800bfbe:	e7ee      	b.n	800bf9e <_fwalk_reent+0x1a>

0800bfc0 <__malloc_lock>:
 800bfc0:	4770      	bx	lr

0800bfc2 <__malloc_unlock>:
 800bfc2:	4770      	bx	lr

0800bfc4 <__sfputc_r>:
 800bfc4:	6893      	ldr	r3, [r2, #8]
 800bfc6:	3b01      	subs	r3, #1
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	b410      	push	{r4}
 800bfcc:	6093      	str	r3, [r2, #8]
 800bfce:	da09      	bge.n	800bfe4 <__sfputc_r+0x20>
 800bfd0:	6994      	ldr	r4, [r2, #24]
 800bfd2:	42a3      	cmp	r3, r4
 800bfd4:	db02      	blt.n	800bfdc <__sfputc_r+0x18>
 800bfd6:	b2cb      	uxtb	r3, r1
 800bfd8:	2b0a      	cmp	r3, #10
 800bfda:	d103      	bne.n	800bfe4 <__sfputc_r+0x20>
 800bfdc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bfe0:	f000 bb0a 	b.w	800c5f8 <__swbuf_r>
 800bfe4:	6813      	ldr	r3, [r2, #0]
 800bfe6:	1c58      	adds	r0, r3, #1
 800bfe8:	6010      	str	r0, [r2, #0]
 800bfea:	7019      	strb	r1, [r3, #0]
 800bfec:	b2c8      	uxtb	r0, r1
 800bfee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bff2:	4770      	bx	lr

0800bff4 <__sfputs_r>:
 800bff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bff6:	4606      	mov	r6, r0
 800bff8:	460f      	mov	r7, r1
 800bffa:	4614      	mov	r4, r2
 800bffc:	18d5      	adds	r5, r2, r3
 800bffe:	42ac      	cmp	r4, r5
 800c000:	d101      	bne.n	800c006 <__sfputs_r+0x12>
 800c002:	2000      	movs	r0, #0
 800c004:	e007      	b.n	800c016 <__sfputs_r+0x22>
 800c006:	463a      	mov	r2, r7
 800c008:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00c:	4630      	mov	r0, r6
 800c00e:	f7ff ffd9 	bl	800bfc4 <__sfputc_r>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d1f3      	bne.n	800bffe <__sfputs_r+0xa>
 800c016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c018 <_vfiprintf_r>:
 800c018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c01c:	b09d      	sub	sp, #116	; 0x74
 800c01e:	460c      	mov	r4, r1
 800c020:	4617      	mov	r7, r2
 800c022:	9303      	str	r3, [sp, #12]
 800c024:	4606      	mov	r6, r0
 800c026:	b118      	cbz	r0, 800c030 <_vfiprintf_r+0x18>
 800c028:	6983      	ldr	r3, [r0, #24]
 800c02a:	b90b      	cbnz	r3, 800c030 <_vfiprintf_r+0x18>
 800c02c:	f7ff ff3e 	bl	800beac <__sinit>
 800c030:	4b7c      	ldr	r3, [pc, #496]	; (800c224 <_vfiprintf_r+0x20c>)
 800c032:	429c      	cmp	r4, r3
 800c034:	d157      	bne.n	800c0e6 <_vfiprintf_r+0xce>
 800c036:	6874      	ldr	r4, [r6, #4]
 800c038:	89a3      	ldrh	r3, [r4, #12]
 800c03a:	0718      	lsls	r0, r3, #28
 800c03c:	d55d      	bpl.n	800c0fa <_vfiprintf_r+0xe2>
 800c03e:	6923      	ldr	r3, [r4, #16]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d05a      	beq.n	800c0fa <_vfiprintf_r+0xe2>
 800c044:	2300      	movs	r3, #0
 800c046:	9309      	str	r3, [sp, #36]	; 0x24
 800c048:	2320      	movs	r3, #32
 800c04a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c04e:	2330      	movs	r3, #48	; 0x30
 800c050:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c054:	f04f 0b01 	mov.w	fp, #1
 800c058:	46b8      	mov	r8, r7
 800c05a:	4645      	mov	r5, r8
 800c05c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c060:	2b00      	cmp	r3, #0
 800c062:	d155      	bne.n	800c110 <_vfiprintf_r+0xf8>
 800c064:	ebb8 0a07 	subs.w	sl, r8, r7
 800c068:	d00b      	beq.n	800c082 <_vfiprintf_r+0x6a>
 800c06a:	4653      	mov	r3, sl
 800c06c:	463a      	mov	r2, r7
 800c06e:	4621      	mov	r1, r4
 800c070:	4630      	mov	r0, r6
 800c072:	f7ff ffbf 	bl	800bff4 <__sfputs_r>
 800c076:	3001      	adds	r0, #1
 800c078:	f000 80c4 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c07c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c07e:	4453      	add	r3, sl
 800c080:	9309      	str	r3, [sp, #36]	; 0x24
 800c082:	f898 3000 	ldrb.w	r3, [r8]
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 80bc 	beq.w	800c204 <_vfiprintf_r+0x1ec>
 800c08c:	2300      	movs	r3, #0
 800c08e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c092:	9304      	str	r3, [sp, #16]
 800c094:	9307      	str	r3, [sp, #28]
 800c096:	9205      	str	r2, [sp, #20]
 800c098:	9306      	str	r3, [sp, #24]
 800c09a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c09e:	931a      	str	r3, [sp, #104]	; 0x68
 800c0a0:	2205      	movs	r2, #5
 800c0a2:	7829      	ldrb	r1, [r5, #0]
 800c0a4:	4860      	ldr	r0, [pc, #384]	; (800c228 <_vfiprintf_r+0x210>)
 800c0a6:	f7f4 f8b3 	bl	8000210 <memchr>
 800c0aa:	f105 0801 	add.w	r8, r5, #1
 800c0ae:	9b04      	ldr	r3, [sp, #16]
 800c0b0:	2800      	cmp	r0, #0
 800c0b2:	d131      	bne.n	800c118 <_vfiprintf_r+0x100>
 800c0b4:	06d9      	lsls	r1, r3, #27
 800c0b6:	bf44      	itt	mi
 800c0b8:	2220      	movmi	r2, #32
 800c0ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0be:	071a      	lsls	r2, r3, #28
 800c0c0:	bf44      	itt	mi
 800c0c2:	222b      	movmi	r2, #43	; 0x2b
 800c0c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c0c8:	782a      	ldrb	r2, [r5, #0]
 800c0ca:	2a2a      	cmp	r2, #42	; 0x2a
 800c0cc:	d02c      	beq.n	800c128 <_vfiprintf_r+0x110>
 800c0ce:	9a07      	ldr	r2, [sp, #28]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	200a      	movs	r0, #10
 800c0d4:	46a8      	mov	r8, r5
 800c0d6:	3501      	adds	r5, #1
 800c0d8:	f898 3000 	ldrb.w	r3, [r8]
 800c0dc:	3b30      	subs	r3, #48	; 0x30
 800c0de:	2b09      	cmp	r3, #9
 800c0e0:	d96d      	bls.n	800c1be <_vfiprintf_r+0x1a6>
 800c0e2:	b371      	cbz	r1, 800c142 <_vfiprintf_r+0x12a>
 800c0e4:	e026      	b.n	800c134 <_vfiprintf_r+0x11c>
 800c0e6:	4b51      	ldr	r3, [pc, #324]	; (800c22c <_vfiprintf_r+0x214>)
 800c0e8:	429c      	cmp	r4, r3
 800c0ea:	d101      	bne.n	800c0f0 <_vfiprintf_r+0xd8>
 800c0ec:	68b4      	ldr	r4, [r6, #8]
 800c0ee:	e7a3      	b.n	800c038 <_vfiprintf_r+0x20>
 800c0f0:	4b4f      	ldr	r3, [pc, #316]	; (800c230 <_vfiprintf_r+0x218>)
 800c0f2:	429c      	cmp	r4, r3
 800c0f4:	bf08      	it	eq
 800c0f6:	68f4      	ldreq	r4, [r6, #12]
 800c0f8:	e79e      	b.n	800c038 <_vfiprintf_r+0x20>
 800c0fa:	4621      	mov	r1, r4
 800c0fc:	4630      	mov	r0, r6
 800c0fe:	f000 fadf 	bl	800c6c0 <__swsetup_r>
 800c102:	2800      	cmp	r0, #0
 800c104:	d09e      	beq.n	800c044 <_vfiprintf_r+0x2c>
 800c106:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c10a:	b01d      	add	sp, #116	; 0x74
 800c10c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c110:	2b25      	cmp	r3, #37	; 0x25
 800c112:	d0a7      	beq.n	800c064 <_vfiprintf_r+0x4c>
 800c114:	46a8      	mov	r8, r5
 800c116:	e7a0      	b.n	800c05a <_vfiprintf_r+0x42>
 800c118:	4a43      	ldr	r2, [pc, #268]	; (800c228 <_vfiprintf_r+0x210>)
 800c11a:	1a80      	subs	r0, r0, r2
 800c11c:	fa0b f000 	lsl.w	r0, fp, r0
 800c120:	4318      	orrs	r0, r3
 800c122:	9004      	str	r0, [sp, #16]
 800c124:	4645      	mov	r5, r8
 800c126:	e7bb      	b.n	800c0a0 <_vfiprintf_r+0x88>
 800c128:	9a03      	ldr	r2, [sp, #12]
 800c12a:	1d11      	adds	r1, r2, #4
 800c12c:	6812      	ldr	r2, [r2, #0]
 800c12e:	9103      	str	r1, [sp, #12]
 800c130:	2a00      	cmp	r2, #0
 800c132:	db01      	blt.n	800c138 <_vfiprintf_r+0x120>
 800c134:	9207      	str	r2, [sp, #28]
 800c136:	e004      	b.n	800c142 <_vfiprintf_r+0x12a>
 800c138:	4252      	negs	r2, r2
 800c13a:	f043 0302 	orr.w	r3, r3, #2
 800c13e:	9207      	str	r2, [sp, #28]
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	f898 3000 	ldrb.w	r3, [r8]
 800c146:	2b2e      	cmp	r3, #46	; 0x2e
 800c148:	d110      	bne.n	800c16c <_vfiprintf_r+0x154>
 800c14a:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c14e:	2b2a      	cmp	r3, #42	; 0x2a
 800c150:	f108 0101 	add.w	r1, r8, #1
 800c154:	d137      	bne.n	800c1c6 <_vfiprintf_r+0x1ae>
 800c156:	9b03      	ldr	r3, [sp, #12]
 800c158:	1d1a      	adds	r2, r3, #4
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	9203      	str	r2, [sp, #12]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	bfb8      	it	lt
 800c162:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800c166:	f108 0802 	add.w	r8, r8, #2
 800c16a:	9305      	str	r3, [sp, #20]
 800c16c:	4d31      	ldr	r5, [pc, #196]	; (800c234 <_vfiprintf_r+0x21c>)
 800c16e:	f898 1000 	ldrb.w	r1, [r8]
 800c172:	2203      	movs	r2, #3
 800c174:	4628      	mov	r0, r5
 800c176:	f7f4 f84b 	bl	8000210 <memchr>
 800c17a:	b140      	cbz	r0, 800c18e <_vfiprintf_r+0x176>
 800c17c:	2340      	movs	r3, #64	; 0x40
 800c17e:	1b40      	subs	r0, r0, r5
 800c180:	fa03 f000 	lsl.w	r0, r3, r0
 800c184:	9b04      	ldr	r3, [sp, #16]
 800c186:	4303      	orrs	r3, r0
 800c188:	9304      	str	r3, [sp, #16]
 800c18a:	f108 0801 	add.w	r8, r8, #1
 800c18e:	f898 1000 	ldrb.w	r1, [r8]
 800c192:	4829      	ldr	r0, [pc, #164]	; (800c238 <_vfiprintf_r+0x220>)
 800c194:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c198:	2206      	movs	r2, #6
 800c19a:	f108 0701 	add.w	r7, r8, #1
 800c19e:	f7f4 f837 	bl	8000210 <memchr>
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	d034      	beq.n	800c210 <_vfiprintf_r+0x1f8>
 800c1a6:	4b25      	ldr	r3, [pc, #148]	; (800c23c <_vfiprintf_r+0x224>)
 800c1a8:	bb03      	cbnz	r3, 800c1ec <_vfiprintf_r+0x1d4>
 800c1aa:	9b03      	ldr	r3, [sp, #12]
 800c1ac:	3307      	adds	r3, #7
 800c1ae:	f023 0307 	bic.w	r3, r3, #7
 800c1b2:	3308      	adds	r3, #8
 800c1b4:	9303      	str	r3, [sp, #12]
 800c1b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1b8:	444b      	add	r3, r9
 800c1ba:	9309      	str	r3, [sp, #36]	; 0x24
 800c1bc:	e74c      	b.n	800c058 <_vfiprintf_r+0x40>
 800c1be:	fb00 3202 	mla	r2, r0, r2, r3
 800c1c2:	2101      	movs	r1, #1
 800c1c4:	e786      	b.n	800c0d4 <_vfiprintf_r+0xbc>
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	9305      	str	r3, [sp, #20]
 800c1ca:	4618      	mov	r0, r3
 800c1cc:	250a      	movs	r5, #10
 800c1ce:	4688      	mov	r8, r1
 800c1d0:	3101      	adds	r1, #1
 800c1d2:	f898 2000 	ldrb.w	r2, [r8]
 800c1d6:	3a30      	subs	r2, #48	; 0x30
 800c1d8:	2a09      	cmp	r2, #9
 800c1da:	d903      	bls.n	800c1e4 <_vfiprintf_r+0x1cc>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0c5      	beq.n	800c16c <_vfiprintf_r+0x154>
 800c1e0:	9005      	str	r0, [sp, #20]
 800c1e2:	e7c3      	b.n	800c16c <_vfiprintf_r+0x154>
 800c1e4:	fb05 2000 	mla	r0, r5, r0, r2
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e7f0      	b.n	800c1ce <_vfiprintf_r+0x1b6>
 800c1ec:	ab03      	add	r3, sp, #12
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4622      	mov	r2, r4
 800c1f2:	4b13      	ldr	r3, [pc, #76]	; (800c240 <_vfiprintf_r+0x228>)
 800c1f4:	a904      	add	r1, sp, #16
 800c1f6:	4630      	mov	r0, r6
 800c1f8:	f3af 8000 	nop.w
 800c1fc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800c200:	4681      	mov	r9, r0
 800c202:	d1d8      	bne.n	800c1b6 <_vfiprintf_r+0x19e>
 800c204:	89a3      	ldrh	r3, [r4, #12]
 800c206:	065b      	lsls	r3, r3, #25
 800c208:	f53f af7d 	bmi.w	800c106 <_vfiprintf_r+0xee>
 800c20c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c20e:	e77c      	b.n	800c10a <_vfiprintf_r+0xf2>
 800c210:	ab03      	add	r3, sp, #12
 800c212:	9300      	str	r3, [sp, #0]
 800c214:	4622      	mov	r2, r4
 800c216:	4b0a      	ldr	r3, [pc, #40]	; (800c240 <_vfiprintf_r+0x228>)
 800c218:	a904      	add	r1, sp, #16
 800c21a:	4630      	mov	r0, r6
 800c21c:	f000 f888 	bl	800c330 <_printf_i>
 800c220:	e7ec      	b.n	800c1fc <_vfiprintf_r+0x1e4>
 800c222:	bf00      	nop
 800c224:	0800e608 	.word	0x0800e608
 800c228:	0800e64c 	.word	0x0800e64c
 800c22c:	0800e628 	.word	0x0800e628
 800c230:	0800e5e8 	.word	0x0800e5e8
 800c234:	0800e652 	.word	0x0800e652
 800c238:	0800e656 	.word	0x0800e656
 800c23c:	00000000 	.word	0x00000000
 800c240:	0800bff5 	.word	0x0800bff5

0800c244 <_printf_common>:
 800c244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c248:	4691      	mov	r9, r2
 800c24a:	461f      	mov	r7, r3
 800c24c:	688a      	ldr	r2, [r1, #8]
 800c24e:	690b      	ldr	r3, [r1, #16]
 800c250:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c254:	4293      	cmp	r3, r2
 800c256:	bfb8      	it	lt
 800c258:	4613      	movlt	r3, r2
 800c25a:	f8c9 3000 	str.w	r3, [r9]
 800c25e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c262:	4606      	mov	r6, r0
 800c264:	460c      	mov	r4, r1
 800c266:	b112      	cbz	r2, 800c26e <_printf_common+0x2a>
 800c268:	3301      	adds	r3, #1
 800c26a:	f8c9 3000 	str.w	r3, [r9]
 800c26e:	6823      	ldr	r3, [r4, #0]
 800c270:	0699      	lsls	r1, r3, #26
 800c272:	bf42      	ittt	mi
 800c274:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c278:	3302      	addmi	r3, #2
 800c27a:	f8c9 3000 	strmi.w	r3, [r9]
 800c27e:	6825      	ldr	r5, [r4, #0]
 800c280:	f015 0506 	ands.w	r5, r5, #6
 800c284:	d107      	bne.n	800c296 <_printf_common+0x52>
 800c286:	f104 0a19 	add.w	sl, r4, #25
 800c28a:	68e3      	ldr	r3, [r4, #12]
 800c28c:	f8d9 2000 	ldr.w	r2, [r9]
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	429d      	cmp	r5, r3
 800c294:	db29      	blt.n	800c2ea <_printf_common+0xa6>
 800c296:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c29a:	6822      	ldr	r2, [r4, #0]
 800c29c:	3300      	adds	r3, #0
 800c29e:	bf18      	it	ne
 800c2a0:	2301      	movne	r3, #1
 800c2a2:	0692      	lsls	r2, r2, #26
 800c2a4:	d42e      	bmi.n	800c304 <_printf_common+0xc0>
 800c2a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	4630      	mov	r0, r6
 800c2ae:	47c0      	blx	r8
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	d021      	beq.n	800c2f8 <_printf_common+0xb4>
 800c2b4:	6823      	ldr	r3, [r4, #0]
 800c2b6:	68e5      	ldr	r5, [r4, #12]
 800c2b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c2bc:	f003 0306 	and.w	r3, r3, #6
 800c2c0:	2b04      	cmp	r3, #4
 800c2c2:	bf08      	it	eq
 800c2c4:	1aad      	subeq	r5, r5, r2
 800c2c6:	68a3      	ldr	r3, [r4, #8]
 800c2c8:	6922      	ldr	r2, [r4, #16]
 800c2ca:	bf0c      	ite	eq
 800c2cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2d0:	2500      	movne	r5, #0
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	bfc4      	itt	gt
 800c2d6:	1a9b      	subgt	r3, r3, r2
 800c2d8:	18ed      	addgt	r5, r5, r3
 800c2da:	f04f 0900 	mov.w	r9, #0
 800c2de:	341a      	adds	r4, #26
 800c2e0:	454d      	cmp	r5, r9
 800c2e2:	d11b      	bne.n	800c31c <_printf_common+0xd8>
 800c2e4:	2000      	movs	r0, #0
 800c2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	4639      	mov	r1, r7
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	47c0      	blx	r8
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	d103      	bne.n	800c300 <_printf_common+0xbc>
 800c2f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c300:	3501      	adds	r5, #1
 800c302:	e7c2      	b.n	800c28a <_printf_common+0x46>
 800c304:	18e1      	adds	r1, r4, r3
 800c306:	1c5a      	adds	r2, r3, #1
 800c308:	2030      	movs	r0, #48	; 0x30
 800c30a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c30e:	4422      	add	r2, r4
 800c310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c318:	3302      	adds	r3, #2
 800c31a:	e7c4      	b.n	800c2a6 <_printf_common+0x62>
 800c31c:	2301      	movs	r3, #1
 800c31e:	4622      	mov	r2, r4
 800c320:	4639      	mov	r1, r7
 800c322:	4630      	mov	r0, r6
 800c324:	47c0      	blx	r8
 800c326:	3001      	adds	r0, #1
 800c328:	d0e6      	beq.n	800c2f8 <_printf_common+0xb4>
 800c32a:	f109 0901 	add.w	r9, r9, #1
 800c32e:	e7d7      	b.n	800c2e0 <_printf_common+0x9c>

0800c330 <_printf_i>:
 800c330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c334:	4617      	mov	r7, r2
 800c336:	7e0a      	ldrb	r2, [r1, #24]
 800c338:	b085      	sub	sp, #20
 800c33a:	2a6e      	cmp	r2, #110	; 0x6e
 800c33c:	4698      	mov	r8, r3
 800c33e:	4606      	mov	r6, r0
 800c340:	460c      	mov	r4, r1
 800c342:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c344:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800c348:	f000 80bc 	beq.w	800c4c4 <_printf_i+0x194>
 800c34c:	d81a      	bhi.n	800c384 <_printf_i+0x54>
 800c34e:	2a63      	cmp	r2, #99	; 0x63
 800c350:	d02e      	beq.n	800c3b0 <_printf_i+0x80>
 800c352:	d80a      	bhi.n	800c36a <_printf_i+0x3a>
 800c354:	2a00      	cmp	r2, #0
 800c356:	f000 80c8 	beq.w	800c4ea <_printf_i+0x1ba>
 800c35a:	2a58      	cmp	r2, #88	; 0x58
 800c35c:	f000 808a 	beq.w	800c474 <_printf_i+0x144>
 800c360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c364:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800c368:	e02a      	b.n	800c3c0 <_printf_i+0x90>
 800c36a:	2a64      	cmp	r2, #100	; 0x64
 800c36c:	d001      	beq.n	800c372 <_printf_i+0x42>
 800c36e:	2a69      	cmp	r2, #105	; 0x69
 800c370:	d1f6      	bne.n	800c360 <_printf_i+0x30>
 800c372:	6821      	ldr	r1, [r4, #0]
 800c374:	681a      	ldr	r2, [r3, #0]
 800c376:	f011 0f80 	tst.w	r1, #128	; 0x80
 800c37a:	d023      	beq.n	800c3c4 <_printf_i+0x94>
 800c37c:	1d11      	adds	r1, r2, #4
 800c37e:	6019      	str	r1, [r3, #0]
 800c380:	6813      	ldr	r3, [r2, #0]
 800c382:	e027      	b.n	800c3d4 <_printf_i+0xa4>
 800c384:	2a73      	cmp	r2, #115	; 0x73
 800c386:	f000 80b4 	beq.w	800c4f2 <_printf_i+0x1c2>
 800c38a:	d808      	bhi.n	800c39e <_printf_i+0x6e>
 800c38c:	2a6f      	cmp	r2, #111	; 0x6f
 800c38e:	d02a      	beq.n	800c3e6 <_printf_i+0xb6>
 800c390:	2a70      	cmp	r2, #112	; 0x70
 800c392:	d1e5      	bne.n	800c360 <_printf_i+0x30>
 800c394:	680a      	ldr	r2, [r1, #0]
 800c396:	f042 0220 	orr.w	r2, r2, #32
 800c39a:	600a      	str	r2, [r1, #0]
 800c39c:	e003      	b.n	800c3a6 <_printf_i+0x76>
 800c39e:	2a75      	cmp	r2, #117	; 0x75
 800c3a0:	d021      	beq.n	800c3e6 <_printf_i+0xb6>
 800c3a2:	2a78      	cmp	r2, #120	; 0x78
 800c3a4:	d1dc      	bne.n	800c360 <_printf_i+0x30>
 800c3a6:	2278      	movs	r2, #120	; 0x78
 800c3a8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800c3ac:	496e      	ldr	r1, [pc, #440]	; (800c568 <_printf_i+0x238>)
 800c3ae:	e064      	b.n	800c47a <_printf_i+0x14a>
 800c3b0:	681a      	ldr	r2, [r3, #0]
 800c3b2:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800c3b6:	1d11      	adds	r1, r2, #4
 800c3b8:	6019      	str	r1, [r3, #0]
 800c3ba:	6813      	ldr	r3, [r2, #0]
 800c3bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e0a3      	b.n	800c50c <_printf_i+0x1dc>
 800c3c4:	f011 0f40 	tst.w	r1, #64	; 0x40
 800c3c8:	f102 0104 	add.w	r1, r2, #4
 800c3cc:	6019      	str	r1, [r3, #0]
 800c3ce:	d0d7      	beq.n	800c380 <_printf_i+0x50>
 800c3d0:	f9b2 3000 	ldrsh.w	r3, [r2]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	da03      	bge.n	800c3e0 <_printf_i+0xb0>
 800c3d8:	222d      	movs	r2, #45	; 0x2d
 800c3da:	425b      	negs	r3, r3
 800c3dc:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c3e0:	4962      	ldr	r1, [pc, #392]	; (800c56c <_printf_i+0x23c>)
 800c3e2:	220a      	movs	r2, #10
 800c3e4:	e017      	b.n	800c416 <_printf_i+0xe6>
 800c3e6:	6820      	ldr	r0, [r4, #0]
 800c3e8:	6819      	ldr	r1, [r3, #0]
 800c3ea:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c3ee:	d003      	beq.n	800c3f8 <_printf_i+0xc8>
 800c3f0:	1d08      	adds	r0, r1, #4
 800c3f2:	6018      	str	r0, [r3, #0]
 800c3f4:	680b      	ldr	r3, [r1, #0]
 800c3f6:	e006      	b.n	800c406 <_printf_i+0xd6>
 800c3f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c3fc:	f101 0004 	add.w	r0, r1, #4
 800c400:	6018      	str	r0, [r3, #0]
 800c402:	d0f7      	beq.n	800c3f4 <_printf_i+0xc4>
 800c404:	880b      	ldrh	r3, [r1, #0]
 800c406:	4959      	ldr	r1, [pc, #356]	; (800c56c <_printf_i+0x23c>)
 800c408:	2a6f      	cmp	r2, #111	; 0x6f
 800c40a:	bf14      	ite	ne
 800c40c:	220a      	movne	r2, #10
 800c40e:	2208      	moveq	r2, #8
 800c410:	2000      	movs	r0, #0
 800c412:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800c416:	6865      	ldr	r5, [r4, #4]
 800c418:	60a5      	str	r5, [r4, #8]
 800c41a:	2d00      	cmp	r5, #0
 800c41c:	f2c0 809c 	blt.w	800c558 <_printf_i+0x228>
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	f020 0004 	bic.w	r0, r0, #4
 800c426:	6020      	str	r0, [r4, #0]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d13f      	bne.n	800c4ac <_printf_i+0x17c>
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	f040 8095 	bne.w	800c55c <_printf_i+0x22c>
 800c432:	4675      	mov	r5, lr
 800c434:	2a08      	cmp	r2, #8
 800c436:	d10b      	bne.n	800c450 <_printf_i+0x120>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	07da      	lsls	r2, r3, #31
 800c43c:	d508      	bpl.n	800c450 <_printf_i+0x120>
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	6862      	ldr	r2, [r4, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	bfde      	ittt	le
 800c446:	2330      	movle	r3, #48	; 0x30
 800c448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c44c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c450:	ebae 0305 	sub.w	r3, lr, r5
 800c454:	6123      	str	r3, [r4, #16]
 800c456:	f8cd 8000 	str.w	r8, [sp]
 800c45a:	463b      	mov	r3, r7
 800c45c:	aa03      	add	r2, sp, #12
 800c45e:	4621      	mov	r1, r4
 800c460:	4630      	mov	r0, r6
 800c462:	f7ff feef 	bl	800c244 <_printf_common>
 800c466:	3001      	adds	r0, #1
 800c468:	d155      	bne.n	800c516 <_printf_i+0x1e6>
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c46e:	b005      	add	sp, #20
 800c470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c474:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800c478:	493c      	ldr	r1, [pc, #240]	; (800c56c <_printf_i+0x23c>)
 800c47a:	6822      	ldr	r2, [r4, #0]
 800c47c:	6818      	ldr	r0, [r3, #0]
 800c47e:	f012 0f80 	tst.w	r2, #128	; 0x80
 800c482:	f100 0504 	add.w	r5, r0, #4
 800c486:	601d      	str	r5, [r3, #0]
 800c488:	d001      	beq.n	800c48e <_printf_i+0x15e>
 800c48a:	6803      	ldr	r3, [r0, #0]
 800c48c:	e002      	b.n	800c494 <_printf_i+0x164>
 800c48e:	0655      	lsls	r5, r2, #25
 800c490:	d5fb      	bpl.n	800c48a <_printf_i+0x15a>
 800c492:	8803      	ldrh	r3, [r0, #0]
 800c494:	07d0      	lsls	r0, r2, #31
 800c496:	bf44      	itt	mi
 800c498:	f042 0220 	orrmi.w	r2, r2, #32
 800c49c:	6022      	strmi	r2, [r4, #0]
 800c49e:	b91b      	cbnz	r3, 800c4a8 <_printf_i+0x178>
 800c4a0:	6822      	ldr	r2, [r4, #0]
 800c4a2:	f022 0220 	bic.w	r2, r2, #32
 800c4a6:	6022      	str	r2, [r4, #0]
 800c4a8:	2210      	movs	r2, #16
 800c4aa:	e7b1      	b.n	800c410 <_printf_i+0xe0>
 800c4ac:	4675      	mov	r5, lr
 800c4ae:	fbb3 f0f2 	udiv	r0, r3, r2
 800c4b2:	fb02 3310 	mls	r3, r2, r0, r3
 800c4b6:	5ccb      	ldrb	r3, [r1, r3]
 800c4b8:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c4bc:	4603      	mov	r3, r0
 800c4be:	2800      	cmp	r0, #0
 800c4c0:	d1f5      	bne.n	800c4ae <_printf_i+0x17e>
 800c4c2:	e7b7      	b.n	800c434 <_printf_i+0x104>
 800c4c4:	6808      	ldr	r0, [r1, #0]
 800c4c6:	681a      	ldr	r2, [r3, #0]
 800c4c8:	6949      	ldr	r1, [r1, #20]
 800c4ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 800c4ce:	d004      	beq.n	800c4da <_printf_i+0x1aa>
 800c4d0:	1d10      	adds	r0, r2, #4
 800c4d2:	6018      	str	r0, [r3, #0]
 800c4d4:	6813      	ldr	r3, [r2, #0]
 800c4d6:	6019      	str	r1, [r3, #0]
 800c4d8:	e007      	b.n	800c4ea <_printf_i+0x1ba>
 800c4da:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4de:	f102 0004 	add.w	r0, r2, #4
 800c4e2:	6018      	str	r0, [r3, #0]
 800c4e4:	6813      	ldr	r3, [r2, #0]
 800c4e6:	d0f6      	beq.n	800c4d6 <_printf_i+0x1a6>
 800c4e8:	8019      	strh	r1, [r3, #0]
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	6123      	str	r3, [r4, #16]
 800c4ee:	4675      	mov	r5, lr
 800c4f0:	e7b1      	b.n	800c456 <_printf_i+0x126>
 800c4f2:	681a      	ldr	r2, [r3, #0]
 800c4f4:	1d11      	adds	r1, r2, #4
 800c4f6:	6019      	str	r1, [r3, #0]
 800c4f8:	6815      	ldr	r5, [r2, #0]
 800c4fa:	6862      	ldr	r2, [r4, #4]
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	4628      	mov	r0, r5
 800c500:	f7f3 fe86 	bl	8000210 <memchr>
 800c504:	b108      	cbz	r0, 800c50a <_printf_i+0x1da>
 800c506:	1b40      	subs	r0, r0, r5
 800c508:	6060      	str	r0, [r4, #4]
 800c50a:	6863      	ldr	r3, [r4, #4]
 800c50c:	6123      	str	r3, [r4, #16]
 800c50e:	2300      	movs	r3, #0
 800c510:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c514:	e79f      	b.n	800c456 <_printf_i+0x126>
 800c516:	6923      	ldr	r3, [r4, #16]
 800c518:	462a      	mov	r2, r5
 800c51a:	4639      	mov	r1, r7
 800c51c:	4630      	mov	r0, r6
 800c51e:	47c0      	blx	r8
 800c520:	3001      	adds	r0, #1
 800c522:	d0a2      	beq.n	800c46a <_printf_i+0x13a>
 800c524:	6823      	ldr	r3, [r4, #0]
 800c526:	079b      	lsls	r3, r3, #30
 800c528:	d507      	bpl.n	800c53a <_printf_i+0x20a>
 800c52a:	2500      	movs	r5, #0
 800c52c:	f104 0919 	add.w	r9, r4, #25
 800c530:	68e3      	ldr	r3, [r4, #12]
 800c532:	9a03      	ldr	r2, [sp, #12]
 800c534:	1a9b      	subs	r3, r3, r2
 800c536:	429d      	cmp	r5, r3
 800c538:	db05      	blt.n	800c546 <_printf_i+0x216>
 800c53a:	68e0      	ldr	r0, [r4, #12]
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	4298      	cmp	r0, r3
 800c540:	bfb8      	it	lt
 800c542:	4618      	movlt	r0, r3
 800c544:	e793      	b.n	800c46e <_printf_i+0x13e>
 800c546:	2301      	movs	r3, #1
 800c548:	464a      	mov	r2, r9
 800c54a:	4639      	mov	r1, r7
 800c54c:	4630      	mov	r0, r6
 800c54e:	47c0      	blx	r8
 800c550:	3001      	adds	r0, #1
 800c552:	d08a      	beq.n	800c46a <_printf_i+0x13a>
 800c554:	3501      	adds	r5, #1
 800c556:	e7eb      	b.n	800c530 <_printf_i+0x200>
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d1a7      	bne.n	800c4ac <_printf_i+0x17c>
 800c55c:	780b      	ldrb	r3, [r1, #0]
 800c55e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c562:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c566:	e765      	b.n	800c434 <_printf_i+0x104>
 800c568:	0800e5be 	.word	0x0800e5be
 800c56c:	0800e65d 	.word	0x0800e65d

0800c570 <__sread>:
 800c570:	b510      	push	{r4, lr}
 800c572:	460c      	mov	r4, r1
 800c574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c578:	f000 fa48 	bl	800ca0c <_read_r>
 800c57c:	2800      	cmp	r0, #0
 800c57e:	bfab      	itete	ge
 800c580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c582:	89a3      	ldrhlt	r3, [r4, #12]
 800c584:	181b      	addge	r3, r3, r0
 800c586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c58a:	bfac      	ite	ge
 800c58c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c58e:	81a3      	strhlt	r3, [r4, #12]
 800c590:	bd10      	pop	{r4, pc}

0800c592 <__swrite>:
 800c592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c596:	461f      	mov	r7, r3
 800c598:	898b      	ldrh	r3, [r1, #12]
 800c59a:	05db      	lsls	r3, r3, #23
 800c59c:	4605      	mov	r5, r0
 800c59e:	460c      	mov	r4, r1
 800c5a0:	4616      	mov	r6, r2
 800c5a2:	d505      	bpl.n	800c5b0 <__swrite+0x1e>
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5ac:	f000 f9b8 	bl	800c920 <_lseek_r>
 800c5b0:	89a3      	ldrh	r3, [r4, #12]
 800c5b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5ba:	81a3      	strh	r3, [r4, #12]
 800c5bc:	4632      	mov	r2, r6
 800c5be:	463b      	mov	r3, r7
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5c6:	f000 b869 	b.w	800c69c <_write_r>

0800c5ca <__sseek>:
 800c5ca:	b510      	push	{r4, lr}
 800c5cc:	460c      	mov	r4, r1
 800c5ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5d2:	f000 f9a5 	bl	800c920 <_lseek_r>
 800c5d6:	1c43      	adds	r3, r0, #1
 800c5d8:	89a3      	ldrh	r3, [r4, #12]
 800c5da:	bf15      	itete	ne
 800c5dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c5e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c5e6:	81a3      	strheq	r3, [r4, #12]
 800c5e8:	bf18      	it	ne
 800c5ea:	81a3      	strhne	r3, [r4, #12]
 800c5ec:	bd10      	pop	{r4, pc}

0800c5ee <__sclose>:
 800c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f2:	f000 b8d3 	b.w	800c79c <_close_r>
	...

0800c5f8 <__swbuf_r>:
 800c5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fa:	460e      	mov	r6, r1
 800c5fc:	4614      	mov	r4, r2
 800c5fe:	4605      	mov	r5, r0
 800c600:	b118      	cbz	r0, 800c60a <__swbuf_r+0x12>
 800c602:	6983      	ldr	r3, [r0, #24]
 800c604:	b90b      	cbnz	r3, 800c60a <__swbuf_r+0x12>
 800c606:	f7ff fc51 	bl	800beac <__sinit>
 800c60a:	4b21      	ldr	r3, [pc, #132]	; (800c690 <__swbuf_r+0x98>)
 800c60c:	429c      	cmp	r4, r3
 800c60e:	d12a      	bne.n	800c666 <__swbuf_r+0x6e>
 800c610:	686c      	ldr	r4, [r5, #4]
 800c612:	69a3      	ldr	r3, [r4, #24]
 800c614:	60a3      	str	r3, [r4, #8]
 800c616:	89a3      	ldrh	r3, [r4, #12]
 800c618:	071a      	lsls	r2, r3, #28
 800c61a:	d52e      	bpl.n	800c67a <__swbuf_r+0x82>
 800c61c:	6923      	ldr	r3, [r4, #16]
 800c61e:	b363      	cbz	r3, 800c67a <__swbuf_r+0x82>
 800c620:	6923      	ldr	r3, [r4, #16]
 800c622:	6820      	ldr	r0, [r4, #0]
 800c624:	1ac0      	subs	r0, r0, r3
 800c626:	6963      	ldr	r3, [r4, #20]
 800c628:	b2f6      	uxtb	r6, r6
 800c62a:	4298      	cmp	r0, r3
 800c62c:	4637      	mov	r7, r6
 800c62e:	db04      	blt.n	800c63a <__swbuf_r+0x42>
 800c630:	4621      	mov	r1, r4
 800c632:	4628      	mov	r0, r5
 800c634:	f000 f94a 	bl	800c8cc <_fflush_r>
 800c638:	bb28      	cbnz	r0, 800c686 <__swbuf_r+0x8e>
 800c63a:	68a3      	ldr	r3, [r4, #8]
 800c63c:	3b01      	subs	r3, #1
 800c63e:	60a3      	str	r3, [r4, #8]
 800c640:	6823      	ldr	r3, [r4, #0]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	6022      	str	r2, [r4, #0]
 800c646:	701e      	strb	r6, [r3, #0]
 800c648:	6963      	ldr	r3, [r4, #20]
 800c64a:	3001      	adds	r0, #1
 800c64c:	4298      	cmp	r0, r3
 800c64e:	d004      	beq.n	800c65a <__swbuf_r+0x62>
 800c650:	89a3      	ldrh	r3, [r4, #12]
 800c652:	07db      	lsls	r3, r3, #31
 800c654:	d519      	bpl.n	800c68a <__swbuf_r+0x92>
 800c656:	2e0a      	cmp	r6, #10
 800c658:	d117      	bne.n	800c68a <__swbuf_r+0x92>
 800c65a:	4621      	mov	r1, r4
 800c65c:	4628      	mov	r0, r5
 800c65e:	f000 f935 	bl	800c8cc <_fflush_r>
 800c662:	b190      	cbz	r0, 800c68a <__swbuf_r+0x92>
 800c664:	e00f      	b.n	800c686 <__swbuf_r+0x8e>
 800c666:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <__swbuf_r+0x9c>)
 800c668:	429c      	cmp	r4, r3
 800c66a:	d101      	bne.n	800c670 <__swbuf_r+0x78>
 800c66c:	68ac      	ldr	r4, [r5, #8]
 800c66e:	e7d0      	b.n	800c612 <__swbuf_r+0x1a>
 800c670:	4b09      	ldr	r3, [pc, #36]	; (800c698 <__swbuf_r+0xa0>)
 800c672:	429c      	cmp	r4, r3
 800c674:	bf08      	it	eq
 800c676:	68ec      	ldreq	r4, [r5, #12]
 800c678:	e7cb      	b.n	800c612 <__swbuf_r+0x1a>
 800c67a:	4621      	mov	r1, r4
 800c67c:	4628      	mov	r0, r5
 800c67e:	f000 f81f 	bl	800c6c0 <__swsetup_r>
 800c682:	2800      	cmp	r0, #0
 800c684:	d0cc      	beq.n	800c620 <__swbuf_r+0x28>
 800c686:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c68a:	4638      	mov	r0, r7
 800c68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68e:	bf00      	nop
 800c690:	0800e608 	.word	0x0800e608
 800c694:	0800e628 	.word	0x0800e628
 800c698:	0800e5e8 	.word	0x0800e5e8

0800c69c <_write_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4c07      	ldr	r4, [pc, #28]	; (800c6bc <_write_r+0x20>)
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	4608      	mov	r0, r1
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	6022      	str	r2, [r4, #0]
 800c6aa:	461a      	mov	r2, r3
 800c6ac:	f7ff f934 	bl	800b918 <_write>
 800c6b0:	1c43      	adds	r3, r0, #1
 800c6b2:	d102      	bne.n	800c6ba <_write_r+0x1e>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	b103      	cbz	r3, 800c6ba <_write_r+0x1e>
 800c6b8:	602b      	str	r3, [r5, #0]
 800c6ba:	bd38      	pop	{r3, r4, r5, pc}
 800c6bc:	20007708 	.word	0x20007708

0800c6c0 <__swsetup_r>:
 800c6c0:	4b32      	ldr	r3, [pc, #200]	; (800c78c <__swsetup_r+0xcc>)
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	681d      	ldr	r5, [r3, #0]
 800c6c6:	4606      	mov	r6, r0
 800c6c8:	460c      	mov	r4, r1
 800c6ca:	b125      	cbz	r5, 800c6d6 <__swsetup_r+0x16>
 800c6cc:	69ab      	ldr	r3, [r5, #24]
 800c6ce:	b913      	cbnz	r3, 800c6d6 <__swsetup_r+0x16>
 800c6d0:	4628      	mov	r0, r5
 800c6d2:	f7ff fbeb 	bl	800beac <__sinit>
 800c6d6:	4b2e      	ldr	r3, [pc, #184]	; (800c790 <__swsetup_r+0xd0>)
 800c6d8:	429c      	cmp	r4, r3
 800c6da:	d10f      	bne.n	800c6fc <__swsetup_r+0x3c>
 800c6dc:	686c      	ldr	r4, [r5, #4]
 800c6de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c6e2:	b29a      	uxth	r2, r3
 800c6e4:	0715      	lsls	r5, r2, #28
 800c6e6:	d42c      	bmi.n	800c742 <__swsetup_r+0x82>
 800c6e8:	06d0      	lsls	r0, r2, #27
 800c6ea:	d411      	bmi.n	800c710 <__swsetup_r+0x50>
 800c6ec:	2209      	movs	r2, #9
 800c6ee:	6032      	str	r2, [r6, #0]
 800c6f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c6f4:	81a3      	strh	r3, [r4, #12]
 800c6f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c6fa:	bd70      	pop	{r4, r5, r6, pc}
 800c6fc:	4b25      	ldr	r3, [pc, #148]	; (800c794 <__swsetup_r+0xd4>)
 800c6fe:	429c      	cmp	r4, r3
 800c700:	d101      	bne.n	800c706 <__swsetup_r+0x46>
 800c702:	68ac      	ldr	r4, [r5, #8]
 800c704:	e7eb      	b.n	800c6de <__swsetup_r+0x1e>
 800c706:	4b24      	ldr	r3, [pc, #144]	; (800c798 <__swsetup_r+0xd8>)
 800c708:	429c      	cmp	r4, r3
 800c70a:	bf08      	it	eq
 800c70c:	68ec      	ldreq	r4, [r5, #12]
 800c70e:	e7e6      	b.n	800c6de <__swsetup_r+0x1e>
 800c710:	0751      	lsls	r1, r2, #29
 800c712:	d512      	bpl.n	800c73a <__swsetup_r+0x7a>
 800c714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c716:	b141      	cbz	r1, 800c72a <__swsetup_r+0x6a>
 800c718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c71c:	4299      	cmp	r1, r3
 800c71e:	d002      	beq.n	800c726 <__swsetup_r+0x66>
 800c720:	4630      	mov	r0, r6
 800c722:	f7ff fa75 	bl	800bc10 <_free_r>
 800c726:	2300      	movs	r3, #0
 800c728:	6363      	str	r3, [r4, #52]	; 0x34
 800c72a:	89a3      	ldrh	r3, [r4, #12]
 800c72c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c730:	81a3      	strh	r3, [r4, #12]
 800c732:	2300      	movs	r3, #0
 800c734:	6063      	str	r3, [r4, #4]
 800c736:	6923      	ldr	r3, [r4, #16]
 800c738:	6023      	str	r3, [r4, #0]
 800c73a:	89a3      	ldrh	r3, [r4, #12]
 800c73c:	f043 0308 	orr.w	r3, r3, #8
 800c740:	81a3      	strh	r3, [r4, #12]
 800c742:	6923      	ldr	r3, [r4, #16]
 800c744:	b94b      	cbnz	r3, 800c75a <__swsetup_r+0x9a>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c74c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c750:	d003      	beq.n	800c75a <__swsetup_r+0x9a>
 800c752:	4621      	mov	r1, r4
 800c754:	4630      	mov	r0, r6
 800c756:	f000 f919 	bl	800c98c <__smakebuf_r>
 800c75a:	89a2      	ldrh	r2, [r4, #12]
 800c75c:	f012 0301 	ands.w	r3, r2, #1
 800c760:	d00c      	beq.n	800c77c <__swsetup_r+0xbc>
 800c762:	2300      	movs	r3, #0
 800c764:	60a3      	str	r3, [r4, #8]
 800c766:	6963      	ldr	r3, [r4, #20]
 800c768:	425b      	negs	r3, r3
 800c76a:	61a3      	str	r3, [r4, #24]
 800c76c:	6923      	ldr	r3, [r4, #16]
 800c76e:	b953      	cbnz	r3, 800c786 <__swsetup_r+0xc6>
 800c770:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c774:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800c778:	d1ba      	bne.n	800c6f0 <__swsetup_r+0x30>
 800c77a:	bd70      	pop	{r4, r5, r6, pc}
 800c77c:	0792      	lsls	r2, r2, #30
 800c77e:	bf58      	it	pl
 800c780:	6963      	ldrpl	r3, [r4, #20]
 800c782:	60a3      	str	r3, [r4, #8]
 800c784:	e7f2      	b.n	800c76c <__swsetup_r+0xac>
 800c786:	2000      	movs	r0, #0
 800c788:	e7f7      	b.n	800c77a <__swsetup_r+0xba>
 800c78a:	bf00      	nop
 800c78c:	20000014 	.word	0x20000014
 800c790:	0800e608 	.word	0x0800e608
 800c794:	0800e628 	.word	0x0800e628
 800c798:	0800e5e8 	.word	0x0800e5e8

0800c79c <_close_r>:
 800c79c:	b538      	push	{r3, r4, r5, lr}
 800c79e:	4c06      	ldr	r4, [pc, #24]	; (800c7b8 <_close_r+0x1c>)
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	4608      	mov	r0, r1
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	f7ff f8c4 	bl	800b934 <_close>
 800c7ac:	1c43      	adds	r3, r0, #1
 800c7ae:	d102      	bne.n	800c7b6 <_close_r+0x1a>
 800c7b0:	6823      	ldr	r3, [r4, #0]
 800c7b2:	b103      	cbz	r3, 800c7b6 <_close_r+0x1a>
 800c7b4:	602b      	str	r3, [r5, #0]
 800c7b6:	bd38      	pop	{r3, r4, r5, pc}
 800c7b8:	20007708 	.word	0x20007708

0800c7bc <__sflush_r>:
 800c7bc:	898a      	ldrh	r2, [r1, #12]
 800c7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c2:	4605      	mov	r5, r0
 800c7c4:	0710      	lsls	r0, r2, #28
 800c7c6:	460c      	mov	r4, r1
 800c7c8:	d45a      	bmi.n	800c880 <__sflush_r+0xc4>
 800c7ca:	684b      	ldr	r3, [r1, #4]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	dc05      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	dc02      	bgt.n	800c7dc <__sflush_r+0x20>
 800c7d6:	2000      	movs	r0, #0
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7de:	2e00      	cmp	r6, #0
 800c7e0:	d0f9      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7e8:	682f      	ldr	r7, [r5, #0]
 800c7ea:	602b      	str	r3, [r5, #0]
 800c7ec:	d033      	beq.n	800c856 <__sflush_r+0x9a>
 800c7ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7f0:	89a3      	ldrh	r3, [r4, #12]
 800c7f2:	075a      	lsls	r2, r3, #29
 800c7f4:	d505      	bpl.n	800c802 <__sflush_r+0x46>
 800c7f6:	6863      	ldr	r3, [r4, #4]
 800c7f8:	1ac0      	subs	r0, r0, r3
 800c7fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7fc:	b10b      	cbz	r3, 800c802 <__sflush_r+0x46>
 800c7fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c800:	1ac0      	subs	r0, r0, r3
 800c802:	2300      	movs	r3, #0
 800c804:	4602      	mov	r2, r0
 800c806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c808:	6a21      	ldr	r1, [r4, #32]
 800c80a:	4628      	mov	r0, r5
 800c80c:	47b0      	blx	r6
 800c80e:	1c43      	adds	r3, r0, #1
 800c810:	89a3      	ldrh	r3, [r4, #12]
 800c812:	d106      	bne.n	800c822 <__sflush_r+0x66>
 800c814:	6829      	ldr	r1, [r5, #0]
 800c816:	291d      	cmp	r1, #29
 800c818:	d84b      	bhi.n	800c8b2 <__sflush_r+0xf6>
 800c81a:	4a2b      	ldr	r2, [pc, #172]	; (800c8c8 <__sflush_r+0x10c>)
 800c81c:	40ca      	lsrs	r2, r1
 800c81e:	07d6      	lsls	r6, r2, #31
 800c820:	d547      	bpl.n	800c8b2 <__sflush_r+0xf6>
 800c822:	2200      	movs	r2, #0
 800c824:	6062      	str	r2, [r4, #4]
 800c826:	04d9      	lsls	r1, r3, #19
 800c828:	6922      	ldr	r2, [r4, #16]
 800c82a:	6022      	str	r2, [r4, #0]
 800c82c:	d504      	bpl.n	800c838 <__sflush_r+0x7c>
 800c82e:	1c42      	adds	r2, r0, #1
 800c830:	d101      	bne.n	800c836 <__sflush_r+0x7a>
 800c832:	682b      	ldr	r3, [r5, #0]
 800c834:	b903      	cbnz	r3, 800c838 <__sflush_r+0x7c>
 800c836:	6560      	str	r0, [r4, #84]	; 0x54
 800c838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c83a:	602f      	str	r7, [r5, #0]
 800c83c:	2900      	cmp	r1, #0
 800c83e:	d0ca      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c844:	4299      	cmp	r1, r3
 800c846:	d002      	beq.n	800c84e <__sflush_r+0x92>
 800c848:	4628      	mov	r0, r5
 800c84a:	f7ff f9e1 	bl	800bc10 <_free_r>
 800c84e:	2000      	movs	r0, #0
 800c850:	6360      	str	r0, [r4, #52]	; 0x34
 800c852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c856:	6a21      	ldr	r1, [r4, #32]
 800c858:	2301      	movs	r3, #1
 800c85a:	4628      	mov	r0, r5
 800c85c:	47b0      	blx	r6
 800c85e:	1c41      	adds	r1, r0, #1
 800c860:	d1c6      	bne.n	800c7f0 <__sflush_r+0x34>
 800c862:	682b      	ldr	r3, [r5, #0]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d0c3      	beq.n	800c7f0 <__sflush_r+0x34>
 800c868:	2b1d      	cmp	r3, #29
 800c86a:	d001      	beq.n	800c870 <__sflush_r+0xb4>
 800c86c:	2b16      	cmp	r3, #22
 800c86e:	d101      	bne.n	800c874 <__sflush_r+0xb8>
 800c870:	602f      	str	r7, [r5, #0]
 800c872:	e7b0      	b.n	800c7d6 <__sflush_r+0x1a>
 800c874:	89a3      	ldrh	r3, [r4, #12]
 800c876:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c87a:	81a3      	strh	r3, [r4, #12]
 800c87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c880:	690f      	ldr	r7, [r1, #16]
 800c882:	2f00      	cmp	r7, #0
 800c884:	d0a7      	beq.n	800c7d6 <__sflush_r+0x1a>
 800c886:	0793      	lsls	r3, r2, #30
 800c888:	680e      	ldr	r6, [r1, #0]
 800c88a:	bf08      	it	eq
 800c88c:	694b      	ldreq	r3, [r1, #20]
 800c88e:	600f      	str	r7, [r1, #0]
 800c890:	bf18      	it	ne
 800c892:	2300      	movne	r3, #0
 800c894:	eba6 0807 	sub.w	r8, r6, r7
 800c898:	608b      	str	r3, [r1, #8]
 800c89a:	f1b8 0f00 	cmp.w	r8, #0
 800c89e:	dd9a      	ble.n	800c7d6 <__sflush_r+0x1a>
 800c8a0:	4643      	mov	r3, r8
 800c8a2:	463a      	mov	r2, r7
 800c8a4:	6a21      	ldr	r1, [r4, #32]
 800c8a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8a8:	4628      	mov	r0, r5
 800c8aa:	47b0      	blx	r6
 800c8ac:	2800      	cmp	r0, #0
 800c8ae:	dc07      	bgt.n	800c8c0 <__sflush_r+0x104>
 800c8b0:	89a3      	ldrh	r3, [r4, #12]
 800c8b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8b6:	81a3      	strh	r3, [r4, #12]
 800c8b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c8bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c0:	4407      	add	r7, r0
 800c8c2:	eba8 0800 	sub.w	r8, r8, r0
 800c8c6:	e7e8      	b.n	800c89a <__sflush_r+0xde>
 800c8c8:	20400001 	.word	0x20400001

0800c8cc <_fflush_r>:
 800c8cc:	b538      	push	{r3, r4, r5, lr}
 800c8ce:	690b      	ldr	r3, [r1, #16]
 800c8d0:	4605      	mov	r5, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	b1db      	cbz	r3, 800c90e <_fflush_r+0x42>
 800c8d6:	b118      	cbz	r0, 800c8e0 <_fflush_r+0x14>
 800c8d8:	6983      	ldr	r3, [r0, #24]
 800c8da:	b90b      	cbnz	r3, 800c8e0 <_fflush_r+0x14>
 800c8dc:	f7ff fae6 	bl	800beac <__sinit>
 800c8e0:	4b0c      	ldr	r3, [pc, #48]	; (800c914 <_fflush_r+0x48>)
 800c8e2:	429c      	cmp	r4, r3
 800c8e4:	d109      	bne.n	800c8fa <_fflush_r+0x2e>
 800c8e6:	686c      	ldr	r4, [r5, #4]
 800c8e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8ec:	b17b      	cbz	r3, 800c90e <_fflush_r+0x42>
 800c8ee:	4621      	mov	r1, r4
 800c8f0:	4628      	mov	r0, r5
 800c8f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8f6:	f7ff bf61 	b.w	800c7bc <__sflush_r>
 800c8fa:	4b07      	ldr	r3, [pc, #28]	; (800c918 <_fflush_r+0x4c>)
 800c8fc:	429c      	cmp	r4, r3
 800c8fe:	d101      	bne.n	800c904 <_fflush_r+0x38>
 800c900:	68ac      	ldr	r4, [r5, #8]
 800c902:	e7f1      	b.n	800c8e8 <_fflush_r+0x1c>
 800c904:	4b05      	ldr	r3, [pc, #20]	; (800c91c <_fflush_r+0x50>)
 800c906:	429c      	cmp	r4, r3
 800c908:	bf08      	it	eq
 800c90a:	68ec      	ldreq	r4, [r5, #12]
 800c90c:	e7ec      	b.n	800c8e8 <_fflush_r+0x1c>
 800c90e:	2000      	movs	r0, #0
 800c910:	bd38      	pop	{r3, r4, r5, pc}
 800c912:	bf00      	nop
 800c914:	0800e608 	.word	0x0800e608
 800c918:	0800e628 	.word	0x0800e628
 800c91c:	0800e5e8 	.word	0x0800e5e8

0800c920 <_lseek_r>:
 800c920:	b538      	push	{r3, r4, r5, lr}
 800c922:	4c07      	ldr	r4, [pc, #28]	; (800c940 <_lseek_r+0x20>)
 800c924:	4605      	mov	r5, r0
 800c926:	4608      	mov	r0, r1
 800c928:	4611      	mov	r1, r2
 800c92a:	2200      	movs	r2, #0
 800c92c:	6022      	str	r2, [r4, #0]
 800c92e:	461a      	mov	r2, r3
 800c930:	f7ff f80a 	bl	800b948 <_lseek>
 800c934:	1c43      	adds	r3, r0, #1
 800c936:	d102      	bne.n	800c93e <_lseek_r+0x1e>
 800c938:	6823      	ldr	r3, [r4, #0]
 800c93a:	b103      	cbz	r3, 800c93e <_lseek_r+0x1e>
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	bd38      	pop	{r3, r4, r5, pc}
 800c940:	20007708 	.word	0x20007708

0800c944 <__swhatbuf_r>:
 800c944:	b570      	push	{r4, r5, r6, lr}
 800c946:	460e      	mov	r6, r1
 800c948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c94c:	2900      	cmp	r1, #0
 800c94e:	b090      	sub	sp, #64	; 0x40
 800c950:	4614      	mov	r4, r2
 800c952:	461d      	mov	r5, r3
 800c954:	da07      	bge.n	800c966 <__swhatbuf_r+0x22>
 800c956:	2300      	movs	r3, #0
 800c958:	602b      	str	r3, [r5, #0]
 800c95a:	89b3      	ldrh	r3, [r6, #12]
 800c95c:	061a      	lsls	r2, r3, #24
 800c95e:	d410      	bmi.n	800c982 <__swhatbuf_r+0x3e>
 800c960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c964:	e00e      	b.n	800c984 <__swhatbuf_r+0x40>
 800c966:	aa01      	add	r2, sp, #4
 800c968:	f000 f862 	bl	800ca30 <_fstat_r>
 800c96c:	2800      	cmp	r0, #0
 800c96e:	dbf2      	blt.n	800c956 <__swhatbuf_r+0x12>
 800c970:	9a02      	ldr	r2, [sp, #8]
 800c972:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c976:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c97a:	425a      	negs	r2, r3
 800c97c:	415a      	adcs	r2, r3
 800c97e:	602a      	str	r2, [r5, #0]
 800c980:	e7ee      	b.n	800c960 <__swhatbuf_r+0x1c>
 800c982:	2340      	movs	r3, #64	; 0x40
 800c984:	2000      	movs	r0, #0
 800c986:	6023      	str	r3, [r4, #0]
 800c988:	b010      	add	sp, #64	; 0x40
 800c98a:	bd70      	pop	{r4, r5, r6, pc}

0800c98c <__smakebuf_r>:
 800c98c:	898b      	ldrh	r3, [r1, #12]
 800c98e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c990:	079d      	lsls	r5, r3, #30
 800c992:	4606      	mov	r6, r0
 800c994:	460c      	mov	r4, r1
 800c996:	d507      	bpl.n	800c9a8 <__smakebuf_r+0x1c>
 800c998:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	6123      	str	r3, [r4, #16]
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	6163      	str	r3, [r4, #20]
 800c9a4:	b002      	add	sp, #8
 800c9a6:	bd70      	pop	{r4, r5, r6, pc}
 800c9a8:	ab01      	add	r3, sp, #4
 800c9aa:	466a      	mov	r2, sp
 800c9ac:	f7ff ffca 	bl	800c944 <__swhatbuf_r>
 800c9b0:	9900      	ldr	r1, [sp, #0]
 800c9b2:	4605      	mov	r5, r0
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f7ff f979 	bl	800bcac <_malloc_r>
 800c9ba:	b948      	cbnz	r0, 800c9d0 <__smakebuf_r+0x44>
 800c9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9c0:	059a      	lsls	r2, r3, #22
 800c9c2:	d4ef      	bmi.n	800c9a4 <__smakebuf_r+0x18>
 800c9c4:	f023 0303 	bic.w	r3, r3, #3
 800c9c8:	f043 0302 	orr.w	r3, r3, #2
 800c9cc:	81a3      	strh	r3, [r4, #12]
 800c9ce:	e7e3      	b.n	800c998 <__smakebuf_r+0xc>
 800c9d0:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <__smakebuf_r+0x7c>)
 800c9d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9d4:	89a3      	ldrh	r3, [r4, #12]
 800c9d6:	6020      	str	r0, [r4, #0]
 800c9d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	9b00      	ldr	r3, [sp, #0]
 800c9e0:	6163      	str	r3, [r4, #20]
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	6120      	str	r0, [r4, #16]
 800c9e6:	b15b      	cbz	r3, 800ca00 <__smakebuf_r+0x74>
 800c9e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9ec:	4630      	mov	r0, r6
 800c9ee:	f000 f831 	bl	800ca54 <_isatty_r>
 800c9f2:	b128      	cbz	r0, 800ca00 <__smakebuf_r+0x74>
 800c9f4:	89a3      	ldrh	r3, [r4, #12]
 800c9f6:	f023 0303 	bic.w	r3, r3, #3
 800c9fa:	f043 0301 	orr.w	r3, r3, #1
 800c9fe:	81a3      	strh	r3, [r4, #12]
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	431d      	orrs	r5, r3
 800ca04:	81a5      	strh	r5, [r4, #12]
 800ca06:	e7cd      	b.n	800c9a4 <__smakebuf_r+0x18>
 800ca08:	0800be2d 	.word	0x0800be2d

0800ca0c <_read_r>:
 800ca0c:	b538      	push	{r3, r4, r5, lr}
 800ca0e:	4c07      	ldr	r4, [pc, #28]	; (800ca2c <_read_r+0x20>)
 800ca10:	4605      	mov	r5, r0
 800ca12:	4608      	mov	r0, r1
 800ca14:	4611      	mov	r1, r2
 800ca16:	2200      	movs	r2, #0
 800ca18:	6022      	str	r2, [r4, #0]
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	f7fe ff96 	bl	800b94c <_read>
 800ca20:	1c43      	adds	r3, r0, #1
 800ca22:	d102      	bne.n	800ca2a <_read_r+0x1e>
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	b103      	cbz	r3, 800ca2a <_read_r+0x1e>
 800ca28:	602b      	str	r3, [r5, #0]
 800ca2a:	bd38      	pop	{r3, r4, r5, pc}
 800ca2c:	20007708 	.word	0x20007708

0800ca30 <_fstat_r>:
 800ca30:	b538      	push	{r3, r4, r5, lr}
 800ca32:	4c07      	ldr	r4, [pc, #28]	; (800ca50 <_fstat_r+0x20>)
 800ca34:	2300      	movs	r3, #0
 800ca36:	4605      	mov	r5, r0
 800ca38:	4608      	mov	r0, r1
 800ca3a:	4611      	mov	r1, r2
 800ca3c:	6023      	str	r3, [r4, #0]
 800ca3e:	f7fe ff7c 	bl	800b93a <_fstat>
 800ca42:	1c43      	adds	r3, r0, #1
 800ca44:	d102      	bne.n	800ca4c <_fstat_r+0x1c>
 800ca46:	6823      	ldr	r3, [r4, #0]
 800ca48:	b103      	cbz	r3, 800ca4c <_fstat_r+0x1c>
 800ca4a:	602b      	str	r3, [r5, #0]
 800ca4c:	bd38      	pop	{r3, r4, r5, pc}
 800ca4e:	bf00      	nop
 800ca50:	20007708 	.word	0x20007708

0800ca54 <_isatty_r>:
 800ca54:	b538      	push	{r3, r4, r5, lr}
 800ca56:	4c06      	ldr	r4, [pc, #24]	; (800ca70 <_isatty_r+0x1c>)
 800ca58:	2300      	movs	r3, #0
 800ca5a:	4605      	mov	r5, r0
 800ca5c:	4608      	mov	r0, r1
 800ca5e:	6023      	str	r3, [r4, #0]
 800ca60:	f7fe ff70 	bl	800b944 <_isatty>
 800ca64:	1c43      	adds	r3, r0, #1
 800ca66:	d102      	bne.n	800ca6e <_isatty_r+0x1a>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	b103      	cbz	r3, 800ca6e <_isatty_r+0x1a>
 800ca6c:	602b      	str	r3, [r5, #0]
 800ca6e:	bd38      	pop	{r3, r4, r5, pc}
 800ca70:	20007708 	.word	0x20007708

0800ca74 <_init>:
 800ca74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca76:	bf00      	nop
 800ca78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca7a:	bc08      	pop	{r3}
 800ca7c:	469e      	mov	lr, r3
 800ca7e:	4770      	bx	lr

0800ca80 <_fini>:
 800ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca82:	bf00      	nop
 800ca84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ca86:	bc08      	pop	{r3}
 800ca88:	469e      	mov	lr, r3
 800ca8a:	4770      	bx	lr
