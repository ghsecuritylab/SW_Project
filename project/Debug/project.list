
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b00  0800c01c  0800c01c  0001c01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800db1c  0800db1c  0001db1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800db24  0800db24  0001db24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800db28  0800db28  0001db28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000078  20000000  0800db2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000acd8  20000078  0800dba4  00020078  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ad50  0800dba4  0002ad50  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 10 .debug_info   0005501d  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a0c4  00000000  00000000  000750c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0001b1f1  00000000  00000000  0007f189  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e28  00000000  00000000  0009a380  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002b58  00000000  00000000  0009c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001537d  00000000  00000000  0009ed00  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000b2a2  00000000  00000000  000b407d  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000bf31f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000615c  00000000  00000000  000bf39c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c004 	.word	0x0800c004

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800c004 	.word	0x0800c004

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b508      	push	{r3, lr}
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f82c 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005c8:	2000      	movs	r0, #0
 80005ca:	f00a fbfd 	bl	800adc8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80005ce:	f00a fb25 	bl	800ac1c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
}
 80005d2:	2000      	movs	r0, #0
 80005d4:	bd08      	pop	{r3, pc}
	...

080005d8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005d8:	4a03      	ldr	r2, [pc, #12]	; (80005e8 <HAL_IncTick+0x10>)
 80005da:	4b04      	ldr	r3, [pc, #16]	; (80005ec <HAL_IncTick+0x14>)
 80005dc:	6811      	ldr	r1, [r2, #0]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	440b      	add	r3, r1
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20003f98 	.word	0x20003f98
 80005ec:	20000000 	.word	0x20000000

080005f0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005f0:	4b01      	ldr	r3, [pc, #4]	; (80005f8 <HAL_GetTick+0x8>)
 80005f2:	6818      	ldr	r0, [r3, #0]
}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20003f98 	.word	0x20003f98

080005fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005fc:	b538      	push	{r3, r4, r5, lr}
 80005fe:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000600:	f7ff fff6 	bl	80005f0 <HAL_GetTick>
 8000604:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000606:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000608:	bf1e      	ittt	ne
 800060a:	4b04      	ldrne	r3, [pc, #16]	; (800061c <HAL_Delay+0x20>)
 800060c:	781b      	ldrbne	r3, [r3, #0]
 800060e:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000610:	f7ff ffee 	bl	80005f0 <HAL_GetTick>
 8000614:	1b40      	subs	r0, r0, r5
 8000616:	4284      	cmp	r4, r0
 8000618:	d8fa      	bhi.n	8000610 <HAL_Delay+0x14>
  {
  }
}
 800061a:	bd38      	pop	{r3, r4, r5, pc}
 800061c:	20000000 	.word	0x20000000

08000620 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000620:	4a07      	ldr	r2, [pc, #28]	; (8000640 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000622:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000626:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800062e:	041b      	lsls	r3, r3, #16
 8000630:	0c1b      	lsrs	r3, r3, #16
 8000632:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000636:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800063a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800063c:	60d3      	str	r3, [r2, #12]
 800063e:	4770      	bx	lr
 8000640:	e000ed00 	.word	0xe000ed00

08000644 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000646:	b530      	push	{r4, r5, lr}
 8000648:	68dc      	ldr	r4, [r3, #12]
 800064a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800064e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000652:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000654:	2b04      	cmp	r3, #4
 8000656:	bf28      	it	cs
 8000658:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800065a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800065c:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000660:	bf8c      	ite	hi
 8000662:	3c03      	subhi	r4, #3
 8000664:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000666:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) < 0)
 800066a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800066c:	f103 33ff 	add.w	r3, r3, #4294967295
 8000670:	ea01 0103 	and.w	r1, r1, r3
 8000674:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000678:	fa05 f404 	lsl.w	r4, r5, r4
 800067c:	f104 34ff 	add.w	r4, r4, #4294967295
 8000680:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000684:	ea42 0201 	orr.w	r2, r2, r1
 8000688:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) < 0)
 800068c:	da05      	bge.n	800069a <HAL_NVIC_SetPriority+0x56>
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068e:	f000 000f 	and.w	r0, r0, #15
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <HAL_NVIC_SetPriority+0x6c>)
 8000696:	541a      	strb	r2, [r3, r0]
 8000698:	bd30      	pop	{r4, r5, pc}
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800069a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800069e:	b2d2      	uxtb	r2, r2
 80006a0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006a4:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00
 80006b0:	e000ed14 	.word	0xe000ed14

080006b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80006b4:	0942      	lsrs	r2, r0, #5
 80006b6:	2301      	movs	r3, #1
 80006b8:	f000 001f 	and.w	r0, r0, #31
 80006bc:	fa03 f000 	lsl.w	r0, r3, r0
 80006c0:	4b01      	ldr	r3, [pc, #4]	; (80006c8 <HAL_NVIC_EnableIRQ+0x14>)
 80006c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80006c6:	4770      	bx	lr
 80006c8:	e000e100 	.word	0xe000e100

080006cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006cc:	3801      	subs	r0, #1
 80006ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006d2:	d20a      	bcs.n	80006ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	21f0      	movs	r1, #240	; 0xf0
 80006d8:	4a06      	ldr	r2, [pc, #24]	; (80006f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006da:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006dc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006de:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006ec:	4770      	bx	lr
 80006ee:	bf00      	nop
 80006f0:	e000e010 	.word	0xe000e010
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80006fa:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	bf0c      	ite	eq
 8000700:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000704:	f022 0204 	bicne.w	r2, r2, #4
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	4770      	bx	lr
 800070c:	e000e010 	.word	0xe000e010

08000710 <ETH_FlushTransmitFIFO>:
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
  __IO uint32_t tmpreg = 0;
 8000710:	2300      	movs	r3, #0
{
 8000712:	b537      	push	{r0, r1, r2, r4, r5, lr}
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000714:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8000718:	9301      	str	r3, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800071a:	6803      	ldr	r3, [r0, #0]
{
 800071c:	4605      	mov	r5, r0
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800071e:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8000720:	591a      	ldr	r2, [r3, r4]
 8000722:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000726:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8000728:	591b      	ldr	r3, [r3, r4]
 800072a:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800072c:	f7ff ff66 	bl	80005fc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8000730:	682b      	ldr	r3, [r5, #0]
 8000732:	9a01      	ldr	r2, [sp, #4]
 8000734:	511a      	str	r2, [r3, r4]
}
 8000736:	b003      	add	sp, #12
 8000738:	bd30      	pop	{r4, r5, pc}
	...

0800073c <ETH_MACDMAConfig>:
{
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8000740:	b129      	cbz	r1, 800074e <ETH_MACDMAConfig+0x12>
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8000742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000746:	60c3      	str	r3, [r0, #12]
    (heth->Init).Speed = ETH_SPEED_100M;
 8000748:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800074c:	6083      	str	r3, [r0, #8]
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800074e:	69e3      	ldr	r3, [r4, #28]
  tmpreg = (heth->Instance)->MACCR;
 8000750:	6822      	ldr	r2, [r4, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000752:	2b00      	cmp	r3, #0
                       macinit.LoopbackMode |
 8000754:	68e0      	ldr	r0, [r4, #12]
 8000756:	68a3      	ldr	r3, [r4, #8]
  tmpreg = (heth->Instance)->MACCR;
 8000758:	6815      	ldr	r5, [r2, #0]
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800075a:	bf08      	it	eq
 800075c:	f44f 6180 	moveq.w	r1, #1024	; 0x400
                       macinit.LoopbackMode |
 8000760:	ea43 0300 	orr.w	r3, r3, r0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8000764:	482e      	ldr	r0, [pc, #184]	; (8000820 <ETH_MACDMAConfig+0xe4>)
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8000766:	bf18      	it	ne
 8000768:	2100      	movne	r1, #0
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800076a:	4028      	ands	r0, r5
 800076c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000770:	4303      	orrs	r3, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000772:	2001      	movs	r0, #1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8000774:	430b      	orrs	r3, r1
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8000776:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000778:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800077a:	f7ff ff3f 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 800077e:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000780:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000782:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8000784:	601d      	str	r5, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8000786:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8000788:	685d      	ldr	r5, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800078a:	f7ff ff37 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 800078e:	6823      	ldr	r3, [r4, #0]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8000790:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8000792:	605d      	str	r5, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8000794:	2500      	movs	r5, #0
 8000796:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8000798:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 800079a:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800079c:	f022 02be 	bic.w	r2, r2, #190	; 0xbe
 80007a0:	0412      	lsls	r2, r2, #16
 80007a2:	0c12      	lsrs	r2, r2, #16
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 80007a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80007a8:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 80007aa:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ac:	f7ff ff26 	bl	80005fc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 80007b0:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007b2:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 80007b4:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80007b6:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 80007b8:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ba:	f7ff ff1f 	bl	80005fc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80007be:	6822      	ldr	r2, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007c0:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007c2:	4b18      	ldr	r3, [pc, #96]	; (8000824 <ETH_MACDMAConfig+0xe8>)
    (heth->Instance)->MACVLANTR = tmpreg;
 80007c4:	61d5      	str	r5, [r2, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 80007c6:	f241 0518 	movw	r5, #4120	; 0x1018
 80007ca:	5951      	ldr	r1, [r2, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80007cc:	400b      	ands	r3, r1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80007ce:	f043 7308 	orr.w	r3, r3, #35651584	; 0x2200000
 80007d2:	f043 0304 	orr.w	r3, r3, #4
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 80007d6:	5153      	str	r3, [r2, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 80007d8:	5956      	ldr	r6, [r2, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80007da:	f7ff ff0f 	bl	80005fc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 80007de:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007e0:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007e2:	4a11      	ldr	r2, [pc, #68]	; (8000828 <ETH_MACDMAConfig+0xec>)
    (heth->Instance)->DMAOMR = tmpreg;
 80007e4:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80007e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80007ea:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 80007ec:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80007ee:	f7ff ff05 	bl	80005fc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80007f2:	6822      	ldr	r2, [r4, #0]
 80007f4:	f502 5380 	add.w	r3, r2, #4096	; 0x1000
 80007f8:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80007fa:	69a3      	ldr	r3, [r4, #24]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d107      	bne.n	8000810 <ETH_MACDMAConfig+0xd4>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8000800:	f241 011c 	movw	r1, #4124	; 0x101c
 8000804:	5853      	ldr	r3, [r2, r1]
 8000806:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800080a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800080e:	5053      	str	r3, [r2, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8000810:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000812:	4a06      	ldr	r2, [pc, #24]	; (800082c <ETH_MACDMAConfig+0xf0>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8000814:	8899      	ldrh	r1, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8000816:	6011      	str	r1, [r2, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8000818:	681a      	ldr	r2, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <ETH_MACDMAConfig+0xf4>)
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	bd70      	pop	{r4, r5, r6, pc}
 8000820:	ff20810f 	.word	0xff20810f
 8000824:	f8de3f23 	.word	0xf8de3f23
 8000828:	02c12080 	.word	0x02c12080
 800082c:	40028040 	.word	0x40028040
 8000830:	40028044 	.word	0x40028044

08000834 <HAL_ETH_DMATxDescListInit>:
{
 8000834:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000836:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 800083a:	2c01      	cmp	r4, #1
 800083c:	f04f 0402 	mov.w	r4, #2
 8000840:	d033      	beq.n	80008aa <HAL_ETH_DMATxDescListInit+0x76>
 8000842:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000844:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000848:	f44f 1780 	mov.w	r7, #1048576	; 0x100000
 800084c:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 8000850:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000854:	f240 5ef4 	movw	lr, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8000858:	2500      	movs	r5, #0
    if(i < (TxBuffCount-1))
 800085a:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->TxDesc = DMATxDescTab;
 800085e:	62c1      	str	r1, [r0, #44]	; 0x2c
  for(i=0; i < TxBuffCount; i++)
 8000860:	429d      	cmp	r5, r3
 8000862:	d10b      	bne.n	800087c <HAL_ETH_DMATxDescListInit+0x48>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000864:	6802      	ldr	r2, [r0, #0]
 8000866:	f241 0310 	movw	r3, #4112	; 0x1010
 800086a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800086c:	2301      	movs	r3, #1
 800086e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000872:	2300      	movs	r3, #0
 8000874:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 8000878:	4618      	mov	r0, r3
 800087a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800087c:	fb0e 2605 	mla	r6, lr, r5, r2
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000880:	f844 7c20 	str.w	r7, [r4, #-32]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000884:	f844 6c18 	str.w	r6, [r4, #-24]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000888:	69c6      	ldr	r6, [r0, #28]
 800088a:	b92e      	cbnz	r6, 8000898 <HAL_ETH_DMATxDescListInit+0x64>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800088c:	f854 6c20 	ldr.w	r6, [r4, #-32]
 8000890:	f446 0640 	orr.w	r6, r6, #12582912	; 0xc00000
 8000894:	f844 6c20 	str.w	r6, [r4, #-32]
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8000898:	4565      	cmp	r5, ip
 800089a:	bf2c      	ite	cs
 800089c:	460e      	movcs	r6, r1
 800089e:	4626      	movcc	r6, r4
  for(i=0; i < TxBuffCount; i++)
 80008a0:	3501      	adds	r5, #1
 80008a2:	3420      	adds	r4, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 80008a4:	f844 6c34 	str.w	r6, [r4, #-52]
 80008a8:	e7da      	b.n	8000860 <HAL_ETH_DMATxDescListInit+0x2c>
  __HAL_LOCK(heth);
 80008aa:	4620      	mov	r0, r4
}
 80008ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080008ae <HAL_ETH_DMARxDescListInit>:
{
 80008ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(heth);
 80008b2:	f890 4045 	ldrb.w	r4, [r0, #69]	; 0x45
 80008b6:	2c01      	cmp	r4, #1
 80008b8:	f04f 0402 	mov.w	r4, #2
 80008bc:	d030      	beq.n	8000920 <HAL_ETH_DMARxDescListInit+0x72>
 80008be:	2501      	movs	r5, #1
  heth->State = HAL_ETH_STATE_BUSY;
 80008c0:	f880 4044 	strb.w	r4, [r0, #68]	; 0x44
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80008c4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80008c8:	f101 0420 	add.w	r4, r1, #32
  __HAL_LOCK(heth);
 80008cc:	f880 5045 	strb.w	r5, [r0, #69]	; 0x45
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80008d0:	f244 57f4 	movw	r7, #17908	; 0x45f4
  for(i=0; i < RxBuffCount; i++)
 80008d4:	2500      	movs	r5, #0
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008d6:	f240 5ef4 	movw	lr, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 80008da:	f103 3cff 	add.w	ip, r3, #4294967295
  heth->RxDesc = DMARxDescTab; 
 80008de:	6281      	str	r1, [r0, #40]	; 0x28
  for(i=0; i < RxBuffCount; i++)
 80008e0:	429d      	cmp	r5, r3
 80008e2:	d10c      	bne.n	80008fe <HAL_ETH_DMARxDescListInit+0x50>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80008e4:	6802      	ldr	r2, [r0, #0]
 80008e6:	f241 030c 	movw	r3, #4108	; 0x100c
 80008ea:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 80008ec:	2301      	movs	r3, #1
 80008ee:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80008f2:	2300      	movs	r3, #0
 80008f4:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  return HAL_OK;
 80008f8:	4618      	mov	r0, r3
 80008fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80008fe:	fb0e 2805 	mla	r8, lr, r5, r2
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000902:	f844 6c20 	str.w	r6, [r4, #-32]
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000906:	f844 8c18 	str.w	r8, [r4, #-24]
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 800090a:	4565      	cmp	r5, ip
 800090c:	bf2c      	ite	cs
 800090e:	4688      	movcs	r8, r1
 8000910:	46a0      	movcc	r8, r4
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000912:	f844 7c1c 	str.w	r7, [r4, #-28]
  for(i=0; i < RxBuffCount; i++)
 8000916:	3501      	adds	r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8000918:	f844 8c14 	str.w	r8, [r4, #-20]
 800091c:	3420      	adds	r4, #32
 800091e:	e7df      	b.n	80008e0 <HAL_ETH_DMARxDescListInit+0x32>
  __HAL_LOCK(heth);
 8000920:	4620      	mov	r0, r4
}
 8000922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08000928 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8000928:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800092c:	2b01      	cmp	r3, #1
 800092e:	f04f 0302 	mov.w	r3, #2
{
 8000932:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 8000934:	d066      	beq.n	8000a04 <HAL_ETH_TransmitFrame+0xdc>
 8000936:	2201      	movs	r2, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8000938:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800093c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  if (FrameLength == 0) 
 8000940:	b929      	cbnz	r1, 800094e <HAL_ETH_TransmitFrame+0x26>
    heth->State = HAL_ETH_STATE_READY;
 8000942:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000946:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
    return HAL_ERROR;
 800094a:	4610      	mov	r0, r2
 800094c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800094e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8000950:	681c      	ldr	r4, [r3, #0]
 8000952:	2c00      	cmp	r4, #0
 8000954:	da06      	bge.n	8000964 <HAL_ETH_TransmitFrame+0x3c>
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000956:	2312      	movs	r3, #18
 8000958:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800095c:	2300      	movs	r3, #0
 800095e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
 8000962:	e7f2      	b.n	800094a <HAL_ETH_TransmitFrame+0x22>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000964:	f240 54f4 	movw	r4, #1524	; 0x5f4
 8000968:	42a1      	cmp	r1, r4
 800096a:	d92c      	bls.n	80009c6 <HAL_ETH_TransmitFrame+0x9e>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800096c:	fbb1 f2f4 	udiv	r2, r1, r4
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000970:	fb04 1412 	mls	r4, r4, r2, r1
 8000974:	b32c      	cbz	r4, 80009c2 <HAL_ETH_TransmitFrame+0x9a>
      bufcount++;
 8000976:	3201      	adds	r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000978:	4c23      	ldr	r4, [pc, #140]	; (8000a08 <HAL_ETH_TransmitFrame+0xe0>)
 800097a:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800097e:	f240 56f4 	movw	r6, #1524	; 0x5f4
      if (i == (bufcount-1))
 8000982:	1e57      	subs	r7, r2, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8000984:	fb04 1102 	mla	r1, r4, r2, r1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000988:	2400      	movs	r4, #0
 800098a:	f3c1 010c 	ubfx	r1, r1, #0, #13
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800098e:	681d      	ldr	r5, [r3, #0]
 8000990:	f025 5540 	bic.w	r5, r5, #805306368	; 0x30000000
 8000994:	601d      	str	r5, [r3, #0]
      if (i == 0) 
 8000996:	b91c      	cbnz	r4, 80009a0 <HAL_ETH_TransmitFrame+0x78>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000998:	681d      	ldr	r5, [r3, #0]
 800099a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 800099e:	601d      	str	r5, [r3, #0]
      if (i == (bufcount-1))
 80009a0:	42a7      	cmp	r7, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80009a2:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 80009a4:	d104      	bne.n	80009b0 <HAL_ETH_TransmitFrame+0x88>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009a6:	681d      	ldr	r5, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80009a8:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80009aa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80009ae:	601d      	str	r5, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009b0:	681d      	ldr	r5, [r3, #0]
    for (i=0; i< bufcount; i++)
 80009b2:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009b4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 80009b8:	4294      	cmp	r4, r2
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009ba:	601d      	str	r5, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009bc:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 80009be:	d1e6      	bne.n	800098e <HAL_ETH_TransmitFrame+0x66>
 80009c0:	e00d      	b.n	80009de <HAL_ETH_TransmitFrame+0xb6>
  if (bufcount == 1)
 80009c2:	2a01      	cmp	r2, #1
 80009c4:	d1d8      	bne.n	8000978 <HAL_ETH_TransmitFrame+0x50>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009c6:	681a      	ldr	r2, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009c8:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009cc:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80009d0:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80009d2:	601a      	str	r2, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009da:	601a      	str	r2, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80009dc:	68db      	ldr	r3, [r3, #12]
 80009de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80009e0:	f241 0214 	movw	r2, #4116	; 0x1014
 80009e4:	6803      	ldr	r3, [r0, #0]
 80009e6:	5899      	ldr	r1, [r3, r2]
 80009e8:	0749      	lsls	r1, r1, #29
 80009ea:	d505      	bpl.n	80009f8 <HAL_ETH_TransmitFrame+0xd0>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80009ec:	2104      	movs	r1, #4
 80009ee:	5099      	str	r1, [r3, r2]
    (heth->Instance)->DMATPDR = 0;
 80009f0:	2100      	movs	r1, #0
 80009f2:	f241 0204 	movw	r2, #4100	; 0x1004
 80009f6:	5099      	str	r1, [r3, r2]
  heth->State = HAL_ETH_STATE_READY;
 80009f8:	2301      	movs	r3, #1
 80009fa:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80009fe:	2300      	movs	r3, #0
 8000a00:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
  __HAL_LOCK(heth);
 8000a04:	4618      	mov	r0, r3
}
 8000a06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a08:	fffffa0c 	.word	0xfffffa0c

08000a0c <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8000a0c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	f04f 0302 	mov.w	r3, #2
{
 8000a16:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(heth);
 8000a18:	d03b      	beq.n	8000a92 <HAL_ETH_GetReceivedFrame_IT+0x86>
 8000a1a:	2201      	movs	r2, #1
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a1c:	2405      	movs	r4, #5
  heth->State = HAL_ETH_STATE_BUSY;
 8000a1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      heth->RxFrameInfos.SegCount = 1;   
 8000a22:	4611      	mov	r1, r2
  __HAL_LOCK(heth);
 8000a24:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000a28:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	2a00      	cmp	r2, #0
 8000a2e:	db01      	blt.n	8000a34 <HAL_ETH_GetReceivedFrame_IT+0x28>
 8000a30:	3c01      	subs	r4, #1
 8000a32:	d106      	bne.n	8000a42 <HAL_ETH_GetReceivedFrame_IT+0x36>
  heth->State = HAL_ETH_STATE_READY;
 8000a34:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 8000a36:	2200      	movs	r2, #0
  heth->State = HAL_ETH_STATE_READY;
 8000a38:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000a3c:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
  return HAL_ERROR;
 8000a40:	e027      	b.n	8000a92 <HAL_ETH_GetReceivedFrame_IT+0x86>
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000a42:	681a      	ldr	r2, [r3, #0]
 8000a44:	68dd      	ldr	r5, [r3, #12]
 8000a46:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000a4a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8000a4e:	d103      	bne.n	8000a58 <HAL_ETH_GetReceivedFrame_IT+0x4c>
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a50:	6303      	str	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 8000a52:	6381      	str	r1, [r0, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000a54:	6285      	str	r5, [r0, #40]	; 0x28
 8000a56:	e7e7      	b.n	8000a28 <HAL_ETH_GetReceivedFrame_IT+0x1c>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000a58:	681a      	ldr	r2, [r3, #0]
 8000a5a:	f412 7f40 	tst.w	r2, #768	; 0x300
 8000a5e:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8000a60:	d102      	bne.n	8000a68 <HAL_ETH_GetReceivedFrame_IT+0x5c>
      (heth->RxFrameInfos.SegCount)++;
 8000a62:	3201      	adds	r2, #1
 8000a64:	6382      	str	r2, [r0, #56]	; 0x38
 8000a66:	e7f5      	b.n	8000a54 <HAL_ETH_GetReceivedFrame_IT+0x48>
      (heth->RxFrameInfos.SegCount)++;
 8000a68:	3201      	adds	r2, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000a6a:	6343      	str	r3, [r0, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8000a6c:	2a01      	cmp	r2, #1
      (heth->RxFrameInfos.SegCount)++;
 8000a6e:	6382      	str	r2, [r0, #56]	; 0x38
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000a70:	bf08      	it	eq
 8000a72:	6303      	streq	r3, [r0, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f3c3 430d 	ubfx	r3, r3, #16, #14
 8000a7a:	3b04      	subs	r3, #4
 8000a7c:	63c3      	str	r3, [r0, #60]	; 0x3c
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a7e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8000a80:	689b      	ldr	r3, [r3, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000a82:	6285      	str	r5, [r0, #40]	; 0x28
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000a84:	6403      	str	r3, [r0, #64]	; 0x40
      heth->State = HAL_ETH_STATE_READY;
 8000a86:	2301      	movs	r3, #1
 8000a88:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f880 3045 	strb.w	r3, [r0, #69]	; 0x45
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd30      	pop	{r4, r5, pc}

08000a96 <HAL_ETH_TxCpltCallback>:
 8000a96:	4770      	bx	lr

08000a98 <HAL_ETH_ErrorCallback>:
{
 8000a98:	4770      	bx	lr

08000a9a <HAL_ETH_IRQHandler>:
{
 8000a9a:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000a9c:	6802      	ldr	r2, [r0, #0]
 8000a9e:	f241 0614 	movw	r6, #4116	; 0x1014
{
 8000aa2:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8000aa4:	5995      	ldr	r5, [r2, r6]
 8000aa6:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8000aaa:	d021      	beq.n	8000af0 <HAL_ETH_IRQHandler+0x56>
    HAL_ETH_RxCpltCallback(heth);
 8000aac:	f009 fe5e 	bl	800a76c <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8000ab0:	6823      	ldr	r3, [r4, #0]
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000abc:	2300      	movs	r3, #0
 8000abe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8000ac2:	6823      	ldr	r3, [r4, #0]
 8000ac4:	f241 0514 	movw	r5, #4116	; 0x1014
 8000ac8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000acc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8000ace:	595b      	ldr	r3, [r3, r5]
 8000ad0:	041b      	lsls	r3, r3, #16
 8000ad2:	d50c      	bpl.n	8000aee <HAL_ETH_IRQHandler+0x54>
    HAL_ETH_ErrorCallback(heth);
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	f7ff ffdf 	bl	8000a98 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8000ada:	6823      	ldr	r3, [r4, #0]
 8000adc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ae0:	515a      	str	r2, [r3, r5]
    heth->State = HAL_ETH_STATE_READY;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000ae8:	2300      	movs	r3, #0
 8000aea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000aee:	bd70      	pop	{r4, r5, r6, pc}
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8000af0:	5993      	ldr	r3, [r2, r6]
 8000af2:	07da      	lsls	r2, r3, #31
 8000af4:	d5e5      	bpl.n	8000ac2 <HAL_ETH_IRQHandler+0x28>
    HAL_ETH_TxCpltCallback(heth);
 8000af6:	f7ff ffce 	bl	8000a96 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8000afa:	2301      	movs	r3, #1
 8000afc:	6822      	ldr	r2, [r4, #0]
 8000afe:	5193      	str	r3, [r2, r6]
    heth->State = HAL_ETH_STATE_READY;
 8000b00:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8000b04:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8000b08:	e7db      	b.n	8000ac2 <HAL_ETH_IRQHandler+0x28>

08000b0a <HAL_ETH_ReadPHYRegister>:
{
 8000b0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b0c:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
{
 8000b10:	4605      	mov	r5, r0
 8000b12:	4616      	mov	r6, r2
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8000b14:	2b82      	cmp	r3, #130	; 0x82
 8000b16:	d030      	beq.n	8000b7a <HAL_ETH_ReadPHYRegister+0x70>
  tmpreg = heth->Instance->MACMIIAR;
 8000b18:	6802      	ldr	r2, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b1a:	2382      	movs	r3, #130	; 0x82
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b1c:	0189      	lsls	r1, r1, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8000b1e:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 8000b22:	6913      	ldr	r3, [r2, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8000b24:	f401 64f8 	and.w	r4, r1, #1984	; 0x7c0
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000b28:	f003 011c 	and.w	r1, r3, #28
 8000b2c:	4321      	orrs	r1, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8000b2e:	8a04      	ldrh	r4, [r0, #16]
 8000b30:	02e4      	lsls	r4, r4, #11
 8000b32:	b2a4      	uxth	r4, r4
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8000b34:	430c      	orrs	r4, r1
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8000b36:	f044 0401 	orr.w	r4, r4, #1
  heth->Instance->MACMIIAR = tmpreg;
 8000b3a:	6114      	str	r4, [r2, #16]
  tickstart = HAL_GetTick();
 8000b3c:	f7ff fd58 	bl	80005f0 <HAL_GetTick>
 8000b40:	4607      	mov	r7, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000b42:	f014 0001 	ands.w	r0, r4, #1
 8000b46:	d107      	bne.n	8000b58 <HAL_ETH_ReadPHYRegister+0x4e>
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	695b      	ldr	r3, [r3, #20]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	6033      	str	r3, [r6, #0]
  heth->State = HAL_ETH_STATE_READY;
 8000b50:	2301      	movs	r3, #1
 8000b52:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8000b58:	f7ff fd4a 	bl	80005f0 <HAL_GetTick>
 8000b5c:	1bc0      	subs	r0, r0, r7
 8000b5e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000b62:	d307      	bcc.n	8000b74 <HAL_ETH_ReadPHYRegister+0x6a>
      heth->State= HAL_ETH_STATE_READY;
 8000b64:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000b66:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000b68:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
      return HAL_TIMEOUT;
 8000b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000b74:	682b      	ldr	r3, [r5, #0]
 8000b76:	691c      	ldr	r4, [r3, #16]
 8000b78:	e7e3      	b.n	8000b42 <HAL_ETH_ReadPHYRegister+0x38>
    return HAL_BUSY;
 8000b7a:	2002      	movs	r0, #2
}
 8000b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b7e <HAL_ETH_WritePHYRegister>:
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b7e:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000b82:	2b42      	cmp	r3, #66	; 0x42
{
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4605      	mov	r5, r0
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8000b88:	d02e      	beq.n	8000be8 <HAL_ETH_WritePHYRegister+0x6a>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b8a:	2342      	movs	r3, #66	; 0x42
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b8c:	018c      	lsls	r4, r1, #6
 8000b8e:	b292      	uxth	r2, r2
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8000b90:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8000b94:	f404 64f8 	and.w	r4, r4, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 8000b98:	6803      	ldr	r3, [r0, #0]
 8000b9a:	f044 0403 	orr.w	r4, r4, #3
 8000b9e:	6918      	ldr	r0, [r3, #16]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 8000ba0:	f000 001c 	and.w	r0, r0, #28
 8000ba4:	4320      	orrs	r0, r4
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000ba6:	8a2c      	ldrh	r4, [r5, #16]
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8000ba8:	615a      	str	r2, [r3, #20]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8000baa:	02e4      	lsls	r4, r4, #11
 8000bac:	b2a4      	uxth	r4, r4
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 8000bae:	4304      	orrs	r4, r0
  heth->Instance->MACMIIAR = tmpreg;
 8000bb0:	611c      	str	r4, [r3, #16]
  tickstart = HAL_GetTick();
 8000bb2:	f7ff fd1d 	bl	80005f0 <HAL_GetTick>
 8000bb6:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8000bb8:	f014 0001 	ands.w	r0, r4, #1
 8000bbc:	d103      	bne.n	8000bc6 <HAL_ETH_WritePHYRegister+0x48>
  heth->State = HAL_ETH_STATE_READY;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
 8000bc4:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8000bc6:	f7ff fd13 	bl	80005f0 <HAL_GetTick>
 8000bca:	1b80      	subs	r0, r0, r6
 8000bcc:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8000bd0:	d307      	bcc.n	8000be2 <HAL_ETH_WritePHYRegister+0x64>
      heth->State= HAL_ETH_STATE_READY;
 8000bd2:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8000bd4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8000bd6:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000bda:	2300      	movs	r3, #0
 8000bdc:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
 8000be0:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg = heth->Instance->MACMIIAR;
 8000be2:	682b      	ldr	r3, [r5, #0]
 8000be4:	691c      	ldr	r4, [r3, #16]
 8000be6:	e7e7      	b.n	8000bb8 <HAL_ETH_WritePHYRegister+0x3a>
    return HAL_BUSY;
 8000be8:	2002      	movs	r0, #2
}
 8000bea:	bd70      	pop	{r4, r5, r6, pc}

08000bec <HAL_ETH_Init>:
  uint32_t tempreg = 0, phyreg = 0;
 8000bec:	2300      	movs	r3, #0
{
 8000bee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if(heth == NULL)
 8000bf0:	4604      	mov	r4, r0
  uint32_t tempreg = 0, phyreg = 0;
 8000bf2:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 8000bf4:	2800      	cmp	r0, #0
 8000bf6:	f000 80dc 	beq.w	8000db2 <HAL_ETH_Init+0x1c6>
  if(heth->State == HAL_ETH_STATE_RESET)
 8000bfa:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 8000bfe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c02:	b91b      	cbnz	r3, 8000c0c <HAL_ETH_Init+0x20>
    heth->Lock = HAL_UNLOCKED;
 8000c04:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 8000c08:	f009 fd4a 	bl	800a6a0 <HAL_ETH_MspInit>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0c:	4b6a      	ldr	r3, [pc, #424]	; (8000db8 <HAL_ETH_Init+0x1cc>)
 8000c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c14:	645a      	str	r2, [r3, #68]	; 0x44
 8000c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000c20:	4b66      	ldr	r3, [pc, #408]	; (8000dbc <HAL_ETH_Init+0x1d0>)
 8000c22:	685a      	ldr	r2, [r3, #4]
 8000c24:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8000c28:	605a      	str	r2, [r3, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	6a21      	ldr	r1, [r4, #32]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	605a      	str	r2, [r3, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000c32:	6823      	ldr	r3, [r4, #0]
 8000c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	f042 0201 	orr.w	r2, r2, #1
 8000c3e:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8000c40:	f7ff fcd6 	bl	80005f0 <HAL_GetTick>
 8000c44:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000c46:	6823      	ldr	r3, [r4, #0]
 8000c48:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8000c4c:	6812      	ldr	r2, [r2, #0]
 8000c4e:	07d0      	lsls	r0, r2, #31
 8000c50:	d41d      	bmi.n	8000c8e <HAL_ETH_Init+0xa2>
  tempreg = (heth->Instance)->MACMIIAR;
 8000c52:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 8000c54:	f000 fcdc 	bl	8001610 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c58:	4b59      	ldr	r3, [pc, #356]	; (8000dc0 <HAL_ETH_Init+0x1d4>)
 8000c5a:	4a5a      	ldr	r2, [pc, #360]	; (8000dc4 <HAL_ETH_Init+0x1d8>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8000c5c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 8000c60:	4403      	add	r3, r0
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d822      	bhi.n	8000cac <HAL_ETH_Init+0xc0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000c66:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c6a:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000c70:	2100      	movs	r1, #0
 8000c72:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8000c74:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000c76:	f7ff ff82 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000c7a:	4605      	mov	r5, r0
 8000c7c:	b368      	cbz	r0, 8000cda <HAL_ETH_Init+0xee>
      heth->State = HAL_ETH_STATE_READY;
 8000c7e:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 8000c80:	2101      	movs	r1, #1
 8000c82:	4620      	mov	r0, r4
 8000c84:	f7ff fd5a 	bl	800073c <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 8000c88:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      return HAL_ERROR;
 8000c8c:	e00b      	b.n	8000ca6 <HAL_ETH_Init+0xba>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000c8e:	f7ff fcaf 	bl	80005f0 <HAL_GetTick>
 8000c92:	1b40      	subs	r0, r0, r5
 8000c94:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
 8000c98:	d9d5      	bls.n	8000c46 <HAL_ETH_Init+0x5a>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c9a:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 8000c9c:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000c9e:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8000ca2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8000ca6:	4628      	mov	r0, r5
 8000ca8:	b003      	add	sp, #12
 8000caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8000cac:	4b46      	ldr	r3, [pc, #280]	; (8000dc8 <HAL_ETH_Init+0x1dc>)
 8000cae:	4a47      	ldr	r2, [pc, #284]	; (8000dcc <HAL_ETH_Init+0x1e0>)
 8000cb0:	4403      	add	r3, r0
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d802      	bhi.n	8000cbc <HAL_ETH_Init+0xd0>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000cb6:	f045 050c 	orr.w	r5, r5, #12
 8000cba:	e7d6      	b.n	8000c6a <HAL_ETH_Init+0x7e>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8000cbc:	4b44      	ldr	r3, [pc, #272]	; (8000dd0 <HAL_ETH_Init+0x1e4>)
 8000cbe:	4a45      	ldr	r2, [pc, #276]	; (8000dd4 <HAL_ETH_Init+0x1e8>)
 8000cc0:	4403      	add	r3, r0
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d9d1      	bls.n	8000c6a <HAL_ETH_Init+0x7e>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8000cc6:	4b44      	ldr	r3, [pc, #272]	; (8000dd8 <HAL_ETH_Init+0x1ec>)
 8000cc8:	4a44      	ldr	r2, [pc, #272]	; (8000ddc <HAL_ETH_Init+0x1f0>)
 8000cca:	4403      	add	r3, r0
 8000ccc:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000cce:	bf94      	ite	ls
 8000cd0:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000cd4:	f045 0510 	orrhi.w	r5, r5, #16
 8000cd8:	e7c7      	b.n	8000c6a <HAL_ETH_Init+0x7e>
  HAL_Delay(PHY_RESET_DELAY);
 8000cda:	20ff      	movs	r0, #255	; 0xff
 8000cdc:	f7ff fc8e 	bl	80005fc <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ce0:	6863      	ldr	r3, [r4, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d053      	beq.n	8000d8e <HAL_ETH_Init+0x1a2>
    tickstart = HAL_GetTick();
 8000ce6:	f7ff fc83 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cea:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cee:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000cf0:	466a      	mov	r2, sp
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f7ff ff08 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000cfa:	f7ff fc79 	bl	80005f0 <HAL_GetTick>
 8000cfe:	1b80      	subs	r0, r0, r6
 8000d00:	42b8      	cmp	r0, r7
 8000d02:	d90b      	bls.n	8000d1c <HAL_ETH_Init+0x130>
        ETH_MACDMAConfig(heth, err);
 8000d04:	2101      	movs	r1, #1
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff fd18 	bl	800073c <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8000d0c:	2301      	movs	r3, #1
        return HAL_TIMEOUT;
 8000d0e:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 8000d10:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8000d14:	2300      	movs	r3, #0
 8000d16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8000d1a:	e7c4      	b.n	8000ca6 <HAL_ETH_Init+0xba>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000d1c:	9b00      	ldr	r3, [sp, #0]
 8000d1e:	0759      	lsls	r1, r3, #29
 8000d20:	d5e6      	bpl.n	8000cf0 <HAL_ETH_Init+0x104>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000d22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d26:	2100      	movs	r1, #0
 8000d28:	4620      	mov	r0, r4
 8000d2a:	f7ff ff28 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000d2e:	2800      	cmp	r0, #0
 8000d30:	d1a5      	bne.n	8000c7e <HAL_ETH_Init+0x92>
    tickstart = HAL_GetTick();
 8000d32:	f7ff fc5d 	bl	80005f0 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d36:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d3a:	4606      	mov	r6, r0
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000d3c:	466a      	mov	r2, sp
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4620      	mov	r0, r4
 8000d42:	f7ff fee2 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000d46:	f7ff fc53 	bl	80005f0 <HAL_GetTick>
 8000d4a:	1b80      	subs	r0, r0, r6
 8000d4c:	42b8      	cmp	r0, r7
 8000d4e:	d8d9      	bhi.n	8000d04 <HAL_ETH_Init+0x118>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000d50:	9b00      	ldr	r3, [sp, #0]
 8000d52:	069a      	lsls	r2, r3, #26
 8000d54:	d5f2      	bpl.n	8000d3c <HAL_ETH_Init+0x150>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000d56:	466a      	mov	r2, sp
 8000d58:	2110      	movs	r1, #16
 8000d5a:	4620      	mov	r0, r4
 8000d5c:	f7ff fed5 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
 8000d60:	2800      	cmp	r0, #0
 8000d62:	d18c      	bne.n	8000c7e <HAL_ETH_Init+0x92>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000d64:	9b00      	ldr	r3, [sp, #0]
 8000d66:	f013 0204 	ands.w	r2, r3, #4
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000d6a:	bf18      	it	ne
 8000d6c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000d70:	079b      	lsls	r3, r3, #30
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000d72:	bf4c      	ite	mi
 8000d74:	2300      	movmi	r3, #0
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d76:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000d7a:	60e2      	str	r2, [r4, #12]
      (heth->Init).Speed = ETH_SPEED_100M;
 8000d7c:	60a3      	str	r3, [r4, #8]
  ETH_MACDMAConfig(heth, err);
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4620      	mov	r0, r4
 8000d82:	f7ff fcdb 	bl	800073c <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8000d86:	2301      	movs	r3, #1
 8000d88:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  return HAL_OK;
 8000d8c:	e78b      	b.n	8000ca6 <HAL_ETH_Init+0xba>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d8e:	68a3      	ldr	r3, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d90:	4629      	mov	r1, r5
 8000d92:	68e2      	ldr	r2, [r4, #12]
 8000d94:	4620      	mov	r0, r4
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8000d96:	085b      	lsrs	r3, r3, #1
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8000d98:	ea43 02d2 	orr.w	r2, r3, r2, lsr #3
 8000d9c:	b292      	uxth	r2, r2
 8000d9e:	f7ff feee 	bl	8000b7e <HAL_ETH_WritePHYRegister>
 8000da2:	2800      	cmp	r0, #0
 8000da4:	f47f af6b 	bne.w	8000c7e <HAL_ETH_Init+0x92>
    HAL_Delay(PHY_CONFIG_DELAY);
 8000da8:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000dac:	f7ff fc26 	bl	80005fc <HAL_Delay>
 8000db0:	e7e5      	b.n	8000d7e <HAL_ETH_Init+0x192>
    return HAL_ERROR;
 8000db2:	2501      	movs	r5, #1
 8000db4:	e777      	b.n	8000ca6 <HAL_ETH_Init+0xba>
 8000db6:	bf00      	nop
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40013800 	.word	0x40013800
 8000dc0:	feced300 	.word	0xfeced300
 8000dc4:	00e4e1bf 	.word	0x00e4e1bf
 8000dc8:	fde9f140 	.word	0xfde9f140
 8000dcc:	017d783f 	.word	0x017d783f
 8000dd0:	fc6c7900 	.word	0xfc6c7900
 8000dd4:	026259ff 	.word	0x026259ff
 8000dd8:	fa0a1f00 	.word	0xfa0a1f00
 8000ddc:	02faf07f 	.word	0x02faf07f

08000de0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 8000de0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8000de4:	2b01      	cmp	r3, #1
{  
 8000de6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000de8:	4605      	mov	r5, r0
 8000dea:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(heth);
 8000dee:	d033      	beq.n	8000e58 <HAL_ETH_Start+0x78>
  __IO uint32_t tmpreg = 0;
 8000df0:	2400      	movs	r4, #0
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000df2:	682b      	ldr	r3, [r5, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 8000df4:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
  __HAL_LOCK(heth);
 8000df8:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8000dfa:	9401      	str	r4, [sp, #4]
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000dfc:	681a      	ldr	r2, [r3, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000dfe:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 8000e00:	f885 6045 	strb.w	r6, [r5, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8000e04:	f042 0208 	orr.w	r2, r2, #8
 8000e08:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e0e:	f7ff fbf5 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e12:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e14:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8000e1a:	9400      	str	r4, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	f042 0204 	orr.w	r2, r2, #4
 8000e22:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8000e28:	f7ff fbe8 	bl	80005fc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8000e2c:	682b      	ldr	r3, [r5, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e2e:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 8000e30:	9a00      	ldr	r2, [sp, #0]
 8000e32:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8000e34:	f7ff fc6c 	bl	8000710 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e38:	682a      	ldr	r2, [r5, #0]
 8000e3a:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 8000e3e:	4620      	mov	r0, r4
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8000e40:	58d1      	ldr	r1, [r2, r3]
 8000e42:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8000e46:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8000e48:	58d1      	ldr	r1, [r2, r3]
 8000e4a:	f041 0102 	orr.w	r1, r1, #2
 8000e4e:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 8000e50:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8000e54:	f885 4045 	strb.w	r4, [r5, #69]	; 0x45
}
 8000e58:	b002      	add	sp, #8
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}

08000e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e60:	680b      	ldr	r3, [r1, #0]
{
 8000e62:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001028 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e68:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e6a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e6c:	4a6c      	ldr	r2, [pc, #432]	; (8001020 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000e6e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 800102c <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000e72:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e76:	9c01      	ldr	r4, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000e78:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e7c:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8000e80:	45b6      	cmp	lr, r6
 8000e82:	f040 80b3 	bne.w	8000fec <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e86:	684c      	ldr	r4, [r1, #4]
 8000e88:	f024 0710 	bic.w	r7, r4, #16
 8000e8c:	2f02      	cmp	r7, #2
 8000e8e:	d116      	bne.n	8000ebe <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000e90:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e94:	f003 0b07 	and.w	fp, r3, #7
 8000e98:	f04f 0c0f 	mov.w	ip, #15
 8000e9c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000ea0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000ea8:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000eac:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000eb0:	690d      	ldr	r5, [r1, #16]
 8000eb2:	fa05 f50b 	lsl.w	r5, r5, fp
 8000eb6:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 8000eba:	f8ca 5020 	str.w	r5, [sl, #32]
 8000ebe:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ec2:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000ec4:	f8d0 b000 	ldr.w	fp, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec8:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ecc:	fa05 f50a 	lsl.w	r5, r5, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed0:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ed2:	fa0c fc0a 	lsl.w	ip, ip, sl
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000ed6:	43ed      	mvns	r5, r5
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ed8:	2f01      	cmp	r7, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eda:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ede:	ea4c 0c0b 	orr.w	ip, ip, fp
      GPIOx->MODER = temp;
 8000ee2:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ee6:	d811      	bhi.n	8000f0c <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000ee8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eea:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eee:	68cf      	ldr	r7, [r1, #12]
 8000ef0:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000ef4:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000ef8:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000efa:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000efc:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000f00:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000f04:	409f      	lsls	r7, r3
 8000f06:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000f0a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000f0c:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0e:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f10:	688f      	ldr	r7, [r1, #8]
 8000f12:	fa07 f70a 	lsl.w	r7, r7, sl
 8000f16:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000f18:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f1a:	00e5      	lsls	r5, r4, #3
 8000f1c:	d566      	bpl.n	8000fec <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f22:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f26:	f003 0e03 	and.w	lr, r3, #3
 8000f2a:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8000f32:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f36:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	f8c8 5044 	str.w	r5, [r8, #68]	; 0x44
 8000f3e:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000f42:	f8d8 5044 	ldr.w	r5, [r8, #68]	; 0x44
 8000f46:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8000f4a:	9503      	str	r5, [sp, #12]
 8000f4c:	9d03      	ldr	r5, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f4e:	fa0c f50e 	lsl.w	r5, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000f52:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f56:	ea2a 0c05 	bic.w	ip, sl, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f5a:	4d32      	ldr	r5, [pc, #200]	; (8001024 <HAL_GPIO_Init+0x1c8>)
 8000f5c:	42a8      	cmp	r0, r5
 8000f5e:	d04c      	beq.n	8000ffa <HAL_GPIO_Init+0x19e>
 8000f60:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f64:	42a8      	cmp	r0, r5
 8000f66:	d04a      	beq.n	8000ffe <HAL_GPIO_Init+0x1a2>
 8000f68:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f6c:	42a8      	cmp	r0, r5
 8000f6e:	d048      	beq.n	8001002 <HAL_GPIO_Init+0x1a6>
 8000f70:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f74:	42a8      	cmp	r0, r5
 8000f76:	d046      	beq.n	8001006 <HAL_GPIO_Init+0x1aa>
 8000f78:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f7c:	42a8      	cmp	r0, r5
 8000f7e:	d044      	beq.n	800100a <HAL_GPIO_Init+0x1ae>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d044      	beq.n	800100e <HAL_GPIO_Init+0x1b2>
 8000f84:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000f88:	42a8      	cmp	r0, r5
 8000f8a:	d042      	beq.n	8001012 <HAL_GPIO_Init+0x1b6>
 8000f8c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f90:	42a8      	cmp	r0, r5
 8000f92:	d040      	beq.n	8001016 <HAL_GPIO_Init+0x1ba>
 8000f94:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f98:	42a8      	cmp	r0, r5
 8000f9a:	d03e      	beq.n	800101a <HAL_GPIO_Init+0x1be>
 8000f9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fa0:	42a8      	cmp	r0, r5
 8000fa2:	bf14      	ite	ne
 8000fa4:	250a      	movne	r5, #10
 8000fa6:	2509      	moveq	r5, #9
 8000fa8:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fac:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb0:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fb4:	60bd      	str	r5, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fb6:	ea6f 0706 	mvn.w	r7, r6
        temp = EXTI->IMR;
 8000fba:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	bf0c      	ite	eq
 8000fbe:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fc0:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000fc6:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000fc8:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	bf0c      	ite	eq
 8000fcc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fce:	4335      	orrne	r5, r6
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fd0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000fd4:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8000fd6:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	bf0c      	ite	eq
 8000fda:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000fdc:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fde:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000fe0:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8000fe2:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	bf54      	ite	pl
 8000fe6:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000fe8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000fea:	60d5      	str	r5, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000fec:	3301      	adds	r3, #1
 8000fee:	2b10      	cmp	r3, #16
 8000ff0:	f47f af3f 	bne.w	8000e72 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000ff4:	b005      	add	sp, #20
 8000ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	e7d4      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8000ffe:	2501      	movs	r5, #1
 8001000:	e7d2      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001002:	2502      	movs	r5, #2
 8001004:	e7d0      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001006:	2503      	movs	r5, #3
 8001008:	e7ce      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800100a:	2504      	movs	r5, #4
 800100c:	e7cc      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800100e:	2505      	movs	r5, #5
 8001010:	e7ca      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001012:	2506      	movs	r5, #6
 8001014:	e7c8      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 8001016:	2507      	movs	r5, #7
 8001018:	e7c6      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800101a:	2508      	movs	r5, #8
 800101c:	e7c4      	b.n	8000fa8 <HAL_GPIO_Init+0x14c>
 800101e:	bf00      	nop
 8001020:	40013c00 	.word	0x40013c00
 8001024:	40020000 	.word	0x40020000
 8001028:	40023800 	.word	0x40023800
 800102c:	40021400 	.word	0x40021400

08001030 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001030:	b10a      	cbz	r2, 8001036 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001032:	6181      	str	r1, [r0, #24]
 8001034:	4770      	bx	lr
 8001036:	0409      	lsls	r1, r1, #16
 8001038:	e7fb      	b.n	8001032 <HAL_GPIO_WritePin+0x2>

0800103a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 800103a:	6943      	ldr	r3, [r0, #20]
 800103c:	4059      	eors	r1, r3
 800103e:	6141      	str	r1, [r0, #20]
 8001040:	4770      	bx	lr

08001042 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001042:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t i;

  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 8001046:	4604      	mov	r4, r0
{
 8001048:	b08a      	sub	sp, #40	; 0x28
  if(hpcd == NULL)
 800104a:	2800      	cmp	r0, #0
 800104c:	d06b      	beq.n	8001126 <HAL_PCD_Init+0xe4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 800104e:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
 8001052:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001056:	b91b      	cbnz	r3, 8001060 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001058:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800105c:	f009 fe7c 	bl	800ad58 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001060:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001062:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001064:	466e      	mov	r6, sp
 8001066:	f104 0804 	add.w	r8, r4, #4
  __HAL_PCD_DISABLE(hpcd);
 800106a:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 800106e:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  __HAL_PCD_DISABLE(hpcd);
 8001072:	f001 f9ac 	bl	80023ce <USB_DisableGlobalInt>
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001076:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001078:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800107a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800107c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800107e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001082:	f104 0510 	add.w	r5, r4, #16
 8001086:	e886 0003 	stmia.w	r6, {r0, r1}
 800108a:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800108e:	6820      	ldr	r0, [r4, #0]

  /* Init endpoints structures */
  for (i = 0U; i < 15U; i++)
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001090:	2601      	movs	r6, #1
  (void)USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001092:	f001 f961 	bl	8002358 <USB_CoreInit>
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001096:	2100      	movs	r1, #0
 8001098:	6820      	ldr	r0, [r4, #0]
 800109a:	f001 f99e 	bl	80023da <USB_SetCurrentMode>
 800109e:	2100      	movs	r1, #0
 80010a0:	4622      	mov	r2, r4
 80010a2:	4623      	mov	r3, r4
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010a4:	4608      	mov	r0, r1
    hpcd->IN_ep[i].num = i;
 80010a6:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 80010aa:	331c      	adds	r3, #28
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ac:	84d9      	strh	r1, [r3, #38]	; 0x26
 80010ae:	3101      	adds	r1, #1
    hpcd->IN_ep[i].is_in = 1U;
 80010b0:	f883 6021 	strb.w	r6, [r3, #33]	; 0x21
  for (i = 0U; i < 15U; i++)
 80010b4:	290f      	cmp	r1, #15
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010b6:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
    hpcd->IN_ep[i].maxpacket = 0U;
 80010ba:	6298      	str	r0, [r3, #40]	; 0x28
    hpcd->IN_ep[i].xfer_buff = 0U;
 80010bc:	62d8      	str	r0, [r3, #44]	; 0x2c
    hpcd->IN_ep[i].xfer_len = 0U;
 80010be:	6358      	str	r0, [r3, #52]	; 0x34
  for (i = 0U; i < 15U; i++)
 80010c0:	d1f1      	bne.n	80010a6 <HAL_PCD_Init+0x64>
 80010c2:	2300      	movs	r3, #0
  }

  for (i = 0U; i < 15U; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010c4:	461f      	mov	r7, r3
    hpcd->OUT_ep[i].num = i;
 80010c6:	f882 31fc 	strb.w	r3, [r2, #508]	; 0x1fc
 80010ca:	3301      	adds	r3, #1
    hpcd->OUT_ep[i].is_in = 0U;
 80010cc:	f882 71fd 	strb.w	r7, [r2, #509]	; 0x1fd
 80010d0:	321c      	adds	r2, #28
  for (i = 0U; i < 15U; i++)
 80010d2:	2b0f      	cmp	r3, #15
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80010d4:	f882 71e3 	strb.w	r7, [r2, #483]	; 0x1e3
    hpcd->OUT_ep[i].maxpacket = 0U;
 80010d8:	f8c2 71e8 	str.w	r7, [r2, #488]	; 0x1e8
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80010dc:	f8c2 71ec 	str.w	r7, [r2, #492]	; 0x1ec
    hpcd->OUT_ep[i].xfer_len = 0U;
 80010e0:	f8c2 71f4 	str.w	r7, [r2, #500]	; 0x1f4
  for (i = 0U; i < 15U; i++)
 80010e4:	d1ef      	bne.n	80010c6 <HAL_PCD_Init+0x84>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80010e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010e8:	466e      	mov	r6, sp
 80010ea:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010ee:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80010f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010f4:	e886 0003 	stmia.w	r6, {r0, r1}
 80010f8:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	f001 f9ad 	bl	800245c <USB_DevInit>

  hpcd->USB_Address = 0U;
  hpcd->State = HAL_PCD_STATE_READY;
 8001102:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001104:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001108:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800110c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800110e:	2b01      	cmp	r3, #1
 8001110:	d102      	bne.n	8001118 <HAL_PCD_Init+0xd6>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001112:	4620      	mov	r0, r4
 8001114:	f000 f809 	bl	800112a <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect (hpcd->Instance);
 8001118:	6820      	ldr	r0, [r4, #0]
 800111a:	f001 fa57 	bl	80025cc <USB_DevDisconnect>

  return HAL_OK;
 800111e:	2000      	movs	r0, #0
}
 8001120:	b00a      	add	sp, #40	; 0x28
 8001122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001126:	2001      	movs	r0, #1
 8001128:	e7fa      	b.n	8001120 <HAL_PCD_Init+0xde>

0800112a <HAL_PCDEx_ActivateLPM>:
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
 800112a:	2101      	movs	r1, #1
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112c:	6802      	ldr	r2, [r0, #0]
{
 800112e:	4603      	mov	r3, r0
  hpcd->lpm_active = 1U;
 8001130:	f8c0 13f8 	str.w	r1, [r0, #1016]	; 0x3f8
  hpcd->LPM_State = LPM_L0;
 8001134:	2000      	movs	r0, #0
 8001136:	f883 03f0 	strb.w	r0, [r3, #1008]	; 0x3f0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800113a:	6993      	ldr	r3, [r2, #24]
 800113c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001140:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001142:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8001144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001148:	f043 0303 	orr.w	r3, r3, #3
 800114c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 800114e:	4770      	bx	lr

08001150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001154:	4604      	mov	r4, r0
 8001156:	b918      	cbnz	r0, 8001160 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001158:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800115a:	b002      	add	sp, #8
 800115c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001160:	6803      	ldr	r3, [r0, #0]
 8001162:	07d8      	lsls	r0, r3, #31
 8001164:	d410      	bmi.n	8001188 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	0799      	lsls	r1, r3, #30
 800116a:	d45e      	bmi.n	800122a <HAL_RCC_OscConfig+0xda>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	0719      	lsls	r1, r3, #28
 8001170:	f100 80a3 	bmi.w	80012ba <HAL_RCC_OscConfig+0x16a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	075a      	lsls	r2, r3, #29
 8001178:	f100 80c4 	bmi.w	8001304 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117c:	69a2      	ldr	r2, [r4, #24]
 800117e:	2a00      	cmp	r2, #0
 8001180:	f040 812e 	bne.w	80013e0 <HAL_RCC_OscConfig+0x290>
  return HAL_OK;
 8001184:	2000      	movs	r0, #0
 8001186:	e7e8      	b.n	800115a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	4b93      	ldr	r3, [pc, #588]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	f002 020c 	and.w	r2, r2, #12
 8001190:	2a04      	cmp	r2, #4
 8001192:	d007      	beq.n	80011a4 <HAL_RCC_OscConfig+0x54>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	f002 020c 	and.w	r2, r2, #12
 800119a:	2a08      	cmp	r2, #8
 800119c:	d10a      	bne.n	80011b4 <HAL_RCC_OscConfig+0x64>
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	025a      	lsls	r2, r3, #9
 80011a2:	d507      	bpl.n	80011b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	039b      	lsls	r3, r3, #14
 80011aa:	d5dc      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011ac:	6863      	ldr	r3, [r4, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1d9      	bne.n	8001166 <HAL_RCC_OscConfig+0x16>
 80011b2:	e7d1      	b.n	8001158 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011b4:	6863      	ldr	r3, [r4, #4]
 80011b6:	4d88      	ldr	r5, [pc, #544]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d111      	bne.n	80011e2 <HAL_RCC_OscConfig+0x92>
 80011be:	682b      	ldr	r3, [r5, #0]
 80011c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011c6:	f7ff fa13 	bl	80005f0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ca:	4d83      	ldr	r5, [pc, #524]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80011cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ce:	682b      	ldr	r3, [r5, #0]
 80011d0:	039f      	lsls	r7, r3, #14
 80011d2:	d4c8      	bmi.n	8001166 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d4:	f7ff fa0c 	bl	80005f0 <HAL_GetTick>
 80011d8:	1b80      	subs	r0, r0, r6
 80011da:	2864      	cmp	r0, #100	; 0x64
 80011dc:	d9f7      	bls.n	80011ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80011de:	2003      	movs	r0, #3
 80011e0:	e7bb      	b.n	800115a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011e2:	b99b      	cbnz	r3, 800120c <HAL_RCC_OscConfig+0xbc>
 80011e4:	682b      	ldr	r3, [r5, #0]
 80011e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011ea:	602b      	str	r3, [r5, #0]
 80011ec:	682b      	ldr	r3, [r5, #0]
 80011ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80011f4:	f7ff f9fc 	bl	80005f0 <HAL_GetTick>
 80011f8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011fa:	682b      	ldr	r3, [r5, #0]
 80011fc:	0398      	lsls	r0, r3, #14
 80011fe:	d5b2      	bpl.n	8001166 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001200:	f7ff f9f6 	bl	80005f0 <HAL_GetTick>
 8001204:	1b80      	subs	r0, r0, r6
 8001206:	2864      	cmp	r0, #100	; 0x64
 8001208:	d9f7      	bls.n	80011fa <HAL_RCC_OscConfig+0xaa>
 800120a:	e7e8      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001210:	682b      	ldr	r3, [r5, #0]
 8001212:	d103      	bne.n	800121c <HAL_RCC_OscConfig+0xcc>
 8001214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001218:	602b      	str	r3, [r5, #0]
 800121a:	e7d0      	b.n	80011be <HAL_RCC_OscConfig+0x6e>
 800121c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001220:	602b      	str	r3, [r5, #0]
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001228:	e7cc      	b.n	80011c4 <HAL_RCC_OscConfig+0x74>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800122a:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f012 0f0c 	tst.w	r2, #12
 8001232:	d007      	beq.n	8001244 <HAL_RCC_OscConfig+0xf4>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	f002 020c 	and.w	r2, r2, #12
 800123a:	2a08      	cmp	r2, #8
 800123c:	d111      	bne.n	8001262 <HAL_RCC_OscConfig+0x112>
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	0259      	lsls	r1, r3, #9
 8001242:	d40e      	bmi.n	8001262 <HAL_RCC_OscConfig+0x112>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001244:	4b64      	ldr	r3, [pc, #400]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	0792      	lsls	r2, r2, #30
 800124a:	d502      	bpl.n	8001252 <HAL_RCC_OscConfig+0x102>
 800124c:	68e2      	ldr	r2, [r4, #12]
 800124e:	2a01      	cmp	r2, #1
 8001250:	d182      	bne.n	8001158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6921      	ldr	r1, [r4, #16]
 8001256:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800125a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800125e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001260:	e784      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001262:	68e3      	ldr	r3, [r4, #12]
 8001264:	4d5c      	ldr	r5, [pc, #368]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001266:	b1bb      	cbz	r3, 8001298 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001268:	682b      	ldr	r3, [r5, #0]
 800126a:	f043 0301 	orr.w	r3, r3, #1
 800126e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001270:	f7ff f9be 	bl	80005f0 <HAL_GetTick>
 8001274:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001276:	682b      	ldr	r3, [r5, #0]
 8001278:	079f      	lsls	r7, r3, #30
 800127a:	d507      	bpl.n	800128c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127c:	682b      	ldr	r3, [r5, #0]
 800127e:	6922      	ldr	r2, [r4, #16]
 8001280:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001284:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001288:	602b      	str	r3, [r5, #0]
 800128a:	e76f      	b.n	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800128c:	f7ff f9b0 	bl	80005f0 <HAL_GetTick>
 8001290:	1b80      	subs	r0, r0, r6
 8001292:	2802      	cmp	r0, #2
 8001294:	d9ef      	bls.n	8001276 <HAL_RCC_OscConfig+0x126>
 8001296:	e7a2      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001298:	682b      	ldr	r3, [r5, #0]
 800129a:	f023 0301 	bic.w	r3, r3, #1
 800129e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80012a0:	f7ff f9a6 	bl	80005f0 <HAL_GetTick>
 80012a4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	682b      	ldr	r3, [r5, #0]
 80012a8:	0798      	lsls	r0, r3, #30
 80012aa:	f57f af5f 	bpl.w	800116c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ae:	f7ff f99f 	bl	80005f0 <HAL_GetTick>
 80012b2:	1b80      	subs	r0, r0, r6
 80012b4:	2802      	cmp	r0, #2
 80012b6:	d9f6      	bls.n	80012a6 <HAL_RCC_OscConfig+0x156>
 80012b8:	e791      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012ba:	6963      	ldr	r3, [r4, #20]
 80012bc:	4d46      	ldr	r5, [pc, #280]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 80012be:	b183      	cbz	r3, 80012e2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80012c0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012c8:	f7ff f992 	bl	80005f0 <HAL_GetTick>
 80012cc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012d0:	079b      	lsls	r3, r3, #30
 80012d2:	f53f af4f 	bmi.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012d6:	f7ff f98b 	bl	80005f0 <HAL_GetTick>
 80012da:	1b80      	subs	r0, r0, r6
 80012dc:	2802      	cmp	r0, #2
 80012de:	d9f6      	bls.n	80012ce <HAL_RCC_OscConfig+0x17e>
 80012e0:	e77d      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80012e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012e4:	f023 0301 	bic.w	r3, r3, #1
 80012e8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80012ea:	f7ff f981 	bl	80005f0 <HAL_GetTick>
 80012ee:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80012f2:	079f      	lsls	r7, r3, #30
 80012f4:	f57f af3e 	bpl.w	8001174 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff f97a 	bl	80005f0 <HAL_GetTick>
 80012fc:	1b80      	subs	r0, r0, r6
 80012fe:	2802      	cmp	r0, #2
 8001300:	d9f6      	bls.n	80012f0 <HAL_RCC_OscConfig+0x1a0>
 8001302:	e76c      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001308:	00d0      	lsls	r0, r2, #3
 800130a:	d427      	bmi.n	800135c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800130e:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001310:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001314:	641a      	str	r2, [r3, #64]	; 0x40
 8001316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001320:	4d2e      	ldr	r5, [pc, #184]	; (80013dc <HAL_RCC_OscConfig+0x28c>)
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	05d9      	lsls	r1, r3, #23
 8001326:	d51b      	bpl.n	8001360 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001328:	68a3      	ldr	r3, [r4, #8]
 800132a:	4d2b      	ldr	r5, [pc, #172]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 800132c:	2b01      	cmp	r3, #1
 800132e:	d127      	bne.n	8001380 <HAL_RCC_OscConfig+0x230>
 8001330:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001332:	f043 0301 	orr.w	r3, r3, #1
 8001336:	672b      	str	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800133c:	f7ff f958 	bl	80005f0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001340:	4f25      	ldr	r7, [pc, #148]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001342:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001344:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001346:	079b      	lsls	r3, r3, #30
 8001348:	d53f      	bpl.n	80013ca <HAL_RCC_OscConfig+0x27a>
    if(pwrclkchanged == SET)
 800134a:	2e00      	cmp	r6, #0
 800134c:	f43f af16 	beq.w	800117c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001350:	4a21      	ldr	r2, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x288>)
 8001352:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001358:	6413      	str	r3, [r2, #64]	; 0x40
 800135a:	e70f      	b.n	800117c <HAL_RCC_OscConfig+0x2c>
  FlagStatus pwrclkchanged = RESET;
 800135c:	2600      	movs	r6, #0
 800135e:	e7df      	b.n	8001320 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001366:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001368:	f7ff f942 	bl	80005f0 <HAL_GetTick>
 800136c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800136e:	682b      	ldr	r3, [r5, #0]
 8001370:	05da      	lsls	r2, r3, #23
 8001372:	d4d9      	bmi.n	8001328 <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001374:	f7ff f93c 	bl	80005f0 <HAL_GetTick>
 8001378:	1bc0      	subs	r0, r0, r7
 800137a:	2864      	cmp	r0, #100	; 0x64
 800137c:	d9f7      	bls.n	800136e <HAL_RCC_OscConfig+0x21e>
 800137e:	e72e      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001380:	b9ab      	cbnz	r3, 80013ae <HAL_RCC_OscConfig+0x25e>
 8001382:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001384:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001388:	f023 0301 	bic.w	r3, r3, #1
 800138c:	672b      	str	r3, [r5, #112]	; 0x70
 800138e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001390:	f023 0304 	bic.w	r3, r3, #4
 8001394:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001396:	f7ff f92b 	bl	80005f0 <HAL_GetTick>
 800139a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800139e:	0798      	lsls	r0, r3, #30
 80013a0:	d5d3      	bpl.n	800134a <HAL_RCC_OscConfig+0x1fa>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a2:	f7ff f925 	bl	80005f0 <HAL_GetTick>
 80013a6:	1bc0      	subs	r0, r0, r7
 80013a8:	4540      	cmp	r0, r8
 80013aa:	d9f7      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
 80013ac:	e717      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ae:	2b05      	cmp	r3, #5
 80013b0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013b2:	d103      	bne.n	80013bc <HAL_RCC_OscConfig+0x26c>
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	672b      	str	r3, [r5, #112]	; 0x70
 80013ba:	e7b9      	b.n	8001330 <HAL_RCC_OscConfig+0x1e0>
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	672b      	str	r3, [r5, #112]	; 0x70
 80013c2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	e7b5      	b.n	8001336 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff f911 	bl	80005f0 <HAL_GetTick>
 80013ce:	eba0 0008 	sub.w	r0, r0, r8
 80013d2:	42a8      	cmp	r0, r5
 80013d4:	d9b6      	bls.n	8001344 <HAL_RCC_OscConfig+0x1f4>
 80013d6:	e702      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013e0:	4d24      	ldr	r5, [pc, #144]	; (8001474 <HAL_RCC_OscConfig+0x324>)
 80013e2:	68ab      	ldr	r3, [r5, #8]
 80013e4:	f003 030c 	and.w	r3, r3, #12
 80013e8:	2b08      	cmp	r3, #8
 80013ea:	f43f aeb5 	beq.w	8001158 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80013ee:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80013f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013f6:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013f8:	d12e      	bne.n	8001458 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80013fa:	f7ff f8f9 	bl	80005f0 <HAL_GetTick>
 80013fe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	0199      	lsls	r1, r3, #6
 8001404:	d422      	bmi.n	800144c <HAL_RCC_OscConfig+0x2fc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001406:	6a22      	ldr	r2, [r4, #32]
 8001408:	69e3      	ldr	r3, [r4, #28]
 800140a:	4313      	orrs	r3, r2
 800140c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800140e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001412:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001416:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001418:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800141c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800141e:	4c15      	ldr	r4, [pc, #84]	; (8001474 <HAL_RCC_OscConfig+0x324>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001420:	0852      	lsrs	r2, r2, #1
 8001422:	3a01      	subs	r2, #1
 8001424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001428:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800142a:	682b      	ldr	r3, [r5, #0]
 800142c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001430:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001432:	f7ff f8dd 	bl	80005f0 <HAL_GetTick>
 8001436:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001438:	6823      	ldr	r3, [r4, #0]
 800143a:	019a      	lsls	r2, r3, #6
 800143c:	f53f aea2 	bmi.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001440:	f7ff f8d6 	bl	80005f0 <HAL_GetTick>
 8001444:	1b40      	subs	r0, r0, r5
 8001446:	2802      	cmp	r0, #2
 8001448:	d9f6      	bls.n	8001438 <HAL_RCC_OscConfig+0x2e8>
 800144a:	e6c8      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7ff f8d0 	bl	80005f0 <HAL_GetTick>
 8001450:	1b80      	subs	r0, r0, r6
 8001452:	2802      	cmp	r0, #2
 8001454:	d9d4      	bls.n	8001400 <HAL_RCC_OscConfig+0x2b0>
 8001456:	e6c2      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
        tickstart = HAL_GetTick();
 8001458:	f7ff f8ca 	bl	80005f0 <HAL_GetTick>
 800145c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800145e:	682b      	ldr	r3, [r5, #0]
 8001460:	019b      	lsls	r3, r3, #6
 8001462:	f57f ae8f 	bpl.w	8001184 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001466:	f7ff f8c3 	bl	80005f0 <HAL_GetTick>
 800146a:	1b00      	subs	r0, r0, r4
 800146c:	2802      	cmp	r0, #2
 800146e:	d9f6      	bls.n	800145e <HAL_RCC_OscConfig+0x30e>
 8001470:	e6b5      	b.n	80011de <HAL_RCC_OscConfig+0x8e>
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800

08001478 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001478:	4913      	ldr	r1, [pc, #76]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 800147a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800147c:	688b      	ldr	r3, [r1, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
 8001482:	2b04      	cmp	r3, #4
 8001484:	d003      	beq.n	800148e <HAL_RCC_GetSysClockFreq+0x16>
 8001486:	2b08      	cmp	r3, #8
 8001488:	d003      	beq.n	8001492 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800148c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800148e:	4810      	ldr	r0, [pc, #64]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001490:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001492:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001494:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001498:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800149c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80014a4:	bf1a      	itte	ne
 80014a6:	480a      	ldrne	r0, [pc, #40]	; (80014d0 <HAL_RCC_GetSysClockFreq+0x58>)
 80014a8:	2300      	movne	r3, #0
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014aa:	4808      	ldreq	r0, [pc, #32]	; (80014cc <HAL_RCC_GetSysClockFreq+0x54>)
 80014ac:	fba1 0100 	umull	r0, r1, r1, r0
 80014b0:	f7fe fefe 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <HAL_RCC_GetSysClockFreq+0x50>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80014bc:	3301      	adds	r3, #1
 80014be:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80014c0:	fbb0 f0f3 	udiv	r0, r0, r3
 80014c4:	bd08      	pop	{r3, pc}
 80014c6:	bf00      	nop
 80014c8:	40023800 	.word	0x40023800
 80014cc:	00f42400 	.word	0x00f42400
 80014d0:	007a1200 	.word	0x007a1200

080014d4 <HAL_RCC_ClockConfig>:
{
 80014d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80014da:	4604      	mov	r4, r0
 80014dc:	b910      	cbnz	r0, 80014e4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80014de:	2001      	movs	r0, #1
 80014e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e4:	4a46      	ldr	r2, [pc, #280]	; (8001600 <HAL_RCC_ClockConfig+0x12c>)
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	f003 030f 	and.w	r3, r3, #15
 80014ec:	428b      	cmp	r3, r1
 80014ee:	d328      	bcc.n	8001542 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014f0:	6821      	ldr	r1, [r4, #0]
 80014f2:	078f      	lsls	r7, r1, #30
 80014f4:	d430      	bmi.n	8001558 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	07c8      	lsls	r0, r1, #31
 80014f8:	d443      	bmi.n	8001582 <HAL_RCC_ClockConfig+0xae>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014fa:	4a41      	ldr	r2, [pc, #260]	; (8001600 <HAL_RCC_ClockConfig+0x12c>)
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	429d      	cmp	r5, r3
 8001504:	d367      	bcc.n	80015d6 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001506:	6822      	ldr	r2, [r4, #0]
 8001508:	0751      	lsls	r1, r2, #29
 800150a:	d470      	bmi.n	80015ee <HAL_RCC_ClockConfig+0x11a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150c:	0713      	lsls	r3, r2, #28
 800150e:	d507      	bpl.n	8001520 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001510:	4a3c      	ldr	r2, [pc, #240]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001512:	6921      	ldr	r1, [r4, #16]
 8001514:	6893      	ldr	r3, [r2, #8]
 8001516:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800151a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800151e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001520:	f7ff ffaa 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8001524:	4b37      	ldr	r3, [pc, #220]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001526:	4a38      	ldr	r2, [pc, #224]	; (8001608 <HAL_RCC_ClockConfig+0x134>)
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800152e:	5cd3      	ldrb	r3, [r2, r3]
 8001530:	40d8      	lsrs	r0, r3
 8001532:	4b36      	ldr	r3, [pc, #216]	; (800160c <HAL_RCC_ClockConfig+0x138>)
 8001534:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001536:	2000      	movs	r0, #0
 8001538:	f009 fc46 	bl	800adc8 <HAL_InitTick>
  return HAL_OK;
 800153c:	2000      	movs	r0, #0
 800153e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	6813      	ldr	r3, [r2, #0]
 8001544:	f023 030f 	bic.w	r3, r3, #15
 8001548:	430b      	orrs	r3, r1
 800154a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800154c:	6813      	ldr	r3, [r2, #0]
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4299      	cmp	r1, r3
 8001554:	d1c3      	bne.n	80014de <HAL_RCC_ClockConfig+0xa>
 8001556:	e7cb      	b.n	80014f0 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001558:	f011 0f04 	tst.w	r1, #4
 800155c:	4b29      	ldr	r3, [pc, #164]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 800155e:	d003      	beq.n	8001568 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001560:	689a      	ldr	r2, [r3, #8]
 8001562:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001566:	609a      	str	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001568:	070e      	lsls	r6, r1, #28
 800156a:	d503      	bpl.n	8001574 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	689a      	ldr	r2, [r3, #8]
 800156e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001572:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001574:	689a      	ldr	r2, [r3, #8]
 8001576:	68a0      	ldr	r0, [r4, #8]
 8001578:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800157c:	4302      	orrs	r2, r0
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	e7b9      	b.n	80014f6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001582:	6861      	ldr	r1, [r4, #4]
 8001584:	4b1f      	ldr	r3, [pc, #124]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 8001586:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001588:	681a      	ldr	r2, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800158a:	d11c      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800158c:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001590:	d0a5      	beq.n	80014de <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001592:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001594:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001598:	4e1a      	ldr	r6, [pc, #104]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800159a:	f022 0203 	bic.w	r2, r2, #3
 800159e:	430a      	orrs	r2, r1
 80015a0:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80015a2:	f7ff f825 	bl	80005f0 <HAL_GetTick>
 80015a6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015a8:	68b3      	ldr	r3, [r6, #8]
 80015aa:	6862      	ldr	r2, [r4, #4]
 80015ac:	f003 030c 	and.w	r3, r3, #12
 80015b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80015b4:	d0a1      	beq.n	80014fa <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015b6:	f7ff f81b 	bl	80005f0 <HAL_GetTick>
 80015ba:	1bc0      	subs	r0, r0, r7
 80015bc:	4540      	cmp	r0, r8
 80015be:	d9f3      	bls.n	80015a8 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 80015c0:	2003      	movs	r0, #3
}
 80015c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015c6:	2902      	cmp	r1, #2
 80015c8:	d102      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015ca:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 80015ce:	e7df      	b.n	8001590 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	f012 0f02 	tst.w	r2, #2
 80015d4:	e7dc      	b.n	8001590 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d6:	6813      	ldr	r3, [r2, #0]
 80015d8:	f023 030f 	bic.w	r3, r3, #15
 80015dc:	432b      	orrs	r3, r5
 80015de:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015e0:	6813      	ldr	r3, [r2, #0]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	429d      	cmp	r5, r3
 80015e8:	f47f af79 	bne.w	80014de <HAL_RCC_ClockConfig+0xa>
 80015ec:	e78b      	b.n	8001506 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ee:	4905      	ldr	r1, [pc, #20]	; (8001604 <HAL_RCC_ClockConfig+0x130>)
 80015f0:	68e0      	ldr	r0, [r4, #12]
 80015f2:	688b      	ldr	r3, [r1, #8]
 80015f4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80015f8:	4303      	orrs	r3, r0
 80015fa:	608b      	str	r3, [r1, #8]
 80015fc:	e786      	b.n	800150c <HAL_RCC_ClockConfig+0x38>
 80015fe:	bf00      	nop
 8001600:	40023c00 	.word	0x40023c00
 8001604:	40023800 	.word	0x40023800
 8001608:	0800da69 	.word	0x0800da69
 800160c:	20000010 	.word	0x20000010

08001610 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001610:	4b01      	ldr	r3, [pc, #4]	; (8001618 <HAL_RCC_GetHCLKFreq+0x8>)
 8001612:	6818      	ldr	r0, [r3, #0]
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000010 	.word	0x20000010

0800161c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_RCC_GetPCLK1Freq+0x14>)
 800161e:	4a05      	ldr	r2, [pc, #20]	; (8001634 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001626:	5cd3      	ldrb	r3, [r2, r3]
 8001628:	4a03      	ldr	r2, [pc, #12]	; (8001638 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800162a:	6810      	ldr	r0, [r2, #0]
}
 800162c:	40d8      	lsrs	r0, r3
 800162e:	4770      	bx	lr
 8001630:	40023800 	.word	0x40023800
 8001634:	0800da79 	.word	0x0800da79
 8001638:	20000010 	.word	0x20000010

0800163c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800163c:	4b04      	ldr	r3, [pc, #16]	; (8001650 <HAL_RCC_GetPCLK2Freq+0x14>)
 800163e:	4a05      	ldr	r2, [pc, #20]	; (8001654 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001646:	5cd3      	ldrb	r3, [r2, r3]
 8001648:	4a03      	ldr	r2, [pc, #12]	; (8001658 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800164a:	6810      	ldr	r0, [r2, #0]
}
 800164c:	40d8      	lsrs	r0, r3
 800164e:	4770      	bx	lr
 8001650:	40023800 	.word	0x40023800
 8001654:	0800da79 	.word	0x0800da79
 8001658:	20000010 	.word	0x20000010

0800165c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800165c:	230f      	movs	r3, #15
 800165e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001660:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <HAL_RCC_GetClockConfig+0x34>)
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	f002 0203 	and.w	r2, r2, #3
 8001668:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001670:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001672:	689a      	ldr	r2, [r3, #8]
 8001674:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001678:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001682:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001684:	4b03      	ldr	r3, [pc, #12]	; (8001694 <HAL_RCC_GetClockConfig+0x38>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f003 030f 	and.w	r3, r3, #15
 800168c:	600b      	str	r3, [r1, #0]
 800168e:	4770      	bx	lr
 8001690:	40023800 	.word	0x40023800
 8001694:	40023c00 	.word	0x40023c00

08001698 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001698:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800169c:	6802      	ldr	r2, [r0, #0]
{
 800169e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80016a0:	f012 0601 	ands.w	r6, r2, #1
 80016a4:	d00b      	beq.n	80016be <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016a6:	4bb8      	ldr	r3, [pc, #736]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016a8:	6899      	ldr	r1, [r3, #8]
 80016aa:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80016ae:	6099      	str	r1, [r3, #8]
 80016b0:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80016b2:	6899      	ldr	r1, [r3, #8]
 80016b4:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80016b6:	fab6 f686 	clz	r6, r6
 80016ba:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80016bc:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80016be:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80016c2:	d012      	beq.n	80016ea <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016c4:	49b0      	ldr	r1, [pc, #704]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016c6:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80016c8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80016cc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016d0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80016d4:	bf08      	it	eq
 80016d6:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016d8:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016dc:	bf16      	itet	ne
 80016de:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80016e2:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80016e4:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80016e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80016ea:	02d1      	lsls	r1, r2, #11
 80016ec:	d510      	bpl.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016ee:	48a6      	ldr	r0, [pc, #664]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80016f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80016f2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80016f6:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80016fa:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016fe:	ea43 0301 	orr.w	r3, r3, r1
 8001702:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001706:	f000 8185 	beq.w	8001a14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800170a:	2900      	cmp	r1, #0
 800170c:	bf08      	it	eq
 800170e:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001710:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001714:	bf18      	it	ne
 8001716:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001718:	0692      	lsls	r2, r2, #26
 800171a:	d531      	bpl.n	8001780 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800171c:	4b9a      	ldr	r3, [pc, #616]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800171e:	4f9b      	ldr	r7, [pc, #620]	; (800198c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001722:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001726:	641a      	str	r2, [r3, #64]	; 0x40
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800172e:	9301      	str	r3, [sp, #4]
 8001730:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001738:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800173a:	f7fe ff59 	bl	80005f0 <HAL_GetTick>
 800173e:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	05db      	lsls	r3, r3, #23
 8001744:	f140 8168 	bpl.w	8001a18 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001748:	4f8f      	ldr	r7, [pc, #572]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800174a:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800174c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001750:	f040 816d 	bne.w	8001a2e <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001754:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001756:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800175a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800175e:	4a8a      	ldr	r2, [pc, #552]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001760:	f040 818b 	bne.w	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001764:	6891      	ldr	r1, [r2, #8]
 8001766:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800176a:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800176e:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001772:	4301      	orrs	r1, r0
 8001774:	6091      	str	r1, [r2, #8]
 8001776:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800177a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800177c:	430b      	orrs	r3, r1
 800177e:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001780:	6823      	ldr	r3, [r4, #0]
 8001782:	06da      	lsls	r2, r3, #27
 8001784:	d50c      	bpl.n	80017a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001786:	4a80      	ldr	r2, [pc, #512]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001788:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800178c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001790:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001794:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001798:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800179a:	4301      	orrs	r1, r0
 800179c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017a0:	045f      	lsls	r7, r3, #17
 80017a2:	d508      	bpl.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80017a4:	4978      	ldr	r1, [pc, #480]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017a6:	6e60      	ldr	r0, [r4, #100]	; 0x64
 80017a8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017ac:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80017b0:	4302      	orrs	r2, r0
 80017b2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80017b6:	0418      	lsls	r0, r3, #16
 80017b8:	d508      	bpl.n	80017cc <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80017ba:	4973      	ldr	r1, [pc, #460]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017bc:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80017be:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017c2:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80017c6:	4302      	orrs	r2, r0
 80017c8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80017cc:	03d9      	lsls	r1, r3, #15
 80017ce:	d508      	bpl.n	80017e2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80017d0:	496d      	ldr	r1, [pc, #436]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017d2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80017d4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017d8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80017dc:	4302      	orrs	r2, r0
 80017de:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80017e2:	039a      	lsls	r2, r3, #14
 80017e4:	d508      	bpl.n	80017f8 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80017e6:	4968      	ldr	r1, [pc, #416]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80017ea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80017ee:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80017f2:	4302      	orrs	r2, r0
 80017f4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017f8:	065f      	lsls	r7, r3, #25
 80017fa:	d508      	bpl.n	800180e <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017fc:	4962      	ldr	r1, [pc, #392]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80017fe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001800:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001804:	f022 0203 	bic.w	r2, r2, #3
 8001808:	4302      	orrs	r2, r0
 800180a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800180e:	0618      	lsls	r0, r3, #24
 8001810:	d508      	bpl.n	8001824 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001812:	495d      	ldr	r1, [pc, #372]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001814:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001816:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800181a:	f022 020c 	bic.w	r2, r2, #12
 800181e:	4302      	orrs	r2, r0
 8001820:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001824:	05d9      	lsls	r1, r3, #23
 8001826:	d508      	bpl.n	800183a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001828:	4957      	ldr	r1, [pc, #348]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800182a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800182c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001830:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001834:	4302      	orrs	r2, r0
 8001836:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800183a:	059a      	lsls	r2, r3, #22
 800183c:	d508      	bpl.n	8001850 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800183e:	4952      	ldr	r1, [pc, #328]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001840:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001842:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001846:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800184a:	4302      	orrs	r2, r0
 800184c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001850:	055f      	lsls	r7, r3, #21
 8001852:	d508      	bpl.n	8001866 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001854:	494c      	ldr	r1, [pc, #304]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001856:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001858:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800185c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001860:	4302      	orrs	r2, r0
 8001862:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001866:	0518      	lsls	r0, r3, #20
 8001868:	d508      	bpl.n	800187c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800186a:	4947      	ldr	r1, [pc, #284]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800186c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800186e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001872:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001876:	4302      	orrs	r2, r0
 8001878:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800187c:	04d9      	lsls	r1, r3, #19
 800187e:	d508      	bpl.n	8001892 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001880:	4941      	ldr	r1, [pc, #260]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001882:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001884:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001888:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800188c:	4302      	orrs	r2, r0
 800188e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001892:	049a      	lsls	r2, r3, #18
 8001894:	d508      	bpl.n	80018a8 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001896:	493c      	ldr	r1, [pc, #240]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001898:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800189a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800189e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80018a2:	4302      	orrs	r2, r0
 80018a4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80018a8:	025f      	lsls	r7, r3, #9
 80018aa:	d508      	bpl.n	80018be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80018ac:	4936      	ldr	r1, [pc, #216]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018ae:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80018b0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018b4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80018b8:	4302      	orrs	r2, r0
 80018ba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80018be:	0298      	lsls	r0, r3, #10
 80018c0:	d50c      	bpl.n	80018dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018c2:	4831      	ldr	r0, [pc, #196]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018c4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80018c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80018ca:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018ce:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80018d2:	bf08      	it	eq
 80018d4:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80018d6:	430a      	orrs	r2, r1
 80018d8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80018dc:	f013 0f08 	tst.w	r3, #8
 80018e0:	bf18      	it	ne
 80018e2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80018e4:	0359      	lsls	r1, r3, #13
 80018e6:	d508      	bpl.n	80018fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80018e8:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80018ea:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80018ec:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80018f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018f4:	4302      	orrs	r2, r0
 80018f6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80018fa:	021a      	lsls	r2, r3, #8
 80018fc:	d509      	bpl.n	8001912 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80018fe:	4922      	ldr	r1, [pc, #136]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001900:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001904:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001908:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800190c:	4302      	orrs	r2, r0
 800190e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001912:	2e01      	cmp	r6, #1
 8001914:	f000 80b5 	beq.w	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001918:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800191c:	f000 80b1 	beq.w	8001a82 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001920:	2d01      	cmp	r5, #1
 8001922:	d175      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001924:	4d18      	ldr	r5, [pc, #96]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001926:	682b      	ldr	r3, [r5, #0]
 8001928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800192e:	f7fe fe5f 	bl	80005f0 <HAL_GetTick>
 8001932:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001934:	682b      	ldr	r3, [r5, #0]
 8001936:	009f      	lsls	r7, r3, #2
 8001938:	f100 8127 	bmi.w	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800193c:	6821      	ldr	r1, [r4, #0]
 800193e:	030e      	lsls	r6, r1, #12
 8001940:	d501      	bpl.n	8001946 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001942:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001944:	b11b      	cbz	r3, 800194e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001946:	02cd      	lsls	r5, r1, #11
 8001948:	d522      	bpl.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800194a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800194c:	bb03      	cbnz	r3, 8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800194e:	4a0e      	ldr	r2, [pc, #56]	; (8001988 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001950:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001954:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001958:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800195c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001960:	4303      	orrs	r3, r0
 8001962:	6960      	ldr	r0, [r4, #20]
 8001964:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001968:	69a0      	ldr	r0, [r4, #24]
 800196a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800196e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001972:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001976:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001978:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800197c:	3801      	subs	r0, #1
 800197e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001982:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001986:	e003      	b.n	8001990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001990:	0288      	lsls	r0, r1, #10
 8001992:	d515      	bpl.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001994:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001996:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800199a:	d111      	bne.n	80019c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800199c:	4a82      	ldr	r2, [pc, #520]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800199e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80019a2:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80019a6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80019aa:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80019ae:	4303      	orrs	r3, r0
 80019b0:	6960      	ldr	r0, [r4, #20]
 80019b2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80019b6:	6a20      	ldr	r0, [r4, #32]
 80019b8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80019c0:	070a      	lsls	r2, r1, #28
 80019c2:	d519      	bpl.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80019c4:	4978      	ldr	r1, [pc, #480]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80019c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80019ca:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80019ce:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80019d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019d6:	4313      	orrs	r3, r2
 80019d8:	6962      	ldr	r2, [r4, #20]
 80019da:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80019de:	69e2      	ldr	r2, [r4, #28]
 80019e0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80019e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80019e8:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80019ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80019ee:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80019f2:	4313      	orrs	r3, r2
 80019f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80019f8:	4c6b      	ldr	r4, [pc, #428]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80019fa:	6823      	ldr	r3, [r4, #0]
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a02:	f7fe fdf5 	bl	80005f0 <HAL_GetTick>
 8001a06:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f140 80c4 	bpl.w	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001a10:	2000      	movs	r0, #0
 8001a12:	e009      	b.n	8001a28 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8001a14:	2601      	movs	r6, #1
 8001a16:	e67b      	b.n	8001710 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a18:	f7fe fdea 	bl	80005f0 <HAL_GetTick>
 8001a1c:	eba0 0008 	sub.w	r0, r0, r8
 8001a20:	2864      	cmp	r0, #100	; 0x64
 8001a22:	f67f ae8d 	bls.w	8001740 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001a26:	2003      	movs	r0, #3
}
 8001a28:	b003      	add	sp, #12
 8001a2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a2e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a30:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001a34:	4293      	cmp	r3, r2
 8001a36:	f43f ae8d 	beq.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a3c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a46:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a48:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001a4a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a4e:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001a50:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a54:	07d8      	lsls	r0, r3, #31
 8001a56:	f57f ae7d 	bpl.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001a5a:	f7fe fdc9 	bl	80005f0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001a62:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a66:	0799      	lsls	r1, r3, #30
 8001a68:	f53f ae74 	bmi.w	8001754 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7fe fdc0 	bl	80005f0 <HAL_GetTick>
 8001a70:	eba0 0008 	sub.w	r0, r0, r8
 8001a74:	4548      	cmp	r0, r9
 8001a76:	d9f5      	bls.n	8001a64 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8001a78:	e7d5      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a7a:	6891      	ldr	r1, [r2, #8]
 8001a7c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001a80:	e678      	b.n	8001774 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001a82:	4e49      	ldr	r6, [pc, #292]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001a8a:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001a8c:	f7fe fdb0 	bl	80005f0 <HAL_GetTick>
 8001a90:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001a92:	6833      	ldr	r3, [r6, #0]
 8001a94:	011b      	lsls	r3, r3, #4
 8001a96:	d472      	bmi.n	8001b7e <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001a98:	6822      	ldr	r2, [r4, #0]
 8001a9a:	07d7      	lsls	r7, r2, #31
 8001a9c:	d512      	bpl.n	8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001a9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001aa0:	b983      	cbnz	r3, 8001ac4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001aa2:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001aa6:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001aaa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aae:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ab2:	430b      	orrs	r3, r1
 8001ab4:	6861      	ldr	r1, [r4, #4]
 8001ab6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001aba:	68a1      	ldr	r1, [r4, #8]
 8001abc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001ac0:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ac4:	0316      	lsls	r6, r2, #12
 8001ac6:	d503      	bpl.n	8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x438>
 8001ac8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ace:	d005      	beq.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x444>
 8001ad0:	02d0      	lsls	r0, r2, #11
 8001ad2:	d51e      	bpl.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ad6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ada:	d11a      	bne.n	8001b12 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001adc:	4932      	ldr	r1, [pc, #200]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001ade:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ae2:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ae6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001aea:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001aee:	4303      	orrs	r3, r0
 8001af0:	6860      	ldr	r0, [r4, #4]
 8001af2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001af6:	68e0      	ldr	r0, [r4, #12]
 8001af8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001afc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001b00:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8001b04:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b06:	f020 001f 	bic.w	r0, r0, #31
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	4303      	orrs	r3, r0
 8001b0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b12:	01d1      	lsls	r1, r2, #7
 8001b14:	d511      	bpl.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001b16:	4924      	ldr	r1, [pc, #144]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b18:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001b1c:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001b20:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001b24:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001b28:	4303      	orrs	r3, r0
 8001b2a:	6860      	ldr	r0, [r4, #4]
 8001b2c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001b30:	6920      	ldr	r0, [r4, #16]
 8001b32:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001b36:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001b3a:	0192      	lsls	r2, r2, #6
 8001b3c:	d50d      	bpl.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001b3e:	6923      	ldr	r3, [r4, #16]
 8001b40:	6862      	ldr	r2, [r4, #4]
 8001b42:	041b      	lsls	r3, r3, #16
 8001b44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001b48:	68e2      	ldr	r2, [r4, #12]
 8001b4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001b4e:	68a2      	ldr	r2, [r4, #8]
 8001b50:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b56:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8001b5a:	4e13      	ldr	r6, [pc, #76]	; (8001ba8 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001b5c:	6833      	ldr	r3, [r6, #0]
 8001b5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b62:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001b64:	f7fe fd44 	bl	80005f0 <HAL_GetTick>
 8001b68:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001b6a:	6833      	ldr	r3, [r6, #0]
 8001b6c:	011b      	lsls	r3, r3, #4
 8001b6e:	f53f aed7 	bmi.w	8001920 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b72:	f7fe fd3d 	bl	80005f0 <HAL_GetTick>
 8001b76:	1bc0      	subs	r0, r0, r7
 8001b78:	2864      	cmp	r0, #100	; 0x64
 8001b7a:	d9f6      	bls.n	8001b6a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001b7c:	e753      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001b7e:	f7fe fd37 	bl	80005f0 <HAL_GetTick>
 8001b82:	1bc0      	subs	r0, r0, r7
 8001b84:	2864      	cmp	r0, #100	; 0x64
 8001b86:	d984      	bls.n	8001a92 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8001b88:	e74d      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b8a:	f7fe fd31 	bl	80005f0 <HAL_GetTick>
 8001b8e:	1b80      	subs	r0, r0, r6
 8001b90:	2864      	cmp	r0, #100	; 0x64
 8001b92:	f67f aecf 	bls.w	8001934 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8001b96:	e746      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8001b98:	f7fe fd2a 	bl	80005f0 <HAL_GetTick>
 8001b9c:	1b40      	subs	r0, r0, r5
 8001b9e:	2864      	cmp	r0, #100	; 0x64
 8001ba0:	f67f af32 	bls.w	8001a08 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001ba4:	e73f      	b.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800

08001bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bac:	b570      	push	{r4, r5, r6, lr}
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bae:	4604      	mov	r4, r0
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	d04e      	beq.n	8001c52 <HAL_SPI_Init+0xa6>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bb8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8001bbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001bc0:	b91b      	cbnz	r3, 8001bca <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bc2:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001bc6:	f009 f86f 	bl	800aca8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001bca:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bcc:	6821      	ldr	r1, [r4, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bce:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001bd0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 8001bd4:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bd6:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 8001bda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001bde:	600b      	str	r3, [r1, #0]
 8001be0:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001be4:	d932      	bls.n	8001c4c <HAL_SPI_Init+0xa0>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001be6:	4618      	mov	r0, r3
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001be8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bec:	bf18      	it	ne
 8001bee:	62a3      	strne	r3, [r4, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001bf0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bf2:	b92b      	cbnz	r3, 8001c00 <HAL_SPI_Init+0x54>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001bf4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001bf8:	bf8c      	ite	hi
 8001bfa:	2302      	movhi	r3, #2
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001bfc:	2301      	movls	r3, #1
 8001bfe:	6323      	str	r3, [r4, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c00:	68a6      	ldr	r6, [r4, #8]
 8001c02:	6863      	ldr	r3, [r4, #4]
 8001c04:	69a5      	ldr	r5, [r4, #24]
 8001c06:	4333      	orrs	r3, r6
 8001c08:	6926      	ldr	r6, [r4, #16]
 8001c0a:	4333      	orrs	r3, r6
 8001c0c:	6966      	ldr	r6, [r4, #20]
 8001c0e:	4333      	orrs	r3, r6
 8001c10:	69e6      	ldr	r6, [r4, #28]
 8001c12:	4333      	orrs	r3, r6
 8001c14:	6a26      	ldr	r6, [r4, #32]
 8001c16:	4333      	orrs	r3, r6
 8001c18:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c1a:	4333      	orrs	r3, r6
 8001c1c:	f405 7600 	and.w	r6, r5, #512	; 0x200
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c20:	0c2d      	lsrs	r5, r5, #16
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c22:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c24:	f005 0504 	and.w	r5, r5, #4
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001c28:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c30:	431a      	orrs	r2, r3
 8001c32:	432a      	orrs	r2, r5
 8001c34:	4302      	orrs	r2, r0
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c36:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001c38:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c3a:	69cb      	ldr	r3, [r1, #28]
 8001c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001c40:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8001c42:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c44:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001c46:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d

  return HAL_OK;
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c4c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001c50:	e7cc      	b.n	8001bec <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8001c52:	2001      	movs	r0, #1
}
 8001c54:	bd70      	pop	{r4, r5, r6, pc}

08001c56 <HAL_TIM_Base_MspInit>:
 8001c56:	4770      	bx	lr

08001c58 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	6803      	ldr	r3, [r0, #0]
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
      
  /* Return function status */
  return HAL_OK;
}
 8001c5a:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]
}
 8001c6c:	4770      	bx	lr

08001c6e <HAL_TIM_OC_DelayElapsedCallback>:
 8001c6e:	4770      	bx	lr

08001c70 <HAL_TIM_IC_CaptureCallback>:
 8001c70:	4770      	bx	lr

08001c72 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001c72:	4770      	bx	lr

08001c74 <HAL_TIM_TriggerCallback>:
 8001c74:	4770      	bx	lr

08001c76 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c76:	6803      	ldr	r3, [r0, #0]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	0791      	lsls	r1, r2, #30
{
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c80:	d50f      	bpl.n	8001ca2 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	0792      	lsls	r2, r2, #30
 8001c86:	d50c      	bpl.n	8001ca2 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c88:	f06f 0202 	mvn.w	r2, #2
 8001c8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c8e:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001c90:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c92:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001c94:	0799      	lsls	r1, r3, #30
 8001c96:	f000 8085 	beq.w	8001da4 <HAL_TIM_IRQHandler+0x12e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c9a:	f7ff ffe9 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ca2:	6823      	ldr	r3, [r4, #0]
 8001ca4:	691a      	ldr	r2, [r3, #16]
 8001ca6:	0752      	lsls	r2, r2, #29
 8001ca8:	d510      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001caa:	68da      	ldr	r2, [r3, #12]
 8001cac:	0750      	lsls	r0, r2, #29
 8001cae:	d50d      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb0:	f06f 0204 	mvn.w	r2, #4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb8:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001cba:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cbc:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001cbe:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001cc2:	d075      	beq.n	8001db0 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc4:	f7ff ffd4 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	691a      	ldr	r2, [r3, #16]
 8001cd0:	0711      	lsls	r1, r2, #28
 8001cd2:	d50f      	bpl.n	8001cf4 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	0712      	lsls	r2, r2, #28
 8001cd8:	d50c      	bpl.n	8001cf4 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001cda:	f06f 0208 	mvn.w	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cde:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce2:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001ce4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ce6:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001ce8:	079b      	lsls	r3, r3, #30
 8001cea:	d067      	beq.n	8001dbc <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001cec:	f7ff ffc0 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001cf4:	6823      	ldr	r3, [r4, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	06d0      	lsls	r0, r2, #27
 8001cfa:	d510      	bpl.n	8001d1e <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001cfc:	68da      	ldr	r2, [r3, #12]
 8001cfe:	06d1      	lsls	r1, r2, #27
 8001d00:	d50d      	bpl.n	8001d1e <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d02:	f06f 0210 	mvn.w	r2, #16
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d06:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0a:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d0c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d0e:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001d10:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d14:	d058      	beq.n	8001dc8 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	f7ff ffab 	bl	8001c70 <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001d1e:	6823      	ldr	r3, [r4, #0]
 8001d20:	691a      	ldr	r2, [r3, #16]
 8001d22:	07d2      	lsls	r2, r2, #31
 8001d24:	d508      	bpl.n	8001d38 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001d26:	68da      	ldr	r2, [r3, #12]
 8001d28:	07d0      	lsls	r0, r2, #31
 8001d2a:	d505      	bpl.n	8001d38 <HAL_TIM_IRQHandler+0xc2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d2c:	f06f 0201 	mvn.w	r2, #1
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d30:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001d32:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d34:	f008 ff68 	bl	800ac08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d38:	6823      	ldr	r3, [r4, #0]
 8001d3a:	691a      	ldr	r2, [r3, #16]
 8001d3c:	0611      	lsls	r1, r2, #24
 8001d3e:	d508      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	0612      	lsls	r2, r2, #24
 8001d44:	d505      	bpl.n	8001d52 <HAL_TIM_IRQHandler+0xdc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d46:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d4e:	f000 f8c6 	bl	8001ede <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001d52:	6823      	ldr	r3, [r4, #0]
 8001d54:	691a      	ldr	r2, [r3, #16]
 8001d56:	05d0      	lsls	r0, r2, #23
 8001d58:	d508      	bpl.n	8001d6c <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	0611      	lsls	r1, r2, #24
 8001d5e:	d505      	bpl.n	8001d6c <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d64:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d66:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001d68:	f000 f8b9 	bl	8001ede <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d6c:	6823      	ldr	r3, [r4, #0]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	0652      	lsls	r2, r2, #25
 8001d72:	d508      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001d74:	68da      	ldr	r2, [r3, #12]
 8001d76:	0650      	lsls	r0, r2, #25
 8001d78:	d505      	bpl.n	8001d86 <HAL_TIM_IRQHandler+0x110>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d7e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d80:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001d82:	f7ff ff77 	bl	8001c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d86:	6823      	ldr	r3, [r4, #0]
 8001d88:	691a      	ldr	r2, [r3, #16]
 8001d8a:	0691      	lsls	r1, r2, #26
 8001d8c:	d522      	bpl.n	8001dd4 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	0692      	lsls	r2, r2, #26
 8001d92:	d51f      	bpl.n	8001dd4 <HAL_TIM_IRQHandler+0x15e>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d94:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8001d98:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d9a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001da0:	f000 b89c 	b.w	8001edc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da4:	f7ff ff63 	bl	8001c6e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001da8:	4620      	mov	r0, r4
 8001daa:	f7ff ff62 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dae:	e776      	b.n	8001c9e <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001db0:	f7ff ff5d 	bl	8001c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7ff ff5c 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dba:	e785      	b.n	8001cc8 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbc:	f7ff ff57 	bl	8001c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	4620      	mov	r0, r4
 8001dc2:	f7ff ff56 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dc6:	e793      	b.n	8001cf0 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc8:	f7ff ff51 	bl	8001c6e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff ff50 	bl	8001c72 <HAL_TIM_PWM_PulseFinishedCallback>
 8001dd2:	e7a2      	b.n	8001d1a <HAL_TIM_IRQHandler+0xa4>
 8001dd4:	bd10      	pop	{r4, pc}
	...

08001dd8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001dd8:	4a30      	ldr	r2, [pc, #192]	; (8001e9c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8001dda:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8001ddc:	4290      	cmp	r0, r2
 8001dde:	d012      	beq.n	8001e06 <TIM_Base_SetConfig+0x2e>
 8001de0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001de4:	d00f      	beq.n	8001e06 <TIM_Base_SetConfig+0x2e>
 8001de6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8001dea:	4290      	cmp	r0, r2
 8001dec:	d00b      	beq.n	8001e06 <TIM_Base_SetConfig+0x2e>
 8001dee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001df2:	4290      	cmp	r0, r2
 8001df4:	d007      	beq.n	8001e06 <TIM_Base_SetConfig+0x2e>
 8001df6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001dfa:	4290      	cmp	r0, r2
 8001dfc:	d003      	beq.n	8001e06 <TIM_Base_SetConfig+0x2e>
 8001dfe:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e02:	4290      	cmp	r0, r2
 8001e04:	d11d      	bne.n	8001e42 <TIM_Base_SetConfig+0x6a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001e06:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001e0c:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e0e:	4a23      	ldr	r2, [pc, #140]	; (8001e9c <TIM_Base_SetConfig+0xc4>)
 8001e10:	4290      	cmp	r0, r2
 8001e12:	d104      	bne.n	8001e1e <TIM_Base_SetConfig+0x46>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e18:	68ca      	ldr	r2, [r1, #12]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	e028      	b.n	8001e70 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8001e1e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001e22:	d0f7      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e24:	4a1e      	ldr	r2, [pc, #120]	; (8001ea0 <TIM_Base_SetConfig+0xc8>)
 8001e26:	4290      	cmp	r0, r2
 8001e28:	d0f4      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e2e:	4290      	cmp	r0, r2
 8001e30:	d0f0      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e32:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e36:	4290      	cmp	r0, r2
 8001e38:	d0ec      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e3a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001e3e:	4290      	cmp	r0, r2
 8001e40:	d0e8      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e42:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <TIM_Base_SetConfig+0xcc>)
 8001e44:	4290      	cmp	r0, r2
 8001e46:	d0e5      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e4c:	4290      	cmp	r0, r2
 8001e4e:	d0e1      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e54:	4290      	cmp	r0, r2
 8001e56:	d0dd      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e58:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001e5c:	4290      	cmp	r0, r2
 8001e5e:	d0d9      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e60:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d0d5      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
 8001e68:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001e6c:	4290      	cmp	r0, r2
 8001e6e:	d0d1      	beq.n	8001e14 <TIM_Base_SetConfig+0x3c>
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e70:	694a      	ldr	r2, [r1, #20]
 8001e72:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001e76:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001e78:	6003      	str	r3, [r0, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e7a:	688b      	ldr	r3, [r1, #8]
 8001e7c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001e7e:	680b      	ldr	r3, [r1, #0]
 8001e80:	6283      	str	r3, [r0, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8001e82:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <TIM_Base_SetConfig+0xc4>)
 8001e84:	4298      	cmp	r0, r3
 8001e86:	d006      	beq.n	8001e96 <TIM_Base_SetConfig+0xbe>
 8001e88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e8c:	4298      	cmp	r0, r3
 8001e8e:	d002      	beq.n	8001e96 <TIM_Base_SetConfig+0xbe>
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e90:	2301      	movs	r3, #1
 8001e92:	6143      	str	r3, [r0, #20]
}
 8001e94:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 8001e96:	690b      	ldr	r3, [r1, #16]
 8001e98:	6303      	str	r3, [r0, #48]	; 0x30
 8001e9a:	e7f9      	b.n	8001e90 <TIM_Base_SetConfig+0xb8>
 8001e9c:	40010000 	.word	0x40010000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40014000 	.word	0x40014000

08001ea8 <HAL_TIM_Base_Init>:
{ 
 8001ea8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001eaa:	4604      	mov	r4, r0
 8001eac:	b1a0      	cbz	r0, 8001ed8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8001eae:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001eb2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001eb6:	b91b      	cbnz	r3, 8001ec0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001eb8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001ebc:	f7ff fecb 	bl	8001c56 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001ec0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001ec2:	6820      	ldr	r0, [r4, #0]
 8001ec4:	1d21      	adds	r1, r4, #4
  htim->State= HAL_TIM_STATE_BUSY;
 8001ec6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001eca:	f7ff ff85 	bl	8001dd8 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8001ece:	2301      	movs	r3, #1
  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 8001ed2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001ed6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001ed8:	2001      	movs	r0, #1
}
 8001eda:	bd10      	pop	{r4, pc}

08001edc <HAL_TIMEx_CommutationCallback>:
 8001edc:	4770      	bx	lr

08001ede <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ede:	4770      	bx	lr

08001ee0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee4:	9d06      	ldr	r5, [sp, #24]
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	460f      	mov	r7, r1
 8001eea:	4616      	mov	r6, r2
 8001eec:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eee:	6821      	ldr	r1, [r4, #0]
 8001ef0:	69ca      	ldr	r2, [r1, #28]
 8001ef2:	ea37 0302 	bics.w	r3, r7, r2
 8001ef6:	bf0c      	ite	eq
 8001ef8:	2201      	moveq	r2, #1
 8001efa:	2200      	movne	r2, #0
 8001efc:	42b2      	cmp	r2, r6
 8001efe:	d002      	beq.n	8001f06 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001f00:	2000      	movs	r0, #0
}
 8001f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001f06:	1c6b      	adds	r3, r5, #1
 8001f08:	d0f2      	beq.n	8001ef0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001f0a:	b99d      	cbnz	r5, 8001f34 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f0c:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8001f0e:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001f16:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001f20:	2320      	movs	r3, #32
 8001f22:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001f26:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U)||((HAL_GetTick()-Tickstart) >=  Timeout))
 8001f34:	f7fe fb5c 	bl	80005f0 <HAL_GetTick>
 8001f38:	eba0 0008 	sub.w	r0, r0, r8
 8001f3c:	4285      	cmp	r5, r0
 8001f3e:	d8d6      	bhi.n	8001eee <UART_WaitOnFlagUntilTimeout+0xe>
 8001f40:	e7e4      	b.n	8001f0c <UART_WaitOnFlagUntilTimeout+0x2c>
	...

08001f44 <UART_SetConfig>:
  * @brief Configure the UART peripheral
  * @param huart uart handle
  * @retval None
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001f44:	b538      	push	{r3, r4, r5, lr}
 8001f46:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f48:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f4a:	69c3      	ldr	r3, [r0, #28]
 8001f4c:	6921      	ldr	r1, [r4, #16]
 8001f4e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f50:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f52:	430a      	orrs	r2, r1
 8001f54:	6961      	ldr	r1, [r4, #20]
 8001f56:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f58:	4993      	ldr	r1, [pc, #588]	; (80021a8 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001f5a:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f5c:	4001      	ands	r1, r0
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f5e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f60:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f62:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001f64:	602a      	str	r2, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f66:	686a      	ldr	r2, [r5, #4]
 8001f68:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	606a      	str	r2, [r5, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f70:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f72:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001f74:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001f76:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001f7e:	4a8b      	ldr	r2, [pc, #556]	; (80021ac <UART_SetConfig+0x268>)
 8001f80:	4295      	cmp	r5, r2
 8001f82:	d119      	bne.n	8001fb8 <UART_SetConfig+0x74>
 8001f84:	f502 3294 	add.w	r2, r2, #75776	; 0x12800
 8001f88:	4989      	ldr	r1, [pc, #548]	; (80021b0 <UART_SetConfig+0x26c>)
 8001f8a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001f8e:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f96:	5c8a      	ldrb	r2, [r1, r2]
 8001f98:	f040 80b3 	bne.w	8002102 <UART_SetConfig+0x1be>
  {
    switch (clocksource)
 8001f9c:	2a08      	cmp	r2, #8
 8001f9e:	f200 80ad 	bhi.w	80020fc <UART_SetConfig+0x1b8>
 8001fa2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8001fa6:	0026      	.short	0x0026
 8001fa8:	00e9007b 	.word	0x00e9007b
 8001fac:	00f500ab 	.word	0x00f500ab
 8001fb0:	00ab00ab 	.word	0x00ab00ab
 8001fb4:	00fb00ab 	.word	0x00fb00ab
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001fb8:	4a7e      	ldr	r2, [pc, #504]	; (80021b4 <UART_SetConfig+0x270>)
 8001fba:	4295      	cmp	r5, r2
 8001fbc:	d107      	bne.n	8001fce <UART_SetConfig+0x8a>
 8001fbe:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 8001fc2:	497d      	ldr	r1, [pc, #500]	; (80021b8 <UART_SetConfig+0x274>)
 8001fc4:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001fc8:	f002 020c 	and.w	r2, r2, #12
 8001fcc:	e7e1      	b.n	8001f92 <UART_SetConfig+0x4e>
 8001fce:	4a7b      	ldr	r2, [pc, #492]	; (80021bc <UART_SetConfig+0x278>)
 8001fd0:	4295      	cmp	r5, r2
 8001fd2:	d12b      	bne.n	800202c <UART_SetConfig+0xe8>
 8001fd4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
 8001fd8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8001fdc:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8001fe0:	2a10      	cmp	r2, #16
 8001fe2:	f000 80d2 	beq.w	800218a <UART_SetConfig+0x246>
 8001fe6:	d816      	bhi.n	8002016 <UART_SetConfig+0xd2>
 8001fe8:	b9da      	cbnz	r2, 8002022 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001fee:	f040 809f 	bne.w	8002130 <UART_SetConfig+0x1ec>
    {
    case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001ff2:	f7ff fb13 	bl	800161c <HAL_RCC_GetPCLK1Freq>
      break;
    case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001ff6:	6861      	ldr	r1, [r4, #4]
 8001ff8:	084a      	lsrs	r2, r1, #1
 8001ffa:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001ffe:	fbb3 f3f1 	udiv	r3, r3, r1
 8002002:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002004:	2000      	movs	r0, #0
    default:
        ret = HAL_ERROR;
      break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002006:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800200a:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800200e:	6821      	ldr	r1, [r4, #0]
 8002010:	4313      	orrs	r3, r2
 8002012:	60cb      	str	r3, [r1, #12]
 8002014:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002016:	2a20      	cmp	r2, #32
 8002018:	f000 80ab 	beq.w	8002172 <UART_SetConfig+0x22e>
 800201c:	2a30      	cmp	r2, #48	; 0x30
 800201e:	f000 80ba 	beq.w	8002196 <UART_SetConfig+0x252>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002022:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002026:	d069      	beq.n	80020fc <UART_SetConfig+0x1b8>
    case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
      break;
      case UART_CLOCKSOURCE_UNDEFINED:
    default:
        ret = HAL_ERROR;
 8002028:	2001      	movs	r0, #1
    }
  }

  return ret;

}
 800202a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800202c:	4a64      	ldr	r2, [pc, #400]	; (80021c0 <UART_SetConfig+0x27c>)
 800202e:	4295      	cmp	r5, r2
 8002030:	d10e      	bne.n	8002050 <UART_SetConfig+0x10c>
 8002032:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
 8002036:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800203a:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800203e:	2a40      	cmp	r2, #64	; 0x40
 8002040:	f000 80a3 	beq.w	800218a <UART_SetConfig+0x246>
 8002044:	d9d0      	bls.n	8001fe8 <UART_SetConfig+0xa4>
 8002046:	2a80      	cmp	r2, #128	; 0x80
 8002048:	f000 8093 	beq.w	8002172 <UART_SetConfig+0x22e>
 800204c:	2ac0      	cmp	r2, #192	; 0xc0
 800204e:	e7e6      	b.n	800201e <UART_SetConfig+0xda>
 8002050:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <UART_SetConfig+0x280>)
 8002052:	4295      	cmp	r5, r2
 8002054:	d110      	bne.n	8002078 <UART_SetConfig+0x134>
 8002056:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
 800205a:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 800205e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002062:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002066:	f000 8090 	beq.w	800218a <UART_SetConfig+0x246>
 800206a:	d9bd      	bls.n	8001fe8 <UART_SetConfig+0xa4>
 800206c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002070:	d07f      	beq.n	8002172 <UART_SetConfig+0x22e>
 8002072:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8002076:	e7d2      	b.n	800201e <UART_SetConfig+0xda>
 8002078:	4a53      	ldr	r2, [pc, #332]	; (80021c8 <UART_SetConfig+0x284>)
 800207a:	4295      	cmp	r5, r2
 800207c:	d117      	bne.n	80020ae <UART_SetConfig+0x16a>
 800207e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
 8002082:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 8002086:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 800208a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800208e:	d07c      	beq.n	800218a <UART_SetConfig+0x246>
 8002090:	d807      	bhi.n	80020a2 <UART_SetConfig+0x15e>
 8002092:	2a00      	cmp	r2, #0
 8002094:	d1c5      	bne.n	8002022 <UART_SetConfig+0xde>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800209a:	d154      	bne.n	8002146 <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800209c:	f7ff face 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 80020a0:	e7a9      	b.n	8001ff6 <UART_SetConfig+0xb2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020a2:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 80020a6:	d064      	beq.n	8002172 <UART_SetConfig+0x22e>
 80020a8:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80020ac:	e7b7      	b.n	800201e <UART_SetConfig+0xda>
 80020ae:	4a47      	ldr	r2, [pc, #284]	; (80021cc <UART_SetConfig+0x288>)
 80020b0:	4295      	cmp	r5, r2
 80020b2:	d10f      	bne.n	80020d4 <UART_SetConfig+0x190>
 80020b4:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80020b8:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80020bc:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 80020c0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80020c4:	d061      	beq.n	800218a <UART_SetConfig+0x246>
 80020c6:	d98f      	bls.n	8001fe8 <UART_SetConfig+0xa4>
 80020c8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80020cc:	d051      	beq.n	8002172 <UART_SetConfig+0x22e>
 80020ce:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80020d2:	e7a4      	b.n	800201e <UART_SetConfig+0xda>
 80020d4:	4a3e      	ldr	r2, [pc, #248]	; (80021d0 <UART_SetConfig+0x28c>)
 80020d6:	4295      	cmp	r5, r2
 80020d8:	d1a3      	bne.n	8002022 <UART_SetConfig+0xde>
 80020da:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
 80020de:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 80020e2:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80020e6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80020ea:	d04e      	beq.n	800218a <UART_SetConfig+0x246>
 80020ec:	f67f af7c 	bls.w	8001fe8 <UART_SetConfig+0xa4>
 80020f0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80020f4:	d03d      	beq.n	8002172 <UART_SetConfig+0x22e>
 80020f6:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 80020fa:	e790      	b.n	800201e <UART_SetConfig+0xda>
        ret = HAL_ERROR;
 80020fc:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80020fe:	2300      	movs	r3, #0
 8002100:	e781      	b.n	8002006 <UART_SetConfig+0xc2>
    switch (clocksource)
 8002102:	2a08      	cmp	r2, #8
 8002104:	d890      	bhi.n	8002028 <UART_SetConfig+0xe4>
 8002106:	a301      	add	r3, pc, #4	; (adr r3, 800210c <UART_SetConfig+0x1c8>)
 8002108:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 800210c:	08002131 	.word	0x08002131
 8002110:	08002147 	.word	0x08002147
 8002114:	0800214d 	.word	0x0800214d
 8002118:	08002029 	.word	0x08002029
 800211c:	08002163 	.word	0x08002163
 8002120:	08002029 	.word	0x08002029
 8002124:	08002029 	.word	0x08002029
 8002128:	08002029 	.word	0x08002029
 800212c:	08002169 	.word	0x08002169
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002130:	f7ff fa74 	bl	800161c <HAL_RCC_GetPCLK1Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002134:	6863      	ldr	r3, [r4, #4]
 8002136:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800213a:	fbb0 f0f3 	udiv	r0, r0, r3
 800213e:	b280      	uxth	r0, r0
 8002140:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002142:	2000      	movs	r0, #0
      break;
 8002144:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002146:	f7ff fa79 	bl	800163c <HAL_RCC_GetPCLK2Freq>
 800214a:	e7f3      	b.n	8002134 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800214c:	6862      	ldr	r2, [r4, #4]
 800214e:	0853      	lsrs	r3, r2, #1
 8002150:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002154:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002158:	fbb3 f3f2 	udiv	r3, r3, r2
 800215c:	b29b      	uxth	r3, r3
 800215e:	60eb      	str	r3, [r5, #12]
 8002160:	e7ef      	b.n	8002142 <UART_SetConfig+0x1fe>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002162:	f7ff f989 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8002166:	e7e5      	b.n	8002134 <UART_SetConfig+0x1f0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002168:	6862      	ldr	r2, [r4, #4]
 800216a:	0853      	lsrs	r3, r2, #1
 800216c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002170:	e7f2      	b.n	8002158 <UART_SetConfig+0x214>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002172:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002176:	d1e9      	bne.n	800214c <UART_SetConfig+0x208>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002178:	6860      	ldr	r0, [r4, #4]
 800217a:	0843      	lsrs	r3, r0, #1
 800217c:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002180:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002184:	fbb3 f3f0 	udiv	r3, r3, r0
 8002188:	e73b      	b.n	8002002 <UART_SetConfig+0xbe>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800218a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800218e:	d1e8      	bne.n	8002162 <UART_SetConfig+0x21e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002190:	f7ff f972 	bl	8001478 <HAL_RCC_GetSysClockFreq>
 8002194:	e72f      	b.n	8001ff6 <UART_SetConfig+0xb2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002196:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800219a:	d1e5      	bne.n	8002168 <UART_SetConfig+0x224>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800219c:	6860      	ldr	r0, [r4, #4]
 800219e:	0843      	lsrs	r3, r0, #1
 80021a0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80021a4:	e7ee      	b.n	8002184 <UART_SetConfig+0x240>
 80021a6:	bf00      	nop
 80021a8:	efff69f3 	.word	0xefff69f3
 80021ac:	40011000 	.word	0x40011000
 80021b0:	0800c044 	.word	0x0800c044
 80021b4:	40004400 	.word	0x40004400
 80021b8:	0800c048 	.word	0x0800c048
 80021bc:	40004800 	.word	0x40004800
 80021c0:	40004c00 	.word	0x40004c00
 80021c4:	40005000 	.word	0x40005000
 80021c8:	40011400 	.word	0x40011400
 80021cc:	40007800 	.word	0x40007800
 80021d0:	40007c00 	.word	0x40007c00

080021d4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80021d6:	07da      	lsls	r2, r3, #31
{
 80021d8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80021da:	d506      	bpl.n	80021ea <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80021dc:	6801      	ldr	r1, [r0, #0]
 80021de:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80021e0:	684a      	ldr	r2, [r1, #4]
 80021e2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80021e6:	4322      	orrs	r2, r4
 80021e8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80021ea:	079c      	lsls	r4, r3, #30
 80021ec:	d506      	bpl.n	80021fc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80021ee:	6801      	ldr	r1, [r0, #0]
 80021f0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80021f2:	684a      	ldr	r2, [r1, #4]
 80021f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021f8:	4322      	orrs	r2, r4
 80021fa:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80021fc:	0759      	lsls	r1, r3, #29
 80021fe:	d506      	bpl.n	800220e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002200:	6801      	ldr	r1, [r0, #0]
 8002202:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002204:	684a      	ldr	r2, [r1, #4]
 8002206:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800220a:	4322      	orrs	r2, r4
 800220c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800220e:	071a      	lsls	r2, r3, #28
 8002210:	d506      	bpl.n	8002220 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002212:	6801      	ldr	r1, [r0, #0]
 8002214:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002216:	684a      	ldr	r2, [r1, #4]
 8002218:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221c:	4322      	orrs	r2, r4
 800221e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002220:	06dc      	lsls	r4, r3, #27
 8002222:	d506      	bpl.n	8002232 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002224:	6801      	ldr	r1, [r0, #0]
 8002226:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002228:	688a      	ldr	r2, [r1, #8]
 800222a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222e:	4322      	orrs	r2, r4
 8002230:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002232:	0699      	lsls	r1, r3, #26
 8002234:	d506      	bpl.n	8002244 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002236:	6801      	ldr	r1, [r0, #0]
 8002238:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800223a:	688a      	ldr	r2, [r1, #8]
 800223c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002240:	4322      	orrs	r2, r4
 8002242:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002244:	065a      	lsls	r2, r3, #25
 8002246:	d510      	bpl.n	800226a <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002248:	6801      	ldr	r1, [r0, #0]
 800224a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800224c:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800224e:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002252:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002256:	ea42 0204 	orr.w	r2, r2, r4
 800225a:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800225c:	d105      	bne.n	800226a <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800225e:	684a      	ldr	r2, [r1, #4]
 8002260:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002262:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002266:	4322      	orrs	r2, r4
 8002268:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800226a:	061b      	lsls	r3, r3, #24
 800226c:	d506      	bpl.n	800227c <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800226e:	6802      	ldr	r2, [r0, #0]
 8002270:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002272:	6853      	ldr	r3, [r2, #4]
 8002274:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002278:	430b      	orrs	r3, r1
 800227a:	6053      	str	r3, [r2, #4]
 800227c:	bd10      	pop	{r4, pc}

0800227e <UART_CheckIdleState>:
  * @brief Check the UART Idle State
  * @param huart uart handle
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800227e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002280:	2500      	movs	r5, #0
{
 8002282:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002284:	66c5      	str	r5, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002286:	f7fe f9b3 	bl	80005f0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800228a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800228c:	4603      	mov	r3, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	0712      	lsls	r2, r2, #28
 8002292:	d409      	bmi.n	80022a8 <UART_CheckIdleState+0x2a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState= HAL_UART_STATE_READY;
 8002294:	2320      	movs	r3, #32
  huart->RxState= HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002296:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 8002298:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800229c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState= HAL_UART_STATE_READY;
 80022a0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  return HAL_OK;
}
 80022a4:	b003      	add	sp, #12
 80022a6:	bd30      	pop	{r4, r5, pc}
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80022a8:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80022ac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80022b0:	4620      	mov	r0, r4
 80022b2:	9200      	str	r2, [sp, #0]
 80022b4:	462a      	mov	r2, r5
 80022b6:	f7ff fe13 	bl	8001ee0 <UART_WaitOnFlagUntilTimeout>
 80022ba:	2800      	cmp	r0, #0
 80022bc:	d0ea      	beq.n	8002294 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80022be:	2003      	movs	r0, #3
 80022c0:	e7f0      	b.n	80022a4 <UART_CheckIdleState+0x26>

080022c2 <HAL_UART_Init>:
{
 80022c2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80022c4:	4604      	mov	r4, r0
 80022c6:	b360      	cbz	r0, 8002322 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80022c8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80022cc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80022d0:	b91b      	cbnz	r3, 80022da <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80022d2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80022d6:	f008 fd19 	bl	800ad0c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80022da:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80022dc:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022de:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80022e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80022e4:	6813      	ldr	r3, [r2, #0]
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022ec:	f7ff fe2a 	bl	8001f44 <UART_SetConfig>
 80022f0:	2801      	cmp	r0, #1
 80022f2:	d016      	beq.n	8002322 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80022f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80022f6:	b113      	cbz	r3, 80022fe <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff ff6b 	bl	80021d4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022fe:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8002300:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002308:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002310:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
}
 8002318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800231c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800231e:	f7ff bfae 	b.w	800227e <UART_CheckIdleState>
}
 8002322:	2001      	movs	r0, #1
 8002324:	bd10      	pop	{r4, pc}
	...

08002328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002328:	4b0a      	ldr	r3, [pc, #40]	; (8002354 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800232a:	3b01      	subs	r3, #1
 800232c:	d101      	bne.n	8002332 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800232e:	2003      	movs	r0, #3
 8002330:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002332:	6902      	ldr	r2, [r0, #16]
 8002334:	2a00      	cmp	r2, #0
 8002336:	daf8      	bge.n	800232a <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002338:	6903      	ldr	r3, [r0, #16]
 800233a:	4a06      	ldr	r2, [pc, #24]	; (8002354 <USB_CoreReset+0x2c>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002342:	3a01      	subs	r2, #1
 8002344:	d0f3      	beq.n	800232e <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002346:	6903      	ldr	r3, [r0, #16]
 8002348:	f013 0301 	ands.w	r3, r3, #1
 800234c:	d1f9      	bne.n	8002342 <USB_CoreReset+0x1a>

  return HAL_OK;
 800234e:	4618      	mov	r0, r3
}
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	00030d41 	.word	0x00030d41

08002358 <USB_CoreInit>:
{
 8002358:	b084      	sub	sp, #16
 800235a:	b538      	push	{r3, r4, r5, lr}
 800235c:	ad05      	add	r5, sp, #20
 800235e:	4604      	mov	r4, r0
 8002360:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002364:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002366:	2b01      	cmp	r3, #1
 8002368:	d127      	bne.n	80023ba <USB_CoreInit+0x62>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800236a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800236c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002370:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002372:	68c3      	ldr	r3, [r0, #12]
 8002374:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002378:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800237c:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800237e:	68c3      	ldr	r3, [r0, #12]
 8002380:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002384:	60c3      	str	r3, [r0, #12]
    if(cfg.use_external_vbus == 1U)
 8002386:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002388:	2b01      	cmp	r3, #1
 800238a:	d103      	bne.n	8002394 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800238c:	68c3      	ldr	r3, [r0, #12]
 800238e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002392:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff ffc7 	bl	8002328 <USB_CoreReset>
  if(cfg.dma_enable == 1U)
 800239a:	9b08      	ldr	r3, [sp, #32]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80023a0:	68a3      	ldr	r3, [r4, #8]
 80023a2:	f043 0306 	orr.w	r3, r3, #6
 80023a6:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80023a8:	68a3      	ldr	r3, [r4, #8]
 80023aa:	f043 0320 	orr.w	r3, r3, #32
 80023ae:	60a3      	str	r3, [r4, #8]
}
 80023b0:	2000      	movs	r0, #0
 80023b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023b6:	b004      	add	sp, #16
 80023b8:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80023ba:	68c3      	ldr	r3, [r0, #12]
 80023bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023c0:	60c3      	str	r3, [r0, #12]
    (void)USB_CoreReset(USBx);
 80023c2:	f7ff ffb1 	bl	8002328 <USB_CoreReset>
    USBx->GCCFG = USB_OTG_GCCFG_PWRDWN;
 80023c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023ca:	63a3      	str	r3, [r4, #56]	; 0x38
 80023cc:	e7e5      	b.n	800239a <USB_CoreInit+0x42>

080023ce <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80023ce:	6883      	ldr	r3, [r0, #8]
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6083      	str	r3, [r0, #8]
}
 80023d6:	2000      	movs	r0, #0
 80023d8:	4770      	bx	lr

080023da <USB_SetCurrentMode>:
{
 80023da:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023dc:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80023de:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80023e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80023e4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80023e6:	d108      	bne.n	80023fa <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80023e8:	68c3      	ldr	r3, [r0, #12]
 80023ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80023ee:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80023f0:	2032      	movs	r0, #50	; 0x32
 80023f2:	f7fe f903 	bl	80005fc <HAL_Delay>
  return HAL_OK;
 80023f6:	2000      	movs	r0, #0
 80023f8:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80023fa:	b919      	cbnz	r1, 8002404 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80023fc:	68c3      	ldr	r3, [r0, #12]
 80023fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002402:	e7f4      	b.n	80023ee <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002404:	2001      	movs	r0, #1
}
 8002406:	bd08      	pop	{r3, pc}

08002408 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002408:	0189      	lsls	r1, r1, #6
 800240a:	4a07      	ldr	r2, [pc, #28]	; (8002428 <USB_FlushTxFifo+0x20>)
 800240c:	f041 0120 	orr.w	r1, r1, #32
 8002410:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002412:	3a01      	subs	r2, #1
 8002414:	d005      	beq.n	8002422 <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002416:	6903      	ldr	r3, [r0, #16]
 8002418:	f013 0320 	ands.w	r3, r3, #32
 800241c:	d1f9      	bne.n	8002412 <USB_FlushTxFifo+0xa>
  return HAL_OK;
 800241e:	4618      	mov	r0, r3
 8002420:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002422:	2003      	movs	r0, #3
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	00030d41 	.word	0x00030d41

0800242c <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800242c:	2310      	movs	r3, #16
 800242e:	4a06      	ldr	r2, [pc, #24]	; (8002448 <USB_FlushRxFifo+0x1c>)
 8002430:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002432:	3a01      	subs	r2, #1
 8002434:	d005      	beq.n	8002442 <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002436:	6903      	ldr	r3, [r0, #16]
 8002438:	f013 0310 	ands.w	r3, r3, #16
 800243c:	d1f9      	bne.n	8002432 <USB_FlushRxFifo+0x6>
  return HAL_OK;
 800243e:	4618      	mov	r0, r3
 8002440:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002442:	2003      	movs	r0, #3
}
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	00030d41 	.word	0x00030d41

0800244c <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 800244c:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002450:	4319      	orrs	r1, r3
 8002452:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002456:	2000      	movs	r0, #0
 8002458:	4770      	bx	lr
	...

0800245c <USB_DevInit>:
{
 800245c:	b084      	sub	sp, #16
 800245e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002462:	4604      	mov	r4, r0
 8002464:	a809      	add	r0, sp, #36	; 0x24
 8002466:	4688      	mov	r8, r1
 8002468:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 800246c:	2300      	movs	r3, #0
 800246e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002470:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8002472:	990e      	ldr	r1, [sp, #56]	; 0x38
    USBx->DIEPTXF[i] = 0U;
 8002474:	461d      	mov	r5, r3
 8002476:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002478:	f103 0040 	add.w	r0, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 800247c:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 800247e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
  for (i = 0U; i < 15U; i++)
 8002482:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002484:	6045      	str	r5, [r0, #4]
  for (i = 0U; i < 15U; i++)
 8002486:	d1f7      	bne.n	8002478 <USB_DevInit+0x1c>
  USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002488:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800248a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800248e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002490:	b95e      	cbnz	r6, 80024aa <USB_DevInit+0x4e>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002492:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002494:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002498:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800249a:	6823      	ldr	r3, [r4, #0]
 800249c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024a0:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80024a2:	6823      	ldr	r3, [r4, #0]
 80024a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024a8:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 80024aa:	2300      	movs	r3, #0
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80024ac:	2901      	cmp	r1, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80024ae:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  USBx_PCGCCTL = 0U;
 80024b2:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80024b6:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 80024ba:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  if(cfg.phy_itface == USB_OTG_ULPI_PHY)
 80024be:	d158      	bne.n	8002572 <USB_DevInit+0x116>
    if(cfg.speed == USB_OTG_SPEED_HIGH)
 80024c0:	2a00      	cmp	r2, #0
 80024c2:	d154      	bne.n	800256e <USB_DevInit+0x112>
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH);
 80024c4:	2100      	movs	r1, #0
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 80024c6:	4620      	mov	r0, r4
 80024c8:	f7ff ffc0 	bl	800244c <USB_SetDevSpeed>
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80024cc:	2110      	movs	r1, #16
 80024ce:	4620      	mov	r0, r4
 80024d0:	f7ff ff9a 	bl	8002408 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80024d4:	4620      	mov	r0, r4
 80024d6:	f7ff ffa9 	bl	800242c <USB_FlushRxFifo>
  USBx_DEVICE->DIEPMSK = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	f504 6210 	add.w	r2, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
      USBx_INEP(i)->DIEPCTL = 0U;
 80024e4:	4619      	mov	r1, r3
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80024e6:	f04f 6e00 	mov.w	lr, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80024ea:	f64f 3c7f 	movw	ip, #64383	; 0xfb7f
  USBx_DEVICE->DIEPMSK = 0U;
 80024ee:	612b      	str	r3, [r5, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80024f0:	616b      	str	r3, [r5, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80024f2:	61eb      	str	r3, [r5, #28]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80024f4:	4543      	cmp	r3, r8
 80024f6:	d140      	bne.n	800257a <USB_DevInit+0x11e>
 80024f8:	2100      	movs	r1, #0
 80024fa:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80024fe:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002502:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002506:	4608      	mov	r0, r1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002508:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800250c:	428b      	cmp	r3, r1
 800250e:	d146      	bne.n	800259e <USB_DevInit+0x142>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002510:	692b      	ldr	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 8002512:	2f01      	cmp	r7, #1
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002518:	612b      	str	r3, [r5, #16]
  if (cfg.dma_enable == 1U)
 800251a:	d107      	bne.n	800252c <USB_DevInit+0xd0>
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 800251c:	4b29      	ldr	r3, [pc, #164]	; (80025c4 <USB_DevInit+0x168>)
 800251e:	632b      	str	r3, [r5, #48]	; 0x30
    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8002520:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002522:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002526:	f043 0303 	orr.w	r3, r3, #3
 800252a:	632b      	str	r3, [r5, #48]	; 0x30
  USBx->GINTMSK = 0U;
 800252c:	2300      	movs	r3, #0
 800252e:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002530:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002534:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 8002536:	b91f      	cbnz	r7, 8002540 <USB_DevInit+0xe4>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002538:	69a3      	ldr	r3, [r4, #24]
 800253a:	f043 0310 	orr.w	r3, r3, #16
 800253e:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002540:	69a2      	ldr	r2, [r4, #24]
 8002542:	4b21      	ldr	r3, [pc, #132]	; (80025c8 <USB_DevInit+0x16c>)
 8002544:	4313      	orrs	r3, r2
 8002546:	61a3      	str	r3, [r4, #24]
  if(cfg.Sof_enable != 0U)
 8002548:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800254a:	b11b      	cbz	r3, 8002554 <USB_DevInit+0xf8>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800254c:	69a3      	ldr	r3, [r4, #24]
 800254e:	f043 0308 	orr.w	r3, r3, #8
 8002552:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002554:	2e01      	cmp	r6, #1
 8002556:	d105      	bne.n	8002564 <USB_DevInit+0x108>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002558:	69a3      	ldr	r3, [r4, #24]
 800255a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800255e:	f043 0304 	orr.w	r3, r3, #4
 8002562:	61a3      	str	r3, [r4, #24]
}
 8002564:	2000      	movs	r0, #0
 8002566:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800256a:	b004      	add	sp, #16
 800256c:	4770      	bx	lr
      (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800256e:	2101      	movs	r1, #1
 8002570:	e7a9      	b.n	80024c6 <USB_DevInit+0x6a>
  else if(cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8002572:	2903      	cmp	r1, #3
 8002574:	d0a4      	beq.n	80024c0 <USB_DevInit+0x64>
    (void)USB_SetDevSpeed (USBx, USB_OTG_SPEED_FULL);
 8002576:	2103      	movs	r1, #3
 8002578:	e7a5      	b.n	80024c6 <USB_DevInit+0x6a>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800257a:	f8d2 9000 	ldr.w	r9, [r2]
 800257e:	f1b9 0f00 	cmp.w	r9, #0
 8002582:	da0a      	bge.n	800259a <USB_DevInit+0x13e>
      if (i == 0U)
 8002584:	b93b      	cbnz	r3, 8002596 <USB_DevInit+0x13a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002586:	f8c2 e000 	str.w	lr, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 800258a:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800258c:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800258e:	f8c2 c008 	str.w	ip, [r2, #8]
 8002592:	3220      	adds	r2, #32
 8002594:	e7ae      	b.n	80024f4 <USB_DevInit+0x98>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002596:	6010      	str	r0, [r2, #0]
 8002598:	e7f7      	b.n	800258a <USB_DevInit+0x12e>
      USBx_INEP(i)->DIEPCTL = 0U;
 800259a:	6011      	str	r1, [r2, #0]
 800259c:	e7f5      	b.n	800258a <USB_DevInit+0x12e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800259e:	f8d2 9000 	ldr.w	r9, [r2]
 80025a2:	f1b9 0f00 	cmp.w	r9, #0
 80025a6:	da0b      	bge.n	80025c0 <USB_DevInit+0x164>
      if (i == 0U)
 80025a8:	b939      	cbnz	r1, 80025ba <USB_DevInit+0x15e>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80025aa:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80025ae:	6110      	str	r0, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80025b0:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80025b2:	f8c2 8008 	str.w	r8, [r2, #8]
 80025b6:	3220      	adds	r2, #32
 80025b8:	e7a8      	b.n	800250c <USB_DevInit+0xb0>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80025ba:	f8c2 e000 	str.w	lr, [r2]
 80025be:	e7f6      	b.n	80025ae <USB_DevInit+0x152>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80025c0:	6010      	str	r0, [r2, #0]
 80025c2:	e7f4      	b.n	80025ae <USB_DevInit+0x152>
 80025c4:	00800100 	.word	0x00800100
 80025c8:	803c3800 	.word	0x803c3800

080025cc <USB_DevDisconnect>:
{
 80025cc:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80025ce:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 80025d2:	f043 0302 	orr.w	r3, r3, #2
 80025d6:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 80025da:	2003      	movs	r0, #3
 80025dc:	f7fe f80e 	bl	80005fc <HAL_Delay>
}
 80025e0:	2000      	movs	r0, #0
 80025e2:	bd08      	pop	{r3, pc}

080025e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025e4:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80025e6:	f001 f8ab 	bl	8003740 <vTaskStartScheduler>
  
  return osOK;
}
 80025ea:	2000      	movs	r0, #0
 80025ec:	bd08      	pop	{r3, pc}

080025ee <osKernelSysTick>:
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025ee:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80025f2:	b10b      	cbz	r3, 80025f8 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80025f4:	f001 b8f2 	b.w	80037dc <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80025f8:	f001 b8ea 	b.w	80037d0 <xTaskGetTickCount>

080025fc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025fc:	b530      	push	{r4, r5, lr}

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025fe:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
{
 8002602:	b085      	sub	sp, #20
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002604:	8a02      	ldrh	r2, [r0, #16]
{
 8002606:	460b      	mov	r3, r1
  if (priority != osPriorityError) {
 8002608:	2c84      	cmp	r4, #132	; 0x84
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800260a:	e890 0022 	ldmia.w	r0, {r1, r5}
    fpriority += (priority - osPriorityIdle);
 800260e:	bf14      	ite	ne
 8002610:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002612:	2400      	moveq	r4, #0
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002614:	a803      	add	r0, sp, #12
 8002616:	9400      	str	r4, [sp, #0]
 8002618:	9001      	str	r0, [sp, #4]
 800261a:	4628      	mov	r0, r5
 800261c:	f000 ffc0 	bl	80035a0 <xTaskCreate>
 8002620:	2801      	cmp	r0, #1
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002622:	bf0c      	ite	eq
 8002624:	9803      	ldreq	r0, [sp, #12]
    return NULL;
 8002626:	2000      	movne	r0, #0
}
 8002628:	b005      	add	sp, #20
 800262a:	bd30      	pop	{r4, r5, pc}

0800262c <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800262c:	2800      	cmp	r0, #0
 800262e:	bf08      	it	eq
 8002630:	2001      	moveq	r0, #1
{
 8002632:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002634:	f001 f9e8 	bl	8003a08 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002638:	2000      	movs	r0, #0
 800263a:	bd08      	pop	{r3, pc}

0800263c <osMutexCreate>:
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 800263c:	2001      	movs	r0, #1
 800263e:	f000 bd51 	b.w	80030e4 <xQueueCreateMutex>
	...

08002644 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002644:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002646:	2400      	movs	r4, #0
{
 8002648:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 800264a:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 800264c:	b1e8      	cbz	r0, 800268a <osMutexWait+0x46>
 800264e:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8002652:	b1a3      	cbz	r3, 800267e <osMutexWait+0x3a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002654:	aa01      	add	r2, sp, #4
 8002656:	4621      	mov	r1, r4
 8002658:	f000 fee8 	bl	800342c <xQueueReceiveFromISR>
 800265c:	2801      	cmp	r0, #1
 800265e:	d002      	beq.n	8002666 <osMutexWait+0x22>
      return osErrorOS;
 8002660:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 8002662:	b002      	add	sp, #8
 8002664:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 8002666:	9b01      	ldr	r3, [sp, #4]
 8002668:	b13b      	cbz	r3, 800267a <osMutexWait+0x36>
 800266a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800266e:	4b08      	ldr	r3, [pc, #32]	; (8002690 <osMutexWait+0x4c>)
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	f3bf 8f4f 	dsb	sy
 8002676:	f3bf 8f6f 	isb	sy
  return osOK;
 800267a:	2000      	movs	r0, #0
 800267c:	e7f1      	b.n	8002662 <osMutexWait+0x1e>
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800267e:	4619      	mov	r1, r3
 8002680:	f000 fe0a 	bl	8003298 <xQueueGenericReceive>
 8002684:	2801      	cmp	r0, #1
 8002686:	d1eb      	bne.n	8002660 <osMutexWait+0x1c>
 8002688:	e7f7      	b.n	800267a <osMutexWait+0x36>
    return osErrorParameter;
 800268a:	2080      	movs	r0, #128	; 0x80
 800268c:	e7e9      	b.n	8002662 <osMutexWait+0x1e>
 800268e:	bf00      	nop
 8002690:	e000ed04 	.word	0xe000ed04

08002694 <osSemaphoreCreate>:
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 8002694:	2901      	cmp	r1, #1
{ 
 8002696:	4608      	mov	r0, r1
 8002698:	b510      	push	{r4, lr}
  if (count == 1) {
 800269a:	d10c      	bne.n	80026b6 <osSemaphoreCreate+0x22>
    vSemaphoreCreateBinary(sema);
 800269c:	2203      	movs	r2, #3
 800269e:	2100      	movs	r1, #0
 80026a0:	f000 fc3e 	bl	8002f20 <xQueueGenericCreate>
 80026a4:	4604      	mov	r4, r0
 80026a6:	b120      	cbz	r0, 80026b2 <osSemaphoreCreate+0x1e>
 80026a8:	2300      	movs	r3, #0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	f000 fc5b 	bl	8002f68 <xQueueGenericSend>
#else
    return NULL;
#endif
  }
#endif
}
 80026b2:	4620      	mov	r0, r4
 80026b4:	bd10      	pop	{r4, pc}
    return NULL;
 80026b6:	2400      	movs	r4, #0
 80026b8:	e7fb      	b.n	80026b2 <osSemaphoreCreate+0x1e>
	...

080026bc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80026bc:	b513      	push	{r0, r1, r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80026be:	2400      	movs	r4, #0
{
 80026c0:	460a      	mov	r2, r1
  portBASE_TYPE taskWoken = pdFALSE;  
 80026c2:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 80026c4:	b1e8      	cbz	r0, 8002702 <osSemaphoreWait+0x46>
 80026c6:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80026ca:	b1a3      	cbz	r3, 80026f6 <osSemaphoreWait+0x3a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80026cc:	aa01      	add	r2, sp, #4
 80026ce:	4621      	mov	r1, r4
 80026d0:	f000 feac 	bl	800342c <xQueueReceiveFromISR>
 80026d4:	2801      	cmp	r0, #1
 80026d6:	d002      	beq.n	80026de <osSemaphoreWait+0x22>
      return osErrorOS;
 80026d8:	20ff      	movs	r0, #255	; 0xff
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
    return osErrorOS;
  }
  
  return osOK;
}
 80026da:	b002      	add	sp, #8
 80026dc:	bd10      	pop	{r4, pc}
	portEND_SWITCHING_ISR(taskWoken);
 80026de:	9b01      	ldr	r3, [sp, #4]
 80026e0:	b13b      	cbz	r3, 80026f2 <osSemaphoreWait+0x36>
 80026e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <osSemaphoreWait+0x4c>)
 80026e8:	601a      	str	r2, [r3, #0]
 80026ea:	f3bf 8f4f 	dsb	sy
 80026ee:	f3bf 8f6f 	isb	sy
  return osOK;
 80026f2:	2000      	movs	r0, #0
 80026f4:	e7f1      	b.n	80026da <osSemaphoreWait+0x1e>
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80026f6:	4619      	mov	r1, r3
 80026f8:	f000 fdce 	bl	8003298 <xQueueGenericReceive>
 80026fc:	2801      	cmp	r0, #1
 80026fe:	d1eb      	bne.n	80026d8 <osSemaphoreWait+0x1c>
 8002700:	e7f7      	b.n	80026f2 <osSemaphoreWait+0x36>
    return osErrorParameter;
 8002702:	2080      	movs	r0, #128	; 0x80
 8002704:	e7e9      	b.n	80026da <osSemaphoreWait+0x1e>
 8002706:	bf00      	nop
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800270c:	b513      	push	{r0, r1, r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 800270e:	2400      	movs	r4, #0
 8002710:	9401      	str	r4, [sp, #4]
 8002712:	f3ef 8305 	mrs	r3, IPSR
  
  
  if (inHandlerMode()) {
 8002716:	b193      	cbz	r3, 800273e <osSemaphoreRelease+0x32>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002718:	a901      	add	r1, sp, #4
 800271a:	f000 fd5f 	bl	80031dc <xQueueGiveFromISR>
 800271e:	2801      	cmp	r0, #1
 8002720:	d113      	bne.n	800274a <osSemaphoreRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002722:	9b01      	ldr	r3, [sp, #4]
 8002724:	b913      	cbnz	r3, 800272c <osSemaphoreRelease+0x20>
  osStatus result = osOK;
 8002726:	2000      	movs	r0, #0
      result = osErrorOS;
    }
  }
  
  return result;
}
 8002728:	b002      	add	sp, #8
 800272a:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 800272c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <osSemaphoreRelease+0x44>)
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	e7f3      	b.n	8002726 <osSemaphoreRelease+0x1a>
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800273e:	461a      	mov	r2, r3
 8002740:	4619      	mov	r1, r3
 8002742:	f000 fc11 	bl	8002f68 <xQueueGenericSend>
 8002746:	2801      	cmp	r0, #1
 8002748:	d0ed      	beq.n	8002726 <osSemaphoreRelease+0x1a>
      result = osErrorOS;
 800274a:	20ff      	movs	r0, #255	; 0xff
 800274c:	e7ec      	b.n	8002728 <osSemaphoreRelease+0x1c>
 800274e:	bf00      	nop
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <osMutexRelease>:
 8002754:	f7ff bfda 	b.w	800270c <osSemaphoreRelease>

08002758 <osMessageCreate>:
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002758:	2200      	movs	r2, #0
 800275a:	c803      	ldmia	r0, {r0, r1}
 800275c:	f000 bbe0 	b.w	8002f20 <xQueueGenericCreate>

08002760 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002760:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8002762:	2400      	movs	r4, #0
{
 8002764:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002766:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8002768:	42a2      	cmp	r2, r4
 800276a:	bf08      	it	eq
 800276c:	2201      	moveq	r2, #1
 800276e:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 8002772:	b1ab      	cbz	r3, 80027a0 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002774:	4623      	mov	r3, r4
 8002776:	aa03      	add	r2, sp, #12
 8002778:	a901      	add	r1, sp, #4
 800277a:	f000 fcc5 	bl	8003108 <xQueueGenericSendFromISR>
 800277e:	2801      	cmp	r0, #1
 8002780:	d002      	beq.n	8002788 <osMessagePut+0x28>
      return osErrorOS;
 8002782:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002784:	b004      	add	sp, #16
 8002786:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8002788:	9b03      	ldr	r3, [sp, #12]
 800278a:	b13b      	cbz	r3, 800279c <osMessagePut+0x3c>
 800278c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <osMessagePut+0x4c>)
 8002792:	601a      	str	r2, [r3, #0]
 8002794:	f3bf 8f4f 	dsb	sy
 8002798:	f3bf 8f6f 	isb	sy
  return osOK;
 800279c:	2000      	movs	r0, #0
 800279e:	e7f1      	b.n	8002784 <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80027a0:	a901      	add	r1, sp, #4
 80027a2:	f000 fbe1 	bl	8002f68 <xQueueGenericSend>
 80027a6:	2801      	cmp	r0, #1
 80027a8:	d1eb      	bne.n	8002782 <osMessagePut+0x22>
 80027aa:	e7f7      	b.n	800279c <osMessagePut+0x3c>
 80027ac:	e000ed04 	.word	0xe000ed04

080027b0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80027b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80027b2:	2600      	movs	r6, #0
{
 80027b4:	b085      	sub	sp, #20
 80027b6:	4604      	mov	r4, r0
 80027b8:	4617      	mov	r7, r2
 80027ba:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80027bc:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80027be:	9602      	str	r6, [sp, #8]
 80027c0:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80027c2:	b911      	cbnz	r1, 80027ca <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80027c4:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	e016      	b.n	80027f8 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 80027ca:	9600      	str	r6, [sp, #0]
 80027cc:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80027d0:	b1cb      	cbz	r3, 8002806 <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80027d2:	466a      	mov	r2, sp
 80027d4:	a902      	add	r1, sp, #8
 80027d6:	f000 fe29 	bl	800342c <xQueueReceiveFromISR>
 80027da:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80027dc:	bf0a      	itet	eq
 80027de:	2310      	moveq	r3, #16
      event.status = osOK;
 80027e0:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 80027e2:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80027e4:	9b00      	ldr	r3, [sp, #0]
 80027e6:	b13b      	cbz	r3, 80027f8 <osMessageGet+0x48>
 80027e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <osMessageGet+0x70>)
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f3bf 8f4f 	dsb	sy
 80027f4:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80027f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80027fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002800:	4620      	mov	r0, r4
 8002802:	b005      	add	sp, #20
 8002804:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002806:	a902      	add	r1, sp, #8
 8002808:	f000 fd46 	bl	8003298 <xQueueGenericReceive>
 800280c:	2801      	cmp	r0, #1
 800280e:	d101      	bne.n	8002814 <osMessageGet+0x64>
      event.status = osEventMessage;
 8002810:	2310      	movs	r3, #16
 8002812:	e7d8      	b.n	80027c6 <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002814:	2f00      	cmp	r7, #0
 8002816:	bf0c      	ite	eq
 8002818:	2300      	moveq	r3, #0
 800281a:	2340      	movne	r3, #64	; 0x40
 800281c:	e7d3      	b.n	80027c6 <osMessageGet+0x16>
 800281e:	bf00      	nop
 8002820:	e000ed04 	.word	0xe000ed04

08002824 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002824:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002826:	f001 fa3f 	bl	8003ca8 <xTaskGetSchedulerState>
 800282a:	2801      	cmp	r0, #1
 800282c:	d003      	beq.n	8002836 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800282e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 8002832:	f000 b90f 	b.w	8002a54 <xPortSysTickHandler>
 8002836:	bd08      	pop	{r3, pc}

08002838 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002838:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002840:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002842:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002844:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002846:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002848:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800284a:	6003      	str	r3, [r0, #0]
 800284c:	4770      	bx	lr

0800284e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	6103      	str	r3, [r0, #16]
 8002852:	4770      	bx	lr

08002854 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002854:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002856:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002858:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800285a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002860:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002862:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002864:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002866:	3301      	adds	r3, #1
 8002868:	6003      	str	r3, [r0, #0]
 800286a:	4770      	bx	lr

0800286c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800286c:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800286e:	1c53      	adds	r3, r2, #1
{
 8002870:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8002872:	d10a      	bne.n	800288a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002874:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800287a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800287c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800287e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002880:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002882:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002884:	3301      	adds	r3, #1
 8002886:	6003      	str	r3, [r0, #0]
 8002888:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800288a:	f100 0308 	add.w	r3, r0, #8
 800288e:	685c      	ldr	r4, [r3, #4]
 8002890:	6825      	ldr	r5, [r4, #0]
 8002892:	42aa      	cmp	r2, r5
 8002894:	d3ef      	bcc.n	8002876 <vListInsert+0xa>
 8002896:	4623      	mov	r3, r4
 8002898:	e7f9      	b.n	800288e <vListInsert+0x22>

0800289a <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800289a:	6841      	ldr	r1, [r0, #4]
 800289c:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800289e:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80028a0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80028a2:	6882      	ldr	r2, [r0, #8]
 80028a4:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80028a6:	6859      	ldr	r1, [r3, #4]
 80028a8:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80028aa:	bf08      	it	eq
 80028ac:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80028ae:	2200      	movs	r2, #0
 80028b0:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80028b2:	6818      	ldr	r0, [r3, #0]
 80028b4:	3801      	subs	r0, #1
 80028b6:	6018      	str	r0, [r3, #0]

	return pxList->uxNumberOfItems;
}
 80028b8:	4770      	bx	lr
	...

080028bc <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80028bc:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <prvTaskExitError+0x34>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	3301      	adds	r3, #1
 80028c2:	d00a      	beq.n	80028da <prvTaskExitError+0x1e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c8:	b672      	cpsid	i
 80028ca:	f383 8811 	msr	BASEPRI, r3
 80028ce:	f3bf 8f6f 	isb	sy
 80028d2:	f3bf 8f4f 	dsb	sy
 80028d6:	b662      	cpsie	i
 80028d8:	e7fe      	b.n	80028d8 <prvTaskExitError+0x1c>
 80028da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028de:	b672      	cpsid	i
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	b662      	cpsie	i
 80028ee:	e7fe      	b.n	80028ee <prvTaskExitError+0x32>
 80028f0:	20000004 	.word	0x20000004

080028f4 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80028f4:	4806      	ldr	r0, [pc, #24]	; (8002910 <prvPortStartFirstTask+0x1c>)
 80028f6:	6800      	ldr	r0, [r0, #0]
 80028f8:	6800      	ldr	r0, [r0, #0]
 80028fa:	f380 8808 	msr	MSP, r0
 80028fe:	b662      	cpsie	i
 8002900:	b661      	cpsie	f
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	df00      	svc	0
 800290c:	bf00      	nop
 800290e:	0000      	.short	0x0000
 8002910:	e000ed08 	.word	0xe000ed08

08002914 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002914:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002924 <vPortEnableVFP+0x10>
 8002918:	6801      	ldr	r1, [r0, #0]
 800291a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800291e:	6001      	str	r1, [r0, #0]
 8002920:	4770      	bx	lr
 8002922:	0000      	.short	0x0000
 8002924:	e000ed88 	.word	0xe000ed88

08002928 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800292c:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002930:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8002934:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002936:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800293a:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800293c:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 800293e:	f06f 0302 	mvn.w	r3, #2
 8002942:	6203      	str	r3, [r0, #32]
}
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	080028bd 	.word	0x080028bd
 800294c:	00000000 	.word	0x00000000

08002950 <SVC_Handler>:
	__asm volatile (
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <pxCurrentTCBConst2>)
 8002952:	6819      	ldr	r1, [r3, #0]
 8002954:	6808      	ldr	r0, [r1, #0]
 8002956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	f380 8809 	msr	PSP, r0
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f380 8811 	msr	BASEPRI, r0
 800296a:	4770      	bx	lr
 800296c:	f3af 8000 	nop.w

08002970 <pxCurrentTCBConst2>:
 8002970:	20003cb4 	.word	0x20003cb4

08002974 <vPortEnterCritical>:
 8002974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002978:	b672      	cpsid	i
 800297a:	f383 8811 	msr	BASEPRI, r3
 800297e:	f3bf 8f6f 	isb	sy
 8002982:	f3bf 8f4f 	dsb	sy
 8002986:	b662      	cpsie	i
	uxCriticalNesting++;
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <vPortEnterCritical+0x44>)
 800298a:	6813      	ldr	r3, [r2, #0]
 800298c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800298e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8002990:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8002992:	d10f      	bne.n	80029b4 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002994:	4b09      	ldr	r3, [pc, #36]	; (80029bc <vPortEnterCritical+0x48>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f013 0fff 	tst.w	r3, #255	; 0xff
 800299c:	d00a      	beq.n	80029b4 <vPortEnterCritical+0x40>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	b672      	cpsid	i
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	b662      	cpsie	i
 80029b2:	e7fe      	b.n	80029b2 <vPortEnterCritical+0x3e>
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	20000004 	.word	0x20000004
 80029bc:	e000ed04 	.word	0xe000ed04

080029c0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80029c0:	4a09      	ldr	r2, [pc, #36]	; (80029e8 <vPortExitCritical+0x28>)
 80029c2:	6813      	ldr	r3, [r2, #0]
 80029c4:	b953      	cbnz	r3, 80029dc <vPortExitCritical+0x1c>
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	b672      	cpsid	i
 80029cc:	f383 8811 	msr	BASEPRI, r3
 80029d0:	f3bf 8f6f 	isb	sy
 80029d4:	f3bf 8f4f 	dsb	sy
 80029d8:	b662      	cpsie	i
 80029da:	e7fe      	b.n	80029da <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 80029dc:	3b01      	subs	r3, #1
 80029de:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029e0:	b90b      	cbnz	r3, 80029e6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	4770      	bx	lr
 80029e8:	20000004 	.word	0x20000004
 80029ec:	00000000 	.word	0x00000000

080029f0 <PendSV_Handler>:
	__asm volatile
 80029f0:	f3ef 8009 	mrs	r0, PSP
 80029f4:	f3bf 8f6f 	isb	sy
 80029f8:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <pxCurrentTCBConst>)
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	f01e 0f10 	tst.w	lr, #16
 8002a00:	bf08      	it	eq
 8002a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a0a:	6010      	str	r0, [r2, #0]
 8002a0c:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8002a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a14:	b672      	cpsid	i
 8002a16:	f380 8811 	msr	BASEPRI, r0
 8002a1a:	f3bf 8f4f 	dsb	sy
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	b662      	cpsie	i
 8002a24:	f001 f850 	bl	8003ac8 <vTaskSwitchContext>
 8002a28:	f04f 0000 	mov.w	r0, #0
 8002a2c:	f380 8811 	msr	BASEPRI, r0
 8002a30:	bc08      	pop	{r3}
 8002a32:	6819      	ldr	r1, [r3, #0]
 8002a34:	6808      	ldr	r0, [r1, #0]
 8002a36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a3a:	f01e 0f10 	tst.w	lr, #16
 8002a3e:	bf08      	it	eq
 8002a40:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a44:	f380 8809 	msr	PSP, r0
 8002a48:	f3bf 8f6f 	isb	sy
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop

08002a50 <pxCurrentTCBConst>:
 8002a50:	20003cb4 	.word	0x20003cb4

08002a54 <xPortSysTickHandler>:
{
 8002a54:	b508      	push	{r3, lr}
	__asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5a:	b672      	cpsid	i
 8002a5c:	f383 8811 	msr	BASEPRI, r3
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	f3bf 8f4f 	dsb	sy
 8002a68:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8002a6a:	f000 febf 	bl	80037ec <xTaskIncrementTick>
 8002a6e:	b118      	cbz	r0, 8002a78 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a74:	4b02      	ldr	r3, [pc, #8]	; (8002a80 <xPortSysTickHandler+0x2c>)
 8002a76:	601a      	str	r2, [r3, #0]
	__asm volatile
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	bd08      	pop	{r3, pc}
 8002a80:	e000ed04 	.word	0xe000ed04

08002a84 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <vPortSetupTimerInterrupt+0x1c>)
 8002a86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <vPortSetupTimerInterrupt+0x20>)
 8002a92:	3b01      	subs	r3, #1
 8002a94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a96:	2207      	movs	r2, #7
 8002a98:	4b03      	ldr	r3, [pc, #12]	; (8002aa8 <vPortSetupTimerInterrupt+0x24>)
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	e000e014 	.word	0xe000e014
 8002aa8:	e000e010 	.word	0xe000e010

08002aac <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002aac:	4b23      	ldr	r3, [pc, #140]	; (8002b3c <xPortStartScheduler+0x90>)
{
 8002aae:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ab0:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ab2:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ab4:	b2d2      	uxtb	r2, r2
 8002ab6:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ab8:	22ff      	movs	r2, #255	; 0xff
 8002aba:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002abc:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002abe:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <xPortStartScheduler+0x94>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ac6:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002aca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ace:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	; (8002b44 <xPortStartScheduler+0x98>)
 8002ad4:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ad6:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8002ada:	1e54      	subs	r4, r2, #1
 8002adc:	0600      	lsls	r0, r0, #24
 8002ade:	d423      	bmi.n	8002b28 <xPortStartScheduler+0x7c>
 8002ae0:	b101      	cbz	r1, 8002ae4 <xPortStartScheduler+0x38>
 8002ae2:	601a      	str	r2, [r3, #0]
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002ae8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002aec:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	4a12      	ldr	r2, [pc, #72]	; (8002b3c <xPortStartScheduler+0x90>)
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002af6:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <xPortStartScheduler+0x9c>)
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8002afe:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8002b06:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8002b08:	f7ff ffbc 	bl	8002a84 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4b0f      	ldr	r3, [pc, #60]	; (8002b4c <xPortStartScheduler+0xa0>)
 8002b10:	601a      	str	r2, [r3, #0]
	vPortEnableVFP();
 8002b12:	f7ff feff 	bl	8002914 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002b16:	4a0e      	ldr	r2, [pc, #56]	; (8002b50 <xPortStartScheduler+0xa4>)
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002b1e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8002b20:	f7ff fee8 	bl	80028f4 <prvPortStartFirstTask>
	prvTaskExitError();
 8002b24:	f7ff feca 	bl	80028bc <prvTaskExitError>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b28:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8002b2c:	2101      	movs	r1, #1
 8002b2e:	0052      	lsls	r2, r2, #1
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f88d 2003 	strb.w	r2, [sp, #3]
 8002b36:	4622      	mov	r2, r4
 8002b38:	e7cd      	b.n	8002ad6 <xPortStartScheduler+0x2a>
 8002b3a:	bf00      	nop
 8002b3c:	e000e400 	.word	0xe000e400
 8002b40:	20000094 	.word	0x20000094
 8002b44:	20000098 	.word	0x20000098
 8002b48:	e000ed20 	.word	0xe000ed20
 8002b4c:	20000004 	.word	0x20000004
 8002b50:	e000ef34 	.word	0xe000ef34

08002b54 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8002b54:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002b58:	2b0f      	cmp	r3, #15
 8002b5a:	d910      	bls.n	8002b7e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002b5c:	4a12      	ldr	r2, [pc, #72]	; (8002ba8 <vPortValidateInterruptPriority+0x54>)
 8002b5e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002b60:	4a12      	ldr	r2, [pc, #72]	; (8002bac <vPortValidateInterruptPriority+0x58>)
 8002b62:	7812      	ldrb	r2, [r2, #0]
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d90a      	bls.n	8002b7e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b6c:	b672      	cpsid	i
 8002b6e:	f383 8811 	msr	BASEPRI, r3
 8002b72:	f3bf 8f6f 	isb	sy
 8002b76:	f3bf 8f4f 	dsb	sy
 8002b7a:	b662      	cpsie	i
 8002b7c:	e7fe      	b.n	8002b7c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002b7e:	4b0c      	ldr	r3, [pc, #48]	; (8002bb0 <vPortValidateInterruptPriority+0x5c>)
 8002b80:	4a0c      	ldr	r2, [pc, #48]	; (8002bb4 <vPortValidateInterruptPriority+0x60>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6812      	ldr	r2, [r2, #0]
 8002b86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d90a      	bls.n	8002ba4 <vPortValidateInterruptPriority+0x50>
 8002b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b92:	b672      	cpsid	i
 8002b94:	f383 8811 	msr	BASEPRI, r3
 8002b98:	f3bf 8f6f 	isb	sy
 8002b9c:	f3bf 8f4f 	dsb	sy
 8002ba0:	b662      	cpsie	i
 8002ba2:	e7fe      	b.n	8002ba2 <vPortValidateInterruptPriority+0x4e>
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	e000e3f0 	.word	0xe000e3f0
 8002bac:	20000094 	.word	0x20000094
 8002bb0:	e000ed0c 	.word	0xe000ed0c
 8002bb4:	20000098 	.word	0x20000098

08002bb8 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <prvInsertBlockIntoFreeList+0x40>)
{
 8002bba:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4282      	cmp	r2, r0
 8002bc0:	d318      	bcc.n	8002bf4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002bc2:	685c      	ldr	r4, [r3, #4]
 8002bc4:	1919      	adds	r1, r3, r4
 8002bc6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002bc8:	bf01      	itttt	eq
 8002bca:	6841      	ldreq	r1, [r0, #4]
 8002bcc:	4618      	moveq	r0, r3
 8002bce:	1909      	addeq	r1, r1, r4
 8002bd0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002bd2:	6844      	ldr	r4, [r0, #4]
 8002bd4:	1901      	adds	r1, r0, r4
 8002bd6:	428a      	cmp	r2, r1
 8002bd8:	d107      	bne.n	8002bea <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002bda:	4908      	ldr	r1, [pc, #32]	; (8002bfc <prvInsertBlockIntoFreeList+0x44>)
 8002bdc:	6809      	ldr	r1, [r1, #0]
 8002bde:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002be0:	bf1f      	itttt	ne
 8002be2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002be4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002be6:	1909      	addne	r1, r1, r4
 8002be8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002bea:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002bec:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002bee:	bf18      	it	ne
 8002bf0:	6018      	strne	r0, [r3, #0]
 8002bf2:	bd10      	pop	{r4, pc}
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	e7e1      	b.n	8002bbc <prvInsertBlockIntoFreeList+0x4>
 8002bf8:	20003cac 	.word	0x20003cac
 8002bfc:	2000009c 	.word	0x2000009c

08002c00 <pvPortMalloc>:
{
 8002c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c04:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8002c06:	f000 fddb 	bl	80037c0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8002c0a:	4940      	ldr	r1, [pc, #256]	; (8002d0c <pvPortMalloc+0x10c>)
 8002c0c:	4d40      	ldr	r5, [pc, #256]	; (8002d10 <pvPortMalloc+0x110>)
 8002c0e:	680b      	ldr	r3, [r1, #0]
 8002c10:	bb0b      	cbnz	r3, 8002c56 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8002c12:	4a40      	ldr	r2, [pc, #256]	; (8002d14 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c14:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c16:	4e40      	ldr	r6, [pc, #256]	; (8002d18 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c18:	bf1b      	ittet	ne
 8002c1a:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c1c:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c20:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c24:	f020 0007 	bicne.w	r0, r0, #7
 8002c28:	bf1c      	itt	ne
 8002c2a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c2c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8002c2e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c30:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c32:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c34:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8002c36:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c38:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8002c3c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8002c3e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c40:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8002c42:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c44:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c46:	4b35      	ldr	r3, [pc, #212]	; (8002d1c <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c48:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c4a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c4c:	4b34      	ldr	r3, [pc, #208]	; (8002d20 <pvPortMalloc+0x120>)
 8002c4e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c54:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c56:	682f      	ldr	r7, [r5, #0]
 8002c58:	4227      	tst	r7, r4
 8002c5a:	d116      	bne.n	8002c8a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002c5c:	2c00      	cmp	r4, #0
 8002c5e:	d042      	beq.n	8002ce6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8002c60:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c64:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c66:	bf1c      	itt	ne
 8002c68:	f023 0307 	bicne.w	r3, r3, #7
 8002c6c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002c6e:	b163      	cbz	r3, 8002c8a <pvPortMalloc+0x8a>
 8002c70:	4a2b      	ldr	r2, [pc, #172]	; (8002d20 <pvPortMalloc+0x120>)
 8002c72:	6816      	ldr	r6, [r2, #0]
 8002c74:	4690      	mov	r8, r2
 8002c76:	42b3      	cmp	r3, r6
 8002c78:	d807      	bhi.n	8002c8a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002c7a:	4a27      	ldr	r2, [pc, #156]	; (8002d18 <pvPortMalloc+0x118>)
 8002c7c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c7e:	6868      	ldr	r0, [r5, #4]
 8002c80:	4283      	cmp	r3, r0
 8002c82:	d804      	bhi.n	8002c8e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002c84:	6809      	ldr	r1, [r1, #0]
 8002c86:	428d      	cmp	r5, r1
 8002c88:	d107      	bne.n	8002c9a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002c8a:	2400      	movs	r4, #0
 8002c8c:	e02b      	b.n	8002ce6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002c8e:	682c      	ldr	r4, [r5, #0]
 8002c90:	2c00      	cmp	r4, #0
 8002c92:	d0f7      	beq.n	8002c84 <pvPortMalloc+0x84>
 8002c94:	462a      	mov	r2, r5
 8002c96:	4625      	mov	r5, r4
 8002c98:	e7f1      	b.n	8002c7e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c9a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002c9c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002c9e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ca0:	1ac2      	subs	r2, r0, r3
 8002ca2:	2a10      	cmp	r2, #16
 8002ca4:	d911      	bls.n	8002cca <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ca6:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ca8:	0741      	lsls	r1, r0, #29
 8002caa:	d00a      	beq.n	8002cc2 <pvPortMalloc+0xc2>
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	b672      	cpsid	i
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	b662      	cpsie	i
 8002cc0:	e7fe      	b.n	8002cc0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002cc2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002cc4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002cc6:	f7ff ff77 	bl	8002bb8 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cca:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ccc:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cce:	4913      	ldr	r1, [pc, #76]	; (8002d1c <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cd0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cd2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cd4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002cd6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002cd8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002cdc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002cde:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ce0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002ce2:	bf38      	it	cc
 8002ce4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8002ce6:	f000 fe15 	bl	8003914 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002cea:	0763      	lsls	r3, r4, #29
 8002cec:	d00a      	beq.n	8002d04 <pvPortMalloc+0x104>
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	b672      	cpsid	i
 8002cf4:	f383 8811 	msr	BASEPRI, r3
 8002cf8:	f3bf 8f6f 	isb	sy
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	b662      	cpsie	i
 8002d02:	e7fe      	b.n	8002d02 <pvPortMalloc+0x102>
}
 8002d04:	4620      	mov	r0, r4
 8002d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002d0a:	bf00      	nop
 8002d0c:	2000009c 	.word	0x2000009c
 8002d10:	20003ca0 	.word	0x20003ca0
 8002d14:	200000a0 	.word	0x200000a0
 8002d18:	20003cac 	.word	0x20003cac
 8002d1c:	20003ca8 	.word	0x20003ca8
 8002d20:	20003ca4 	.word	0x20003ca4

08002d24 <vPortFree>:
{
 8002d24:	b510      	push	{r4, lr}
	if( pv != NULL )
 8002d26:	4604      	mov	r4, r0
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d032      	beq.n	8002d92 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002d2c:	4a19      	ldr	r2, [pc, #100]	; (8002d94 <vPortFree+0x70>)
 8002d2e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8002d32:	6812      	ldr	r2, [r2, #0]
 8002d34:	4213      	tst	r3, r2
 8002d36:	d10a      	bne.n	8002d4e <vPortFree+0x2a>
 8002d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3c:	b672      	cpsid	i
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	b662      	cpsie	i
 8002d4c:	e7fe      	b.n	8002d4c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002d4e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8002d52:	b151      	cbz	r1, 8002d6a <vPortFree+0x46>
 8002d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d58:	b672      	cpsid	i
 8002d5a:	f383 8811 	msr	BASEPRI, r3
 8002d5e:	f3bf 8f6f 	isb	sy
 8002d62:	f3bf 8f4f 	dsb	sy
 8002d66:	b662      	cpsie	i
 8002d68:	e7fe      	b.n	8002d68 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d6a:	ea23 0302 	bic.w	r3, r3, r2
 8002d6e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8002d72:	f000 fd25 	bl	80037c0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d76:	4a08      	ldr	r2, [pc, #32]	; (8002d98 <vPortFree+0x74>)
 8002d78:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d7c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d80:	6811      	ldr	r1, [r2, #0]
 8002d82:	440b      	add	r3, r1
 8002d84:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d86:	f7ff ff17 	bl	8002bb8 <prvInsertBlockIntoFreeList>
}
 8002d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8002d8e:	f000 bdc1 	b.w	8003914 <xTaskResumeAll>
 8002d92:	bd10      	pop	{r4, pc}
 8002d94:	20003ca0 	.word	0x20003ca0
 8002d98:	20003ca4 	.word	0x20003ca4

08002d9c <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002d9c:	b570      	push	{r4, r5, r6, lr}
 8002d9e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002da0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8002da2:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002da4:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002da6:	b942      	cbnz	r2, 8002dba <prvCopyDataToQueue+0x1e>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002da8:	6805      	ldr	r5, [r0, #0]
 8002daa:	b99d      	cbnz	r5, 8002dd4 <prvCopyDataToQueue+0x38>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002dac:	6840      	ldr	r0, [r0, #4]
 8002dae:	f000 ffd1 	bl	8003d54 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002db2:	6065      	str	r5, [r4, #4]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8002db4:	3601      	adds	r6, #1
 8002db6:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8002db8:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002dba:	b96d      	cbnz	r5, 8002dd8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002dbc:	6880      	ldr	r0, [r0, #8]
 8002dbe:	f008 f9d4 	bl	800b16a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dc2:	68a3      	ldr	r3, [r4, #8]
 8002dc4:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002dc6:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dc8:	6862      	ldr	r2, [r4, #4]
 8002dca:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002dcc:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002dce:	d301      	bcc.n	8002dd4 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002dd0:	6823      	ldr	r3, [r4, #0]
 8002dd2:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002dd4:	2000      	movs	r0, #0
 8002dd6:	e7ed      	b.n	8002db4 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dd8:	68c0      	ldr	r0, [r0, #12]
 8002dda:	f008 f9c6 	bl	800b16a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002dde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002de0:	68e2      	ldr	r2, [r4, #12]
 8002de2:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de4:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002de6:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002de8:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002dea:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002dec:	bf3e      	ittt	cc
 8002dee:	6862      	ldrcc	r2, [r4, #4]
 8002df0:	189b      	addcc	r3, r3, r2
 8002df2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002df4:	2d02      	cmp	r5, #2
 8002df6:	d1ed      	bne.n	8002dd4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df8:	b10e      	cbz	r6, 8002dfe <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002dfa:	3e01      	subs	r6, #1
 8002dfc:	e7ea      	b.n	8002dd4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002dfe:	4630      	mov	r0, r6
 8002e00:	e7d8      	b.n	8002db4 <prvCopyDataToQueue+0x18>

08002e02 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e02:	4603      	mov	r3, r0
 8002e04:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e06:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8002e08:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e0a:	b162      	cbz	r2, 8002e26 <prvCopyDataFromQueue+0x24>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e0c:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e0e:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e10:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e12:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e14:	60d9      	str	r1, [r3, #12]
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
 8002e16:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e1a:	bf24      	itt	cs
 8002e1c:	6819      	ldrcs	r1, [r3, #0]
 8002e1e:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e20:	68d9      	ldr	r1, [r3, #12]
 8002e22:	f008 b9a2 	b.w	800b16a <memcpy>
}
 8002e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e2c:	b570      	push	{r4, r5, r6, lr}
 8002e2e:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e30:	f7ff fda0 	bl	8002974 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e34:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e38:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002e3c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	dc14      	bgt.n	8002e6c <prvUnlockQueue+0x40>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e42:	23ff      	movs	r3, #255	; 0xff

		while( cRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e44:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 8002e48:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002e4c:	f7ff fdb8 	bl	80029c0 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002e50:	f7ff fd90 	bl	8002974 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002e54:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002e58:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	dc12      	bgt.n	8002e84 <prvUnlockQueue+0x58>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e5e:	23ff      	movs	r3, #255	; 0xff
 8002e60:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8002e64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002e68:	f7ff bdaa 	b.w	80029c0 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d0e7      	beq.n	8002e42 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e72:	4630      	mov	r0, r6
 8002e74:	f000 fe80 	bl	8003b78 <xTaskRemoveFromEventList>
 8002e78:	b108      	cbz	r0, 8002e7e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002e7a:	f000 ff0f 	bl	8003c9c <vTaskMissedYield>
 8002e7e:	3d01      	subs	r5, #1
 8002e80:	b26d      	sxtb	r5, r5
 8002e82:	e7dc      	b.n	8002e3e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e84:	6923      	ldr	r3, [r4, #16]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0e9      	beq.n	8002e5e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e8a:	4630      	mov	r0, r6
 8002e8c:	f000 fe74 	bl	8003b78 <xTaskRemoveFromEventList>
 8002e90:	b108      	cbz	r0, 8002e96 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002e92:	f000 ff03 	bl	8003c9c <vTaskMissedYield>
 8002e96:	3d01      	subs	r5, #1
 8002e98:	b26d      	sxtb	r5, r5
 8002e9a:	e7de      	b.n	8002e5a <prvUnlockQueue+0x2e>

08002e9c <xQueueGenericReset>:
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002ea0:	4604      	mov	r4, r0
 8002ea2:	b950      	cbnz	r0, 8002eba <xQueueGenericReset+0x1e>
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	b672      	cpsid	i
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	b662      	cpsie	i
 8002eb8:	e7fe      	b.n	8002eb8 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 8002eba:	f7ff fd5b 	bl	8002974 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ebe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ec0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ec2:	6822      	ldr	r2, [r4, #0]
 8002ec4:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ec6:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ec8:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002eca:	1a1b      	subs	r3, r3, r0
 8002ecc:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002ece:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ed0:	2100      	movs	r1, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002ed2:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ed4:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ed6:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8002ed8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002edc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8002ee0:	b995      	cbnz	r5, 8002f08 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee2:	6923      	ldr	r3, [r4, #16]
 8002ee4:	b163      	cbz	r3, 8002f00 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee6:	f104 0010 	add.w	r0, r4, #16
 8002eea:	f000 fe45 	bl	8003b78 <xTaskRemoveFromEventList>
 8002eee:	b138      	cbz	r0, 8002f00 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8002ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ef4:	4b09      	ldr	r3, [pc, #36]	; (8002f1c <xQueueGenericReset+0x80>)
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002f00:	f7ff fd5e 	bl	80029c0 <vPortExitCritical>
}
 8002f04:	2001      	movs	r0, #1
 8002f06:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f08:	f104 0010 	add.w	r0, r4, #16
 8002f0c:	f7ff fc94 	bl	8002838 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002f14:	f7ff fc90 	bl	8002838 <vListInitialise>
 8002f18:	e7f2      	b.n	8002f00 <xQueueGenericReset+0x64>
 8002f1a:	bf00      	nop
 8002f1c:	e000ed04 	.word	0xe000ed04

08002f20 <xQueueGenericCreate>:
	{
 8002f20:	b570      	push	{r4, r5, r6, lr}
 8002f22:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f24:	4606      	mov	r6, r0
 8002f26:	b950      	cbnz	r0, 8002f3e <xQueueGenericCreate+0x1e>
 8002f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f2c:	b672      	cpsid	i
 8002f2e:	f383 8811 	msr	BASEPRI, r3
 8002f32:	f3bf 8f6f 	isb	sy
 8002f36:	f3bf 8f4f 	dsb	sy
 8002f3a:	b662      	cpsie	i
 8002f3c:	e7fe      	b.n	8002f3c <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f3e:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f40:	3048      	adds	r0, #72	; 0x48
 8002f42:	f7ff fe5d 	bl	8002c00 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002f46:	4604      	mov	r4, r0
 8002f48:	b138      	cbz	r0, 8002f5a <xQueueGenericCreate+0x3a>
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f4a:	b945      	cbnz	r5, 8002f5e <xQueueGenericCreate+0x3e>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f4c:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8002f4e:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f50:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8002f52:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ffa1 	bl	8002e9c <xQueueGenericReset>
	}
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f5e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f62:	6003      	str	r3, [r0, #0]
 8002f64:	e7f3      	b.n	8002f4e <xQueueGenericCreate+0x2e>
	...

08002f68 <xQueueGenericSend>:
{
 8002f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f6c:	4689      	mov	r9, r1
 8002f6e:	9201      	str	r2, [sp, #4]
 8002f70:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8002f72:	4604      	mov	r4, r0
 8002f74:	b950      	cbnz	r0, 8002f8c <xQueueGenericSend+0x24>
 8002f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f7a:	b672      	cpsid	i
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	b662      	cpsie	i
 8002f8a:	e7fe      	b.n	8002f8a <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	f040 808c 	bne.w	80030aa <xQueueGenericSend+0x142>
 8002f92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8088 	beq.w	80030aa <xQueueGenericSend+0x142>
 8002f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9e:	b672      	cpsid	i
 8002fa0:	f383 8811 	msr	BASEPRI, r3
 8002fa4:	f3bf 8f6f 	isb	sy
 8002fa8:	f3bf 8f4f 	dsb	sy
 8002fac:	b662      	cpsie	i
 8002fae:	e7fe      	b.n	8002fae <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fb0:	9e01      	ldr	r6, [sp, #4]
 8002fb2:	2e00      	cmp	r6, #0
 8002fb4:	f000 8084 	beq.w	80030c0 <xQueueGenericSend+0x158>
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	b672      	cpsid	i
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	b662      	cpsie	i
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fce:	9d01      	ldr	r5, [sp, #4]
 8002fd0:	b91d      	cbnz	r5, 8002fda <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8002fd2:	f7ff fcf5 	bl	80029c0 <vPortExitCritical>
			return errQUEUE_FULL;
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	e058      	b.n	800308c <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8002fda:	b916      	cbnz	r6, 8002fe2 <xQueueGenericSend+0x7a>
					vTaskSetTimeOutState( &xTimeOut );
 8002fdc:	a802      	add	r0, sp, #8
 8002fde:	f000 fe0f 	bl	8003c00 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8002fe2:	f7ff fced 	bl	80029c0 <vPortExitCritical>
		vTaskSuspendAll();
 8002fe6:	f000 fbeb 	bl	80037c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fea:	f7ff fcc3 	bl	8002974 <vPortEnterCritical>
 8002fee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002ff2:	2bff      	cmp	r3, #255	; 0xff
 8002ff4:	d101      	bne.n	8002ffa <xQueueGenericSend+0x92>
 8002ff6:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8002ffa:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002ffe:	2bff      	cmp	r3, #255	; 0xff
 8003000:	d101      	bne.n	8003006 <xQueueGenericSend+0x9e>
 8003002:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8003006:	f7ff fcdb 	bl	80029c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800300a:	a901      	add	r1, sp, #4
 800300c:	a802      	add	r0, sp, #8
 800300e:	f000 fe07 	bl	8003c20 <xTaskCheckForTimeOut>
 8003012:	2800      	cmp	r0, #0
 8003014:	d143      	bne.n	800309e <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003016:	f7ff fcad 	bl	8002974 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800301a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800301c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800301e:	f7ff fccf 	bl	80029c0 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003022:	42ae      	cmp	r6, r5
 8003024:	d135      	bne.n	8003092 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003026:	9901      	ldr	r1, [sp, #4]
 8003028:	f104 0010 	add.w	r0, r4, #16
 800302c:	f000 fd88 	bl	8003b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003030:	4620      	mov	r0, r4
 8003032:	f7ff fefb 	bl	8002e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003036:	f000 fc6d 	bl	8003914 <xTaskResumeAll>
 800303a:	b938      	cbnz	r0, 800304c <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 800303c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003040:	f8ca 3000 	str.w	r3, [sl]
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	f3bf 8f6f 	isb	sy
 800304c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800304e:	f7ff fc91 	bl	8002974 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003052:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003054:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003056:	429a      	cmp	r2, r3
 8003058:	d301      	bcc.n	800305e <xQueueGenericSend+0xf6>
 800305a:	2f02      	cmp	r7, #2
 800305c:	d1b7      	bne.n	8002fce <xQueueGenericSend+0x66>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800305e:	463a      	mov	r2, r7
 8003060:	4649      	mov	r1, r9
 8003062:	4620      	mov	r0, r4
 8003064:	f7ff fe9a 	bl	8002d9c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003068:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800306a:	b11b      	cbz	r3, 8003074 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800306c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003070:	f000 fd82 	bl	8003b78 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8003074:	b138      	cbz	r0, 8003086 <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8003076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800307a:	4b19      	ldr	r3, [pc, #100]	; (80030e0 <xQueueGenericSend+0x178>)
 800307c:	601a      	str	r2, [r3, #0]
 800307e:	f3bf 8f4f 	dsb	sy
 8003082:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8003086:	f7ff fc9b 	bl	80029c0 <vPortExitCritical>
				return pdPASS;
 800308a:	2001      	movs	r0, #1
}
 800308c:	b004      	add	sp, #16
 800308e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8003092:	4620      	mov	r0, r4
 8003094:	f7ff feca 	bl	8002e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003098:	f000 fc3c 	bl	8003914 <xTaskResumeAll>
 800309c:	e7d6      	b.n	800304c <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 800309e:	4620      	mov	r0, r4
 80030a0:	f7ff fec4 	bl	8002e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030a4:	f000 fc36 	bl	8003914 <xTaskResumeAll>
 80030a8:	e795      	b.n	8002fd6 <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030aa:	2f02      	cmp	r7, #2
 80030ac:	d102      	bne.n	80030b4 <xQueueGenericSend+0x14c>
 80030ae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10a      	bne.n	80030ca <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030b4:	f000 fdf8 	bl	8003ca8 <xTaskGetSchedulerState>
 80030b8:	2800      	cmp	r0, #0
 80030ba:	f43f af79 	beq.w	8002fb0 <xQueueGenericSend+0x48>
 80030be:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80030c0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80030c4:	f8df a018 	ldr.w	sl, [pc, #24]	; 80030e0 <xQueueGenericSend+0x178>
 80030c8:	e7c1      	b.n	800304e <xQueueGenericSend+0xe6>
 80030ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030ce:	b672      	cpsid	i
 80030d0:	f383 8811 	msr	BASEPRI, r3
 80030d4:	f3bf 8f6f 	isb	sy
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	b662      	cpsie	i
 80030de:	e7fe      	b.n	80030de <xQueueGenericSend+0x176>
 80030e0:	e000ed04 	.word	0xe000ed04

080030e4 <xQueueCreateMutex>:
	{
 80030e4:	b510      	push	{r4, lr}
		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80030e6:	4602      	mov	r2, r0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2001      	movs	r0, #1
 80030ec:	f7ff ff18 	bl	8002f20 <xQueueGenericCreate>
		if( pxNewQueue != NULL )
 80030f0:	4604      	mov	r4, r0
 80030f2:	b138      	cbz	r0, 8003104 <xQueueCreateMutex+0x20>
			pxNewQueue->pxMutexHolder = NULL;
 80030f4:	2300      	movs	r3, #0
 80030f6:	6043      	str	r3, [r0, #4]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80030f8:	461a      	mov	r2, r3
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80030fa:	6003      	str	r3, [r0, #0]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80030fc:	4619      	mov	r1, r3
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80030fe:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003100:	f7ff ff32 	bl	8002f68 <xQueueGenericSend>
	}
 8003104:	4620      	mov	r0, r4
 8003106:	bd10      	pop	{r4, pc}

08003108 <xQueueGenericSendFromISR>:
{
 8003108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800310c:	4688      	mov	r8, r1
 800310e:	4691      	mov	r9, r2
 8003110:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8003112:	4604      	mov	r4, r0
 8003114:	b950      	cbnz	r0, 800312c <xQueueGenericSendFromISR+0x24>
 8003116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800311a:	b672      	cpsid	i
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	b662      	cpsie	i
 800312a:	e7fe      	b.n	800312a <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800312c:	bb19      	cbnz	r1, 8003176 <xQueueGenericSendFromISR+0x6e>
 800312e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003130:	b30b      	cbz	r3, 8003176 <xQueueGenericSendFromISR+0x6e>
 8003132:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003136:	b672      	cpsid	i
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	b662      	cpsie	i
 8003146:	e7fe      	b.n	8003146 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003148:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800314c:	f000 fd14 	bl	8003b78 <xTaskRemoveFromEventList>
 8003150:	2800      	cmp	r0, #0
 8003152:	d036      	beq.n	80031c2 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8003154:	f1b9 0f00 	cmp.w	r9, #0
 8003158:	d033      	beq.n	80031c2 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800315a:	2001      	movs	r0, #1
 800315c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8003160:	f386 8811 	msr	BASEPRI, r6
}
 8003164:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003168:	3501      	adds	r5, #1
 800316a:	b26d      	sxtb	r5, r5
 800316c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8003170:	e027      	b.n	80031c2 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8003172:	2000      	movs	r0, #0
 8003174:	e7f4      	b.n	8003160 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003176:	2f02      	cmp	r7, #2
 8003178:	d102      	bne.n	8003180 <xQueueGenericSendFromISR+0x78>
 800317a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d122      	bne.n	80031c6 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003180:	f7ff fce8 	bl	8002b54 <vPortValidateInterruptPriority>
	__asm volatile
 8003184:	f3ef 8611 	mrs	r6, BASEPRI
 8003188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800318c:	b672      	cpsid	i
 800318e:	f383 8811 	msr	BASEPRI, r3
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	f3bf 8f4f 	dsb	sy
 800319a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800319c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800319e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d301      	bcc.n	80031a8 <xQueueGenericSendFromISR+0xa0>
 80031a4:	2f02      	cmp	r7, #2
 80031a6:	d1e4      	bne.n	8003172 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 80031a8:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031ac:	463a      	mov	r2, r7
 80031ae:	4641      	mov	r1, r8
 80031b0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80031b2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80031b4:	f7ff fdf2 	bl	8002d9c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80031b8:	1c6b      	adds	r3, r5, #1
 80031ba:	d1d5      	bne.n	8003168 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1c2      	bne.n	8003148 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 80031c2:	2001      	movs	r0, #1
 80031c4:	e7cc      	b.n	8003160 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 80031c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ca:	b672      	cpsid	i
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	b662      	cpsie	i
 80031da:	e7fe      	b.n	80031da <xQueueGenericSendFromISR+0xd2>

080031dc <xQueueGiveFromISR>:
{
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80031e0:	4604      	mov	r4, r0
 80031e2:	b950      	cbnz	r0, 80031fa <xQueueGiveFromISR+0x1e>
 80031e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031e8:	b672      	cpsid	i
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	b662      	cpsie	i
 80031f8:	e7fe      	b.n	80031f8 <xQueueGiveFromISR+0x1c>
	configASSERT( pxQueue->uxItemSize == 0 );
 80031fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031fc:	b153      	cbz	r3, 8003214 <xQueueGiveFromISR+0x38>
 80031fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003202:	b672      	cpsid	i
 8003204:	f383 8811 	msr	BASEPRI, r3
 8003208:	f3bf 8f6f 	isb	sy
 800320c:	f3bf 8f4f 	dsb	sy
 8003210:	b662      	cpsie	i
 8003212:	e7fe      	b.n	8003212 <xQueueGiveFromISR+0x36>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8003214:	6803      	ldr	r3, [r0, #0]
 8003216:	b913      	cbnz	r3, 800321e <xQueueGiveFromISR+0x42>
 8003218:	6843      	ldr	r3, [r0, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d130      	bne.n	8003280 <xQueueGiveFromISR+0xa4>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800321e:	f7ff fc99 	bl	8002b54 <vPortValidateInterruptPriority>
	__asm volatile
 8003222:	f3ef 8611 	mrs	r6, BASEPRI
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	b672      	cpsid	i
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800323a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800323c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800323e:	429a      	cmp	r2, r3
 8003240:	d301      	bcc.n	8003246 <xQueueGiveFromISR+0x6a>
			xReturn = errQUEUE_FULL;
 8003242:	2000      	movs	r0, #0
 8003244:	e014      	b.n	8003270 <xQueueGiveFromISR+0x94>
			const int8_t cTxLock = pxQueue->cTxLock;
 8003246:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800324a:	3201      	adds	r2, #1
			const int8_t cTxLock = pxQueue->cTxLock;
 800324c:	b25b      	sxtb	r3, r3
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 800324e:	63a2      	str	r2, [r4, #56]	; 0x38
			if( cTxLock == queueUNLOCKED )
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	d110      	bne.n	8003276 <xQueueGiveFromISR+0x9a>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003256:	b90b      	cbnz	r3, 800325c <xQueueGiveFromISR+0x80>
			xReturn = pdPASS;
 8003258:	2001      	movs	r0, #1
 800325a:	e009      	b.n	8003270 <xQueueGiveFromISR+0x94>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800325c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003260:	f000 fc8a 	bl	8003b78 <xTaskRemoveFromEventList>
 8003264:	2800      	cmp	r0, #0
 8003266:	d0f7      	beq.n	8003258 <xQueueGiveFromISR+0x7c>
							if( pxHigherPriorityTaskWoken != NULL )
 8003268:	2d00      	cmp	r5, #0
 800326a:	d0f5      	beq.n	8003258 <xQueueGiveFromISR+0x7c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800326c:	2001      	movs	r0, #1
 800326e:	6028      	str	r0, [r5, #0]
	__asm volatile
 8003270:	f386 8811 	msr	BASEPRI, r6
}
 8003274:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003276:	3301      	adds	r3, #1
 8003278:	b25b      	sxtb	r3, r3
 800327a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800327e:	e7eb      	b.n	8003258 <xQueueGiveFromISR+0x7c>
	__asm volatile
 8003280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003284:	b672      	cpsid	i
 8003286:	f383 8811 	msr	BASEPRI, r3
 800328a:	f3bf 8f6f 	isb	sy
 800328e:	f3bf 8f4f 	dsb	sy
 8003292:	b662      	cpsie	i
 8003294:	e7fe      	b.n	8003294 <xQueueGiveFromISR+0xb8>
	...

08003298 <xQueueGenericReceive>:
{
 8003298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800329c:	4688      	mov	r8, r1
 800329e:	9201      	str	r2, [sp, #4]
 80032a0:	4699      	mov	r9, r3
	configASSERT( pxQueue );
 80032a2:	4604      	mov	r4, r0
 80032a4:	b950      	cbnz	r0, 80032bc <xQueueGenericReceive+0x24>
 80032a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032aa:	b672      	cpsid	i
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	b662      	cpsie	i
 80032ba:	e7fe      	b.n	80032ba <xQueueGenericReceive+0x22>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032bc:	2900      	cmp	r1, #0
 80032be:	f040 80a9 	bne.w	8003414 <xQueueGenericReceive+0x17c>
 80032c2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 80a5 	beq.w	8003414 <xQueueGenericReceive+0x17c>
 80032ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ce:	b672      	cpsid	i
 80032d0:	f383 8811 	msr	BASEPRI, r3
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	f3bf 8f4f 	dsb	sy
 80032dc:	b662      	cpsie	i
 80032de:	e7fe      	b.n	80032de <xQueueGenericReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032e0:	9e01      	ldr	r6, [sp, #4]
 80032e2:	2e00      	cmp	r6, #0
 80032e4:	f000 809c 	beq.w	8003420 <xQueueGenericReceive+0x188>
 80032e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ec:	b672      	cpsid	i
 80032ee:	f383 8811 	msr	BASEPRI, r3
 80032f2:	f3bf 8f6f 	isb	sy
 80032f6:	f3bf 8f4f 	dsb	sy
 80032fa:	b662      	cpsie	i
 80032fc:	e7fe      	b.n	80032fc <xQueueGenericReceive+0x64>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8003300:	60e6      	str	r6, [r4, #12]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003302:	2b00      	cmp	r3, #0
 8003304:	d06d      	beq.n	80033e2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003306:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800330a:	e05f      	b.n	80033cc <xQueueGenericReceive+0x134>
				if( xTicksToWait == ( TickType_t ) 0 )
 800330c:	9d01      	ldr	r5, [sp, #4]
 800330e:	b91d      	cbnz	r5, 8003318 <xQueueGenericReceive+0x80>
					taskEXIT_CRITICAL();
 8003310:	f7ff fb56 	bl	80029c0 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8003314:	4628      	mov	r0, r5
 8003316:	e067      	b.n	80033e8 <xQueueGenericReceive+0x150>
				else if( xEntryTimeSet == pdFALSE )
 8003318:	b916      	cbnz	r6, 8003320 <xQueueGenericReceive+0x88>
					vTaskSetTimeOutState( &xTimeOut );
 800331a:	a802      	add	r0, sp, #8
 800331c:	f000 fc70 	bl	8003c00 <vTaskSetTimeOutState>
		taskEXIT_CRITICAL();
 8003320:	f7ff fb4e 	bl	80029c0 <vPortExitCritical>
		vTaskSuspendAll();
 8003324:	f000 fa4c 	bl	80037c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003328:	f7ff fb24 	bl	8002974 <vPortEnterCritical>
 800332c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003330:	2bff      	cmp	r3, #255	; 0xff
 8003332:	d101      	bne.n	8003338 <xQueueGenericReceive+0xa0>
 8003334:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8003338:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800333c:	2bff      	cmp	r3, #255	; 0xff
 800333e:	d101      	bne.n	8003344 <xQueueGenericReceive+0xac>
 8003340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003344:	f7ff fb3c 	bl	80029c0 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003348:	a901      	add	r1, sp, #4
 800334a:	a802      	add	r0, sp, #8
 800334c:	f000 fc68 	bl	8003c20 <xTaskCheckForTimeOut>
 8003350:	2800      	cmp	r0, #0
 8003352:	d152      	bne.n	80033fa <xQueueGenericReceive+0x162>
	taskENTER_CRITICAL();
 8003354:	f7ff fb0e 	bl	8002974 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003358:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800335a:	f7ff fb31 	bl	80029c0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800335e:	2d00      	cmp	r5, #0
 8003360:	d145      	bne.n	80033ee <xQueueGenericReceive+0x156>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	b933      	cbnz	r3, 8003374 <xQueueGenericReceive+0xdc>
						taskENTER_CRITICAL();
 8003366:	f7ff fb05 	bl	8002974 <vPortEnterCritical>
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800336a:	6860      	ldr	r0, [r4, #4]
 800336c:	f000 fcac 	bl	8003cc8 <vTaskPriorityInherit>
						taskEXIT_CRITICAL();
 8003370:	f7ff fb26 	bl	80029c0 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003374:	9901      	ldr	r1, [sp, #4]
 8003376:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800337a:	f000 fbe1 	bl	8003b40 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800337e:	4620      	mov	r0, r4
 8003380:	f7ff fd54 	bl	8002e2c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003384:	f000 fac6 	bl	8003914 <xTaskResumeAll>
 8003388:	b938      	cbnz	r0, 800339a <xQueueGenericReceive+0x102>
					portYIELD_WITHIN_API();
 800338a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800338e:	f8ca 3000 	str.w	r3, [sl]
 8003392:	f3bf 8f4f 	dsb	sy
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800339c:	f7ff faea 	bl	8002974 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033a0:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033a2:	2d00      	cmp	r5, #0
 80033a4:	d0b2      	beq.n	800330c <xQueueGenericReceive+0x74>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033a6:	4641      	mov	r1, r8
 80033a8:	4620      	mov	r0, r4
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 80033aa:	68e6      	ldr	r6, [r4, #12]
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80033ac:	f7ff fd29 	bl	8002e02 <prvCopyDataFromQueue>
				if( xJustPeeking == pdFALSE )
 80033b0:	f1b9 0f00 	cmp.w	r9, #0
 80033b4:	d1a3      	bne.n	80032fe <xQueueGenericReceive+0x66>
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80033b6:	3d01      	subs	r5, #1
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033b8:	6823      	ldr	r3, [r4, #0]
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 80033ba:	63a5      	str	r5, [r4, #56]	; 0x38
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033bc:	b913      	cbnz	r3, 80033c4 <xQueueGenericReceive+0x12c>
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80033be:	f000 fd1d 	bl	8003dfc <pvTaskIncrementMutexHeldCount>
 80033c2:	6060      	str	r0, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033c4:	6923      	ldr	r3, [r4, #16]
 80033c6:	b163      	cbz	r3, 80033e2 <xQueueGenericReceive+0x14a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033c8:	f104 0010 	add.w	r0, r4, #16
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033cc:	f000 fbd4 	bl	8003b78 <xTaskRemoveFromEventList>
 80033d0:	b138      	cbz	r0, 80033e2 <xQueueGenericReceive+0x14a>
							queueYIELD_IF_USING_PREEMPTION();
 80033d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033d6:	4b14      	ldr	r3, [pc, #80]	; (8003428 <xQueueGenericReceive+0x190>)
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80033e2:	f7ff faed 	bl	80029c0 <vPortExitCritical>
				return pdPASS;
 80033e6:	2001      	movs	r0, #1
}
 80033e8:	b004      	add	sp, #16
 80033ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 80033ee:	4620      	mov	r0, r4
 80033f0:	f7ff fd1c 	bl	8002e2c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80033f4:	f000 fa8e 	bl	8003914 <xTaskResumeAll>
 80033f8:	e7cf      	b.n	800339a <xQueueGenericReceive+0x102>
			prvUnlockQueue( pxQueue );
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff fd16 	bl	8002e2c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003400:	f000 fa88 	bl	8003914 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003404:	f7ff fab6 	bl	8002974 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003408:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
 800340a:	f7ff fad9 	bl	80029c0 <vPortExitCritical>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800340e:	2d00      	cmp	r5, #0
 8003410:	d1c3      	bne.n	800339a <xQueueGenericReceive+0x102>
 8003412:	e77f      	b.n	8003314 <xQueueGenericReceive+0x7c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003414:	f000 fc48 	bl	8003ca8 <xTaskGetSchedulerState>
 8003418:	2800      	cmp	r0, #0
 800341a:	f43f af61 	beq.w	80032e0 <xQueueGenericReceive+0x48>
 800341e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8003420:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8003422:	f8df a004 	ldr.w	sl, [pc, #4]	; 8003428 <xQueueGenericReceive+0x190>
 8003426:	e7b9      	b.n	800339c <xQueueGenericReceive+0x104>
 8003428:	e000ed04 	.word	0xe000ed04

0800342c <xQueueReceiveFromISR>:
{
 800342c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003430:	4689      	mov	r9, r1
 8003432:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8003434:	4605      	mov	r5, r0
 8003436:	b950      	cbnz	r0, 800344e <xQueueReceiveFromISR+0x22>
 8003438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343c:	b672      	cpsid	i
 800343e:	f383 8811 	msr	BASEPRI, r3
 8003442:	f3bf 8f6f 	isb	sy
 8003446:	f3bf 8f4f 	dsb	sy
 800344a:	b662      	cpsie	i
 800344c:	e7fe      	b.n	800344c <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800344e:	bb81      	cbnz	r1, 80034b2 <xQueueReceiveFromISR+0x86>
 8003450:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003452:	b373      	cbz	r3, 80034b2 <xQueueReceiveFromISR+0x86>
 8003454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003458:	b672      	cpsid	i
 800345a:	f383 8811 	msr	BASEPRI, r3
 800345e:	f3bf 8f6f 	isb	sy
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	b662      	cpsie	i
 8003468:	e7fe      	b.n	8003468 <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 800346a:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800346e:	4649      	mov	r1, r9
 8003470:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8003472:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8003474:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003476:	f7ff fcc4 	bl	8002e02 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 800347a:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 800347c:	1c73      	adds	r3, r6, #1
 800347e:	d113      	bne.n	80034a8 <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003480:	692b      	ldr	r3, [r5, #16]
 8003482:	b90b      	cbnz	r3, 8003488 <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8003484:	2001      	movs	r0, #1
 8003486:	e00b      	b.n	80034a0 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003488:	f105 0010 	add.w	r0, r5, #16
 800348c:	f000 fb74 	bl	8003b78 <xTaskRemoveFromEventList>
 8003490:	2800      	cmp	r0, #0
 8003492:	d0f7      	beq.n	8003484 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8003494:	f1b8 0f00 	cmp.w	r8, #0
 8003498:	d0f4      	beq.n	8003484 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800349a:	2001      	movs	r0, #1
 800349c:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 80034a0:	f387 8811 	msr	BASEPRI, r7
}
 80034a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80034a8:	3601      	adds	r6, #1
 80034aa:	b276      	sxtb	r6, r6
 80034ac:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 80034b0:	e7e8      	b.n	8003484 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034b2:	f7ff fb4f 	bl	8002b54 <vPortValidateInterruptPriority>
	__asm volatile
 80034b6:	f3ef 8711 	mrs	r7, BASEPRI
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	b672      	cpsid	i
 80034c0:	f383 8811 	msr	BASEPRI, r3
 80034c4:	f3bf 8f6f 	isb	sy
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034ce:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80034d0:	2c00      	cmp	r4, #0
 80034d2:	d1ca      	bne.n	800346a <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 80034d4:	4620      	mov	r0, r4
 80034d6:	e7e3      	b.n	80034a0 <xQueueReceiveFromISR+0x74>

080034d8 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034d8:	4a06      	ldr	r2, [pc, #24]	; (80034f4 <prvResetNextTaskUnblockTime+0x1c>)
 80034da:	6813      	ldr	r3, [r2, #0]
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <prvResetNextTaskUnblockTime+0x20>)
 80034e0:	b919      	cbnz	r1, 80034ea <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80034e2:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034ee:	68d2      	ldr	r2, [r2, #12]
 80034f0:	6852      	ldr	r2, [r2, #4]
 80034f2:	e7f8      	b.n	80034e6 <prvResetNextTaskUnblockTime+0xe>
 80034f4:	20003cb8 	.word	0x20003cb8
 80034f8:	20003d90 	.word	0x20003d90

080034fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8003500:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003502:	4e1b      	ldr	r6, [pc, #108]	; (8003570 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8003504:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8003506:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003508:	6830      	ldr	r0, [r6, #0]
 800350a:	3004      	adds	r0, #4
 800350c:	f7ff f9c5 	bl	800289a <uxListRemove>
 8003510:	4633      	mov	r3, r6
 8003512:	b940      	cbnz	r0, 8003526 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003514:	6831      	ldr	r1, [r6, #0]
 8003516:	2001      	movs	r0, #1
 8003518:	4e16      	ldr	r6, [pc, #88]	; (8003574 <prvAddCurrentTaskToDelayedList+0x78>)
 800351a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800351c:	6832      	ldr	r2, [r6, #0]
 800351e:	4088      	lsls	r0, r1
 8003520:	ea22 0200 	bic.w	r2, r2, r0
 8003524:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003526:	1c62      	adds	r2, r4, #1
 8003528:	d107      	bne.n	800353a <prvAddCurrentTaskToDelayedList+0x3e>
 800352a:	b137      	cbz	r7, 800353a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	4812      	ldr	r0, [pc, #72]	; (8003578 <prvAddCurrentTaskToDelayedList+0x7c>)
 8003530:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003532:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003536:	f7ff b98d 	b.w	8002854 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800353a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800353c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800353e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003540:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8003542:	d907      	bls.n	8003554 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003544:	4a0d      	ldr	r2, [pc, #52]	; (800357c <prvAddCurrentTaskToDelayedList+0x80>)
 8003546:	6810      	ldr	r0, [r2, #0]
 8003548:	6819      	ldr	r1, [r3, #0]
}
 800354a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800354e:	3104      	adds	r1, #4
 8003550:	f7ff b98c 	b.w	800286c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003554:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <prvAddCurrentTaskToDelayedList+0x84>)
 8003556:	6810      	ldr	r0, [r2, #0]
 8003558:	6819      	ldr	r1, [r3, #0]
 800355a:	3104      	adds	r1, #4
 800355c:	f7ff f986 	bl	800286c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003560:	4b08      	ldr	r3, [pc, #32]	; (8003584 <prvAddCurrentTaskToDelayedList+0x88>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	4294      	cmp	r4, r2
 8003566:	d200      	bcs.n	800356a <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 8003568:	601c      	str	r4, [r3, #0]
 800356a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800356c:	20003dd8 	.word	0x20003dd8
 8003570:	20003cb4 	.word	0x20003cb4
 8003574:	20003d60 	.word	0x20003d60
 8003578:	20003db0 	.word	0x20003db0
 800357c:	20003cbc 	.word	0x20003cbc
 8003580:	20003cb8 	.word	0x20003cb8
 8003584:	20003d90 	.word	0x20003d90

08003588 <prvTaskIsTaskSuspended.part.0>:
	__asm volatile
 8003588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800358c:	b672      	cpsid	i
 800358e:	f383 8811 	msr	BASEPRI, r3
 8003592:	f3bf 8f6f 	isb	sy
 8003596:	f3bf 8f4f 	dsb	sy
 800359a:	b662      	cpsie	i
 800359c:	e7fe      	b.n	800359c <prvTaskIsTaskSuspended.part.0+0x14>
	...

080035a0 <xTaskCreate>:
	{
 80035a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a4:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	{
 80035a8:	4680      	mov	r8, r0
 80035aa:	460f      	mov	r7, r1
 80035ac:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ae:	4650      	mov	r0, sl
	{
 80035b0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b2:	f7ff fb25 	bl	8002c00 <pvPortMalloc>
			if( pxStack != NULL )
 80035b6:	4605      	mov	r5, r0
 80035b8:	2800      	cmp	r0, #0
 80035ba:	f000 8096 	beq.w	80036ea <xTaskCreate+0x14a>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80035be:	2054      	movs	r0, #84	; 0x54
 80035c0:	f7ff fb1e 	bl	8002c00 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80035c4:	4604      	mov	r4, r0
 80035c6:	2800      	cmp	r0, #0
 80035c8:	f000 808c 	beq.w	80036e4 <xTaskCreate+0x144>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035cc:	f1aa 0a04 	sub.w	sl, sl, #4
					pxNewTCB->pxStack = pxStack;
 80035d0:	6305      	str	r5, [r0, #48]	; 0x30
 80035d2:	1e7b      	subs	r3, r7, #1
 80035d4:	f100 0234 	add.w	r2, r0, #52	; 0x34
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80035d8:	4455      	add	r5, sl
 80035da:	370f      	adds	r7, #15
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80035dc:	f025 0a07 	bic.w	sl, r5, #7
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80035e0:	7859      	ldrb	r1, [r3, #1]
 80035e2:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 80035e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80035ea:	b109      	cbz	r1, 80035f0 <xTaskCreate+0x50>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80035ec:	42bb      	cmp	r3, r7
 80035ee:	d1f7      	bne.n	80035e0 <xTaskCreate+0x40>
 80035f0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035f2:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035f6:	1d27      	adds	r7, r4, #4
 80035f8:	2d06      	cmp	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80035fa:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80035fe:	4638      	mov	r0, r7
		pxNewTCB->uxMutexesHeld = 0;
 8003600:	f8c4 b048 	str.w	fp, [r4, #72]	; 0x48
 8003604:	bf28      	it	cs
 8003606:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 8003608:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800360a:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800360c:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003610:	f7ff f91d 	bl	800284e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003614:	f104 0018 	add.w	r0, r4, #24
 8003618:	f7ff f919 	bl	800284e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800361c:	f8c4 b04c 	str.w	fp, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003620:	6124      	str	r4, [r4, #16]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003622:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003624:	61a5      	str	r5, [r4, #24]
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003626:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003628:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800362a:	4650      	mov	r0, sl
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800362c:	f884 b050 	strb.w	fp, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003630:	f7ff f97a 	bl	8002928 <pxPortInitialiseStack>
 8003634:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8003636:	b106      	cbz	r6, 800363a <xTaskCreate+0x9a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003638:	6034      	str	r4, [r6, #0]
	taskENTER_CRITICAL();
 800363a:	f7ff f99b 	bl	8002974 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 800363e:	4b32      	ldr	r3, [pc, #200]	; (8003708 <xTaskCreate+0x168>)
		if( pxCurrentTCB == NULL )
 8003640:	4e32      	ldr	r6, [pc, #200]	; (800370c <xTaskCreate+0x16c>)
		uxCurrentNumberOfTasks++;
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8003738 <xTaskCreate+0x198>
 8003648:	3201      	adds	r2, #1
 800364a:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800364c:	6835      	ldr	r5, [r6, #0]
 800364e:	2d00      	cmp	r5, #0
 8003650:	d14e      	bne.n	80036f0 <xTaskCreate+0x150>
			pxCurrentTCB = pxNewTCB;
 8003652:	6034      	str	r4, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d11d      	bne.n	8003696 <xTaskCreate+0xf6>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800365a:	eb08 0005 	add.w	r0, r8, r5
 800365e:	3514      	adds	r5, #20
 8003660:	f7ff f8ea 	bl	8002838 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003664:	2d8c      	cmp	r5, #140	; 0x8c
 8003666:	d1f8      	bne.n	800365a <xTaskCreate+0xba>
	vListInitialise( &xDelayedTaskList1 );
 8003668:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 800373c <xTaskCreate+0x19c>
	vListInitialise( &xDelayedTaskList2 );
 800366c:	4d28      	ldr	r5, [pc, #160]	; (8003710 <xTaskCreate+0x170>)
	vListInitialise( &xDelayedTaskList1 );
 800366e:	4648      	mov	r0, r9
 8003670:	f7ff f8e2 	bl	8002838 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003674:	4628      	mov	r0, r5
 8003676:	f7ff f8df 	bl	8002838 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800367a:	4826      	ldr	r0, [pc, #152]	; (8003714 <xTaskCreate+0x174>)
 800367c:	f7ff f8dc 	bl	8002838 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003680:	4825      	ldr	r0, [pc, #148]	; (8003718 <xTaskCreate+0x178>)
 8003682:	f7ff f8d9 	bl	8002838 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 8003686:	4825      	ldr	r0, [pc, #148]	; (800371c <xTaskCreate+0x17c>)
 8003688:	f7ff f8d6 	bl	8002838 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <xTaskCreate+0x180>)
 800368e:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003692:	4b24      	ldr	r3, [pc, #144]	; (8003724 <xTaskCreate+0x184>)
 8003694:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003696:	4a24      	ldr	r2, [pc, #144]	; (8003728 <xTaskCreate+0x188>)
		prvAddTaskToReadyList( pxNewTCB );
 8003698:	2501      	movs	r5, #1
 800369a:	4924      	ldr	r1, [pc, #144]	; (800372c <xTaskCreate+0x18c>)
		uxTaskNumber++;
 800369c:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800369e:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80036a0:	3301      	adds	r3, #1
 80036a2:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80036a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80036a6:	fa05 f302 	lsl.w	r3, r5, r2
 80036aa:	4303      	orrs	r3, r0
 80036ac:	2014      	movs	r0, #20
 80036ae:	600b      	str	r3, [r1, #0]
 80036b0:	4639      	mov	r1, r7
 80036b2:	fb00 8002 	mla	r0, r0, r2, r8
 80036b6:	f7ff f8cd 	bl	8002854 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80036ba:	f7ff f981 	bl	80029c0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80036be:	4b1c      	ldr	r3, [pc, #112]	; (8003730 <xTaskCreate+0x190>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	b163      	cbz	r3, 80036de <xTaskCreate+0x13e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036c4:	6833      	ldr	r3, [r6, #0]
 80036c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d207      	bcs.n	80036de <xTaskCreate+0x13e>
			taskYIELD_IF_USING_PREEMPTION();
 80036ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036d2:	4b18      	ldr	r3, [pc, #96]	; (8003734 <xTaskCreate+0x194>)
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f3bf 8f4f 	dsb	sy
 80036da:	f3bf 8f6f 	isb	sy
	}
 80036de:	4628      	mov	r0, r5
 80036e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					vPortFree( pxStack );
 80036e4:	4628      	mov	r0, r5
 80036e6:	f7ff fb1d 	bl	8002d24 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80036ea:	f04f 35ff 	mov.w	r5, #4294967295
 80036ee:	e7f6      	b.n	80036de <xTaskCreate+0x13e>
			if( xSchedulerRunning == pdFALSE )
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <xTaskCreate+0x190>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ce      	bne.n	8003696 <xTaskCreate+0xf6>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80036f8:	6833      	ldr	r3, [r6, #0]
 80036fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036fe:	429a      	cmp	r2, r3
 8003700:	d8c9      	bhi.n	8003696 <xTaskCreate+0xf6>
					pxCurrentTCB = pxNewTCB;
 8003702:	6034      	str	r4, [r6, #0]
 8003704:	e7c7      	b.n	8003696 <xTaskCreate+0xf6>
 8003706:	bf00      	nop
 8003708:	20003d4c 	.word	0x20003d4c
 800370c:	20003cb4 	.word	0x20003cb4
 8003710:	20003d78 	.word	0x20003d78
 8003714:	20003d98 	.word	0x20003d98
 8003718:	20003dc4 	.word	0x20003dc4
 800371c:	20003db0 	.word	0x20003db0
 8003720:	20003cb8 	.word	0x20003cb8
 8003724:	20003cbc 	.word	0x20003cbc
 8003728:	20003d5c 	.word	0x20003d5c
 800372c:	20003d60 	.word	0x20003d60
 8003730:	20003dac 	.word	0x20003dac
 8003734:	e000ed04 	.word	0xe000ed04
 8003738:	20003cc0 	.word	0x20003cc0
 800373c:	20003d64 	.word	0x20003d64

08003740 <vTaskStartScheduler>:
{
 8003740:	b513      	push	{r0, r1, r4, lr}
		xReturn = xTaskCreate(	prvIdleTask,
 8003742:	4b19      	ldr	r3, [pc, #100]	; (80037a8 <vTaskStartScheduler+0x68>)
 8003744:	2400      	movs	r4, #0
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	4918      	ldr	r1, [pc, #96]	; (80037ac <vTaskStartScheduler+0x6c>)
 800374a:	9301      	str	r3, [sp, #4]
 800374c:	4623      	mov	r3, r4
 800374e:	9400      	str	r4, [sp, #0]
 8003750:	4817      	ldr	r0, [pc, #92]	; (80037b0 <vTaskStartScheduler+0x70>)
 8003752:	f7ff ff25 	bl	80035a0 <xTaskCreate>
	if( xReturn == pdPASS )
 8003756:	2801      	cmp	r0, #1
 8003758:	d116      	bne.n	8003788 <vTaskStartScheduler+0x48>
 800375a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800375e:	b672      	cpsid	i
 8003760:	f383 8811 	msr	BASEPRI, r3
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <vTaskStartScheduler+0x74>)
 8003774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003776:	4b10      	ldr	r3, [pc, #64]	; (80037b8 <vTaskStartScheduler+0x78>)
 8003778:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800377a:	4b10      	ldr	r3, [pc, #64]	; (80037bc <vTaskStartScheduler+0x7c>)
 800377c:	601c      	str	r4, [r3, #0]
}
 800377e:	b002      	add	sp, #8
 8003780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003784:	f7ff b992 	b.w	8002aac <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003788:	3001      	adds	r0, #1
 800378a:	d10a      	bne.n	80037a2 <vTaskStartScheduler+0x62>
 800378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003790:	b672      	cpsid	i
 8003792:	f383 8811 	msr	BASEPRI, r3
 8003796:	f3bf 8f6f 	isb	sy
 800379a:	f3bf 8f4f 	dsb	sy
 800379e:	b662      	cpsie	i
 80037a0:	e7fe      	b.n	80037a0 <vTaskStartScheduler+0x60>
}
 80037a2:	b002      	add	sp, #8
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	20003d8c 	.word	0x20003d8c
 80037ac:	0800c055 	.word	0x0800c055
 80037b0:	08003a55 	.word	0x08003a55
 80037b4:	20003d90 	.word	0x20003d90
 80037b8:	20003dac 	.word	0x20003dac
 80037bc:	20003dd8 	.word	0x20003dd8

080037c0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80037c0:	4a02      	ldr	r2, [pc, #8]	; (80037cc <vTaskSuspendAll+0xc>)
 80037c2:	6813      	ldr	r3, [r2, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	6013      	str	r3, [r2, #0]
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	20003d58 	.word	0x20003d58

080037d0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80037d0:	4b01      	ldr	r3, [pc, #4]	; (80037d8 <xTaskGetTickCount+0x8>)
 80037d2:	6818      	ldr	r0, [r3, #0]
}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	20003dd8 	.word	0x20003dd8

080037dc <xTaskGetTickCountFromISR>:
{
 80037dc:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80037de:	f7ff f9b9 	bl	8002b54 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 80037e2:	4b01      	ldr	r3, [pc, #4]	; (80037e8 <xTaskGetTickCountFromISR+0xc>)
 80037e4:	6818      	ldr	r0, [r3, #0]
}
 80037e6:	bd08      	pop	{r3, pc}
 80037e8:	20003dd8 	.word	0x20003dd8

080037ec <xTaskIncrementTick>:
{
 80037ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037f0:	4b3d      	ldr	r3, [pc, #244]	; (80038e8 <xTaskIncrementTick+0xfc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d155      	bne.n	80038a4 <xTaskIncrementTick+0xb8>
		const TickType_t xConstTickCount = xTickCount + 1;
 80037f8:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <xTaskIncrementTick+0x100>)
 80037fa:	681c      	ldr	r4, [r3, #0]
 80037fc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80037fe:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U )
 8003800:	b9cc      	cbnz	r4, 8003836 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <xTaskIncrementTick+0x104>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	6812      	ldr	r2, [r2, #0]
 8003808:	b152      	cbz	r2, 8003820 <xTaskIncrementTick+0x34>
 800380a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380e:	b672      	cpsid	i
 8003810:	f383 8811 	msr	BASEPRI, r3
 8003814:	f3bf 8f6f 	isb	sy
 8003818:	f3bf 8f4f 	dsb	sy
 800381c:	b662      	cpsie	i
 800381e:	e7fe      	b.n	800381e <xTaskIncrementTick+0x32>
 8003820:	4a34      	ldr	r2, [pc, #208]	; (80038f4 <xTaskIncrementTick+0x108>)
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	6810      	ldr	r0, [r2, #0]
 8003826:	6018      	str	r0, [r3, #0]
 8003828:	6011      	str	r1, [r2, #0]
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <xTaskIncrementTick+0x10c>)
 800382c:	6813      	ldr	r3, [r2, #0]
 800382e:	3301      	adds	r3, #1
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	f7ff fe51 	bl	80034d8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003836:	4d31      	ldr	r5, [pc, #196]	; (80038fc <xTaskIncrementTick+0x110>)
 8003838:	f04f 0b00 	mov.w	fp, #0
 800383c:	4f30      	ldr	r7, [pc, #192]	; (8003900 <xTaskIncrementTick+0x114>)
 800383e:	682b      	ldr	r3, [r5, #0]
 8003840:	429c      	cmp	r4, r3
 8003842:	d33e      	bcc.n	80038c2 <xTaskIncrementTick+0xd6>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003844:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 80038f0 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 8003848:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8003910 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800384c:	f8d8 2000 	ldr.w	r2, [r8]
 8003850:	6812      	ldr	r2, [r2, #0]
 8003852:	bb72      	cbnz	r2, 80038b2 <xTaskIncrementTick+0xc6>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003854:	f04f 32ff 	mov.w	r2, #4294967295
 8003858:	602a      	str	r2, [r5, #0]
					break;
 800385a:	e032      	b.n	80038c2 <xTaskIncrementTick+0xd6>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800385c:	f106 0a04 	add.w	sl, r6, #4
 8003860:	4650      	mov	r0, sl
 8003862:	f7ff f81a 	bl	800289a <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003866:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8003868:	b119      	cbz	r1, 8003872 <xTaskIncrementTick+0x86>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800386a:	f106 0018 	add.w	r0, r6, #24
 800386e:	f7ff f814 	bl	800289a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003872:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8003874:	2201      	movs	r2, #1
 8003876:	f8d9 3000 	ldr.w	r3, [r9]
 800387a:	f04f 0e14 	mov.w	lr, #20
 800387e:	fa02 f100 	lsl.w	r1, r2, r0
 8003882:	4319      	orrs	r1, r3
 8003884:	4b1f      	ldr	r3, [pc, #124]	; (8003904 <xTaskIncrementTick+0x118>)
 8003886:	f8c9 1000 	str.w	r1, [r9]
 800388a:	4651      	mov	r1, sl
 800388c:	fb0e 3000 	mla	r0, lr, r0, r3
 8003890:	f7fe ffe0 	bl	8002854 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003894:	6838      	ldr	r0, [r7, #0]
 8003896:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8003898:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800389a:	4291      	cmp	r1, r2
 800389c:	bf28      	it	cs
 800389e:	f04f 0b01 	movcs.w	fp, #1
 80038a2:	e7d3      	b.n	800384c <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 80038a4:	4a18      	ldr	r2, [pc, #96]	; (8003908 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80038a6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80038aa:	6813      	ldr	r3, [r2, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	6013      	str	r3, [r2, #0]
 80038b0:	e011      	b.n	80038d6 <xTaskIncrementTick+0xea>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b2:	f8d8 2000 	ldr.w	r2, [r8]
 80038b6:	68d2      	ldr	r2, [r2, #12]
 80038b8:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ba:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80038bc:	428c      	cmp	r4, r1
 80038be:	d2cd      	bcs.n	800385c <xTaskIncrementTick+0x70>
						xNextTaskUnblockTime = xItemValue;
 80038c0:	6029      	str	r1, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <xTaskIncrementTick+0x118>)
 80038c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80038c8:	2214      	movs	r2, #20
 80038ca:	434a      	muls	r2, r1
 80038cc:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80038ce:	2a02      	cmp	r2, #2
 80038d0:	bf28      	it	cs
 80038d2:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80038d6:	4a0d      	ldr	r2, [pc, #52]	; (800390c <xTaskIncrementTick+0x120>)
 80038d8:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80038da:	2a00      	cmp	r2, #0
 80038dc:	bf18      	it	ne
 80038de:	f04f 0b01 	movne.w	fp, #1
}
 80038e2:	4658      	mov	r0, fp
 80038e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e8:	20003d58 	.word	0x20003d58
 80038ec:	20003dd8 	.word	0x20003dd8
 80038f0:	20003cb8 	.word	0x20003cb8
 80038f4:	20003cbc 	.word	0x20003cbc
 80038f8:	20003d94 	.word	0x20003d94
 80038fc:	20003d90 	.word	0x20003d90
 8003900:	20003cb4 	.word	0x20003cb4
 8003904:	20003cc0 	.word	0x20003cc0
 8003908:	20003d54 	.word	0x20003d54
 800390c:	20003ddc 	.word	0x20003ddc
 8003910:	20003d60 	.word	0x20003d60

08003914 <xTaskResumeAll>:
{
 8003914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003918:	4c32      	ldr	r4, [pc, #200]	; (80039e4 <xTaskResumeAll+0xd0>)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	b953      	cbnz	r3, 8003934 <xTaskResumeAll+0x20>
 800391e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003922:	b672      	cpsid	i
 8003924:	f383 8811 	msr	BASEPRI, r3
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	f3bf 8f4f 	dsb	sy
 8003930:	b662      	cpsie	i
 8003932:	e7fe      	b.n	8003932 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8003934:	f7ff f81e 	bl	8002974 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393e:	6824      	ldr	r4, [r4, #0]
 8003940:	b12c      	cbz	r4, 800394e <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 8003942:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003944:	f7ff f83c 	bl	80029c0 <vPortExitCritical>
}
 8003948:	4620      	mov	r0, r4
 800394a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800394e:	4b26      	ldr	r3, [pc, #152]	; (80039e8 <xTaskResumeAll+0xd4>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f5      	beq.n	8003942 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003956:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8003a00 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 800395a:	4f24      	ldr	r7, [pc, #144]	; (80039ec <xTaskResumeAll+0xd8>)
 800395c:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003a04 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003960:	f8d9 3000 	ldr.w	r3, [r9]
 8003964:	b9e3      	cbnz	r3, 80039a0 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8003966:	b10c      	cbz	r4, 800396c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8003968:	f7ff fdb6 	bl	80034d8 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800396c:	4d20      	ldr	r5, [pc, #128]	; (80039f0 <xTaskResumeAll+0xdc>)
 800396e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003970:	b144      	cbz	r4, 8003984 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8003972:	4e20      	ldr	r6, [pc, #128]	; (80039f4 <xTaskResumeAll+0xe0>)
 8003974:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003976:	f7ff ff39 	bl	80037ec <xTaskIncrementTick>
 800397a:	b100      	cbz	r0, 800397e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800397c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800397e:	3c01      	subs	r4, #1
 8003980:	d1f9      	bne.n	8003976 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8003982:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003984:	4b1b      	ldr	r3, [pc, #108]	; (80039f4 <xTaskResumeAll+0xe0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d0da      	beq.n	8003942 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800398c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003990:	4b19      	ldr	r3, [pc, #100]	; (80039f8 <xTaskResumeAll+0xe4>)
 8003992:	601a      	str	r2, [r3, #0]
 8003994:	f3bf 8f4f 	dsb	sy
 8003998:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800399c:	2401      	movs	r4, #1
 800399e:	e7d1      	b.n	8003944 <xTaskResumeAll+0x30>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039a0:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 80039a4:	2501      	movs	r5, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80039a6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039a8:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80039aa:	f104 0018 	add.w	r0, r4, #24
 80039ae:	f7fe ff74 	bl	800289a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039b2:	4630      	mov	r0, r6
 80039b4:	f7fe ff71 	bl	800289a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039ba:	6839      	ldr	r1, [r7, #0]
 80039bc:	2014      	movs	r0, #20
 80039be:	fa05 f302 	lsl.w	r3, r5, r2
 80039c2:	fb00 8002 	mla	r0, r0, r2, r8
 80039c6:	430b      	orrs	r3, r1
 80039c8:	4631      	mov	r1, r6
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	f7fe ff42 	bl	8002854 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039d0:	4b0a      	ldr	r3, [pc, #40]	; (80039fc <xTaskResumeAll+0xe8>)
 80039d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d8:	429a      	cmp	r2, r3
 80039da:	d3c1      	bcc.n	8003960 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <xTaskResumeAll+0xe0>)
 80039de:	601d      	str	r5, [r3, #0]
 80039e0:	e7be      	b.n	8003960 <xTaskResumeAll+0x4c>
 80039e2:	bf00      	nop
 80039e4:	20003d58 	.word	0x20003d58
 80039e8:	20003d4c 	.word	0x20003d4c
 80039ec:	20003d60 	.word	0x20003d60
 80039f0:	20003d54 	.word	0x20003d54
 80039f4:	20003ddc 	.word	0x20003ddc
 80039f8:	e000ed04 	.word	0xe000ed04
 80039fc:	20003cb4 	.word	0x20003cb4
 8003a00:	20003d98 	.word	0x20003d98
 8003a04:	20003cc0 	.word	0x20003cc0

08003a08 <vTaskDelay>:
	{
 8003a08:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003a0a:	b940      	cbnz	r0, 8003a1e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a10:	4b0e      	ldr	r3, [pc, #56]	; (8003a4c <vTaskDelay+0x44>)
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003a1e:	4b0c      	ldr	r3, [pc, #48]	; (8003a50 <vTaskDelay+0x48>)
 8003a20:	6819      	ldr	r1, [r3, #0]
 8003a22:	b151      	cbz	r1, 8003a3a <vTaskDelay+0x32>
 8003a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a28:	b672      	cpsid	i
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	b662      	cpsie	i
 8003a38:	e7fe      	b.n	8003a38 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003a3a:	f7ff fec1 	bl	80037c0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003a3e:	f7ff fd5d 	bl	80034fc <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003a42:	f7ff ff67 	bl	8003914 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003a46:	2800      	cmp	r0, #0
 8003a48:	d0e0      	beq.n	8003a0c <vTaskDelay+0x4>
 8003a4a:	bd08      	pop	{r3, pc}
 8003a4c:	e000ed04 	.word	0xe000ed04
 8003a50:	20003d58 	.word	0x20003d58

08003a54 <prvIdleTask>:
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003a54:	4e17      	ldr	r6, [pc, #92]	; (8003ab4 <prvIdleTask+0x60>)
{
 8003a56:	b508      	push	{r3, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a58:	4c17      	ldr	r4, [pc, #92]	; (8003ab8 <prvIdleTask+0x64>)
 8003a5a:	6823      	ldr	r3, [r4, #0]
 8003a5c:	b963      	cbnz	r3, 8003a78 <prvIdleTask+0x24>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a5e:	4b17      	ldr	r3, [pc, #92]	; (8003abc <prvIdleTask+0x68>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d9f8      	bls.n	8003a58 <prvIdleTask+0x4>
				taskYIELD();
 8003a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <prvIdleTask+0x6c>)
 8003a6c:	601a      	str	r2, [r3, #0]
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	e7ef      	b.n	8003a58 <prvIdleTask+0x4>
			vTaskSuspendAll();
 8003a78:	f7ff fea2 	bl	80037c0 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8003a7c:	6835      	ldr	r5, [r6, #0]
			( void ) xTaskResumeAll();
 8003a7e:	f7ff ff49 	bl	8003914 <xTaskResumeAll>
			if( xListIsEmpty == pdFALSE )
 8003a82:	2d00      	cmp	r5, #0
 8003a84:	d0e9      	beq.n	8003a5a <prvIdleTask+0x6>
				taskENTER_CRITICAL();
 8003a86:	f7fe ff75 	bl	8002974 <vPortEnterCritical>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003a8a:	68f3      	ldr	r3, [r6, #12]
 8003a8c:	68dd      	ldr	r5, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a8e:	1d28      	adds	r0, r5, #4
 8003a90:	f7fe ff03 	bl	800289a <uxListRemove>
					--uxCurrentNumberOfTasks;
 8003a94:	4a0b      	ldr	r2, [pc, #44]	; (8003ac4 <prvIdleTask+0x70>)
 8003a96:	6813      	ldr	r3, [r2, #0]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8003a9c:	6823      	ldr	r3, [r4, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	6023      	str	r3, [r4, #0]
				taskEXIT_CRITICAL();
 8003aa2:	f7fe ff8d 	bl	80029c0 <vPortExitCritical>
			vPortFree( pxTCB->pxStack );
 8003aa6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8003aa8:	f7ff f93c 	bl	8002d24 <vPortFree>
			vPortFree( pxTCB );
 8003aac:	4628      	mov	r0, r5
 8003aae:	f7ff f939 	bl	8002d24 <vPortFree>
 8003ab2:	e7d2      	b.n	8003a5a <prvIdleTask+0x6>
 8003ab4:	20003dc4 	.word	0x20003dc4
 8003ab8:	20003d50 	.word	0x20003d50
 8003abc:	20003cc0 	.word	0x20003cc0
 8003ac0:	e000ed04 	.word	0xe000ed04
 8003ac4:	20003d4c 	.word	0x20003d4c

08003ac8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ac8:	4b18      	ldr	r3, [pc, #96]	; (8003b2c <vTaskSwitchContext+0x64>)
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <vTaskSwitchContext+0x68>)
{
 8003ace:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ad0:	b112      	cbz	r2, 8003ad8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003ad2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003ad8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <vTaskSwitchContext+0x6c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8003ade:	fab3 f383 	clz	r3, r3
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2214      	movs	r2, #20
 8003ae6:	4914      	ldr	r1, [pc, #80]	; (8003b38 <vTaskSwitchContext+0x70>)
 8003ae8:	f1c3 031f 	rsb	r3, r3, #31
 8003aec:	435a      	muls	r2, r3
 8003aee:	588c      	ldr	r4, [r1, r2]
 8003af0:	1888      	adds	r0, r1, r2
 8003af2:	b954      	cbnz	r4, 8003b0a <vTaskSwitchContext+0x42>
	__asm volatile
 8003af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003af8:	b672      	cpsid	i
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	b662      	cpsie	i
 8003b08:	e7fe      	b.n	8003b08 <vTaskSwitchContext+0x40>
 8003b0a:	6844      	ldr	r4, [r0, #4]
 8003b0c:	3208      	adds	r2, #8
 8003b0e:	6864      	ldr	r4, [r4, #4]
 8003b10:	440a      	add	r2, r1
 8003b12:	4294      	cmp	r4, r2
 8003b14:	6044      	str	r4, [r0, #4]
 8003b16:	bf04      	itt	eq
 8003b18:	6862      	ldreq	r2, [r4, #4]
 8003b1a:	6042      	streq	r2, [r0, #4]
 8003b1c:	2214      	movs	r2, #20
 8003b1e:	fb02 1303 	mla	r3, r2, r3, r1
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	68da      	ldr	r2, [r3, #12]
 8003b26:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <vTaskSwitchContext+0x74>)
 8003b28:	e7d4      	b.n	8003ad4 <vTaskSwitchContext+0xc>
 8003b2a:	bf00      	nop
 8003b2c:	20003d58 	.word	0x20003d58
 8003b30:	20003ddc 	.word	0x20003ddc
 8003b34:	20003d60 	.word	0x20003d60
 8003b38:	20003cc0 	.word	0x20003cc0
 8003b3c:	20003cb4 	.word	0x20003cb4

08003b40 <vTaskPlaceOnEventList>:
{
 8003b40:	b510      	push	{r4, lr}
 8003b42:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003b44:	b950      	cbnz	r0, 8003b5c <vTaskPlaceOnEventList+0x1c>
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	b672      	cpsid	i
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	b662      	cpsie	i
 8003b5a:	e7fe      	b.n	8003b5a <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <vTaskPlaceOnEventList+0x34>)
 8003b5e:	6819      	ldr	r1, [r3, #0]
 8003b60:	3118      	adds	r1, #24
 8003b62:	f7fe fe83 	bl	800286c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b66:	4620      	mov	r0, r4
 8003b68:	2101      	movs	r1, #1
}
 8003b6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b6e:	f7ff bcc5 	b.w	80034fc <prvAddCurrentTaskToDelayedList>
 8003b72:	bf00      	nop
 8003b74:	20003cb4 	.word	0x20003cb4

08003b78 <xTaskRemoveFromEventList>:
{
 8003b78:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003b7a:	68c3      	ldr	r3, [r0, #12]
 8003b7c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003b7e:	b954      	cbnz	r4, 8003b96 <xTaskRemoveFromEventList+0x1e>
 8003b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b84:	b672      	cpsid	i
 8003b86:	f383 8811 	msr	BASEPRI, r3
 8003b8a:	f3bf 8f6f 	isb	sy
 8003b8e:	f3bf 8f4f 	dsb	sy
 8003b92:	b662      	cpsie	i
 8003b94:	e7fe      	b.n	8003b94 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003b96:	f104 0518 	add.w	r5, r4, #24
 8003b9a:	4628      	mov	r0, r5
 8003b9c:	f7fe fe7d 	bl	800289a <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ba0:	4b11      	ldr	r3, [pc, #68]	; (8003be8 <xTaskRemoveFromEventList+0x70>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	b9db      	cbnz	r3, 8003bde <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003ba6:	1d25      	adds	r5, r4, #4
 8003ba8:	4628      	mov	r0, r5
 8003baa:	f7fe fe76 	bl	800289a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bae:	490f      	ldr	r1, [pc, #60]	; (8003bec <xTaskRemoveFromEventList+0x74>)
 8003bb0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	6808      	ldr	r0, [r1, #0]
 8003bb6:	4093      	lsls	r3, r2
 8003bb8:	4303      	orrs	r3, r0
 8003bba:	2014      	movs	r0, #20
 8003bbc:	600b      	str	r3, [r1, #0]
 8003bbe:	4629      	mov	r1, r5
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <xTaskRemoveFromEventList+0x78>)
 8003bc2:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bc6:	f7fe fe45 	bl	8002854 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bca:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <xTaskRemoveFromEventList+0x7c>)
 8003bcc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d906      	bls.n	8003be4 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8003bd6:	2001      	movs	r0, #1
 8003bd8:	4b07      	ldr	r3, [pc, #28]	; (8003bf8 <xTaskRemoveFromEventList+0x80>)
 8003bda:	6018      	str	r0, [r3, #0]
 8003bdc:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bde:	4629      	mov	r1, r5
 8003be0:	4806      	ldr	r0, [pc, #24]	; (8003bfc <xTaskRemoveFromEventList+0x84>)
 8003be2:	e7f0      	b.n	8003bc6 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8003be4:	2000      	movs	r0, #0
}
 8003be6:	bd38      	pop	{r3, r4, r5, pc}
 8003be8:	20003d58 	.word	0x20003d58
 8003bec:	20003d60 	.word	0x20003d60
 8003bf0:	20003cc0 	.word	0x20003cc0
 8003bf4:	20003cb4 	.word	0x20003cb4
 8003bf8:	20003ddc 	.word	0x20003ddc
 8003bfc:	20003d98 	.word	0x20003d98

08003c00 <vTaskSetTimeOutState>:
{
 8003c00:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
 8003c02:	b908      	cbnz	r0, 8003c08 <vTaskSetTimeOutState+0x8>
 8003c04:	f7ff fcc0 	bl	8003588 <prvTaskIsTaskSuspended.part.0>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c08:	4b03      	ldr	r3, [pc, #12]	; (8003c18 <vTaskSetTimeOutState+0x18>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c0e:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <vTaskSetTimeOutState+0x1c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6043      	str	r3, [r0, #4]
 8003c14:	bd08      	pop	{r3, pc}
 8003c16:	bf00      	nop
 8003c18:	20003d94 	.word	0x20003d94
 8003c1c:	20003dd8 	.word	0x20003dd8

08003c20 <xTaskCheckForTimeOut>:
{
 8003c20:	b538      	push	{r3, r4, r5, lr}
 8003c22:	460d      	mov	r5, r1
	configASSERT( pxTimeOut );
 8003c24:	4604      	mov	r4, r0
 8003c26:	b950      	cbnz	r0, 8003c3e <xTaskCheckForTimeOut+0x1e>
 8003c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c2c:	b672      	cpsid	i
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	b662      	cpsie	i
 8003c3c:	e7fe      	b.n	8003c3c <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8003c3e:	b951      	cbnz	r1, 8003c56 <xTaskCheckForTimeOut+0x36>
 8003c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c44:	b672      	cpsid	i
 8003c46:	f383 8811 	msr	BASEPRI, r3
 8003c4a:	f3bf 8f6f 	isb	sy
 8003c4e:	f3bf 8f4f 	dsb	sy
 8003c52:	b662      	cpsie	i
 8003c54:	e7fe      	b.n	8003c54 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 8003c56:	f7fe fe8d 	bl	8002974 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003c5a:	4b0e      	ldr	r3, [pc, #56]	; (8003c94 <xTaskCheckForTimeOut+0x74>)
 8003c5c:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003c5e:	682b      	ldr	r3, [r5, #0]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	d010      	beq.n	8003c86 <xTaskCheckForTimeOut+0x66>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003c64:	4a0c      	ldr	r2, [pc, #48]	; (8003c98 <xTaskCheckForTimeOut+0x78>)
 8003c66:	6820      	ldr	r0, [r4, #0]
 8003c68:	6812      	ldr	r2, [r2, #0]
 8003c6a:	4290      	cmp	r0, r2
 8003c6c:	6862      	ldr	r2, [r4, #4]
 8003c6e:	d001      	beq.n	8003c74 <xTaskCheckForTimeOut+0x54>
 8003c70:	4291      	cmp	r1, r2
 8003c72:	d20d      	bcs.n	8003c90 <xTaskCheckForTimeOut+0x70>
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003c74:	1a88      	subs	r0, r1, r2
 8003c76:	4283      	cmp	r3, r0
 8003c78:	d90a      	bls.n	8003c90 <xTaskCheckForTimeOut+0x70>
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003c7a:	1a5b      	subs	r3, r3, r1
			vTaskSetTimeOutState( pxTimeOut );
 8003c7c:	4620      	mov	r0, r4
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 8003c7e:	4413      	add	r3, r2
 8003c80:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
 8003c82:	f7ff ffbd 	bl	8003c00 <vTaskSetTimeOutState>
				xReturn = pdFALSE;
 8003c86:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c88:	f7fe fe9a 	bl	80029c0 <vPortExitCritical>
}
 8003c8c:	4620      	mov	r0, r4
 8003c8e:	bd38      	pop	{r3, r4, r5, pc}
			xReturn = pdTRUE;
 8003c90:	2401      	movs	r4, #1
 8003c92:	e7f9      	b.n	8003c88 <xTaskCheckForTimeOut+0x68>
 8003c94:	20003dd8 	.word	0x20003dd8
 8003c98:	20003d94 	.word	0x20003d94

08003c9c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	4b01      	ldr	r3, [pc, #4]	; (8003ca4 <vTaskMissedYield+0x8>)
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	4770      	bx	lr
 8003ca4:	20003ddc 	.word	0x20003ddc

08003ca8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <xTaskGetSchedulerState+0x18>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	b133      	cbz	r3, 8003cbc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <xTaskGetSchedulerState+0x1c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8003cb4:	bf0c      	ite	eq
 8003cb6:	2002      	moveq	r0, #2
 8003cb8:	2000      	movne	r0, #0
 8003cba:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cbc:	2001      	movs	r0, #1
	}
 8003cbe:	4770      	bx	lr
 8003cc0:	20003dac 	.word	0x20003dac
 8003cc4:	20003d58 	.word	0x20003d58

08003cc8 <vTaskPriorityInherit>:
	{
 8003cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if( pxMutexHolder != NULL )
 8003ccc:	4604      	mov	r4, r0
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d038      	beq.n	8003d44 <vTaskPriorityInherit+0x7c>
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003cd2:	4d1d      	ldr	r5, [pc, #116]	; (8003d48 <vTaskPriorityInherit+0x80>)
 8003cd4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8003cd6:	682a      	ldr	r2, [r5, #0]
 8003cd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d232      	bcs.n	8003d44 <vTaskPriorityInherit+0x7c>
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003cde:	6982      	ldr	r2, [r0, #24]
 8003ce0:	2a00      	cmp	r2, #0
 8003ce2:	db04      	blt.n	8003cee <vTaskPriorityInherit+0x26>
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce4:	682a      	ldr	r2, [r5, #0]
 8003ce6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ce8:	f1c2 0207 	rsb	r2, r2, #7
 8003cec:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003cee:	4e17      	ldr	r6, [pc, #92]	; (8003d4c <vTaskPriorityInherit+0x84>)
 8003cf0:	2714      	movs	r7, #20
 8003cf2:	6962      	ldr	r2, [r4, #20]
 8003cf4:	fb07 6303 	mla	r3, r7, r3, r6
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d120      	bne.n	8003d3e <vTaskPriorityInherit+0x76>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cfc:	f104 0804 	add.w	r8, r4, #4
 8003d00:	4640      	mov	r0, r8
 8003d02:	f7fe fdca 	bl	800289a <uxListRemove>
 8003d06:	4a12      	ldr	r2, [pc, #72]	; (8003d50 <vTaskPriorityInherit+0x88>)
 8003d08:	b948      	cbnz	r0, 8003d1e <vTaskPriorityInherit+0x56>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003d0a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003d0c:	4347      	muls	r7, r0
 8003d0e:	59f3      	ldr	r3, [r6, r7]
 8003d10:	b92b      	cbnz	r3, 8003d1e <vTaskPriorityInherit+0x56>
 8003d12:	2101      	movs	r1, #1
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	4081      	lsls	r1, r0
 8003d18:	ea23 0301 	bic.w	r3, r3, r1
 8003d1c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d1e:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxTCB );
 8003d20:	6811      	ldr	r1, [r2, #0]
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d22:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003d24:	2301      	movs	r3, #1
 8003d26:	4083      	lsls	r3, r0
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d28:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8003d2a:	430b      	orrs	r3, r1
 8003d2c:	4641      	mov	r1, r8
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	2314      	movs	r3, #20
 8003d32:	fb03 6000 	mla	r0, r3, r0, r6
	}
 8003d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
					prvAddTaskToReadyList( pxTCB );
 8003d3a:	f7fe bd8b 	b.w	8002854 <vListInsertEnd>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d3e:	682b      	ldr	r3, [r5, #0]
 8003d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d42:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d48:	20003cb4 	.word	0x20003cb4
 8003d4c:	20003cc0 	.word	0x20003cc0
 8003d50:	20003d60 	.word	0x20003d60

08003d54 <xTaskPriorityDisinherit>:
	{
 8003d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8003d56:	4604      	mov	r4, r0
 8003d58:	b908      	cbnz	r0, 8003d5e <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8003d5e:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <xTaskPriorityDisinherit+0x9c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4298      	cmp	r0, r3
 8003d64:	d00a      	beq.n	8003d7c <xTaskPriorityDisinherit+0x28>
 8003d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6a:	b672      	cpsid	i
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	b662      	cpsie	i
 8003d7a:	e7fe      	b.n	8003d7a <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d7c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8003d7e:	b953      	cbnz	r3, 8003d96 <xTaskPriorityDisinherit+0x42>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	b672      	cpsid	i
 8003d86:	f383 8811 	msr	BASEPRI, r3
 8003d8a:	f3bf 8f6f 	isb	sy
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	b662      	cpsie	i
 8003d94:	e7fe      	b.n	8003d94 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d96:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8003d98:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8003d9c:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d9e:	4291      	cmp	r1, r2
 8003da0:	d0db      	beq.n	8003d5a <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1d9      	bne.n	8003d5a <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003da6:	1d05      	adds	r5, r0, #4
 8003da8:	4e12      	ldr	r6, [pc, #72]	; (8003df4 <xTaskPriorityDisinherit+0xa0>)
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7fe fd75 	bl	800289a <uxListRemove>
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <xTaskPriorityDisinherit+0xa4>)
 8003db2:	b950      	cbnz	r0, 8003dca <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003db4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003db6:	2114      	movs	r1, #20
 8003db8:	4379      	muls	r1, r7
 8003dba:	5873      	ldr	r3, [r6, r1]
 8003dbc:	b92b      	cbnz	r3, 8003dca <xTaskPriorityDisinherit+0x76>
 8003dbe:	2001      	movs	r0, #1
 8003dc0:	6813      	ldr	r3, [r2, #0]
 8003dc2:	40b8      	lsls	r0, r7
 8003dc4:	ea23 0300 	bic.w	r3, r3, r0
 8003dc8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dca:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dcc:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dd0:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dd2:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dd4:	2401      	movs	r4, #1
 8003dd6:	6811      	ldr	r1, [r2, #0]
 8003dd8:	fa04 f003 	lsl.w	r0, r4, r3
 8003ddc:	4308      	orrs	r0, r1
 8003dde:	4629      	mov	r1, r5
 8003de0:	6010      	str	r0, [r2, #0]
 8003de2:	2014      	movs	r0, #20
 8003de4:	fb00 6003 	mla	r0, r0, r3, r6
 8003de8:	f7fe fd34 	bl	8002854 <vListInsertEnd>
					xReturn = pdTRUE;
 8003dec:	4620      	mov	r0, r4
	}
 8003dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003df0:	20003cb4 	.word	0x20003cb4
 8003df4:	20003cc0 	.word	0x20003cc0
 8003df8:	20003d60 	.word	0x20003d60

08003dfc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8003dfc:	4b04      	ldr	r3, [pc, #16]	; (8003e10 <pvTaskIncrementMutexHeldCount+0x14>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	b11a      	cbz	r2, 8003e0a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8003e06:	3201      	adds	r2, #1
 8003e08:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8003e0a:	6818      	ldr	r0, [r3, #0]
	}
 8003e0c:	4770      	bx	lr
 8003e0e:	bf00      	nop
 8003e10:	20003cb4 	.word	0x20003cb4

08003e14 <tcpip_thread>:
tcpip_thread(void *arg)
{
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8003e14:	4b1d      	ldr	r3, [pc, #116]	; (8003e8c <tcpip_thread+0x78>)
 8003e16:	681b      	ldr	r3, [r3, #0]
{
 8003e18:	b507      	push	{r0, r1, r2, lr}
  if (tcpip_init_done != NULL) {
 8003e1a:	b113      	cbz	r3, 8003e22 <tcpip_thread+0xe>
    tcpip_init_done(tcpip_init_done_arg);
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <tcpip_thread+0x7c>)
 8003e1e:	6810      	ldr	r0, [r2, #0]
 8003e20:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8003e22:	4d1c      	ldr	r5, [pc, #112]	; (8003e94 <tcpip_thread+0x80>)
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003e24:	4e1c      	ldr	r6, [pc, #112]	; (8003e98 <tcpip_thread+0x84>)
      msg->msg.cb.function(msg->msg.cb.ctx);
      break;

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003e26:	4c1d      	ldr	r4, [pc, #116]	; (8003e9c <tcpip_thread+0x88>)
  LOCK_TCPIP_CORE();
 8003e28:	481a      	ldr	r0, [pc, #104]	; (8003e94 <tcpip_thread+0x80>)
 8003e2a:	f006 fb38 	bl	800a49e <sys_mutex_lock>
    UNLOCK_TCPIP_CORE();
 8003e2e:	4628      	mov	r0, r5
 8003e30:	f006 fb3a 	bl	800a4a8 <sys_mutex_unlock>
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8003e34:	a901      	add	r1, sp, #4
 8003e36:	4630      	mov	r0, r6
 8003e38:	f006 f81a 	bl	8009e70 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8003e3c:	4628      	mov	r0, r5
 8003e3e:	f006 fb2e 	bl	800a49e <sys_mutex_lock>
    if (msg == NULL) {
 8003e42:	9b01      	ldr	r3, [sp, #4]
 8003e44:	b933      	cbnz	r3, 8003e54 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003e46:	4623      	mov	r3, r4
 8003e48:	2269      	movs	r2, #105	; 0x69
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003e4a:	4915      	ldr	r1, [pc, #84]	; (8003ea0 <tcpip_thread+0x8c>)
 8003e4c:	4815      	ldr	r0, [pc, #84]	; (8003ea4 <tcpip_thread+0x90>)
 8003e4e:	f007 f99f 	bl	800b190 <iprintf>
      break;
 8003e52:	e7ec      	b.n	8003e2e <tcpip_thread+0x1a>
    switch (msg->type) {
 8003e54:	781a      	ldrb	r2, [r3, #0]
 8003e56:	2a03      	cmp	r2, #3
 8003e58:	d00b      	beq.n	8003e72 <tcpip_thread+0x5e>
 8003e5a:	2a04      	cmp	r2, #4
 8003e5c:	d00f      	beq.n	8003e7e <tcpip_thread+0x6a>
 8003e5e:	2a02      	cmp	r2, #2
 8003e60:	d111      	bne.n	8003e86 <tcpip_thread+0x72>
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8003e62:	1d18      	adds	r0, r3, #4
 8003e64:	c807      	ldmia	r0, {r0, r1, r2}
 8003e66:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003e68:	9901      	ldr	r1, [sp, #4]
 8003e6a:	2009      	movs	r0, #9
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003e6c:	f002 fdfa 	bl	8006a64 <memp_free>
      break;
 8003e70:	e7dd      	b.n	8003e2e <tcpip_thread+0x1a>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003e72:	6898      	ldr	r0, [r3, #8]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4790      	blx	r2
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003e78:	9901      	ldr	r1, [sp, #4]
 8003e7a:	2008      	movs	r0, #8
 8003e7c:	e7f6      	b.n	8003e6c <tcpip_thread+0x58>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	6898      	ldr	r0, [r3, #8]
 8003e82:	4790      	blx	r2
      break;
 8003e84:	e7d3      	b.n	8003e2e <tcpip_thread+0x1a>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8003e86:	4623      	mov	r3, r4
 8003e88:	229b      	movs	r2, #155	; 0x9b
 8003e8a:	e7de      	b.n	8003e4a <tcpip_thread+0x36>
 8003e8c:	20003de4 	.word	0x20003de4
 8003e90:	20003de8 	.word	0x20003de8
 8003e94:	20003f9c 	.word	0x20003f9c
 8003e98:	20003de0 	.word	0x20003de0
 8003e9c:	0800c0b8 	.word	0x0800c0b8
 8003ea0:	0800c0e8 	.word	0x0800c0e8
 8003ea4:	0800c106 	.word	0x0800c106

08003ea8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8003ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eaa:	4607      	mov	r7, r0
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003eac:	4810      	ldr	r0, [pc, #64]	; (8003ef0 <tcpip_inpkt+0x48>)
{
 8003eae:	460e      	mov	r6, r1
 8003eb0:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003eb2:	f006 fad3 	bl	800a45c <sys_mbox_valid>
 8003eb6:	b928      	cbnz	r0, 8003ec4 <tcpip_inpkt+0x1c>
 8003eb8:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <tcpip_inpkt+0x4c>)
 8003eba:	22b5      	movs	r2, #181	; 0xb5
 8003ebc:	490e      	ldr	r1, [pc, #56]	; (8003ef8 <tcpip_inpkt+0x50>)
 8003ebe:	480f      	ldr	r0, [pc, #60]	; (8003efc <tcpip_inpkt+0x54>)
 8003ec0:	f007 f966 	bl	800b190 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8003ec4:	2009      	movs	r0, #9
 8003ec6:	f002 fdb1 	bl	8006a2c <memp_malloc>
  if (msg == NULL) {
 8003eca:	4604      	mov	r4, r0
 8003ecc:	b168      	cbz	r0, 8003eea <tcpip_inpkt+0x42>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_INPKT;
 8003ece:	2302      	movs	r3, #2
  msg->msg.inp.p = p;
 8003ed0:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 8003ed2:	6086      	str	r6, [r0, #8]
  msg->msg.inp.input_fn = input_fn;
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003ed4:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 8003ed6:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.input_fn = input_fn;
 8003ed8:	60c5      	str	r5, [r0, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003eda:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <tcpip_inpkt+0x48>)
 8003edc:	f006 fa92 	bl	800a404 <sys_mbox_trypost>
 8003ee0:	b128      	cbz	r0, 8003eee <tcpip_inpkt+0x46>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	2009      	movs	r0, #9
 8003ee6:	f002 fdbd 	bl	8006a64 <memp_free>
    return ERR_MEM;
 8003eea:	f04f 30ff 	mov.w	r0, #4294967295
    return ERR_MEM;
  }
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8003eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ef0:	20003de0 	.word	0x20003de0
 8003ef4:	0800c0b8 	.word	0x0800c0b8
 8003ef8:	0800c0ab 	.word	0x0800c0ab
 8003efc:	0800c106 	.word	0x0800c106

08003f00 <tcpip_input>:
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8003f00:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8003f04:	f013 0f18 	tst.w	r3, #24
    return tcpip_inpkt(p, inp, ethernet_input);
 8003f08:	bf14      	ite	ne
 8003f0a:	4a02      	ldrne	r2, [pc, #8]	; (8003f14 <tcpip_input+0x14>)
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8003f0c:	4a02      	ldreq	r2, [pc, #8]	; (8003f18 <tcpip_input+0x18>)
 8003f0e:	f7ff bfcb 	b.w	8003ea8 <tcpip_inpkt>
 8003f12:	bf00      	nop
 8003f14:	0800a2c5 	.word	0x0800a2c5
 8003f18:	08005b2d 	.word	0x08005b2d

08003f1c <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8003f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f1e:	4607      	mov	r7, r0
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003f20:	4812      	ldr	r0, [pc, #72]	; (8003f6c <tcpip_callback_with_block+0x50>)
{
 8003f22:	460e      	mov	r6, r1
 8003f24:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8003f26:	f006 fa99 	bl	800a45c <sys_mbox_valid>
 8003f2a:	b928      	cbnz	r0, 8003f38 <tcpip_callback_with_block+0x1c>
 8003f2c:	4b10      	ldr	r3, [pc, #64]	; (8003f70 <tcpip_callback_with_block+0x54>)
 8003f2e:	22ee      	movs	r2, #238	; 0xee
 8003f30:	4910      	ldr	r1, [pc, #64]	; (8003f74 <tcpip_callback_with_block+0x58>)
 8003f32:	4811      	ldr	r0, [pc, #68]	; (8003f78 <tcpip_callback_with_block+0x5c>)
 8003f34:	f007 f92c 	bl	800b190 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8003f38:	2008      	movs	r0, #8
 8003f3a:	f002 fd77 	bl	8006a2c <memp_malloc>
  if (msg == NULL) {
 8003f3e:	4604      	mov	r4, r0
 8003f40:	b188      	cbz	r0, 8003f66 <tcpip_callback_with_block+0x4a>
    return ERR_MEM;
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8003f42:	2303      	movs	r3, #3
  msg->msg.cb.function = function;
 8003f44:	6047      	str	r7, [r0, #4]
  msg->msg.cb.ctx = ctx;
 8003f46:	6086      	str	r6, [r0, #8]
  if (block) {
    sys_mbox_post(&mbox, msg);
 8003f48:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_CALLBACK;
 8003f4a:	7003      	strb	r3, [r0, #0]
    sys_mbox_post(&mbox, msg);
 8003f4c:	4807      	ldr	r0, [pc, #28]	; (8003f6c <tcpip_callback_with_block+0x50>)
  if (block) {
 8003f4e:	b11d      	cbz	r5, 8003f58 <tcpip_callback_with_block+0x3c>
    sys_mbox_post(&mbox, msg);
 8003f50:	f006 fa4c 	bl	800a3ec <sys_mbox_post>
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
      memp_free(MEMP_TCPIP_MSG_API, msg);
      return ERR_MEM;
    }
  }
  return ERR_OK;
 8003f54:	2000      	movs	r0, #0
 8003f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8003f58:	f006 fa54 	bl	800a404 <sys_mbox_trypost>
 8003f5c:	b128      	cbz	r0, 8003f6a <tcpip_callback_with_block+0x4e>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8003f5e:	4621      	mov	r1, r4
 8003f60:	2008      	movs	r0, #8
 8003f62:	f002 fd7f 	bl	8006a64 <memp_free>
    return ERR_MEM;
 8003f66:	f04f 30ff 	mov.w	r0, #4294967295
}
 8003f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f6c:	20003de0 	.word	0x20003de0
 8003f70:	0800c0b8 	.word	0x0800c0b8
 8003f74:	0800c0ab 	.word	0x0800c0ab
 8003f78:	0800c106 	.word	0x0800c106

08003f7c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8003f7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003f7e:	4605      	mov	r5, r0
 8003f80:	460c      	mov	r4, r1
  lwip_init();
 8003f82:	f000 f840 	bl	8004006 <lwip_init>

  tcpip_init_done = initfunc;
 8003f86:	4b13      	ldr	r3, [pc, #76]	; (8003fd4 <tcpip_init+0x58>)
  tcpip_init_done_arg = arg;
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003f88:	2106      	movs	r1, #6
 8003f8a:	4813      	ldr	r0, [pc, #76]	; (8003fd8 <tcpip_init+0x5c>)
  tcpip_init_done = initfunc;
 8003f8c:	601d      	str	r5, [r3, #0]
  tcpip_init_done_arg = arg;
 8003f8e:	4b13      	ldr	r3, [pc, #76]	; (8003fdc <tcpip_init+0x60>)
 8003f90:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8003f92:	f006 fa1b 	bl	800a3cc <sys_mbox_new>
 8003f96:	b130      	cbz	r0, 8003fa6 <tcpip_init+0x2a>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8003f98:	4b11      	ldr	r3, [pc, #68]	; (8003fe0 <tcpip_init+0x64>)
 8003f9a:	f240 12d5 	movw	r2, #469	; 0x1d5
 8003f9e:	4911      	ldr	r1, [pc, #68]	; (8003fe4 <tcpip_init+0x68>)
 8003fa0:	4811      	ldr	r0, [pc, #68]	; (8003fe8 <tcpip_init+0x6c>)
 8003fa2:	f007 f8f5 	bl	800b190 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8003fa6:	4811      	ldr	r0, [pc, #68]	; (8003fec <tcpip_init+0x70>)
 8003fa8:	f006 fa6a 	bl	800a480 <sys_mutex_new>
 8003fac:	b130      	cbz	r0, 8003fbc <tcpip_init+0x40>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <tcpip_init+0x64>)
 8003fb0:	f240 12d9 	movw	r2, #473	; 0x1d9
 8003fb4:	490e      	ldr	r1, [pc, #56]	; (8003ff0 <tcpip_init+0x74>)
 8003fb6:	480c      	ldr	r0, [pc, #48]	; (8003fe8 <tcpip_init+0x6c>)
 8003fb8:	f007 f8ea 	bl	800b190 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	490c      	ldr	r1, [pc, #48]	; (8003ff4 <tcpip_init+0x78>)
 8003fc2:	9300      	str	r3, [sp, #0]
 8003fc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fc8:	480b      	ldr	r0, [pc, #44]	; (8003ff8 <tcpip_init+0x7c>)
 8003fca:	f006 fa70 	bl	800a4ae <sys_thread_new>
}
 8003fce:	b003      	add	sp, #12
 8003fd0:	bd30      	pop	{r4, r5, pc}
 8003fd2:	bf00      	nop
 8003fd4:	20003de4 	.word	0x20003de4
 8003fd8:	20003de0 	.word	0x20003de0
 8003fdc:	20003de8 	.word	0x20003de8
 8003fe0:	0800c0b8 	.word	0x0800c0b8
 8003fe4:	0800c05a 	.word	0x0800c05a
 8003fe8:	0800c106 	.word	0x0800c106
 8003fec:	20003f9c 	.word	0x20003f9c
 8003ff0:	0800c07d 	.word	0x0800c07d
 8003ff4:	08003e15 	.word	0x08003e15
 8003ff8:	0800c09e 	.word	0x0800c09e

08003ffc <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return (u16_t)PP_HTONS(n);
 8003ffc:	ba40      	rev16	r0, r0
}
 8003ffe:	b280      	uxth	r0, r0
 8004000:	4770      	bx	lr

08004002 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return (u32_t)PP_HTONL(n);
}
 8004002:	ba00      	rev	r0, r0
 8004004:	4770      	bx	lr

08004006 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8004006:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8004008:	f006 fa2e 	bl	800a468 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800400c:	f002 fa98 	bl	8006540 <mem_init>
  memp_init();
 8004010:	f002 fcfe 	bl	8006a10 <memp_init>
  pbuf_init();
  netif_init();
 8004014:	f002 fd49 	bl	8006aaa <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8004018:	f005 ff7c 	bl	8009f14 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800401c:	f003 f9c6 	bl	80073ac <tcp_init>
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8004020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8004024:	f005 beec 	b.w	8009e00 <sys_timeouts_init>

08004028 <dhcp_set_state>:
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
  if (new_state != dhcp->state) {
 8004028:	7a43      	ldrb	r3, [r0, #9]
 800402a:	428b      	cmp	r3, r1
    dhcp->state = new_state;
    dhcp->tries = 0;
 800402c:	bf1f      	itttt	ne
 800402e:	2300      	movne	r3, #0
    dhcp->state = new_state;
 8004030:	7241      	strbne	r1, [r0, #9]
    dhcp->tries = 0;
 8004032:	7283      	strbne	r3, [r0, #10]
    dhcp->request_timeout = 0;
 8004034:	82c3      	strhne	r3, [r0, #22]
 8004036:	4770      	bx	lr

08004038 <dhcp_option_short>:
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
}

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8004038:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800403a:	8a83      	ldrh	r3, [r0, #20]
{
 800403c:	4604      	mov	r4, r0
 800403e:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8004040:	3302      	adds	r3, #2
 8004042:	2b44      	cmp	r3, #68	; 0x44
 8004044:	d906      	bls.n	8004054 <dhcp_option_short+0x1c>
 8004046:	4b0a      	ldr	r3, [pc, #40]	; (8004070 <dhcp_option_short+0x38>)
 8004048:	f240 5282 	movw	r2, #1410	; 0x582
 800404c:	4909      	ldr	r1, [pc, #36]	; (8004074 <dhcp_option_short+0x3c>)
 800404e:	480a      	ldr	r0, [pc, #40]	; (8004078 <dhcp_option_short+0x40>)
 8004050:	f007 f89e 	bl	800b190 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8004054:	8aa3      	ldrh	r3, [r4, #20]
 8004056:	0a28      	lsrs	r0, r5, #8
 8004058:	6922      	ldr	r2, [r4, #16]
 800405a:	18d1      	adds	r1, r2, r3
 800405c:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8004060:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8004062:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8004064:	82a1      	strh	r1, [r4, #20]
 8004066:	fa12 f383 	uxtah	r3, r2, r3
 800406a:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 800406e:	bd38      	pop	{r3, r4, r5, pc}
 8004070:	0800c39e 	.word	0x0800c39e
 8004074:	0800c3d3 	.word	0x0800c3d3
 8004078:	0800c106 	.word	0x0800c106

0800407c <dhcp_option>:
{
 800407c:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800407e:	8a83      	ldrh	r3, [r0, #20]
{
 8004080:	4615      	mov	r5, r2
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8004082:	3202      	adds	r2, #2
{
 8004084:	4604      	mov	r4, r0
 8004086:	460e      	mov	r6, r1
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8004088:	4413      	add	r3, r2
 800408a:	2b44      	cmp	r3, #68	; 0x44
 800408c:	d906      	bls.n	800409c <dhcp_option+0x20>
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <dhcp_option+0x3c>)
 8004090:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8004094:	4909      	ldr	r1, [pc, #36]	; (80040bc <dhcp_option+0x40>)
 8004096:	480a      	ldr	r0, [pc, #40]	; (80040c0 <dhcp_option+0x44>)
 8004098:	f007 f87a 	bl	800b190 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 800409c:	8aa3      	ldrh	r3, [r4, #20]
 800409e:	6922      	ldr	r2, [r4, #16]
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	f881 60f0 	strb.w	r6, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80040a6:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80040a8:	3301      	adds	r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 80040aa:	82a1      	strh	r1, [r4, #20]
 80040ac:	fa12 f383 	uxtah	r3, r2, r3
 80040b0:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 80040b4:	bd70      	pop	{r4, r5, r6, pc}
 80040b6:	bf00      	nop
 80040b8:	0800c39e 	.word	0x0800c39e
 80040bc:	0800c2db 	.word	0x0800c2db
 80040c0:	0800c106 	.word	0x0800c106

080040c4 <dhcp_option_byte>:
{
 80040c4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80040c6:	8a83      	ldrh	r3, [r0, #20]
{
 80040c8:	4604      	mov	r4, r0
 80040ca:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80040cc:	2b43      	cmp	r3, #67	; 0x43
 80040ce:	d906      	bls.n	80040de <dhcp_option_byte+0x1a>
 80040d0:	4b07      	ldr	r3, [pc, #28]	; (80040f0 <dhcp_option_byte+0x2c>)
 80040d2:	f240 527b 	movw	r2, #1403	; 0x57b
 80040d6:	4907      	ldr	r1, [pc, #28]	; (80040f4 <dhcp_option_byte+0x30>)
 80040d8:	4807      	ldr	r0, [pc, #28]	; (80040f8 <dhcp_option_byte+0x34>)
 80040da:	f007 f859 	bl	800b190 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 80040de:	8aa2      	ldrh	r2, [r4, #20]
 80040e0:	6923      	ldr	r3, [r4, #16]
 80040e2:	1c51      	adds	r1, r2, #1
 80040e4:	4413      	add	r3, r2
 80040e6:	82a1      	strh	r1, [r4, #20]
 80040e8:	f883 50f0 	strb.w	r5, [r3, #240]	; 0xf0
 80040ec:	bd38      	pop	{r3, r4, r5, pc}
 80040ee:	bf00      	nop
 80040f0:	0800c39e 	.word	0x0800c39e
 80040f4:	0800c323 	.word	0x0800c323
 80040f8:	0800c106 	.word	0x0800c106

080040fc <dhcp_option_long>:
}

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 80040fc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80040fe:	8a83      	ldrh	r3, [r0, #20]
{
 8004100:	4605      	mov	r5, r0
 8004102:	460c      	mov	r4, r1
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8004104:	3304      	adds	r3, #4
 8004106:	2b44      	cmp	r3, #68	; 0x44
 8004108:	d906      	bls.n	8004118 <dhcp_option_long+0x1c>
 800410a:	4b10      	ldr	r3, [pc, #64]	; (800414c <dhcp_option_long+0x50>)
 800410c:	f240 528a 	movw	r2, #1418	; 0x58a
 8004110:	490f      	ldr	r1, [pc, #60]	; (8004150 <dhcp_option_long+0x54>)
 8004112:	4810      	ldr	r0, [pc, #64]	; (8004154 <dhcp_option_long+0x58>)
 8004114:	f007 f83c 	bl	800b190 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8004118:	8aab      	ldrh	r3, [r5, #20]
 800411a:	0e20      	lsrs	r0, r4, #24
 800411c:	692a      	ldr	r2, [r5, #16]
 800411e:	18d1      	adds	r1, r2, r3
 8004120:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8004124:	1c59      	adds	r1, r3, #1
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8004126:	0c20      	lsrs	r0, r4, #16
 8004128:	fa12 f181 	uxtah	r1, r2, r1
 800412c:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
 8004130:	1c99      	adds	r1, r3, #2
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8004132:	0a20      	lsrs	r0, r4, #8
 8004134:	fa12 f181 	uxtah	r1, r2, r1
 8004138:	f881 00f0 	strb.w	r0, [r1, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800413c:	1d19      	adds	r1, r3, #4
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800413e:	3303      	adds	r3, #3
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8004140:	82a9      	strh	r1, [r5, #20]
 8004142:	fa12 f383 	uxtah	r3, r2, r3
 8004146:	f883 40f0 	strb.w	r4, [r3, #240]	; 0xf0
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	0800c39e 	.word	0x0800c39e
 8004150:	0800c35e 	.word	0x0800c35e
 8004154:	0800c106 	.word	0x0800c106

08004158 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8004158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800415c:	460c      	mov	r4, r1
 800415e:	4616      	mov	r6, r2
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8004160:	4680      	mov	r8, r0
 8004162:	b950      	cbnz	r0, 800417a <dhcp_create_msg+0x22>
 8004164:	4b62      	ldr	r3, [pc, #392]	; (80042f0 <dhcp_create_msg+0x198>)
 8004166:	f240 721d 	movw	r2, #1821	; 0x71d
 800416a:	4962      	ldr	r1, [pc, #392]	; (80042f4 <dhcp_create_msg+0x19c>)
 800416c:	4862      	ldr	r0, [pc, #392]	; (80042f8 <dhcp_create_msg+0x1a0>)
 800416e:	f007 f80f 	bl	800b190 <iprintf>
 8004172:	f06f 000f 	mvn.w	r0, #15
 8004176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800417a:	b951      	cbnz	r1, 8004192 <dhcp_create_msg+0x3a>
 800417c:	4b5c      	ldr	r3, [pc, #368]	; (80042f0 <dhcp_create_msg+0x198>)
 800417e:	f240 721e 	movw	r2, #1822	; 0x71e
 8004182:	495e      	ldr	r1, [pc, #376]	; (80042fc <dhcp_create_msg+0x1a4>)
 8004184:	485c      	ldr	r0, [pc, #368]	; (80042f8 <dhcp_create_msg+0x1a0>)
 8004186:	f007 f803 	bl	800b190 <iprintf>
 800418a:	f06f 0005 	mvn.w	r0, #5
 800418e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8004192:	68cb      	ldr	r3, [r1, #12]
 8004194:	b133      	cbz	r3, 80041a4 <dhcp_create_msg+0x4c>
 8004196:	4b56      	ldr	r3, [pc, #344]	; (80042f0 <dhcp_create_msg+0x198>)
 8004198:	f240 721f 	movw	r2, #1823	; 0x71f
 800419c:	4958      	ldr	r1, [pc, #352]	; (8004300 <dhcp_create_msg+0x1a8>)
 800419e:	4856      	ldr	r0, [pc, #344]	; (80042f8 <dhcp_create_msg+0x1a0>)
 80041a0:	f006 fff6 	bl	800b190 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	b133      	cbz	r3, 80041b6 <dhcp_create_msg+0x5e>
 80041a8:	4b51      	ldr	r3, [pc, #324]	; (80042f0 <dhcp_create_msg+0x198>)
 80041aa:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 80041ae:	4955      	ldr	r1, [pc, #340]	; (8004304 <dhcp_create_msg+0x1ac>)
 80041b0:	4851      	ldr	r0, [pc, #324]	; (80042f8 <dhcp_create_msg+0x1a0>)
 80041b2:	f006 ffed 	bl	800b190 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80041b6:	2200      	movs	r2, #0
 80041b8:	f44f 719a 	mov.w	r1, #308	; 0x134
 80041bc:	4610      	mov	r0, r2
 80041be:	f002 fe41 	bl	8006e44 <pbuf_alloc>
 80041c2:	60e0      	str	r0, [r4, #12]
  if (dhcp->p_out == NULL) {
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f000 808f 	beq.w	80042e8 <dhcp_create_msg+0x190>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80041ca:	8943      	ldrh	r3, [r0, #10]
 80041cc:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80041d0:	d206      	bcs.n	80041e0 <dhcp_create_msg+0x88>
 80041d2:	4b47      	ldr	r3, [pc, #284]	; (80042f0 <dhcp_create_msg+0x198>)
 80041d4:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 80041d8:	494b      	ldr	r1, [pc, #300]	; (8004308 <dhcp_create_msg+0x1b0>)
 80041da:	4847      	ldr	r0, [pc, #284]	; (80042f8 <dhcp_create_msg+0x1a0>)
 80041dc:	f006 ffd8 	bl	800b190 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80041e0:	2e03      	cmp	r6, #3
 80041e2:	d102      	bne.n	80041ea <dhcp_create_msg+0x92>
 80041e4:	7a63      	ldrb	r3, [r4, #9]
 80041e6:	2b03      	cmp	r3, #3
 80041e8:	d107      	bne.n	80041fa <dhcp_create_msg+0xa2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80041ea:	7aa3      	ldrb	r3, [r4, #10]
 80041ec:	4d47      	ldr	r5, [pc, #284]	; (800430c <dhcp_create_msg+0x1b4>)
 80041ee:	b913      	cbnz	r3, 80041f6 <dhcp_create_msg+0x9e>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 80041f0:	f006 ffe6 	bl	800b1c0 <rand>
 80041f4:	6028      	str	r0, [r5, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80041f6:	682b      	ldr	r3, [r5, #0]
 80041f8:	6023      	str	r3, [r4, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80041fa:	68e3      	ldr	r3, [r4, #12]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
  dhcp->msg_out->hlen = netif->hwaddr_len;
  dhcp->msg_out->hops = 0;
 80041fc:	2500      	movs	r5, #0
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 80041fe:	685f      	ldr	r7, [r3, #4]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8004200:	2301      	movs	r3, #1
  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8004202:	6127      	str	r7, [r4, #16]
  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8004204:	703b      	strb	r3, [r7, #0]
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8004206:	707b      	strb	r3, [r7, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8004208:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
  dhcp->msg_out->hops = 0;
 800420c:	70fd      	strb	r5, [r7, #3]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 800420e:	70bb      	strb	r3, [r7, #2]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 8004210:	6820      	ldr	r0, [r4, #0]
 8004212:	f7ff fef6 	bl	8004002 <lwip_htonl>
  dhcp->msg_out->secs = 0;
 8004216:	6923      	ldr	r3, [r4, #16]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8004218:	2e04      	cmp	r6, #4
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 800421a:	6078      	str	r0, [r7, #4]
  dhcp->msg_out->secs = 0;
 800421c:	721d      	strb	r5, [r3, #8]
 800421e:	725d      	strb	r5, [r3, #9]
  dhcp->msg_out->flags = 0;
 8004220:	729d      	strb	r5, [r3, #10]
 8004222:	72dd      	strb	r5, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 8004224:	731d      	strb	r5, [r3, #12]
 8004226:	735d      	strb	r5, [r3, #13]
 8004228:	739d      	strb	r5, [r3, #14]
 800422a:	73dd      	strb	r5, [r3, #15]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800422c:	d008      	beq.n	8004240 <dhcp_create_msg+0xe8>
 800422e:	1ff2      	subs	r2, r6, #7
 8004230:	2a01      	cmp	r2, #1
 8004232:	d905      	bls.n	8004240 <dhcp_create_msg+0xe8>
 8004234:	2e03      	cmp	r6, #3
 8004236:	d106      	bne.n	8004246 <dhcp_create_msg+0xee>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8004238:	7a62      	ldrb	r2, [r4, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800423a:	3a04      	subs	r2, #4
 800423c:	2a01      	cmp	r2, #1
 800423e:	d802      	bhi.n	8004246 <dhcp_create_msg+0xee>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8004240:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004244:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8004246:	2200      	movs	r2, #0
 8004248:	f103 001c 	add.w	r0, r3, #28
 800424c:	741a      	strb	r2, [r3, #16]
 800424e:	745a      	strb	r2, [r3, #17]
 8004250:	749a      	strb	r2, [r3, #18]
 8004252:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8004254:	751a      	strb	r2, [r3, #20]
 8004256:	755a      	strb	r2, [r3, #21]
 8004258:	759a      	strb	r2, [r3, #22]
 800425a:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 800425c:	761a      	strb	r2, [r3, #24]
 800425e:	765a      	strb	r2, [r3, #25]
 8004260:	769a      	strb	r2, [r3, #26]
 8004262:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8004264:	f898 5028 	ldrb.w	r5, [r8, #40]	; 0x28
 8004268:	b291      	uxth	r1, r2
 800426a:	428d      	cmp	r5, r1
 800426c:	d93a      	bls.n	80042e4 <dhcp_create_msg+0x18c>
 800426e:	2905      	cmp	r1, #5
 8004270:	d838      	bhi.n	80042e4 <dhcp_create_msg+0x18c>
 8004272:	eb08 0102 	add.w	r1, r8, r2
 8004276:	f891 1029 	ldrb.w	r1, [r1, #41]	; 0x29
 800427a:	3201      	adds	r2, #1
 800427c:	f800 1b01 	strb.w	r1, [r0], #1
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8004280:	2a10      	cmp	r2, #16
 8004282:	d1f1      	bne.n	8004268 <dhcp_create_msg+0x110>
 8004284:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8004288:	f103 016c 	add.w	r1, r3, #108	; 0x6c
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
    dhcp->msg_out->sname[i] = 0;
 800428c:	2000      	movs	r0, #0
 800428e:	f802 0b01 	strb.w	r0, [r2], #1
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8004292:	428a      	cmp	r2, r1
 8004294:	d1fb      	bne.n	800428e <dhcp_create_msg+0x136>
 8004296:	f103 00ec 	add.w	r0, r3, #236	; 0xec
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
    dhcp->msg_out->file[i] = 0;
 800429a:	2100      	movs	r1, #0
 800429c:	f802 1b01 	strb.w	r1, [r2], #1
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80042a0:	4282      	cmp	r2, r0
 80042a2:	d1fb      	bne.n	800429c <dhcp_create_msg+0x144>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80042a4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80042a8:	2263      	movs	r2, #99	; 0x63
 80042aa:	33f0      	adds	r3, #240	; 0xf0
 80042ac:	f803 0c03 	strb.w	r0, [r3, #-3]
 80042b0:	2053      	movs	r0, #83	; 0x53
 80042b2:	f803 2c04 	strb.w	r2, [r3, #-4]
 80042b6:	f803 2c01 	strb.w	r2, [r3, #-1]
  dhcp->options_out_len = 0;
 80042ba:	2200      	movs	r2, #0
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80042bc:	f803 0c02 	strb.w	r0, [r3, #-2]
  dhcp->options_out_len = 0;
 80042c0:	82a1      	strh	r1, [r4, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 80042c2:	f803 2b01 	strb.w	r2, [r3], #1
 80042c6:	3201      	adds	r2, #1
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 80042c8:	2a44      	cmp	r2, #68	; 0x44
 80042ca:	d1fa      	bne.n	80042c2 <dhcp_create_msg+0x16a>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 80042cc:	2201      	movs	r2, #1
 80042ce:	4620      	mov	r0, r4
 80042d0:	2135      	movs	r1, #53	; 0x35
 80042d2:	f7ff fed3 	bl	800407c <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 80042d6:	4620      	mov	r0, r4
 80042d8:	4631      	mov	r1, r6
 80042da:	f7ff fef3 	bl	80040c4 <dhcp_option_byte>
  return ERR_OK;
 80042de:	2000      	movs	r0, #0
 80042e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 80042e4:	2100      	movs	r1, #0
 80042e6:	e7c8      	b.n	800427a <dhcp_create_msg+0x122>
    return ERR_MEM;
 80042e8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80042ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f0:	0800c39e 	.word	0x0800c39e
 80042f4:	0800c15f 	.word	0x0800c15f
 80042f8:	0800c106 	.word	0x0800c106
 80042fc:	0800c17e 	.word	0x0800c17e
 8004300:	0800c19c 	.word	0x0800c19c
 8004304:	0800c1c1 	.word	0x0800c1c1
 8004308:	0800c1e8 	.word	0x0800c1e8
 800430c:	20003df4 	.word	0x20003df4

08004310 <dhcp_check>:
{
 8004310:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004312:	6a04      	ldr	r4, [r0, #32]
{
 8004314:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8004316:	2108      	movs	r1, #8
 8004318:	4620      	mov	r0, r4
 800431a:	f7ff fe85 	bl	8004028 <dhcp_set_state>
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800431e:	2200      	movs	r2, #0
 8004320:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8004324:	4628      	mov	r0, r5
 8004326:	f001 f9ad 	bl	8005684 <etharp_query>
  if (dhcp->tries < 255) {
 800432a:	7aa3      	ldrb	r3, [r4, #10]
 800432c:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800432e:	bf1c      	itt	ne
 8004330:	3301      	addne	r3, #1
 8004332:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004334:	2301      	movs	r3, #1
 8004336:	82e3      	strh	r3, [r4, #22]
 8004338:	bd38      	pop	{r3, r4, r5, pc}
	...

0800433c <dhcp_bind>:
{
 800433c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800433e:	4605      	mov	r5, r0
 8004340:	b940      	cbnz	r0, 8004354 <dhcp_bind+0x18>
 8004342:	4b3a      	ldr	r3, [pc, #232]	; (800442c <dhcp_bind+0xf0>)
 8004344:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004348:	4939      	ldr	r1, [pc, #228]	; (8004430 <dhcp_bind+0xf4>)
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800434a:	483a      	ldr	r0, [pc, #232]	; (8004434 <dhcp_bind+0xf8>)
 800434c:	f006 ff20 	bl	800b190 <iprintf>
}
 8004350:	b003      	add	sp, #12
 8004352:	bd30      	pop	{r4, r5, pc}
  dhcp = netif_dhcp_data(netif);
 8004354:	6a04      	ldr	r4, [r0, #32]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8004356:	b924      	cbnz	r4, 8004362 <dhcp_bind+0x26>
 8004358:	4b34      	ldr	r3, [pc, #208]	; (800442c <dhcp_bind+0xf0>)
 800435a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800435e:	4936      	ldr	r1, [pc, #216]	; (8004438 <dhcp_bind+0xfc>)
 8004360:	e7f3      	b.n	800434a <dhcp_bind+0xe>
  dhcp->lease_used = 0;
 8004362:	2300      	movs	r3, #0
 8004364:	8423      	strh	r3, [r4, #32]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8004366:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	d00b      	beq.n	8004384 <dhcp_bind+0x48>
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800436c:	223c      	movs	r2, #60	; 0x3c
 800436e:	331e      	adds	r3, #30
 8004370:	fbb3 f3f2 	udiv	r3, r3, r2
 8004374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004378:	4293      	cmp	r3, r2
 800437a:	bf28      	it	cs
 800437c:	4613      	movcs	r3, r2
     if (dhcp->t0_timeout == 0) {
 800437e:	2b00      	cmp	r3, #0
 8004380:	d041      	beq.n	8004406 <dhcp_bind+0xca>
       dhcp->t0_timeout = 1;
 8004382:	8463      	strh	r3, [r4, #34]	; 0x22
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8004384:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004386:	1c58      	adds	r0, r3, #1
 8004388:	d00d      	beq.n	80043a6 <dhcp_bind+0x6a>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800438a:	223c      	movs	r2, #60	; 0x3c
 800438c:	331e      	adds	r3, #30
 800438e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004392:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004396:	4293      	cmp	r3, r2
 8004398:	bf28      	it	cs
 800439a:	4613      	movcs	r3, r2
    if (dhcp->t1_timeout == 0) {
 800439c:	2b00      	cmp	r3, #0
 800439e:	d034      	beq.n	800440a <dhcp_bind+0xce>
      dhcp->t1_timeout = 1;
 80043a0:	8323      	strh	r3, [r4, #24]
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80043a2:	8b23      	ldrh	r3, [r4, #24]
 80043a4:	83a3      	strh	r3, [r4, #28]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80043a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	d00c      	beq.n	80043c6 <dhcp_bind+0x8a>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80043ac:	223c      	movs	r2, #60	; 0x3c
 80043ae:	331e      	adds	r3, #30
 80043b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80043b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043b8:	4293      	cmp	r3, r2
 80043ba:	bf28      	it	cs
 80043bc:	4613      	movcs	r3, r2
    if (dhcp->t2_timeout == 0) {
 80043be:	b333      	cbz	r3, 800440e <dhcp_bind+0xd2>
      dhcp->t2_timeout = 1;
 80043c0:	8363      	strh	r3, [r4, #26]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80043c2:	8b63      	ldrh	r3, [r4, #26]
 80043c4:	83e3      	strh	r3, [r4, #30]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80043c6:	8b63      	ldrh	r3, [r4, #26]
 80043c8:	8b22      	ldrh	r2, [r4, #24]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <dhcp_bind+0x98>
 80043ce:	b10b      	cbz	r3, 80043d4 <dhcp_bind+0x98>
    dhcp->t1_timeout = 0;
 80043d0:	2300      	movs	r3, #0
 80043d2:	8323      	strh	r3, [r4, #24]
  if (dhcp->subnet_mask_given) {
 80043d4:	7ae3      	ldrb	r3, [r4, #11]
 80043d6:	b1e3      	cbz	r3, 8004412 <dhcp_bind+0xd6>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80043d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80043da:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80043dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80043de:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 80043e0:	b92b      	cbnz	r3, 80043ee <dhcp_bind+0xb2>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80043e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80043e4:	9a00      	ldr	r2, [sp, #0]
 80043e6:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80043e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ec:	9301      	str	r3, [sp, #4]
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80043ee:	4620      	mov	r0, r4
 80043f0:	210a      	movs	r1, #10
 80043f2:	f7ff fe19 	bl	8004028 <dhcp_set_state>
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80043f6:	ab01      	add	r3, sp, #4
 80043f8:	466a      	mov	r2, sp
 80043fa:	f104 0128 	add.w	r1, r4, #40	; 0x28
 80043fe:	4628      	mov	r0, r5
 8004400:	f002 fb76 	bl	8006af0 <netif_set_addr>
 8004404:	e7a4      	b.n	8004350 <dhcp_bind+0x14>
       dhcp->t0_timeout = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	e7bb      	b.n	8004382 <dhcp_bind+0x46>
      dhcp->t1_timeout = 1;
 800440a:	2301      	movs	r3, #1
 800440c:	e7c8      	b.n	80043a0 <dhcp_bind+0x64>
      dhcp->t2_timeout = 1;
 800440e:	2301      	movs	r3, #1
 8004410:	e7d6      	b.n	80043c0 <dhcp_bind+0x84>
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8004412:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    if (first_octet <= 127) {
 8004416:	061a      	lsls	r2, r3, #24
 8004418:	d401      	bmi.n	800441e <dhcp_bind+0xe2>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800441a:	23ff      	movs	r3, #255	; 0xff
 800441c:	e7dd      	b.n	80043da <dhcp_bind+0x9e>
    } else if (first_octet >= 192) {
 800441e:	2bbf      	cmp	r3, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8004420:	bf8c      	ite	hi
 8004422:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8004426:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 800442a:	e7d6      	b.n	80043da <dhcp_bind+0x9e>
 800442c:	0800c39e 	.word	0x0800c39e
 8004430:	0800c12e 	.word	0x0800c12e
 8004434:	0800c106 	.word	0x0800c106
 8004438:	0800c147 	.word	0x0800c147

0800443c <dhcp_inc_pcb_refcount>:
{
 800443c:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 800443e:	4d15      	ldr	r5, [pc, #84]	; (8004494 <dhcp_inc_pcb_refcount+0x58>)
 8004440:	782b      	ldrb	r3, [r5, #0]
 8004442:	b9f3      	cbnz	r3, 8004482 <dhcp_inc_pcb_refcount+0x46>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8004444:	4c14      	ldr	r4, [pc, #80]	; (8004498 <dhcp_inc_pcb_refcount+0x5c>)
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	b12b      	cbz	r3, 8004456 <dhcp_inc_pcb_refcount+0x1a>
 800444a:	4b14      	ldr	r3, [pc, #80]	; (800449c <dhcp_inc_pcb_refcount+0x60>)
 800444c:	22d9      	movs	r2, #217	; 0xd9
 800444e:	4914      	ldr	r1, [pc, #80]	; (80044a0 <dhcp_inc_pcb_refcount+0x64>)
 8004450:	4814      	ldr	r0, [pc, #80]	; (80044a4 <dhcp_inc_pcb_refcount+0x68>)
 8004452:	f006 fe9d 	bl	800b190 <iprintf>
    dhcp_pcb = udp_new();
 8004456:	f005 ff11 	bl	800a27c <udp_new>
 800445a:	6020      	str	r0, [r4, #0]
    if (dhcp_pcb == NULL) {
 800445c:	b1b0      	cbz	r0, 800448c <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800445e:	7a02      	ldrb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8004460:	4911      	ldr	r1, [pc, #68]	; (80044a8 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8004462:	f042 0220 	orr.w	r2, r2, #32
 8004466:	7202      	strb	r2, [r0, #8]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8004468:	2244      	movs	r2, #68	; 0x44
 800446a:	f005 fded 	bl	800a048 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 800446e:	2243      	movs	r2, #67	; 0x43
 8004470:	490d      	ldr	r1, [pc, #52]	; (80044a8 <dhcp_inc_pcb_refcount+0x6c>)
 8004472:	6820      	ldr	r0, [r4, #0]
 8004474:	f005 febe 	bl	800a1f4 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8004478:	2200      	movs	r2, #0
 800447a:	490c      	ldr	r1, [pc, #48]	; (80044ac <dhcp_inc_pcb_refcount+0x70>)
 800447c:	6820      	ldr	r0, [r4, #0]
 800447e:	f005 fee1 	bl	800a244 <udp_recv>
  dhcp_pcb_refcount++;
 8004482:	782b      	ldrb	r3, [r5, #0]
  return ERR_OK;
 8004484:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 8004486:	3301      	adds	r3, #1
 8004488:	702b      	strb	r3, [r5, #0]
  return ERR_OK;
 800448a:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 800448c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004490:	bd38      	pop	{r3, r4, r5, pc}
 8004492:	bf00      	nop
 8004494:	20003df0 	.word	0x20003df0
 8004498:	20003dec 	.word	0x20003dec
 800449c:	0800c39e 	.word	0x0800c39e
 80044a0:	0800c2b6 	.word	0x0800c2b6
 80044a4:	0800c106 	.word	0x0800c106
 80044a8:	0800c870 	.word	0x0800c870
 80044ac:	080048ad 	.word	0x080048ad

080044b0 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80044b0:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80044b2:	4604      	mov	r4, r0
 80044b4:	b940      	cbnz	r0, 80044c8 <dhcp_option_trailer+0x18>
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <dhcp_option_trailer+0x64>)
 80044b8:	f240 7282 	movw	r2, #1922	; 0x782
 80044bc:	4916      	ldr	r1, [pc, #88]	; (8004518 <dhcp_option_trailer+0x68>)
 80044be:	4817      	ldr	r0, [pc, #92]	; (800451c <dhcp_option_trailer+0x6c>)
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
  }
}
 80044c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80044c4:	f006 be64 	b.w	800b190 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 80044c8:	6903      	ldr	r3, [r0, #16]
 80044ca:	b933      	cbnz	r3, 80044da <dhcp_option_trailer+0x2a>
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <dhcp_option_trailer+0x64>)
 80044ce:	f240 7283 	movw	r2, #1923	; 0x783
 80044d2:	4913      	ldr	r1, [pc, #76]	; (8004520 <dhcp_option_trailer+0x70>)
 80044d4:	4811      	ldr	r0, [pc, #68]	; (800451c <dhcp_option_trailer+0x6c>)
 80044d6:	f006 fe5b 	bl	800b190 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 80044da:	8aa3      	ldrh	r3, [r4, #20]
 80044dc:	2b43      	cmp	r3, #67	; 0x43
 80044de:	d906      	bls.n	80044ee <dhcp_option_trailer+0x3e>
 80044e0:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <dhcp_option_trailer+0x64>)
 80044e2:	f240 7284 	movw	r2, #1924	; 0x784
 80044e6:	490f      	ldr	r1, [pc, #60]	; (8004524 <dhcp_option_trailer+0x74>)
 80044e8:	480c      	ldr	r0, [pc, #48]	; (800451c <dhcp_option_trailer+0x6c>)
 80044ea:	f006 fe51 	bl	800b190 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 80044ee:	8aa3      	ldrh	r3, [r4, #20]
 80044f0:	6922      	ldr	r2, [r4, #16]
 80044f2:	1c59      	adds	r1, r3, #1
 80044f4:	4413      	add	r3, r2
 80044f6:	82a1      	strh	r1, [r4, #20]
 80044f8:	21ff      	movs	r1, #255	; 0xff
 80044fa:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 80044fe:	2100      	movs	r1, #0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8004500:	8aa3      	ldrh	r3, [r4, #20]
 8004502:	2b43      	cmp	r3, #67	; 0x43
 8004504:	d900      	bls.n	8004508 <dhcp_option_trailer+0x58>
}
 8004506:	bd10      	pop	{r4, pc}
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8004508:	1c58      	adds	r0, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	82a0      	strh	r0, [r4, #20]
 800450e:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
 8004512:	e7f5      	b.n	8004500 <dhcp_option_trailer+0x50>
 8004514:	0800c39e 	.word	0x0800c39e
 8004518:	0800c414 	.word	0x0800c414
 800451c:	0800c106 	.word	0x0800c106
 8004520:	0800c436 	.word	0x0800c436
 8004524:	0800c462 	.word	0x0800c462

08004528 <dhcp_handle_ack.isra.1>:
dhcp_handle_ack(struct netif *netif)
 8004528:	b538      	push	{r3, r4, r5, lr}
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800452a:	2300      	movs	r3, #0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800452c:	4d17      	ldr	r5, [pc, #92]	; (800458c <dhcp_handle_ack.isra.1+0x64>)
dhcp_handle_ack(struct netif *netif)
 800452e:	4604      	mov	r4, r0
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8004530:	62c3      	str	r3, [r0, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8004532:	6303      	str	r3, [r0, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8004534:	78eb      	ldrb	r3, [r5, #3]
 8004536:	b113      	cbz	r3, 800453e <dhcp_handle_ack.isra.1+0x16>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8004538:	4b15      	ldr	r3, [pc, #84]	; (8004590 <dhcp_handle_ack.isra.1+0x68>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	6343      	str	r3, [r0, #52]	; 0x34
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800453e:	792b      	ldrb	r3, [r5, #4]
 8004540:	b1db      	cbz	r3, 800457a <dhcp_handle_ack.isra.1+0x52>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8004542:	4b13      	ldr	r3, [pc, #76]	; (8004590 <dhcp_handle_ack.isra.1+0x68>)
 8004544:	691b      	ldr	r3, [r3, #16]
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8004546:	63a3      	str	r3, [r4, #56]	; 0x38
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8004548:	796b      	ldrb	r3, [r5, #5]
 800454a:	b1cb      	cbz	r3, 8004580 <dhcp_handle_ack.isra.1+0x58>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800454c:	4b10      	ldr	r3, [pc, #64]	; (8004590 <dhcp_handle_ack.isra.1+0x68>)
 800454e:	695b      	ldr	r3, [r3, #20]
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004550:	63e3      	str	r3, [r4, #60]	; 0x3c
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8004552:	6863      	ldr	r3, [r4, #4]
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	62a3      	str	r3, [r4, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8004558:	79ab      	ldrb	r3, [r5, #6]
 800455a:	b12b      	cbz	r3, 8004568 <dhcp_handle_ack.isra.1+0x40>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <dhcp_handle_ack.isra.1+0x68>)
 800455e:	6998      	ldr	r0, [r3, #24]
 8004560:	f7ff fd4f 	bl	8004002 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8004564:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8004566:	62e0      	str	r0, [r4, #44]	; 0x2c
    dhcp->subnet_mask_given = 0;
 8004568:	72e3      	strb	r3, [r4, #11]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800456a:	79eb      	ldrb	r3, [r5, #7]
 800456c:	b123      	cbz	r3, 8004578 <dhcp_handle_ack.isra.1+0x50>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800456e:	4b08      	ldr	r3, [pc, #32]	; (8004590 <dhcp_handle_ack.isra.1+0x68>)
 8004570:	69d8      	ldr	r0, [r3, #28]
 8004572:	f7ff fd46 	bl	8004002 <lwip_htonl>
 8004576:	6320      	str	r0, [r4, #48]	; 0x30
 8004578:	bd38      	pop	{r3, r4, r5, pc}
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800457a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800457c:	085b      	lsrs	r3, r3, #1
 800457e:	e7e2      	b.n	8004546 <dhcp_handle_ack.isra.1+0x1e>
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8004580:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004582:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004586:	08db      	lsrs	r3, r3, #3
 8004588:	e7e2      	b.n	8004550 <dhcp_handle_ack.isra.1+0x28>
 800458a:	bf00      	nop
 800458c:	20003fb8 	.word	0x20003fb8
 8004590:	20003fc0 	.word	0x20003fc0

08004594 <dhcp_delete_msg>:
{
 8004594:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8004596:	4604      	mov	r4, r0
 8004598:	b940      	cbnz	r0, 80045ac <dhcp_delete_msg+0x18>
 800459a:	4b11      	ldr	r3, [pc, #68]	; (80045e0 <dhcp_delete_msg+0x4c>)
 800459c:	f240 726d 	movw	r2, #1901	; 0x76d
 80045a0:	4910      	ldr	r1, [pc, #64]	; (80045e4 <dhcp_delete_msg+0x50>)
 80045a2:	4811      	ldr	r0, [pc, #68]	; (80045e8 <dhcp_delete_msg+0x54>)
}
 80045a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 80045a8:	f006 bdf2 	b.w	800b190 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 80045ac:	68c3      	ldr	r3, [r0, #12]
 80045ae:	b933      	cbnz	r3, 80045be <dhcp_delete_msg+0x2a>
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <dhcp_delete_msg+0x4c>)
 80045b2:	f240 726e 	movw	r2, #1902	; 0x76e
 80045b6:	490d      	ldr	r1, [pc, #52]	; (80045ec <dhcp_delete_msg+0x58>)
 80045b8:	480b      	ldr	r0, [pc, #44]	; (80045e8 <dhcp_delete_msg+0x54>)
 80045ba:	f006 fde9 	bl	800b190 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80045be:	6923      	ldr	r3, [r4, #16]
 80045c0:	b933      	cbnz	r3, 80045d0 <dhcp_delete_msg+0x3c>
 80045c2:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <dhcp_delete_msg+0x4c>)
 80045c4:	f240 726f 	movw	r2, #1903	; 0x76f
 80045c8:	4909      	ldr	r1, [pc, #36]	; (80045f0 <dhcp_delete_msg+0x5c>)
 80045ca:	4807      	ldr	r0, [pc, #28]	; (80045e8 <dhcp_delete_msg+0x54>)
 80045cc:	f006 fde0 	bl	800b190 <iprintf>
  if (dhcp->p_out != NULL) {
 80045d0:	68e0      	ldr	r0, [r4, #12]
 80045d2:	b108      	cbz	r0, 80045d8 <dhcp_delete_msg+0x44>
    pbuf_free(dhcp->p_out);
 80045d4:	f002 fbcc 	bl	8006d70 <pbuf_free>
  dhcp->p_out = NULL;
 80045d8:	2300      	movs	r3, #0
 80045da:	60e3      	str	r3, [r4, #12]
  dhcp->msg_out = NULL;
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	bd10      	pop	{r4, pc}
 80045e0:	0800c39e 	.word	0x0800c39e
 80045e4:	0800c24c 	.word	0x0800c24c
 80045e8:	0800c106 	.word	0x0800c106
 80045ec:	0800c26a 	.word	0x0800c26a
 80045f0:	0800c28f 	.word	0x0800c28f

080045f4 <dhcp_discover>:
{
 80045f4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80045f6:	2300      	movs	r3, #0
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80045f8:	6a04      	ldr	r4, [r0, #32]
{
 80045fa:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80045fc:	2106      	movs	r1, #6
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80045fe:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8004600:	4620      	mov	r0, r4
 8004602:	f7ff fd11 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8004606:	2201      	movs	r2, #1
 8004608:	4621      	mov	r1, r4
 800460a:	4630      	mov	r0, r6
 800460c:	f7ff fda4 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004610:	4605      	mov	r5, r0
 8004612:	bb78      	cbnz	r0, 8004674 <dhcp_discover+0x80>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004614:	2202      	movs	r2, #2
 8004616:	2139      	movs	r1, #57	; 0x39
 8004618:	4620      	mov	r0, r4
 800461a:	f7ff fd2f 	bl	800407c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800461e:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8004620:	4620      	mov	r0, r4
 8004622:	f7ff fd09 	bl	8004038 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004626:	2203      	movs	r2, #3
 8004628:	2137      	movs	r1, #55	; 0x37
 800462a:	4620      	mov	r0, r4
 800462c:	f7ff fd26 	bl	800407c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004630:	2101      	movs	r1, #1
 8004632:	4620      	mov	r0, r4
 8004634:	f7ff fd46 	bl	80040c4 <dhcp_option_byte>
 8004638:	2103      	movs	r1, #3
 800463a:	4620      	mov	r0, r4
 800463c:	f7ff fd42 	bl	80040c4 <dhcp_option_byte>
 8004640:	211c      	movs	r1, #28
 8004642:	4620      	mov	r0, r4
 8004644:	f7ff fd3e 	bl	80040c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff ff31 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800464e:	8aa1      	ldrh	r1, [r4, #20]
 8004650:	68e0      	ldr	r0, [r4, #12]
 8004652:	31f0      	adds	r1, #240	; 0xf0
 8004654:	b289      	uxth	r1, r1
 8004656:	f002 fcd1 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <dhcp_discover+0xb0>)
 800465c:	4812      	ldr	r0, [pc, #72]	; (80046a8 <dhcp_discover+0xb4>)
 800465e:	9301      	str	r3, [sp, #4]
 8004660:	2343      	movs	r3, #67	; 0x43
 8004662:	9600      	str	r6, [sp, #0]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <dhcp_discover+0xb8>)
 8004666:	68e1      	ldr	r1, [r4, #12]
 8004668:	6800      	ldr	r0, [r0, #0]
 800466a:	f005 fd41 	bl	800a0f0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 800466e:	4620      	mov	r0, r4
 8004670:	f7ff ff90 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004674:	7aa3      	ldrb	r3, [r4, #10]
}
 8004676:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004678:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 800467a:	bf1c      	itt	ne
 800467c:	3301      	addne	r3, #1
 800467e:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8004680:	7aa2      	ldrb	r2, [r4, #10]
 8004682:	2a05      	cmp	r2, #5
 8004684:	bf96      	itet	ls
 8004686:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 800468a:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 800468e:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004690:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004694:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004698:	fb93 f3f2 	sdiv	r3, r3, r2
 800469c:	82e3      	strh	r3, [r4, #22]
}
 800469e:	b002      	add	sp, #8
 80046a0:	bd70      	pop	{r4, r5, r6, pc}
 80046a2:	bf00      	nop
 80046a4:	0800c870 	.word	0x0800c870
 80046a8:	20003dec 	.word	0x20003dec
 80046ac:	0800c874 	.word	0x0800c874

080046b0 <dhcp_select>:
{
 80046b0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80046b2:	6a04      	ldr	r4, [r0, #32]
{
 80046b4:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80046b6:	2101      	movs	r1, #1
 80046b8:	4620      	mov	r0, r4
 80046ba:	f7ff fcb5 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80046be:	2203      	movs	r2, #3
 80046c0:	4621      	mov	r1, r4
 80046c2:	4630      	mov	r0, r6
 80046c4:	f7ff fd48 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 80046c8:	4605      	mov	r5, r0
 80046ca:	2800      	cmp	r0, #0
 80046cc:	d147      	bne.n	800475e <dhcp_select+0xae>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80046ce:	2202      	movs	r2, #2
 80046d0:	2139      	movs	r1, #57	; 0x39
 80046d2:	4620      	mov	r0, r4
 80046d4:	f7ff fcd2 	bl	800407c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 80046d8:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 80046da:	4620      	mov	r0, r4
 80046dc:	f7ff fcac 	bl	8004038 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80046e0:	2204      	movs	r2, #4
 80046e2:	2132      	movs	r1, #50	; 0x32
 80046e4:	4620      	mov	r0, r4
 80046e6:	f7ff fcc9 	bl	800407c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80046ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80046ec:	f7ff fc89 	bl	8004002 <lwip_htonl>
 80046f0:	4601      	mov	r1, r0
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7ff fd02 	bl	80040fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80046f8:	2204      	movs	r2, #4
 80046fa:	2136      	movs	r1, #54	; 0x36
 80046fc:	4620      	mov	r0, r4
 80046fe:	f7ff fcbd 	bl	800407c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8004702:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004704:	f7ff fc7d 	bl	8004002 <lwip_htonl>
 8004708:	4601      	mov	r1, r0
 800470a:	4620      	mov	r0, r4
 800470c:	f7ff fcf6 	bl	80040fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004710:	2203      	movs	r2, #3
 8004712:	2137      	movs	r1, #55	; 0x37
 8004714:	4620      	mov	r0, r4
 8004716:	f7ff fcb1 	bl	800407c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800471a:	2101      	movs	r1, #1
 800471c:	4620      	mov	r0, r4
 800471e:	f7ff fcd1 	bl	80040c4 <dhcp_option_byte>
 8004722:	2103      	movs	r1, #3
 8004724:	4620      	mov	r0, r4
 8004726:	f7ff fccd 	bl	80040c4 <dhcp_option_byte>
 800472a:	211c      	movs	r1, #28
 800472c:	4620      	mov	r0, r4
 800472e:	f7ff fcc9 	bl	80040c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004732:	4620      	mov	r0, r4
 8004734:	f7ff febc 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004738:	8aa1      	ldrh	r1, [r4, #20]
 800473a:	68e0      	ldr	r0, [r4, #12]
 800473c:	31f0      	adds	r1, #240	; 0xf0
 800473e:	b289      	uxth	r1, r1
 8004740:	f002 fc5c 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004744:	4b11      	ldr	r3, [pc, #68]	; (800478c <dhcp_select+0xdc>)
 8004746:	4812      	ldr	r0, [pc, #72]	; (8004790 <dhcp_select+0xe0>)
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2343      	movs	r3, #67	; 0x43
 800474c:	9600      	str	r6, [sp, #0]
 800474e:	4a11      	ldr	r2, [pc, #68]	; (8004794 <dhcp_select+0xe4>)
 8004750:	68e1      	ldr	r1, [r4, #12]
 8004752:	6800      	ldr	r0, [r0, #0]
 8004754:	f005 fccc 	bl	800a0f0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8004758:	4620      	mov	r0, r4
 800475a:	f7ff ff1b 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800475e:	7aa3      	ldrb	r3, [r4, #10]
}
 8004760:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004762:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004764:	bf1c      	itt	ne
 8004766:	3301      	addne	r3, #1
 8004768:	72a3      	strbne	r3, [r4, #10]
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 800476a:	7aa2      	ldrb	r2, [r4, #10]
 800476c:	2a05      	cmp	r2, #5
 800476e:	bf96      	itet	ls
 8004770:	f44f 737a 	movls.w	r3, #1000	; 0x3e8
 8004774:	f64e 2360 	movwhi	r3, #60000	; 0xea60
 8004778:	4093      	lslls	r3, r2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800477a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800477e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004782:	fb93 f3f2 	sdiv	r3, r3, r2
 8004786:	82e3      	strh	r3, [r4, #22]
}
 8004788:	b002      	add	sp, #8
 800478a:	bd70      	pop	{r4, r5, r6, pc}
 800478c:	0800c870 	.word	0x0800c870
 8004790:	20003dec 	.word	0x20003dec
 8004794:	0800c874 	.word	0x0800c874

08004798 <dhcp_reboot>:
{
 8004798:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800479a:	6a04      	ldr	r4, [r0, #32]
{
 800479c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800479e:	2103      	movs	r1, #3
 80047a0:	4620      	mov	r0, r4
 80047a2:	f7ff fc41 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80047a6:	2203      	movs	r2, #3
 80047a8:	4621      	mov	r1, r4
 80047aa:	4630      	mov	r0, r6
 80047ac:	f7ff fcd4 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 80047b0:	4605      	mov	r5, r0
 80047b2:	2800      	cmp	r0, #0
 80047b4:	d13a      	bne.n	800482c <dhcp_reboot+0x94>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80047b6:	2202      	movs	r2, #2
 80047b8:	2139      	movs	r1, #57	; 0x39
 80047ba:	4620      	mov	r0, r4
 80047bc:	f7ff fc5e 	bl	800407c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80047c0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80047c4:	4620      	mov	r0, r4
 80047c6:	f7ff fc37 	bl	8004038 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 80047ca:	2204      	movs	r2, #4
 80047cc:	2132      	movs	r1, #50	; 0x32
 80047ce:	4620      	mov	r0, r4
 80047d0:	f7ff fc54 	bl	800407c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80047d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80047d6:	f7ff fc14 	bl	8004002 <lwip_htonl>
 80047da:	4601      	mov	r1, r0
 80047dc:	4620      	mov	r0, r4
 80047de:	f7ff fc8d 	bl	80040fc <dhcp_option_long>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80047e2:	2203      	movs	r2, #3
 80047e4:	2137      	movs	r1, #55	; 0x37
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff fc48 	bl	800407c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80047ec:	2101      	movs	r1, #1
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff fc68 	bl	80040c4 <dhcp_option_byte>
 80047f4:	2103      	movs	r1, #3
 80047f6:	4620      	mov	r0, r4
 80047f8:	f7ff fc64 	bl	80040c4 <dhcp_option_byte>
 80047fc:	211c      	movs	r1, #28
 80047fe:	4620      	mov	r0, r4
 8004800:	f7ff fc60 	bl	80040c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004804:	4620      	mov	r0, r4
 8004806:	f7ff fe53 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 800480a:	8aa1      	ldrh	r1, [r4, #20]
 800480c:	68e0      	ldr	r0, [r4, #12]
 800480e:	31f0      	adds	r1, #240	; 0xf0
 8004810:	b289      	uxth	r1, r1
 8004812:	f002 fbf3 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8004816:	4813      	ldr	r0, [pc, #76]	; (8004864 <dhcp_reboot+0xcc>)
 8004818:	9600      	str	r6, [sp, #0]
 800481a:	2343      	movs	r3, #67	; 0x43
 800481c:	4a12      	ldr	r2, [pc, #72]	; (8004868 <dhcp_reboot+0xd0>)
 800481e:	68e1      	ldr	r1, [r4, #12]
 8004820:	6800      	ldr	r0, [r0, #0]
 8004822:	f005 fccb 	bl	800a1bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8004826:	4620      	mov	r0, r4
 8004828:	f7ff feb4 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 800482c:	7aa3      	ldrb	r3, [r4, #10]
}
 800482e:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004830:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004832:	bf1c      	itt	ne
 8004834:	3301      	addne	r3, #1
 8004836:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8004838:	7aa3      	ldrb	r3, [r4, #10]
 800483a:	2b09      	cmp	r3, #9
 800483c:	bf96      	itet	ls
 800483e:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004842:	f242 7310 	movwhi	r3, #10000	; 0x2710
 8004846:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 800484a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 800484e:	bf9c      	itt	ls
 8004850:	00db      	lslls	r3, r3, #3
 8004852:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004854:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004858:	fb93 f3f2 	sdiv	r3, r3, r2
 800485c:	82e3      	strh	r3, [r4, #22]
}
 800485e:	b002      	add	sp, #8
 8004860:	bd70      	pop	{r4, r5, r6, pc}
 8004862:	bf00      	nop
 8004864:	20003dec 	.word	0x20003dec
 8004868:	0800c874 	.word	0x0800c874

0800486c <dhcp_dec_pcb_refcount>:
{
 800486c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800486e:	4d0a      	ldr	r5, [pc, #40]	; (8004898 <dhcp_dec_pcb_refcount+0x2c>)
 8004870:	782b      	ldrb	r3, [r5, #0]
 8004872:	b92b      	cbnz	r3, 8004880 <dhcp_dec_pcb_refcount+0x14>
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <dhcp_dec_pcb_refcount+0x30>)
 8004876:	22f3      	movs	r2, #243	; 0xf3
 8004878:	4909      	ldr	r1, [pc, #36]	; (80048a0 <dhcp_dec_pcb_refcount+0x34>)
 800487a:	480a      	ldr	r0, [pc, #40]	; (80048a4 <dhcp_dec_pcb_refcount+0x38>)
 800487c:	f006 fc88 	bl	800b190 <iprintf>
  dhcp_pcb_refcount--;
 8004880:	782c      	ldrb	r4, [r5, #0]
 8004882:	3c01      	subs	r4, #1
 8004884:	b2e4      	uxtb	r4, r4
 8004886:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 8004888:	b924      	cbnz	r4, 8004894 <dhcp_dec_pcb_refcount+0x28>
    udp_remove(dhcp_pcb);
 800488a:	4d07      	ldr	r5, [pc, #28]	; (80048a8 <dhcp_dec_pcb_refcount+0x3c>)
 800488c:	6828      	ldr	r0, [r5, #0]
 800488e:	f005 fcdd 	bl	800a24c <udp_remove>
    dhcp_pcb = NULL;
 8004892:	602c      	str	r4, [r5, #0]
 8004894:	bd38      	pop	{r3, r4, r5, pc}
 8004896:	bf00      	nop
 8004898:	20003df0 	.word	0x20003df0
 800489c:	0800c39e 	.word	0x0800c39e
 80048a0:	0800c228 	.word	0x0800c228
 80048a4:	0800c106 	.word	0x0800c106
 80048a8:	20003dec 	.word	0x20003dec

080048ac <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 80048ac:	4bad      	ldr	r3, [pc, #692]	; (8004b64 <dhcp_recv+0x2b8>)
{
 80048ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 80048b2:	685d      	ldr	r5, [r3, #4]
{
 80048b4:	b089      	sub	sp, #36	; 0x24
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80048b6:	f8d5 9020 	ldr.w	r9, [r5, #32]
{
 80048ba:	9201      	str	r2, [sp, #4]
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 80048bc:	f1b9 0f00 	cmp.w	r9, #0
 80048c0:	d04d      	beq.n	800495e <dhcp_recv+0xb2>
 80048c2:	f899 3008 	ldrb.w	r3, [r9, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d046      	beq.n	8004958 <dhcp_recv+0xac>
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80048ca:	f8d9 3004 	ldr.w	r3, [r9, #4]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 80048ce:	6854      	ldr	r4, [r2, #4]
  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 80048d0:	b133      	cbz	r3, 80048e0 <dhcp_recv+0x34>
 80048d2:	4ba5      	ldr	r3, [pc, #660]	; (8004b68 <dhcp_recv+0x2bc>)
 80048d4:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 80048d8:	49a4      	ldr	r1, [pc, #656]	; (8004b6c <dhcp_recv+0x2c0>)
 80048da:	48a5      	ldr	r0, [pc, #660]	; (8004b70 <dhcp_recv+0x2c4>)
 80048dc:	f006 fc58 	bl	800b190 <iprintf>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 80048e0:	9b01      	ldr	r3, [sp, #4]
 80048e2:	895b      	ldrh	r3, [r3, #10]
 80048e4:	2b2b      	cmp	r3, #43	; 0x2b
 80048e6:	d937      	bls.n	8004958 <dhcp_recv+0xac>
  if (reply_msg->op != DHCP_BOOTREPLY) {
 80048e8:	7823      	ldrb	r3, [r4, #0]
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	d134      	bne.n	8004958 <dhcp_recv+0xac>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 80048ee:	f895 0028 	ldrb.w	r0, [r5, #40]	; 0x28
 80048f2:	f105 0229 	add.w	r2, r5, #41	; 0x29
 80048f6:	f104 011c 	add.w	r1, r4, #28
 80048fa:	2300      	movs	r3, #0
 80048fc:	b2de      	uxtb	r6, r3
 80048fe:	42b0      	cmp	r0, r6
 8004900:	d901      	bls.n	8004906 <dhcp_recv+0x5a>
 8004902:	2b06      	cmp	r3, #6
 8004904:	d121      	bne.n	800494a <dhcp_recv+0x9e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8004906:	6860      	ldr	r0, [r4, #4]
 8004908:	f7ff fb7b 	bl	8004002 <lwip_htonl>
 800490c:	f8d9 3000 	ldr.w	r3, [r9]
 8004910:	4298      	cmp	r0, r3
 8004912:	d121      	bne.n	8004958 <dhcp_recv+0xac>
  dhcp_clear_all_options(dhcp);
 8004914:	4b97      	ldr	r3, [pc, #604]	; (8004b74 <dhcp_recv+0x2c8>)
 8004916:	2200      	movs	r2, #0
  if (p->len < DHCP_SNAME_OFS) {
 8004918:	9901      	ldr	r1, [sp, #4]
  dhcp_clear_all_options(dhcp);
 800491a:	605a      	str	r2, [r3, #4]
  if (p->len < DHCP_SNAME_OFS) {
 800491c:	8949      	ldrh	r1, [r1, #10]
  dhcp_clear_all_options(dhcp);
 800491e:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8004920:	292b      	cmp	r1, #43	; 0x2b
 8004922:	d919      	bls.n	8004958 <dhcp_recv+0xac>
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004924:	9901      	ldr	r1, [sp, #4]
  options_idx = DHCP_OPTIONS_OFS;
 8004926:	f04f 0bf0 	mov.w	fp, #240	; 0xf0
  int parse_sname_as_options = 0;
 800492a:	9203      	str	r2, [sp, #12]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 800492c:	6849      	ldr	r1, [r1, #4]
      if (!dhcp_option_given(dhcp, decode_idx)) {
 800492e:	9302      	str	r3, [sp, #8]
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8004930:	f8c9 1004 	str.w	r1, [r9, #4]
  options_idx_max = p->tot_len;
 8004934:	9901      	ldr	r1, [sp, #4]
 8004936:	f8b1 a008 	ldrh.w	sl, [r1, #8]
  options_idx = DHCP_OPTIONS_OFS;
 800493a:	9e01      	ldr	r6, [sp, #4]
  while ((q != NULL) && (options_idx >= q->len)) {
 800493c:	8973      	ldrh	r3, [r6, #10]
 800493e:	455b      	cmp	r3, fp
 8004940:	d913      	bls.n	800496a <dhcp_recv+0xbe>
  options = (u8_t*)q->payload;
 8004942:	6873      	ldr	r3, [r6, #4]
 8004944:	465c      	mov	r4, fp
 8004946:	9304      	str	r3, [sp, #16]
 8004948:	e0e6      	b.n	8004b18 <dhcp_recv+0x26c>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800494a:	f812 7b01 	ldrb.w	r7, [r2], #1
 800494e:	3301      	adds	r3, #1
 8004950:	f811 6b01 	ldrb.w	r6, [r1], #1
 8004954:	42b7      	cmp	r7, r6
 8004956:	d0d1      	beq.n	80048fc <dhcp_recv+0x50>
    dhcp->msg_in = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	f8c9 3004 	str.w	r3, [r9, #4]
  pbuf_free(p);
 800495e:	9801      	ldr	r0, [sp, #4]
 8004960:	f002 fa06 	bl	8006d70 <pbuf_free>
}
 8004964:	b009      	add	sp, #36	; 0x24
 8004966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options_idx -= q->len;
 800496a:	ebab 0203 	sub.w	r2, fp, r3
    options_idx_max -= q->len;
 800496e:	ebaa 0a03 	sub.w	sl, sl, r3
    q = q->next;
 8004972:	6836      	ldr	r6, [r6, #0]
    options_idx -= q->len;
 8004974:	fa1f fb82 	uxth.w	fp, r2
    options_idx_max -= q->len;
 8004978:	fa1f fa8a 	uxth.w	sl, sl
  while ((q != NULL) && (options_idx >= q->len)) {
 800497c:	2e00      	cmp	r6, #0
 800497e:	d1dd      	bne.n	800493c <dhcp_recv+0x90>
 8004980:	e7ea      	b.n	8004958 <dhcp_recv+0xac>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8004982:	6833      	ldr	r3, [r6, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	f000 8172 	beq.w	8004c6e <dhcp_recv+0x3c2>
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	e0d6      	b.n	8004b3e <dhcp_recv+0x292>
        offset--;
 8004990:	3c01      	subs	r4, #1
        decode_len = len = 0;
 8004992:	2700      	movs	r7, #0
    int decode_idx = -1;
 8004994:	f04f 38ff 	mov.w	r8, #4294967295
        offset--;
 8004998:	b2a4      	uxth	r4, r4
        decode_len = len = 0;
 800499a:	463b      	mov	r3, r7
 800499c:	3402      	adds	r4, #2
    offset += len + 2;
 800499e:	fa13 f484 	uxtah	r4, r3, r4
 80049a2:	b2a4      	uxth	r4, r4
    if (decode_len > 0) {
 80049a4:	b347      	cbz	r7, 80049f8 <dhcp_recv+0x14c>
      u32_t value = 0;
 80049a6:	2300      	movs	r3, #0
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80049a8:	f1b8 0f07 	cmp.w	r8, #7
      u32_t value = 0;
 80049ac:	9307      	str	r3, [sp, #28]
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80049ae:	d906      	bls.n	80049be <dhcp_recv+0x112>
 80049b0:	4b6d      	ldr	r3, [pc, #436]	; (8004b68 <dhcp_recv+0x2bc>)
 80049b2:	f240 6236 	movw	r2, #1590	; 0x636
 80049b6:	4970      	ldr	r1, [pc, #448]	; (8004b78 <dhcp_recv+0x2cc>)
 80049b8:	486d      	ldr	r0, [pc, #436]	; (8004b70 <dhcp_recv+0x2c4>)
 80049ba:	f006 fbe9 	bl	800b190 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 80049be:	9b02      	ldr	r3, [sp, #8]
 80049c0:	f813 3008 	ldrb.w	r3, [r3, r8]
 80049c4:	b9c3      	cbnz	r3, 80049f8 <dhcp_recv+0x14c>
 80049c6:	b2ba      	uxth	r2, r7
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80049c8:	9b05      	ldr	r3, [sp, #20]
 80049ca:	a907      	add	r1, sp, #28
 80049cc:	4630      	mov	r0, r6
 80049ce:	9205      	str	r2, [sp, #20]
 80049d0:	f002 fc76 	bl	80072c0 <pbuf_copy_partial>
 80049d4:	9b05      	ldr	r3, [sp, #20]
 80049d6:	4283      	cmp	r3, r0
 80049d8:	d1be      	bne.n	8004958 <dhcp_recv+0xac>
        } else if (decode_len == 4) {
 80049da:	2f04      	cmp	r7, #4
 80049dc:	f040 8088 	bne.w	8004af0 <dhcp_recv+0x244>
          value = lwip_ntohl(value);
 80049e0:	9807      	ldr	r0, [sp, #28]
 80049e2:	f7ff fb0e 	bl	8004002 <lwip_htonl>
 80049e6:	9007      	str	r0, [sp, #28]
        dhcp_got_option(dhcp, decode_idx);
 80049e8:	2301      	movs	r3, #1
 80049ea:	9a02      	ldr	r2, [sp, #8]
 80049ec:	f802 3008 	strb.w	r3, [r2, r8]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80049f0:	9b07      	ldr	r3, [sp, #28]
 80049f2:	4a62      	ldr	r2, [pc, #392]	; (8004b7c <dhcp_recv+0x2d0>)
 80049f4:	f842 3028 	str.w	r3, [r2, r8, lsl #2]
    if (offset >= q->len) {
 80049f8:	8973      	ldrh	r3, [r6, #10]
 80049fa:	42a3      	cmp	r3, r4
 80049fc:	f200 808c 	bhi.w	8004b18 <dhcp_recv+0x26c>
      offset -= q->len;
 8004a00:	1ae4      	subs	r4, r4, r3
      offset_max -= q->len;
 8004a02:	ebaa 0a03 	sub.w	sl, sl, r3
      offset -= q->len;
 8004a06:	b2a4      	uxth	r4, r4
      offset_max -= q->len;
 8004a08:	fa1f fa8a 	uxth.w	sl, sl
      if ((offset < offset_max) && offset_max) {
 8004a0c:	4554      	cmp	r4, sl
 8004a0e:	d37a      	bcc.n	8004b06 <dhcp_recv+0x25a>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8004a10:	9b02      	ldr	r3, [sp, #8]
 8004a12:	781b      	ldrb	r3, [r3, #0]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	f040 80bf 	bne.w	8004b98 <dhcp_recv+0x2ec>
  } else if (parse_sname_as_options) {
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	f040 80c4 	bne.w	8004baa <dhcp_recv+0x2fe>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8004a22:	9b02      	ldr	r3, [sp, #8]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d096      	beq.n	8004958 <dhcp_recv+0xac>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8004a2a:	4a54      	ldr	r2, [pc, #336]	; (8004b7c <dhcp_recv+0x2d0>)
 8004a2c:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 8004a2e:	2b05      	cmp	r3, #5
 8004a30:	f040 80d7 	bne.w	8004be2 <dhcp_recv+0x336>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8004a34:	f899 3009 	ldrb.w	r3, [r9, #9]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	f040 80c7 	bne.w	8004bcc <dhcp_recv+0x320>
      dhcp_handle_ack(netif);
 8004a3e:	6a28      	ldr	r0, [r5, #32]
 8004a40:	f7ff fd72 	bl	8004528 <dhcp_handle_ack.isra.1>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004a44:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
        dhcp_check(netif);
 8004a48:	4628      	mov	r0, r5
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8004a4a:	071b      	lsls	r3, r3, #28
 8004a4c:	f140 80c6 	bpl.w	8004bdc <dhcp_recv+0x330>
        dhcp_check(netif);
 8004a50:	f7ff fc5e 	bl	8004310 <dhcp_check>
 8004a54:	e780      	b.n	8004958 <dhcp_recv+0xac>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d02f      	beq.n	8004aba <dhcp_recv+0x20e>
 8004a5a:	4b43      	ldr	r3, [pc, #268]	; (8004b68 <dhcp_recv+0x2bc>)
 8004a5c:	f240 52f6 	movw	r2, #1526	; 0x5f6
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004a60:	4947      	ldr	r1, [pc, #284]	; (8004b80 <dhcp_recv+0x2d4>)
 8004a62:	e005      	b.n	8004a70 <dhcp_recv+0x1c4>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8004a64:	2b03      	cmp	r3, #3
 8004a66:	d82c      	bhi.n	8004ac2 <dhcp_recv+0x216>
 8004a68:	4b3f      	ldr	r3, [pc, #252]	; (8004b68 <dhcp_recv+0x2bc>)
 8004a6a:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8004a6e:	4945      	ldr	r1, [pc, #276]	; (8004b84 <dhcp_recv+0x2d8>)
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004a70:	483f      	ldr	r0, [pc, #252]	; (8004b70 <dhcp_recv+0x2c4>)
 8004a72:	f006 fb8d 	bl	800b190 <iprintf>
 8004a76:	e76f      	b.n	8004958 <dhcp_recv+0xac>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004a78:	2b01      	cmp	r3, #1
 8004a7a:	d004      	beq.n	8004a86 <dhcp_recv+0x1da>
 8004a7c:	4b3a      	ldr	r3, [pc, #232]	; (8004b68 <dhcp_recv+0x2bc>)
 8004a7e:	f240 6217 	movw	r2, #1559	; 0x617
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004a82:	4941      	ldr	r1, [pc, #260]	; (8004b88 <dhcp_recv+0x2dc>)
 8004a84:	e7f4      	b.n	8004a70 <dhcp_recv+0x1c4>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004a86:	f1bb 0ff0 	cmp.w	fp, #240	; 0xf0
 8004a8a:	d022      	beq.n	8004ad2 <dhcp_recv+0x226>
 8004a8c:	4b36      	ldr	r3, [pc, #216]	; (8004b68 <dhcp_recv+0x2bc>)
 8004a8e:	f240 6219 	movw	r2, #1561	; 0x619
 8004a92:	493e      	ldr	r1, [pc, #248]	; (8004b8c <dhcp_recv+0x2e0>)
 8004a94:	e7ec      	b.n	8004a70 <dhcp_recv+0x1c4>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d023      	beq.n	8004ae2 <dhcp_recv+0x236>
 8004a9a:	4b33      	ldr	r3, [pc, #204]	; (8004b68 <dhcp_recv+0x2bc>)
 8004a9c:	f240 621d 	movw	r2, #1565	; 0x61d
 8004aa0:	e7ef      	b.n	8004a82 <dhcp_recv+0x1d6>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d019      	beq.n	8004ada <dhcp_recv+0x22e>
 8004aa6:	4b30      	ldr	r3, [pc, #192]	; (8004b68 <dhcp_recv+0x2bc>)
 8004aa8:	f240 6221 	movw	r2, #1569	; 0x621
 8004aac:	e7d8      	b.n	8004a60 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004aae:	2b04      	cmp	r3, #4
 8004ab0:	d017      	beq.n	8004ae2 <dhcp_recv+0x236>
 8004ab2:	4b2d      	ldr	r3, [pc, #180]	; (8004b68 <dhcp_recv+0x2bc>)
 8004ab4:	f240 6225 	movw	r2, #1573	; 0x625
 8004ab8:	e7d2      	b.n	8004a60 <dhcp_recv+0x1b4>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004aba:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8004abc:	f04f 0806 	mov.w	r8, #6
 8004ac0:	e76c      	b.n	800499c <dhcp_recv+0xf0>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8004ac2:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8004ac6:	2704      	movs	r7, #4
 8004ac8:	e768      	b.n	800499c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004aca:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8004acc:	f04f 0803 	mov.w	r8, #3
 8004ad0:	e764      	b.n	800499c <dhcp_recv+0xf0>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8004ad2:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8004ad4:	f04f 0800 	mov.w	r8, #0
 8004ad8:	e760      	b.n	800499c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ada:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8004adc:	f04f 0802 	mov.w	r8, #2
 8004ae0:	e75c      	b.n	800499c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ae2:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T1;
 8004ae4:	4698      	mov	r8, r3
 8004ae6:	e759      	b.n	800499c <dhcp_recv+0xf0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004ae8:	461f      	mov	r7, r3
        decode_idx = DHCP_OPTION_IDX_T2;
 8004aea:	f04f 0805 	mov.w	r8, #5
 8004aee:	e755      	b.n	800499c <dhcp_recv+0xf0>
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8004af0:	2f01      	cmp	r7, #1
 8004af2:	d004      	beq.n	8004afe <dhcp_recv+0x252>
 8004af4:	4b1c      	ldr	r3, [pc, #112]	; (8004b68 <dhcp_recv+0x2bc>)
 8004af6:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8004afa:	4925      	ldr	r1, [pc, #148]	; (8004b90 <dhcp_recv+0x2e4>)
 8004afc:	e7b8      	b.n	8004a70 <dhcp_recv+0x1c4>
          value = ((u8_t*)&value)[0];
 8004afe:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8004b02:	9307      	str	r3, [sp, #28]
 8004b04:	e770      	b.n	80049e8 <dhcp_recv+0x13c>
        q = q->next;
 8004b06:	6836      	ldr	r6, [r6, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8004b08:	b926      	cbnz	r6, 8004b14 <dhcp_recv+0x268>
 8004b0a:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <dhcp_recv+0x2bc>)
 8004b0c:	f240 6254 	movw	r2, #1620	; 0x654
 8004b10:	4920      	ldr	r1, [pc, #128]	; (8004b94 <dhcp_recv+0x2e8>)
 8004b12:	e7ad      	b.n	8004a70 <dhcp_recv+0x1c4>
        options = (u8_t*)q->payload;
 8004b14:	6873      	ldr	r3, [r6, #4]
 8004b16:	9304      	str	r3, [sp, #16]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8004b18:	4554      	cmp	r4, sl
 8004b1a:	f4bf af79 	bcs.w	8004a10 <dhcp_recv+0x164>
 8004b1e:	9b04      	ldr	r3, [sp, #16]
 8004b20:	5d1a      	ldrb	r2, [r3, r4]
 8004b22:	2aff      	cmp	r2, #255	; 0xff
 8004b24:	f43f af74 	beq.w	8004a10 <dhcp_recv+0x164>
    u16_t val_offset = offset + 2;
 8004b28:	1ca3      	adds	r3, r4, #2
    if ((offset + 1) < q->len) {
 8004b2a:	8971      	ldrh	r1, [r6, #10]
    u16_t val_offset = offset + 2;
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	9305      	str	r3, [sp, #20]
    if ((offset + 1) < q->len) {
 8004b30:	1c63      	adds	r3, r4, #1
 8004b32:	428b      	cmp	r3, r1
 8004b34:	f6bf af25 	bge.w	8004982 <dhcp_recv+0xd6>
      len = options[offset + 1];
 8004b38:	9b04      	ldr	r3, [sp, #16]
 8004b3a:	4423      	add	r3, r4
 8004b3c:	785b      	ldrb	r3, [r3, #1]
    switch(op) {
 8004b3e:	2a34      	cmp	r2, #52	; 0x34
 8004b40:	d09a      	beq.n	8004a78 <dhcp_recv+0x1cc>
 8004b42:	f200 8083 	bhi.w	8004c4c <dhcp_recv+0x3a0>
 8004b46:	2a01      	cmp	r2, #1
 8004b48:	d085      	beq.n	8004a56 <dhcp_recv+0x1aa>
 8004b4a:	f4ff af21 	bcc.w	8004990 <dhcp_recv+0xe4>
 8004b4e:	2a03      	cmp	r2, #3
 8004b50:	d088      	beq.n	8004a64 <dhcp_recv+0x1b8>
 8004b52:	2a33      	cmp	r2, #51	; 0x33
 8004b54:	f040 809b 	bne.w	8004c8e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d0b6      	beq.n	8004aca <dhcp_recv+0x21e>
 8004b5c:	4b02      	ldr	r3, [pc, #8]	; (8004b68 <dhcp_recv+0x2bc>)
 8004b5e:	f240 6209 	movw	r2, #1545	; 0x609
 8004b62:	e77d      	b.n	8004a60 <dhcp_recv+0x1b4>
 8004b64:	20003fa0 	.word	0x20003fa0
 8004b68:	0800c39e 	.word	0x0800c39e
 8004b6c:	0800c4a1 	.word	0x0800c4a1
 8004b70:	0800c106 	.word	0x0800c106
 8004b74:	20003fb8 	.word	0x20003fb8
 8004b78:	0800c4ef 	.word	0x0800c4ef
 8004b7c:	20003fc0 	.word	0x20003fc0
 8004b80:	0800c4b4 	.word	0x0800c4b4
 8004b84:	0800c4bd 	.word	0x0800c4bd
 8004b88:	0800c4cf 	.word	0x0800c4cf
 8004b8c:	0800c4d8 	.word	0x0800c4d8
 8004b90:	0800c500 	.word	0x0800c500
 8004b94:	0800c513 	.word	0x0800c513
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004b98:	4b44      	ldr	r3, [pc, #272]	; (8004cac <dhcp_recv+0x400>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	9902      	ldr	r1, [sp, #8]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004b9e:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8004ba0:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d00d      	beq.n	8004bc2 <dhcp_recv+0x316>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d106      	bne.n	8004bb8 <dhcp_recv+0x30c>
    parse_sname_as_options = 0;
 8004baa:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8004bac:	f04f 0a6c 	mov.w	sl, #108	; 0x6c
    options_idx = DHCP_SNAME_OFS;
 8004bb0:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
    parse_sname_as_options = 0;
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	e6c0      	b.n	800493a <dhcp_recv+0x8e>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8004bb8:	2b03      	cmp	r3, #3
 8004bba:	f47f af2e 	bne.w	8004a1a <dhcp_recv+0x16e>
      parse_sname_as_options = 1;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	9303      	str	r3, [sp, #12]
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8004bc2:	f04f 0aec 	mov.w	sl, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8004bc6:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
 8004bca:	e6b6      	b.n	800493a <dhcp_recv+0x8e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8004bcc:	3b03      	subs	r3, #3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	f63f aec2 	bhi.w	8004958 <dhcp_recv+0xac>
      dhcp_handle_ack(netif);
 8004bd4:	6a28      	ldr	r0, [r5, #32]
 8004bd6:	f7ff fca7 	bl	8004528 <dhcp_handle_ack.isra.1>
      dhcp_bind(netif);
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f7ff fbae 	bl	800433c <dhcp_bind>
 8004be0:	e6ba      	b.n	8004958 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_NAK) &&
 8004be2:	2b06      	cmp	r3, #6
 8004be4:	d115      	bne.n	8004c12 <dhcp_recv+0x366>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004be6:	f899 3009 	ldrb.w	r3, [r9, #9]
  else if ((msg_type == DHCP_NAK) &&
 8004bea:	1eda      	subs	r2, r3, #3
 8004bec:	2a02      	cmp	r2, #2
 8004bee:	d902      	bls.n	8004bf6 <dhcp_recv+0x34a>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	f47f aeb1 	bne.w	8004958 <dhcp_recv+0xac>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004bf6:	6a28      	ldr	r0, [r5, #32]
 8004bf8:	210c      	movs	r1, #12
 8004bfa:	f7ff fa15 	bl	8004028 <dhcp_set_state>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8004bfe:	4b2c      	ldr	r3, [pc, #176]	; (8004cb0 <dhcp_recv+0x404>)
 8004c00:	4628      	mov	r0, r5
 8004c02:	461a      	mov	r2, r3
 8004c04:	4619      	mov	r1, r3
 8004c06:	f001 ff73 	bl	8006af0 <netif_set_addr>
  dhcp_discover(netif);
 8004c0a:	4628      	mov	r0, r5
 8004c0c:	f7ff fcf2 	bl	80045f4 <dhcp_discover>
 8004c10:	e6a2      	b.n	8004958 <dhcp_recv+0xac>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	f47f aea0 	bne.w	8004958 <dhcp_recv+0xac>
 8004c18:	f899 3009 	ldrb.w	r3, [r9, #9]
 8004c1c:	2b06      	cmp	r3, #6
 8004c1e:	f47f ae9b 	bne.w	8004958 <dhcp_recv+0xac>
    dhcp->request_timeout = 0;
 8004c22:	f8bd 300c 	ldrh.w	r3, [sp, #12]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004c26:	6a2c      	ldr	r4, [r5, #32]
    dhcp->request_timeout = 0;
 8004c28:	f8a9 3016 	strh.w	r3, [r9, #22]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8004c2c:	9b02      	ldr	r3, [sp, #8]
 8004c2e:	789b      	ldrb	r3, [r3, #2]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f43f ae91 	beq.w	8004958 <dhcp_recv+0xac>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004c36:	6890      	ldr	r0, [r2, #8]
 8004c38:	f7ff f9e3 	bl	8004002 <lwip_htonl>
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8004c3c:	6863      	ldr	r3, [r4, #4]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8004c3e:	6260      	str	r0, [r4, #36]	; 0x24
    dhcp_select(netif);
 8004c40:	4628      	mov	r0, r5
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	62a3      	str	r3, [r4, #40]	; 0x28
    dhcp_select(netif);
 8004c46:	f7ff fd33 	bl	80046b0 <dhcp_select>
 8004c4a:	e685      	b.n	8004958 <dhcp_recv+0xac>
    switch(op) {
 8004c4c:	2a36      	cmp	r2, #54	; 0x36
 8004c4e:	f43f af28 	beq.w	8004aa2 <dhcp_recv+0x1f6>
 8004c52:	f4ff af20 	bcc.w	8004a96 <dhcp_recv+0x1ea>
 8004c56:	2a3a      	cmp	r2, #58	; 0x3a
 8004c58:	f43f af29 	beq.w	8004aae <dhcp_recv+0x202>
 8004c5c:	2a3b      	cmp	r2, #59	; 0x3b
 8004c5e:	d116      	bne.n	8004c8e <dhcp_recv+0x3e2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8004c60:	2b04      	cmp	r3, #4
 8004c62:	f43f af41 	beq.w	8004ae8 <dhcp_recv+0x23c>
 8004c66:	4b13      	ldr	r3, [pc, #76]	; (8004cb4 <dhcp_recv+0x408>)
 8004c68:	f240 6229 	movw	r2, #1577	; 0x629
 8004c6c:	e6f8      	b.n	8004a60 <dhcp_recv+0x1b4>
    switch(op) {
 8004c6e:	2a34      	cmp	r2, #52	; 0x34
 8004c70:	f43f af04 	beq.w	8004a7c <dhcp_recv+0x1d0>
 8004c74:	d80f      	bhi.n	8004c96 <dhcp_recv+0x3ea>
 8004c76:	2a01      	cmp	r2, #1
 8004c78:	f43f aeef 	beq.w	8004a5a <dhcp_recv+0x1ae>
 8004c7c:	f4ff ae88 	bcc.w	8004990 <dhcp_recv+0xe4>
 8004c80:	2a03      	cmp	r2, #3
 8004c82:	f43f aef1 	beq.w	8004a68 <dhcp_recv+0x1bc>
 8004c86:	2a33      	cmp	r2, #51	; 0x33
 8004c88:	f43f af68 	beq.w	8004b5c <dhcp_recv+0x2b0>
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8004c8c:	2300      	movs	r3, #0
    offset += len + 2;
 8004c8e:	9a05      	ldr	r2, [sp, #20]
 8004c90:	441a      	add	r2, r3
 8004c92:	b294      	uxth	r4, r2
 8004c94:	e6b0      	b.n	80049f8 <dhcp_recv+0x14c>
    switch(op) {
 8004c96:	2a36      	cmp	r2, #54	; 0x36
 8004c98:	f43f af05 	beq.w	8004aa6 <dhcp_recv+0x1fa>
 8004c9c:	f4ff aefd 	bcc.w	8004a9a <dhcp_recv+0x1ee>
 8004ca0:	2a3a      	cmp	r2, #58	; 0x3a
 8004ca2:	f43f af06 	beq.w	8004ab2 <dhcp_recv+0x206>
 8004ca6:	2a3b      	cmp	r2, #59	; 0x3b
 8004ca8:	d0dd      	beq.n	8004c66 <dhcp_recv+0x3ba>
 8004caa:	e7ef      	b.n	8004c8c <dhcp_recv+0x3e0>
 8004cac:	20003fc0 	.word	0x20003fc0
 8004cb0:	0800c870 	.word	0x0800c870
 8004cb4:	0800c39e 	.word	0x0800c39e

08004cb8 <dhcp_arp_reply>:
{
 8004cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004cba:	4605      	mov	r5, r0
 8004cbc:	b948      	cbnz	r0, 8004cd2 <dhcp_arp_reply+0x1a>
 8004cbe:	4b24      	ldr	r3, [pc, #144]	; (8004d50 <dhcp_arp_reply+0x98>)
 8004cc0:	f240 327b 	movw	r2, #891	; 0x37b
 8004cc4:	4923      	ldr	r1, [pc, #140]	; (8004d54 <dhcp_arp_reply+0x9c>)
 8004cc6:	4824      	ldr	r0, [pc, #144]	; (8004d58 <dhcp_arp_reply+0xa0>)
}
 8004cc8:	b003      	add	sp, #12
 8004cca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8004cce:	f006 ba5f 	b.w	800b190 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8004cd2:	6a04      	ldr	r4, [r0, #32]
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d039      	beq.n	8004d4c <dhcp_arp_reply+0x94>
 8004cd8:	7a63      	ldrb	r3, [r4, #9]
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d136      	bne.n	8004d4c <dhcp_arp_reply+0x94>
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8004cde:	680a      	ldr	r2, [r1, #0]
 8004ce0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004ce2:	429a      	cmp	r2, r3
 8004ce4:	d132      	bne.n	8004d4c <dhcp_arp_reply+0x94>
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8004ce6:	210c      	movs	r1, #12
 8004ce8:	4620      	mov	r0, r4
 8004cea:	f7ff f99d 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8004cee:	2204      	movs	r2, #4
 8004cf0:	4621      	mov	r1, r4
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f7ff fa30 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004cf8:	bb08      	cbnz	r0, 8004d3e <dhcp_arp_reply+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	2132      	movs	r1, #50	; 0x32
 8004cfe:	4620      	mov	r0, r4
 8004d00:	f7ff f9bc 	bl	800407c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8004d04:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8004d06:	f7ff f97c 	bl	8004002 <lwip_htonl>
 8004d0a:	4601      	mov	r1, r0
 8004d0c:	4620      	mov	r0, r4
 8004d0e:	f7ff f9f5 	bl	80040fc <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8004d12:	4620      	mov	r0, r4
 8004d14:	f7ff fbcc 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004d18:	8aa1      	ldrh	r1, [r4, #20]
 8004d1a:	68e0      	ldr	r0, [r4, #12]
 8004d1c:	31f0      	adds	r1, #240	; 0xf0
 8004d1e:	b289      	uxth	r1, r1
 8004d20:	f002 f96c 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8004d24:	4b0d      	ldr	r3, [pc, #52]	; (8004d5c <dhcp_arp_reply+0xa4>)
 8004d26:	480e      	ldr	r0, [pc, #56]	; (8004d60 <dhcp_arp_reply+0xa8>)
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	2343      	movs	r3, #67	; 0x43
 8004d2c:	9500      	str	r5, [sp, #0]
 8004d2e:	4a0d      	ldr	r2, [pc, #52]	; (8004d64 <dhcp_arp_reply+0xac>)
 8004d30:	68e1      	ldr	r1, [r4, #12]
 8004d32:	6800      	ldr	r0, [r0, #0]
 8004d34:	f005 f9dc 	bl	800a0f0 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff fc2b 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004d3e:	7aa3      	ldrb	r3, [r4, #10]
 8004d40:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004d42:	bf1c      	itt	ne
 8004d44:	3301      	addne	r3, #1
 8004d46:	72a3      	strbne	r3, [r4, #10]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004d48:	2314      	movs	r3, #20
 8004d4a:	82e3      	strh	r3, [r4, #22]
}
 8004d4c:	b003      	add	sp, #12
 8004d4e:	bd30      	pop	{r4, r5, pc}
 8004d50:	0800c39e 	.word	0x0800c39e
 8004d54:	0800c139 	.word	0x0800c139
 8004d58:	0800c106 	.word	0x0800c106
 8004d5c:	0800c870 	.word	0x0800c870
 8004d60:	20003dec 	.word	0x20003dec
 8004d64:	0800c874 	.word	0x0800c874

08004d68 <dhcp_renew>:
{
 8004d68:	b573      	push	{r0, r1, r4, r5, r6, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004d6a:	6a04      	ldr	r4, [r0, #32]
{
 8004d6c:	4606      	mov	r6, r0
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8004d6e:	2105      	movs	r1, #5
 8004d70:	4620      	mov	r0, r4
 8004d72:	f7ff f959 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8004d76:	2203      	movs	r2, #3
 8004d78:	4621      	mov	r1, r4
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff f9ec 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004d80:	4605      	mov	r5, r0
 8004d82:	bb70      	cbnz	r0, 8004de2 <dhcp_renew+0x7a>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8004d84:	2202      	movs	r2, #2
 8004d86:	2139      	movs	r1, #57	; 0x39
 8004d88:	4620      	mov	r0, r4
 8004d8a:	f7ff f977 	bl	800407c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8004d8e:	8cf1      	ldrh	r1, [r6, #38]	; 0x26
 8004d90:	4620      	mov	r0, r4
 8004d92:	f7ff f951 	bl	8004038 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8004d96:	2203      	movs	r2, #3
 8004d98:	2137      	movs	r1, #55	; 0x37
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	f7ff f96e 	bl	800407c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8004da0:	2101      	movs	r1, #1
 8004da2:	4620      	mov	r0, r4
 8004da4:	f7ff f98e 	bl	80040c4 <dhcp_option_byte>
 8004da8:	2103      	movs	r1, #3
 8004daa:	4620      	mov	r0, r4
 8004dac:	f7ff f98a 	bl	80040c4 <dhcp_option_byte>
 8004db0:	211c      	movs	r1, #28
 8004db2:	4620      	mov	r0, r4
 8004db4:	f7ff f986 	bl	80040c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 8004db8:	4620      	mov	r0, r4
 8004dba:	f7ff fb79 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004dbe:	8aa1      	ldrh	r1, [r4, #20]
 8004dc0:	68e0      	ldr	r0, [r4, #12]
 8004dc2:	31f0      	adds	r1, #240	; 0xf0
 8004dc4:	b289      	uxth	r1, r1
 8004dc6:	f002 f919 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 8004dca:	4813      	ldr	r0, [pc, #76]	; (8004e18 <dhcp_renew+0xb0>)
 8004dcc:	9600      	str	r6, [sp, #0]
 8004dce:	2343      	movs	r3, #67	; 0x43
 8004dd0:	f104 0224 	add.w	r2, r4, #36	; 0x24
 8004dd4:	68e1      	ldr	r1, [r4, #12]
 8004dd6:	6800      	ldr	r0, [r0, #0]
 8004dd8:	f005 f9f0 	bl	800a1bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8004ddc:	4620      	mov	r0, r4
 8004dde:	f7ff fbd9 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 8004de2:	7aa3      	ldrb	r3, [r4, #10]
}
 8004de4:	4628      	mov	r0, r5
  if (dhcp->tries < 255) {
 8004de6:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 8004de8:	bf1c      	itt	ne
 8004dea:	3301      	addne	r3, #1
 8004dec:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8004dee:	7aa3      	ldrb	r3, [r4, #10]
 8004df0:	2b09      	cmp	r3, #9
 8004df2:	bf96      	itet	ls
 8004df4:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 8004df8:	f644 6320 	movwhi	r3, #20000	; 0x4e20
 8004dfc:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004e00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8004e04:	bf9c      	itt	ls
 8004e06:	011b      	lslls	r3, r3, #4
 8004e08:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8004e0a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8004e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004e12:	82e3      	strh	r3, [r4, #22]
}
 8004e14:	b002      	add	sp, #8
 8004e16:	bd70      	pop	{r4, r5, r6, pc}
 8004e18:	20003dec 	.word	0x20003dec

08004e1c <dhcp_stop>:
{
 8004e1c:	b510      	push	{r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8004e1e:	b940      	cbnz	r0, 8004e32 <dhcp_stop+0x16>
 8004e20:	4b0f      	ldr	r3, [pc, #60]	; (8004e60 <dhcp_stop+0x44>)
 8004e22:	f240 5242 	movw	r2, #1346	; 0x542
 8004e26:	490f      	ldr	r1, [pc, #60]	; (8004e64 <dhcp_stop+0x48>)
 8004e28:	480f      	ldr	r0, [pc, #60]	; (8004e68 <dhcp_stop+0x4c>)
}
 8004e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8004e2e:	f006 b9af 	b.w	800b190 <iprintf>
  dhcp = netif_dhcp_data(netif);
 8004e32:	6a04      	ldr	r4, [r0, #32]
  if (dhcp != NULL) {
 8004e34:	b194      	cbz	r4, 8004e5c <dhcp_stop+0x40>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8004e36:	6863      	ldr	r3, [r4, #4]
 8004e38:	b133      	cbz	r3, 8004e48 <dhcp_stop+0x2c>
 8004e3a:	4b09      	ldr	r3, [pc, #36]	; (8004e60 <dhcp_stop+0x44>)
 8004e3c:	f240 524f 	movw	r2, #1359	; 0x54f
 8004e40:	490a      	ldr	r1, [pc, #40]	; (8004e6c <dhcp_stop+0x50>)
 8004e42:	4809      	ldr	r0, [pc, #36]	; (8004e68 <dhcp_stop+0x4c>)
 8004e44:	f006 f9a4 	bl	800b190 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8004e48:	2100      	movs	r1, #0
 8004e4a:	4620      	mov	r0, r4
 8004e4c:	f7ff f8ec 	bl	8004028 <dhcp_set_state>
    if (dhcp->pcb_allocated != 0) {
 8004e50:	7a23      	ldrb	r3, [r4, #8]
 8004e52:	b11b      	cbz	r3, 8004e5c <dhcp_stop+0x40>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8004e54:	f7ff fd0a 	bl	800486c <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	7223      	strb	r3, [r4, #8]
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	bf00      	nop
 8004e60:	0800c39e 	.word	0x0800c39e
 8004e64:	0800c583 	.word	0x0800c583
 8004e68:	0800c106 	.word	0x0800c106
 8004e6c:	0800c4a1 	.word	0x0800c4a1

08004e70 <dhcp_start>:
{
 8004e70:	b538      	push	{r3, r4, r5, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8004e72:	4605      	mov	r5, r0
 8004e74:	b948      	cbnz	r0, 8004e8a <dhcp_start+0x1a>
 8004e76:	4b27      	ldr	r3, [pc, #156]	; (8004f14 <dhcp_start+0xa4>)
 8004e78:	f240 22d6 	movw	r2, #726	; 0x2d6
 8004e7c:	4926      	ldr	r1, [pc, #152]	; (8004f18 <dhcp_start+0xa8>)
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8004e7e:	4827      	ldr	r0, [pc, #156]	; (8004f1c <dhcp_start+0xac>)
 8004e80:	f006 f986 	bl	800b190 <iprintf>
 8004e84:	f06f 000f 	mvn.w	r0, #15
 8004e88:	bd38      	pop	{r3, r4, r5, pc}
 8004e8a:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8004e8e:	07db      	lsls	r3, r3, #31
 8004e90:	d404      	bmi.n	8004e9c <dhcp_start+0x2c>
 8004e92:	4b20      	ldr	r3, [pc, #128]	; (8004f14 <dhcp_start+0xa4>)
 8004e94:	f240 22d7 	movw	r2, #727	; 0x2d7
 8004e98:	4921      	ldr	r1, [pc, #132]	; (8004f20 <dhcp_start+0xb0>)
 8004e9a:	e7f0      	b.n	8004e7e <dhcp_start+0xe>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8004e9c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  dhcp = netif_dhcp_data(netif);
 8004e9e:	6a04      	ldr	r4, [r0, #32]
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8004ea0:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8004ea4:	d202      	bcs.n	8004eac <dhcp_start+0x3c>
    return ERR_MEM;
 8004ea6:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004eaa:	bd38      	pop	{r3, r4, r5, pc}
  if (dhcp == NULL) {
 8004eac:	b9d4      	cbnz	r4, 8004ee4 <dhcp_start+0x74>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8004eae:	2040      	movs	r0, #64	; 0x40
 8004eb0:	f001 fcc2 	bl	8006838 <mem_malloc>
    if (dhcp == NULL) {
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2800      	cmp	r0, #0
 8004eb8:	d0f5      	beq.n	8004ea6 <dhcp_start+0x36>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8004eba:	6228      	str	r0, [r5, #32]
  memset(dhcp, 0, sizeof(struct dhcp));
 8004ebc:	2240      	movs	r2, #64	; 0x40
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4620      	mov	r0, r4
 8004ec2:	f006 f95d 	bl	800b180 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8004ec6:	f7ff fab9 	bl	800443c <dhcp_inc_pcb_refcount>
 8004eca:	2800      	cmp	r0, #0
 8004ecc:	d1eb      	bne.n	8004ea6 <dhcp_start+0x36>
  dhcp->pcb_allocated = 1;
 8004ece:	2301      	movs	r3, #1
  result = dhcp_discover(netif);
 8004ed0:	4628      	mov	r0, r5
  dhcp->pcb_allocated = 1;
 8004ed2:	7223      	strb	r3, [r4, #8]
  result = dhcp_discover(netif);
 8004ed4:	f7ff fb8e 	bl	80045f4 <dhcp_discover>
  if (result != ERR_OK) {
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d0e6      	beq.n	8004eaa <dhcp_start+0x3a>
    dhcp_stop(netif);
 8004edc:	4628      	mov	r0, r5
 8004ede:	f7ff ff9d 	bl	8004e1c <dhcp_stop>
 8004ee2:	e7e0      	b.n	8004ea6 <dhcp_start+0x36>
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8004ee4:	68e3      	ldr	r3, [r4, #12]
 8004ee6:	b133      	cbz	r3, 8004ef6 <dhcp_start+0x86>
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	; (8004f14 <dhcp_start+0xa4>)
 8004eea:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8004eee:	490d      	ldr	r1, [pc, #52]	; (8004f24 <dhcp_start+0xb4>)
 8004ef0:	480a      	ldr	r0, [pc, #40]	; (8004f1c <dhcp_start+0xac>)
 8004ef2:	f006 f94d 	bl	800b190 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8004ef6:	6863      	ldr	r3, [r4, #4]
 8004ef8:	b133      	cbz	r3, 8004f08 <dhcp_start+0x98>
 8004efa:	4b06      	ldr	r3, [pc, #24]	; (8004f14 <dhcp_start+0xa4>)
 8004efc:	f240 22f1 	movw	r2, #753	; 0x2f1
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <dhcp_start+0xb8>)
 8004f02:	4806      	ldr	r0, [pc, #24]	; (8004f1c <dhcp_start+0xac>)
 8004f04:	f006 f944 	bl	800b190 <iprintf>
    if (dhcp->pcb_allocated != 0) {
 8004f08:	7a23      	ldrb	r3, [r4, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0d6      	beq.n	8004ebc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8004f0e:	f7ff fcad 	bl	800486c <dhcp_dec_pcb_refcount>
 8004f12:	e7d3      	b.n	8004ebc <dhcp_start+0x4c>
 8004f14:	0800c39e 	.word	0x0800c39e
 8004f18:	0800c139 	.word	0x0800c139
 8004f1c:	0800c106 	.word	0x0800c106
 8004f20:	0800c54a 	.word	0x0800c54a
 8004f24:	0800c56b 	.word	0x0800c56b
 8004f28:	0800c4a1 	.word	0x0800c4a1

08004f2c <dhcp_supplied_address>:
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8004f2c:	b158      	cbz	r0, 8004f46 <dhcp_supplied_address+0x1a>
 8004f2e:	6a00      	ldr	r0, [r0, #32]
 8004f30:	b148      	cbz	r0, 8004f46 <dhcp_supplied_address+0x1a>
    struct dhcp* dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8004f32:	7a40      	ldrb	r0, [r0, #9]
 8004f34:	280a      	cmp	r0, #10
 8004f36:	d005      	beq.n	8004f44 <dhcp_supplied_address+0x18>
 8004f38:	3804      	subs	r0, #4
 8004f3a:	2801      	cmp	r0, #1
 8004f3c:	bf8c      	ite	hi
 8004f3e:	2000      	movhi	r0, #0
 8004f40:	2001      	movls	r0, #1
 8004f42:	4770      	bx	lr
 8004f44:	2001      	movs	r0, #1
           (dhcp->state == DHCP_STATE_REBINDING);
  }
  return 0;
}
 8004f46:	4770      	bx	lr

08004f48 <dhcp_release>:
{
 8004f48:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8004f4a:	6a04      	ldr	r4, [r0, #32]
{
 8004f4c:	b085      	sub	sp, #20
 8004f4e:	4606      	mov	r6, r0
  if (dhcp == NULL) {
 8004f50:	2c00      	cmp	r4, #0
 8004f52:	d047      	beq.n	8004fe4 <dhcp_release+0x9c>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8004f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f56:	9303      	str	r3, [sp, #12]
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8004f58:	f7ff ffe8 	bl	8004f2c <dhcp_supplied_address>
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8004f5c:	2100      	movs	r1, #0
  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8004f5e:	4605      	mov	r5, r0
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8004f60:	4620      	mov	r0, r4
 8004f62:	f7ff f861 	bl	8004028 <dhcp_set_state>
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8004f66:	2300      	movs	r3, #0
 8004f68:	6263      	str	r3, [r4, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8004f6a:	62a3      	str	r3, [r4, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8004f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8004f6e:	6323      	str	r3, [r4, #48]	; 0x30
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8004f70:	63e3      	str	r3, [r4, #60]	; 0x3c
 8004f72:	63a3      	str	r3, [r4, #56]	; 0x38
 8004f74:	6363      	str	r3, [r4, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8004f76:	8463      	strh	r3, [r4, #34]	; 0x22
 8004f78:	8423      	strh	r3, [r4, #32]
 8004f7a:	83e3      	strh	r3, [r4, #30]
 8004f7c:	83a3      	strh	r3, [r4, #28]
  if (!is_dhcp_supplied_address) {
 8004f7e:	b375      	cbz	r5, 8004fde <dhcp_release+0x96>
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8004f80:	2207      	movs	r2, #7
 8004f82:	4621      	mov	r1, r4
 8004f84:	4630      	mov	r0, r6
 8004f86:	f7ff f8e7 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 8004f8a:	4605      	mov	r5, r0
 8004f8c:	bb08      	cbnz	r0, 8004fd2 <dhcp_release+0x8a>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8004f8e:	af04      	add	r7, sp, #16
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8004f90:	2204      	movs	r2, #4
 8004f92:	2136      	movs	r1, #54	; 0x36
 8004f94:	4620      	mov	r0, r4
 8004f96:	f7ff f871 	bl	800407c <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8004f9a:	f857 0d04 	ldr.w	r0, [r7, #-4]!
 8004f9e:	f7ff f830 	bl	8004002 <lwip_htonl>
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff f8a9 	bl	80040fc <dhcp_option_long>
    dhcp_option_trailer(dhcp);
 8004faa:	4620      	mov	r0, r4
 8004fac:	f7ff fa80 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8004fb0:	8aa1      	ldrh	r1, [r4, #20]
 8004fb2:	68e0      	ldr	r0, [r4, #12]
 8004fb4:	31f0      	adds	r1, #240	; 0xf0
 8004fb6:	b289      	uxth	r1, r1
 8004fb8:	f002 f820 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8004fbc:	480b      	ldr	r0, [pc, #44]	; (8004fec <dhcp_release+0xa4>)
 8004fbe:	9600      	str	r6, [sp, #0]
 8004fc0:	2343      	movs	r3, #67	; 0x43
 8004fc2:	463a      	mov	r2, r7
 8004fc4:	68e1      	ldr	r1, [r4, #12]
 8004fc6:	6800      	ldr	r0, [r0, #0]
 8004fc8:	f005 f8f8 	bl	800a1bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8004fcc:	4620      	mov	r0, r4
 8004fce:	f7ff fae1 	bl	8004594 <dhcp_delete_msg>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <dhcp_release+0xa8>)
 8004fd4:	4630      	mov	r0, r6
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f001 fd89 	bl	8006af0 <netif_set_addr>
}
 8004fde:	4628      	mov	r0, r5
 8004fe0:	b005      	add	sp, #20
 8004fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ERR_ARG;
 8004fe4:	f06f 050f 	mvn.w	r5, #15
 8004fe8:	e7f9      	b.n	8004fde <dhcp_release+0x96>
 8004fea:	bf00      	nop
 8004fec:	20003dec 	.word	0x20003dec
 8004ff0:	0800c870 	.word	0x0800c870

08004ff4 <dhcp_coarse_tmr>:
  struct netif *netif = netif_list;
 8004ff4:	4b51      	ldr	r3, [pc, #324]	; (800513c <dhcp_coarse_tmr+0x148>)
{
 8004ff6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  struct netif *netif = netif_list;
 8004ffa:	681d      	ldr	r5, [r3, #0]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8004ffc:	f240 2619 	movw	r6, #537	; 0x219
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8005000:	4f4f      	ldr	r7, [pc, #316]	; (8005140 <dhcp_coarse_tmr+0x14c>)
 8005002:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8005144 <dhcp_coarse_tmr+0x150>
  while (netif != NULL) {
 8005006:	b915      	cbnz	r5, 800500e <dhcp_coarse_tmr+0x1a>
}
 8005008:	b003      	add	sp, #12
 800500a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800500e:	6a2c      	ldr	r4, [r5, #32]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8005010:	b17c      	cbz	r4, 8005032 <dhcp_coarse_tmr+0x3e>
 8005012:	7a63      	ldrb	r3, [r4, #9]
 8005014:	b16b      	cbz	r3, 8005032 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8005016:	8c61      	ldrh	r1, [r4, #34]	; 0x22
 8005018:	b169      	cbz	r1, 8005036 <dhcp_coarse_tmr+0x42>
 800501a:	8c22      	ldrh	r2, [r4, #32]
 800501c:	3201      	adds	r2, #1
 800501e:	b292      	uxth	r2, r2
 8005020:	4291      	cmp	r1, r2
 8005022:	8422      	strh	r2, [r4, #32]
 8005024:	d107      	bne.n	8005036 <dhcp_coarse_tmr+0x42>
        dhcp_release(netif);
 8005026:	4628      	mov	r0, r5
 8005028:	f7ff ff8e 	bl	8004f48 <dhcp_release>
        dhcp_discover(netif);
 800502c:	4628      	mov	r0, r5
 800502e:	f7ff fae1 	bl	80045f4 <dhcp_discover>
    netif = netif->next;
 8005032:	682d      	ldr	r5, [r5, #0]
 8005034:	e7e7      	b.n	8005006 <dhcp_coarse_tmr+0x12>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8005036:	f8b4 901e 	ldrh.w	r9, [r4, #30]
 800503a:	f1b9 0f00 	cmp.w	r9, #0
 800503e:	d064      	beq.n	800510a <dhcp_coarse_tmr+0x116>
 8005040:	f109 32ff 	add.w	r2, r9, #4294967295
 8005044:	f1b9 0f01 	cmp.w	r9, #1
 8005048:	83e2      	strh	r2, [r4, #30]
 800504a:	d15e      	bne.n	800510a <dhcp_coarse_tmr+0x116>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800504c:	3b01      	subs	r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b09      	cmp	r3, #9
 8005052:	d8ee      	bhi.n	8005032 <dhcp_coarse_tmr+0x3e>
 8005054:	fa26 f303 	lsr.w	r3, r6, r3
 8005058:	07db      	lsls	r3, r3, #31
 800505a:	d5ea      	bpl.n	8005032 <dhcp_coarse_tmr+0x3e>
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800505c:	2104      	movs	r1, #4
 800505e:	4620      	mov	r0, r4
 8005060:	f7fe ffe2 	bl	8004028 <dhcp_set_state>
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8005064:	2203      	movs	r2, #3
 8005066:	4621      	mov	r1, r4
 8005068:	4628      	mov	r0, r5
 800506a:	f7ff f875 	bl	8004158 <dhcp_create_msg>
  if (result == ERR_OK) {
 800506e:	bb60      	cbnz	r0, 80050ca <dhcp_coarse_tmr+0xd6>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8005070:	2202      	movs	r2, #2
 8005072:	2139      	movs	r1, #57	; 0x39
 8005074:	4620      	mov	r0, r4
 8005076:	f7ff f801 	bl	800407c <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 800507a:	8ce9      	ldrh	r1, [r5, #38]	; 0x26
 800507c:	4620      	mov	r0, r4
 800507e:	f7fe ffdb 	bl	8004038 <dhcp_option_short>
    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8005082:	2203      	movs	r2, #3
 8005084:	2137      	movs	r1, #55	; 0x37
 8005086:	4620      	mov	r0, r4
 8005088:	f7fe fff8 	bl	800407c <dhcp_option>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 800508c:	4649      	mov	r1, r9
 800508e:	4620      	mov	r0, r4
 8005090:	f7ff f818 	bl	80040c4 <dhcp_option_byte>
 8005094:	2103      	movs	r1, #3
 8005096:	4620      	mov	r0, r4
 8005098:	f7ff f814 	bl	80040c4 <dhcp_option_byte>
 800509c:	211c      	movs	r1, #28
 800509e:	4620      	mov	r0, r4
 80050a0:	f7ff f810 	bl	80040c4 <dhcp_option_byte>
    dhcp_option_trailer(dhcp);
 80050a4:	4620      	mov	r0, r4
 80050a6:	f7ff fa03 	bl	80044b0 <dhcp_option_trailer>
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80050aa:	8aa1      	ldrh	r1, [r4, #20]
 80050ac:	68e0      	ldr	r0, [r4, #12]
 80050ae:	31f0      	adds	r1, #240	; 0xf0
 80050b0:	b289      	uxth	r1, r1
 80050b2:	f001 ffa3 	bl	8006ffc <pbuf_realloc>
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 80050b6:	9500      	str	r5, [sp, #0]
 80050b8:	2343      	movs	r3, #67	; 0x43
 80050ba:	4642      	mov	r2, r8
 80050bc:	68e1      	ldr	r1, [r4, #12]
 80050be:	6838      	ldr	r0, [r7, #0]
 80050c0:	f005 f87c 	bl	800a1bc <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7ff fa65 	bl	8004594 <dhcp_delete_msg>
  if (dhcp->tries < 255) {
 80050ca:	7aa3      	ldrb	r3, [r4, #10]
 80050cc:	2bff      	cmp	r3, #255	; 0xff
    dhcp->tries++;
 80050ce:	bf1c      	itt	ne
 80050d0:	3301      	addne	r3, #1
 80050d2:	72a3      	strbne	r3, [r4, #10]
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80050d4:	7aa3      	ldrb	r3, [r4, #10]
 80050d6:	2b09      	cmp	r3, #9
 80050d8:	bf96      	itet	ls
 80050da:	ebc3 1243 	rsbls	r2, r3, r3, lsl #5
 80050de:	f242 7310 	movwhi	r3, #10000	; 0x2710
 80050e2:	eb03 0382 	addls.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80050e6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80050ea:	bf9c      	itt	ls
 80050ec:	00db      	lslls	r3, r3, #3
 80050ee:	b29b      	uxthls	r3, r3
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80050f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80050f4:	fb93 f3f2 	sdiv	r3, r3, r2
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80050f8:	8c22      	ldrh	r2, [r4, #32]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80050fa:	82e3      	strh	r3, [r4, #22]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80050fc:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 80050fe:	1a9b      	subs	r3, r3, r2
 8005100:	2b01      	cmp	r3, #1
 8005102:	dd96      	ble.n	8005032 <dhcp_coarse_tmr+0x3e>
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8005104:	105b      	asrs	r3, r3, #1
 8005106:	83e3      	strh	r3, [r4, #30]
 8005108:	e793      	b.n	8005032 <dhcp_coarse_tmr+0x3e>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800510a:	8ba2      	ldrh	r2, [r4, #28]
 800510c:	2a00      	cmp	r2, #0
 800510e:	d090      	beq.n	8005032 <dhcp_coarse_tmr+0x3e>
 8005110:	1e51      	subs	r1, r2, #1
 8005112:	2a01      	cmp	r2, #1
 8005114:	83a1      	strh	r1, [r4, #28]
 8005116:	d18c      	bne.n	8005032 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8005118:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 800511c:	2a01      	cmp	r2, #1
 800511e:	d001      	beq.n	8005124 <dhcp_coarse_tmr+0x130>
 8005120:	2b0a      	cmp	r3, #10
 8005122:	d186      	bne.n	8005032 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 8005124:	4628      	mov	r0, r5
 8005126:	f7ff fe1f 	bl	8004d68 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 800512a:	8b63      	ldrh	r3, [r4, #26]
 800512c:	8c22      	ldrh	r2, [r4, #32]
 800512e:	1a9b      	subs	r3, r3, r2
 8005130:	2b01      	cmp	r3, #1
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8005132:	bfc4      	itt	gt
 8005134:	105b      	asrgt	r3, r3, #1
 8005136:	83a3      	strhgt	r3, [r4, #28]
 8005138:	e77b      	b.n	8005032 <dhcp_coarse_tmr+0x3e>
 800513a:	bf00      	nop
 800513c:	200076dc 	.word	0x200076dc
 8005140:	20003dec 	.word	0x20003dec
 8005144:	0800c874 	.word	0x0800c874

08005148 <dhcp_fine_tmr>:
{
 8005148:	b538      	push	{r3, r4, r5, lr}
  struct netif *netif = netif_list;
 800514a:	4b1d      	ldr	r3, [pc, #116]	; (80051c0 <dhcp_fine_tmr+0x78>)
        dhcp->request_timeout--;
 800514c:	2500      	movs	r5, #0
  struct netif *netif = netif_list;
 800514e:	681c      	ldr	r4, [r3, #0]
  while (netif != NULL) {
 8005150:	b904      	cbnz	r4, 8005154 <dhcp_fine_tmr+0xc>
}
 8005152:	bd38      	pop	{r3, r4, r5, pc}
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8005154:	6a23      	ldr	r3, [r4, #32]
    if (dhcp != NULL) {
 8005156:	b123      	cbz	r3, 8005162 <dhcp_fine_tmr+0x1a>
      if (dhcp->request_timeout > 1) {
 8005158:	8ada      	ldrh	r2, [r3, #22]
 800515a:	2a01      	cmp	r2, #1
 800515c:	d903      	bls.n	8005166 <dhcp_fine_tmr+0x1e>
        dhcp->request_timeout--;
 800515e:	3a01      	subs	r2, #1
 8005160:	82da      	strh	r2, [r3, #22]
    netif = netif->next;
 8005162:	6824      	ldr	r4, [r4, #0]
 8005164:	e7f4      	b.n	8005150 <dhcp_fine_tmr+0x8>
      else if (dhcp->request_timeout == 1) {
 8005166:	d1fc      	bne.n	8005162 <dhcp_fine_tmr+0x1a>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8005168:	7a5a      	ldrb	r2, [r3, #9]
        dhcp->request_timeout--;
 800516a:	82dd      	strh	r5, [r3, #22]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800516c:	2a0c      	cmp	r2, #12
 800516e:	d001      	beq.n	8005174 <dhcp_fine_tmr+0x2c>
 8005170:	2a06      	cmp	r2, #6
 8005172:	d103      	bne.n	800517c <dhcp_fine_tmr+0x34>
      dhcp_discover(netif);
 8005174:	4620      	mov	r0, r4
      dhcp_discover(netif);
 8005176:	f7ff fa3d 	bl	80045f4 <dhcp_discover>
 800517a:	e7f2      	b.n	8005162 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800517c:	2a01      	cmp	r2, #1
 800517e:	d109      	bne.n	8005194 <dhcp_fine_tmr+0x4c>
    if (dhcp->tries <= 5) {
 8005180:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_select(netif);
 8005182:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8005184:	2b05      	cmp	r3, #5
 8005186:	d802      	bhi.n	800518e <dhcp_fine_tmr+0x46>
      dhcp_select(netif);
 8005188:	f7ff fa92 	bl	80046b0 <dhcp_select>
 800518c:	e7e9      	b.n	8005162 <dhcp_fine_tmr+0x1a>
      dhcp_release(netif);
 800518e:	f7ff fedb 	bl	8004f48 <dhcp_release>
 8005192:	e7ef      	b.n	8005174 <dhcp_fine_tmr+0x2c>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8005194:	2a08      	cmp	r2, #8
 8005196:	d109      	bne.n	80051ac <dhcp_fine_tmr+0x64>
    if (dhcp->tries <= 1) {
 8005198:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_check(netif);
 800519a:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 800519c:	2b01      	cmp	r3, #1
 800519e:	d802      	bhi.n	80051a6 <dhcp_fine_tmr+0x5e>
      dhcp_check(netif);
 80051a0:	f7ff f8b6 	bl	8004310 <dhcp_check>
 80051a4:	e7dd      	b.n	8005162 <dhcp_fine_tmr+0x1a>
      dhcp_bind(netif);
 80051a6:	f7ff f8c9 	bl	800433c <dhcp_bind>
 80051aa:	e7da      	b.n	8005162 <dhcp_fine_tmr+0x1a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80051ac:	2a03      	cmp	r2, #3
 80051ae:	d1d8      	bne.n	8005162 <dhcp_fine_tmr+0x1a>
    if (dhcp->tries < REBOOT_TRIES) {
 80051b0:	7a9b      	ldrb	r3, [r3, #10]
      dhcp_reboot(netif);
 80051b2:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d8de      	bhi.n	8005176 <dhcp_fine_tmr+0x2e>
      dhcp_reboot(netif);
 80051b8:	f7ff faee 	bl	8004798 <dhcp_reboot>
 80051bc:	e7d1      	b.n	8005162 <dhcp_fine_tmr+0x1a>
 80051be:	bf00      	nop
 80051c0:	200076dc 	.word	0x200076dc

080051c4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80051c6:	2618      	movs	r6, #24
 80051c8:	4c07      	ldr	r4, [pc, #28]	; (80051e8 <etharp_free_entry+0x24>)
{
 80051ca:	4605      	mov	r5, r0
  if (arp_table[i].q != NULL) {
 80051cc:	4346      	muls	r6, r0
 80051ce:	59a0      	ldr	r0, [r4, r6]
 80051d0:	b118      	cbz	r0, 80051da <etharp_free_entry+0x16>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80051d2:	f001 fdcd 	bl	8006d70 <pbuf_free>
    arp_table[i].q = NULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	51a3      	str	r3, [r4, r6]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80051da:	2318      	movs	r3, #24
 80051dc:	fb03 4405 	mla	r4, r3, r5, r4
 80051e0:	2300      	movs	r3, #0
 80051e2:	7523      	strb	r3, [r4, #20]
 80051e4:	bd70      	pop	{r4, r5, r6, pc}
 80051e6:	bf00      	nop
 80051e8:	20003df8 	.word	0x20003df8

080051ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80051ec:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80051f2:	4689      	mov	r9, r1
 80051f4:	4692      	mov	sl, r2
 80051f6:	4698      	mov	r8, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80051f8:	4607      	mov	r7, r0
 80051fa:	b930      	cbnz	r0, 800520a <etharp_raw+0x1e>
 80051fc:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <etharp_raw+0xc4>)
 80051fe:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8005202:	492c      	ldr	r1, [pc, #176]	; (80052b4 <etharp_raw+0xc8>)
 8005204:	482c      	ldr	r0, [pc, #176]	; (80052b8 <etharp_raw+0xcc>)
 8005206:	f005 ffc3 	bl	800b190 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800520a:	2200      	movs	r2, #0
 800520c:	211c      	movs	r1, #28
 800520e:	2002      	movs	r0, #2
 8005210:	f001 fe18 	bl	8006e44 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8005214:	4606      	mov	r6, r0
 8005216:	2800      	cmp	r0, #0
 8005218:	d047      	beq.n	80052aa <etharp_raw+0xbe>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800521a:	8943      	ldrh	r3, [r0, #10]
 800521c:	2b1b      	cmp	r3, #27
 800521e:	d806      	bhi.n	800522e <etharp_raw+0x42>
 8005220:	4b23      	ldr	r3, [pc, #140]	; (80052b0 <etharp_raw+0xc4>)
 8005222:	f240 4264 	movw	r2, #1124	; 0x464
 8005226:	4925      	ldr	r1, [pc, #148]	; (80052bc <etharp_raw+0xd0>)
 8005228:	4823      	ldr	r0, [pc, #140]	; (80052b8 <etharp_raw+0xcc>)
 800522a:	f005 ffb1 	bl	800b190 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800522e:	6874      	ldr	r4, [r6, #4]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8005230:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8005234:	f7fe fee2 	bl	8003ffc <lwip_htons>
 8005238:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800523a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800523e:	2b06      	cmp	r3, #6
 8005240:	d006      	beq.n	8005250 <etharp_raw+0x64>
 8005242:	4b1b      	ldr	r3, [pc, #108]	; (80052b0 <etharp_raw+0xc4>)
 8005244:	f240 426b 	movw	r2, #1131	; 0x46b
 8005248:	491d      	ldr	r1, [pc, #116]	; (80052c0 <etharp_raw+0xd4>)
 800524a:	481b      	ldr	r0, [pc, #108]	; (80052b8 <etharp_raw+0xcc>)
 800524c:	f005 ffa0 	bl	800b190 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8005250:	f8d8 3000 	ldr.w	r3, [r8]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005254:	464a      	mov	r2, r9
 8005256:	4631      	mov	r1, r6
 8005258:	4638      	mov	r0, r7
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 800525a:	60a3      	str	r3, [r4, #8]
 800525c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005260:	81a3      	strh	r3, [r4, #12]
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8005262:	682b      	ldr	r3, [r5, #0]
 8005264:	f8c4 3012 	str.w	r3, [r4, #18]
 8005268:	88ab      	ldrh	r3, [r5, #4]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800526a:	2500      	movs	r5, #0
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 800526c:	82e3      	strh	r3, [r4, #22]
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f8c4 300e 	str.w	r3, [r4, #14]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8005276:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005278:	681b      	ldr	r3, [r3, #0]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800527a:	7025      	strb	r5, [r4, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 800527c:	61a3      	str	r3, [r4, #24]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 800527e:	2301      	movs	r3, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005280:	70e5      	strb	r5, [r4, #3]
  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8005282:	7063      	strb	r3, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8005284:	2308      	movs	r3, #8
 8005286:	70a3      	strb	r3, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8005288:	2306      	movs	r3, #6
 800528a:	7123      	strb	r3, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800528c:	2304      	movs	r3, #4
 800528e:	7163      	strb	r3, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8005290:	f640 0306 	movw	r3, #2054	; 0x806
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	4653      	mov	r3, sl
 8005298:	f005 f860 	bl	800a35c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800529c:	4630      	mov	r0, r6
 800529e:	f001 fd67 	bl	8006d70 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 80052a2:	4628      	mov	r0, r5
}
 80052a4:	b002      	add	sp, #8
 80052a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return ERR_MEM;
 80052aa:	f04f 30ff 	mov.w	r0, #4294967295
 80052ae:	e7f9      	b.n	80052a4 <etharp_raw+0xb8>
 80052b0:	0800c691 	.word	0x0800c691
 80052b4:	0800c139 	.word	0x0800c139
 80052b8:	0800c106 	.word	0x0800c106
 80052bc:	0800c6c8 	.word	0x0800c6c8
 80052c0:	0800c6f9 	.word	0x0800c6f9

080052c4 <etharp_find_entry.isra.0>:
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80052c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052c8:	4b3e      	ldr	r3, [pc, #248]	; (80053c4 <etharp_find_entry.isra.0+0x100>)
  s8_t old_queue = ARP_TABLE_SIZE;
 80052ca:	220a      	movs	r2, #10
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80052cc:	4605      	mov	r5, r0
 80052ce:	2000      	movs	r0, #0
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80052d0:	4694      	mov	ip, r2
 80052d2:	4614      	mov	r4, r2
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80052d4:	4681      	mov	r9, r0
 80052d6:	4680      	mov	r8, r0
 80052d8:	4683      	mov	fp, r0
  s8_t empty = ARP_TABLE_SIZE;
 80052da:	4696      	mov	lr, r2
 80052dc:	461e      	mov	r6, r3
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
 80052de:	9101      	str	r1, [sp, #4]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80052e0:	f1be 0f0a 	cmp.w	lr, #10
    u8_t state = arp_table[i].state;
 80052e4:	7d1f      	ldrb	r7, [r3, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80052e6:	d111      	bne.n	800530c <etharp_find_entry.isra.0+0x48>
 80052e8:	b997      	cbnz	r7, 8005310 <etharp_find_entry.isra.0+0x4c>
      empty = i;
 80052ea:	fa4f fe80 	sxtb.w	lr, r0
 80052ee:	3001      	adds	r0, #1
 80052f0:	3318      	adds	r3, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80052f2:	280a      	cmp	r0, #10
 80052f4:	d1f4      	bne.n	80052e0 <etharp_find_entry.isra.0+0x1c>
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80052f6:	9b01      	ldr	r3, [sp, #4]
 80052f8:	0799      	lsls	r1, r3, #30
 80052fa:	d404      	bmi.n	8005306 <etharp_find_entry.isra.0+0x42>
 80052fc:	f1be 0f0a 	cmp.w	lr, #10
 8005300:	d11c      	bne.n	800533c <etharp_find_entry.isra.0+0x78>
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8005302:	07db      	lsls	r3, r3, #31
 8005304:	d435      	bmi.n	8005372 <etharp_find_entry.isra.0+0xae>
    return (s8_t)ERR_MEM;
 8005306:	f04f 30ff 	mov.w	r0, #4294967295
 800530a:	e009      	b.n	8005320 <etharp_find_entry.isra.0+0x5c>
    } else if (state != ETHARP_STATE_EMPTY) {
 800530c:	2f00      	cmp	r7, #0
 800530e:	d0ee      	beq.n	80052ee <etharp_find_entry.isra.0+0x2a>
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8005310:	2d00      	cmp	r5, #0
 8005312:	d04a      	beq.n	80053aa <etharp_find_entry.isra.0+0xe6>
 8005314:	6829      	ldr	r1, [r5, #0]
 8005316:	468a      	mov	sl, r1
 8005318:	6859      	ldr	r1, [r3, #4]
 800531a:	458a      	cmp	sl, r1
 800531c:	d145      	bne.n	80053aa <etharp_find_entry.isra.0+0xe6>
        return i;
 800531e:	b240      	sxtb	r0, r0
}
 8005320:	b003      	add	sp, #12
 8005322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8005326:	45c2      	cmp	sl, r8
 8005328:	d3e1      	bcc.n	80052ee <etharp_find_entry.isra.0+0x2a>
            old_pending = i;
 800532a:	fa4f fc80 	sxtb.w	ip, r0
 800532e:	46d0      	mov	r8, sl
 8005330:	e7dd      	b.n	80052ee <etharp_find_entry.isra.0+0x2a>
          if (arp_table[i].ctime >= age_stable) {
 8005332:	45ca      	cmp	sl, r9
            old_stable = i;
 8005334:	bf24      	itt	cs
 8005336:	b244      	sxtbcs	r4, r0
 8005338:	46d1      	movcs	r9, sl
 800533a:	e7d8      	b.n	80052ee <etharp_find_entry.isra.0+0x2a>
    i = empty;
 800533c:	fa5f f78e 	uxtb.w	r7, lr
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8005340:	2318      	movs	r3, #24
 8005342:	fb03 6307 	mla	r3, r3, r7, r6
 8005346:	7d1b      	ldrb	r3, [r3, #20]
 8005348:	b133      	cbz	r3, 8005358 <etharp_find_entry.isra.0+0x94>
 800534a:	4b1f      	ldr	r3, [pc, #124]	; (80053c8 <etharp_find_entry.isra.0+0x104>)
 800534c:	f240 1287 	movw	r2, #391	; 0x187
 8005350:	491e      	ldr	r1, [pc, #120]	; (80053cc <etharp_find_entry.isra.0+0x108>)
 8005352:	481f      	ldr	r0, [pc, #124]	; (80053d0 <etharp_find_entry.isra.0+0x10c>)
 8005354:	f005 ff1c 	bl	800b190 <iprintf>
  if (ipaddr != NULL) {
 8005358:	b125      	cbz	r5, 8005364 <etharp_find_entry.isra.0+0xa0>
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800535a:	2318      	movs	r3, #24
 800535c:	682a      	ldr	r2, [r5, #0]
 800535e:	fb03 6307 	mla	r3, r3, r7, r6
 8005362:	605a      	str	r2, [r3, #4]
  arp_table[i].ctime = 0;
 8005364:	2318      	movs	r3, #24
  return (err_t)i;
 8005366:	b278      	sxtb	r0, r7
  arp_table[i].ctime = 0;
 8005368:	fb03 6607 	mla	r6, r3, r7, r6
 800536c:	2300      	movs	r3, #0
 800536e:	8273      	strh	r3, [r6, #18]
 8005370:	e7d6      	b.n	8005320 <etharp_find_entry.isra.0+0x5c>
    if (old_stable < ARP_TABLE_SIZE) {
 8005372:	2c0a      	cmp	r4, #10
 8005374:	d00f      	beq.n	8005396 <etharp_find_entry.isra.0+0xd2>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8005376:	2318      	movs	r3, #24
      i = old_stable;
 8005378:	b2e7      	uxtb	r7, r4
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800537a:	435c      	muls	r4, r3
 800537c:	5933      	ldr	r3, [r6, r4]
 800537e:	b133      	cbz	r3, 800538e <etharp_find_entry.isra.0+0xca>
 8005380:	4b11      	ldr	r3, [pc, #68]	; (80053c8 <etharp_find_entry.isra.0+0x104>)
 8005382:	f240 126f 	movw	r2, #367	; 0x16f
 8005386:	4913      	ldr	r1, [pc, #76]	; (80053d4 <etharp_find_entry.isra.0+0x110>)
 8005388:	4811      	ldr	r0, [pc, #68]	; (80053d0 <etharp_find_entry.isra.0+0x10c>)
 800538a:	f005 ff01 	bl	800b190 <iprintf>
    etharp_free_entry(i);
 800538e:	4638      	mov	r0, r7
 8005390:	f7ff ff18 	bl	80051c4 <etharp_free_entry>
 8005394:	e7d4      	b.n	8005340 <etharp_find_entry.isra.0+0x7c>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8005396:	f1bc 0f0a 	cmp.w	ip, #10
 800539a:	d002      	beq.n	80053a2 <etharp_find_entry.isra.0+0xde>
      i = old_pending;
 800539c:	fa5f f78c 	uxtb.w	r7, ip
 80053a0:	e7f5      	b.n	800538e <etharp_find_entry.isra.0+0xca>
    } else if (old_queue < ARP_TABLE_SIZE) {
 80053a2:	2a0a      	cmp	r2, #10
 80053a4:	d0af      	beq.n	8005306 <etharp_find_entry.isra.0+0x42>
      i = old_queue;
 80053a6:	b2d7      	uxtb	r7, r2
 80053a8:	e7f1      	b.n	800538e <etharp_find_entry.isra.0+0xca>
      if (state == ETHARP_STATE_PENDING) {
 80053aa:	2f01      	cmp	r7, #1
 80053ac:	f8b3 a012 	ldrh.w	sl, [r3, #18]
 80053b0:	d1bf      	bne.n	8005332 <etharp_find_entry.isra.0+0x6e>
        if (arp_table[i].q != NULL) {
 80053b2:	681f      	ldr	r7, [r3, #0]
 80053b4:	2f00      	cmp	r7, #0
 80053b6:	d0b6      	beq.n	8005326 <etharp_find_entry.isra.0+0x62>
          if (arp_table[i].ctime >= age_queue) {
 80053b8:	45da      	cmp	sl, fp
 80053ba:	d398      	bcc.n	80052ee <etharp_find_entry.isra.0+0x2a>
            old_queue = i;
 80053bc:	b242      	sxtb	r2, r0
 80053be:	46d3      	mov	fp, sl
 80053c0:	e795      	b.n	80052ee <etharp_find_entry.isra.0+0x2a>
 80053c2:	bf00      	nop
 80053c4:	20003df8 	.word	0x20003df8
 80053c8:	0800c691 	.word	0x0800c691
 80053cc:	0800c5b3 	.word	0x0800c5b3
 80053d0:	0800c106 	.word	0x0800c106
 80053d4:	0800c59c 	.word	0x0800c59c

080053d8 <etharp_cleanup_netif>:
{
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4606      	mov	r6, r0
 80053dc:	4d07      	ldr	r5, [pc, #28]	; (80053fc <etharp_cleanup_netif+0x24>)
 80053de:	2400      	movs	r4, #0
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80053e0:	7d2b      	ldrb	r3, [r5, #20]
 80053e2:	b12b      	cbz	r3, 80053f0 <etharp_cleanup_netif+0x18>
 80053e4:	68ab      	ldr	r3, [r5, #8]
 80053e6:	42b3      	cmp	r3, r6
 80053e8:	d102      	bne.n	80053f0 <etharp_cleanup_netif+0x18>
      etharp_free_entry(i);
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7ff feea 	bl	80051c4 <etharp_free_entry>
 80053f0:	3401      	adds	r4, #1
 80053f2:	3518      	adds	r5, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80053f4:	2c0a      	cmp	r4, #10
 80053f6:	d1f3      	bne.n	80053e0 <etharp_cleanup_netif+0x8>
}
 80053f8:	bd70      	pop	{r4, r5, r6, pc}
 80053fa:	bf00      	nop
 80053fc:	20003df8 	.word	0x20003df8

08005400 <etharp_input>:
{
 8005400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005404:	4680      	mov	r8, r0
 8005406:	b086      	sub	sp, #24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8005408:	460c      	mov	r4, r1
 800540a:	b949      	cbnz	r1, 8005420 <etharp_input+0x20>
 800540c:	4b4a      	ldr	r3, [pc, #296]	; (8005538 <etharp_input+0x138>)
 800540e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8005412:	494a      	ldr	r1, [pc, #296]	; (800553c <etharp_input+0x13c>)
 8005414:	484a      	ldr	r0, [pc, #296]	; (8005540 <etharp_input+0x140>)
 8005416:	f005 febb 	bl	800b190 <iprintf>
}
 800541a:	b006      	add	sp, #24
 800541c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  hdr = (struct etharp_hdr *)p->payload;
 8005420:	6845      	ldr	r5, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8005422:	882b      	ldrh	r3, [r5, #0]
 8005424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005428:	d108      	bne.n	800543c <etharp_input+0x3c>
 800542a:	792b      	ldrb	r3, [r5, #4]
 800542c:	2b06      	cmp	r3, #6
 800542e:	d105      	bne.n	800543c <etharp_input+0x3c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8005430:	796b      	ldrb	r3, [r5, #5]
 8005432:	2b04      	cmp	r3, #4
 8005434:	d102      	bne.n	800543c <etharp_input+0x3c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8005436:	886b      	ldrh	r3, [r5, #2]
 8005438:	2b08      	cmp	r3, #8
 800543a:	d003      	beq.n	8005444 <etharp_input+0x44>
  pbuf_free(p);
 800543c:	4640      	mov	r0, r8
 800543e:	f001 fc97 	bl	8006d70 <pbuf_free>
 8005442:	e7ea      	b.n	800541a <etharp_input+0x1a>
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8005444:	f8d5 300e 	ldr.w	r3, [r5, #14]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005448:	684e      	ldr	r6, [r1, #4]
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 800544a:	9305      	str	r3, [sp, #20]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 800544c:	69ab      	ldr	r3, [r5, #24]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800544e:	b116      	cbz	r6, 8005456 <etharp_input+0x56>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8005450:	1b9b      	subs	r3, r3, r6
 8005452:	425e      	negs	r6, r3
 8005454:	415e      	adcs	r6, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8005456:	2e00      	cmp	r6, #0
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8005458:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800545c:	f105 0708 	add.w	r7, r5, #8
 8005460:	bf14      	ite	ne
 8005462:	f04f 0901 	movne.w	r9, #1
 8005466:	f04f 0902 	moveq.w	r9, #2
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800546a:	2b06      	cmp	r3, #6
 800546c:	d006      	beq.n	800547c <etharp_input+0x7c>
 800546e:	4b32      	ldr	r3, [pc, #200]	; (8005538 <etharp_input+0x138>)
 8005470:	f240 12ab 	movw	r2, #427	; 0x1ab
 8005474:	4933      	ldr	r1, [pc, #204]	; (8005544 <etharp_input+0x144>)
 8005476:	4832      	ldr	r0, [pc, #200]	; (8005540 <etharp_input+0x140>)
 8005478:	f005 fe8a 	bl	800b190 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 800547c:	9805      	ldr	r0, [sp, #20]
 800547e:	2800      	cmp	r0, #0
 8005480:	d03c      	beq.n	80054fc <etharp_input+0xfc>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005482:	4621      	mov	r1, r4
 8005484:	f000 fca9 	bl	8005dda <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8005488:	4682      	mov	sl, r0
 800548a:	bbb8      	cbnz	r0, 80054fc <etharp_input+0xfc>
      ip4_addr_ismulticast(ipaddr)) {
 800548c:	9b05      	ldr	r3, [sp, #20]
 800548e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8005492:	2be0      	cmp	r3, #224	; 0xe0
 8005494:	d032      	beq.n	80054fc <etharp_input+0xfc>
  i = etharp_find_entry(ipaddr, flags, netif);
 8005496:	4649      	mov	r1, r9
 8005498:	a805      	add	r0, sp, #20
 800549a:	f7ff ff13 	bl	80052c4 <etharp_find_entry.isra.0>
  if (i < 0) {
 800549e:	2800      	cmp	r0, #0
 80054a0:	db2c      	blt.n	80054fc <etharp_input+0xfc>
    arp_table[i].state = ETHARP_STATE_STABLE;
 80054a2:	2218      	movs	r2, #24
 80054a4:	4b28      	ldr	r3, [pc, #160]	; (8005548 <etharp_input+0x148>)
 80054a6:	f04f 0c02 	mov.w	ip, #2
 80054aa:	fb02 f100 	mul.w	r1, r2, r0
 80054ae:	eb03 0e01 	add.w	lr, r3, r1
 80054b2:	f88e c014 	strb.w	ip, [lr, #20]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80054b6:	f04f 0c0c 	mov.w	ip, #12
  arp_table[i].netif = netif;
 80054ba:	f8ce 4008 	str.w	r4, [lr, #8]
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80054be:	fb12 c200 	smlabb	r2, r2, r0, ip
 80054c2:	6838      	ldr	r0, [r7, #0]
 80054c4:	eb03 0c02 	add.w	ip, r3, r2
 80054c8:	5098      	str	r0, [r3, r2]
 80054ca:	88ba      	ldrh	r2, [r7, #4]
 80054cc:	f8ac 2004 	strh.w	r2, [ip, #4]
  if (arp_table[i].q != NULL) {
 80054d0:	f853 9001 	ldr.w	r9, [r3, r1]
  arp_table[i].ctime = 0;
 80054d4:	f8ae a012 	strh.w	sl, [lr, #18]
  if (arp_table[i].q != NULL) {
 80054d8:	f1b9 0f00 	cmp.w	r9, #0
 80054dc:	d00e      	beq.n	80054fc <etharp_input+0xfc>
    arp_table[i].q = NULL;
 80054de:	f843 a001 	str.w	sl, [r3, r1]
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80054e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054e6:	f104 0229 	add.w	r2, r4, #41	; 0x29
 80054ea:	4649      	mov	r1, r9
 80054ec:	9300      	str	r3, [sp, #0]
 80054ee:	4620      	mov	r0, r4
 80054f0:	463b      	mov	r3, r7
 80054f2:	f004 ff33 	bl	800a35c <ethernet_output>
    pbuf_free(p);
 80054f6:	4648      	mov	r0, r9
 80054f8:	f001 fc3a 	bl	8006d70 <pbuf_free>
  switch (hdr->opcode) {
 80054fc:	88eb      	ldrh	r3, [r5, #6]
 80054fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005502:	d007      	beq.n	8005514 <etharp_input+0x114>
 8005504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005508:	d198      	bne.n	800543c <etharp_input+0x3c>
    dhcp_arp_reply(netif, &sipaddr);
 800550a:	a905      	add	r1, sp, #20
 800550c:	4620      	mov	r0, r4
 800550e:	f7ff fbd3 	bl	8004cb8 <dhcp_arp_reply>
    break;
 8005512:	e793      	b.n	800543c <etharp_input+0x3c>
    if (for_us) {
 8005514:	2e00      	cmp	r6, #0
 8005516:	d091      	beq.n	800543c <etharp_input+0x3c>
      etharp_raw(netif,
 8005518:	2202      	movs	r2, #2
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800551a:	f104 0329 	add.w	r3, r4, #41	; 0x29
      etharp_raw(netif,
 800551e:	9701      	str	r7, [sp, #4]
 8005520:	4620      	mov	r0, r4
 8005522:	9203      	str	r2, [sp, #12]
 8005524:	aa05      	add	r2, sp, #20
 8005526:	4619      	mov	r1, r3
 8005528:	9202      	str	r2, [sp, #8]
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800552a:	1d22      	adds	r2, r4, #4
      etharp_raw(netif,
 800552c:	9200      	str	r2, [sp, #0]
 800552e:	463a      	mov	r2, r7
 8005530:	f7ff fe5c 	bl	80051ec <etharp_raw>
 8005534:	e782      	b.n	800543c <etharp_input+0x3c>
 8005536:	bf00      	nop
 8005538:	0800c691 	.word	0x0800c691
 800553c:	0800c139 	.word	0x0800c139
 8005540:	0800c106 	.word	0x0800c106
 8005544:	0800c5fb 	.word	0x0800c5fb
 8005548:	20003df8 	.word	0x20003df8

0800554c <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800554c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800554e:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005550:	f100 0329 	add.w	r3, r0, #41	; 0x29
 8005554:	9102      	str	r1, [sp, #8]
 8005556:	2401      	movs	r4, #1
 8005558:	4905      	ldr	r1, [pc, #20]	; (8005570 <etharp_request+0x24>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800555a:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800555c:	9403      	str	r4, [sp, #12]
 800555e:	9101      	str	r1, [sp, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	9200      	str	r2, [sp, #0]
 8005564:	4a03      	ldr	r2, [pc, #12]	; (8005574 <etharp_request+0x28>)
 8005566:	f7ff fe41 	bl	80051ec <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 800556a:	b004      	add	sp, #16
 800556c:	bd10      	pop	{r4, pc}
 800556e:	bf00      	nop
 8005570:	0800da2a 	.word	0x0800da2a
 8005574:	0800d9be 	.word	0x0800d9be

08005578 <etharp_tmr>:
{
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	4c13      	ldr	r4, [pc, #76]	; (80055c8 <etharp_tmr+0x50>)
 800557c:	2500      	movs	r5, #0
        arp_table[i].state = ETHARP_STATE_STABLE;
 800557e:	2602      	movs	r6, #2
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8005580:	2704      	movs	r7, #4
    u8_t state = arp_table[i].state;
 8005582:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8005584:	b16a      	cbz	r2, 80055a2 <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 8005586:	89e3      	ldrh	r3, [r4, #14]
 8005588:	3301      	adds	r3, #1
 800558a:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800558c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8005590:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8005592:	d203      	bcs.n	800559c <etharp_tmr+0x24>
 8005594:	2a01      	cmp	r2, #1
 8005596:	d109      	bne.n	80055ac <etharp_tmr+0x34>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8005598:	2b04      	cmp	r3, #4
 800559a:	d90b      	bls.n	80055b4 <etharp_tmr+0x3c>
        etharp_free_entry(i);
 800559c:	4628      	mov	r0, r5
 800559e:	f7ff fe11 	bl	80051c4 <etharp_free_entry>
 80055a2:	3501      	adds	r5, #1
 80055a4:	3418      	adds	r4, #24
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80055a6:	2d0a      	cmp	r5, #10
 80055a8:	d1eb      	bne.n	8005582 <etharp_tmr+0xa>
 80055aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80055ac:	2a03      	cmp	r2, #3
 80055ae:	d106      	bne.n	80055be <etharp_tmr+0x46>
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80055b0:	7427      	strb	r7, [r4, #16]
 80055b2:	e7f6      	b.n	80055a2 <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80055b4:	4621      	mov	r1, r4
 80055b6:	6860      	ldr	r0, [r4, #4]
 80055b8:	f7ff ffc8 	bl	800554c <etharp_request>
 80055bc:	e7f1      	b.n	80055a2 <etharp_tmr+0x2a>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80055be:	2a04      	cmp	r2, #4
 80055c0:	d1ef      	bne.n	80055a2 <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 80055c2:	7426      	strb	r6, [r4, #16]
 80055c4:	e7ed      	b.n	80055a2 <etharp_tmr+0x2a>
 80055c6:	bf00      	nop
 80055c8:	20003dfc 	.word	0x20003dfc

080055cc <etharp_output_to_arp_index>:
{
 80055cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80055d0:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80055d2:	4d27      	ldr	r5, [pc, #156]	; (8005670 <etharp_output_to_arp_index+0xa4>)
 80055d4:	2218      	movs	r2, #24
{
 80055d6:	b085      	sub	sp, #20
 80055d8:	4606      	mov	r6, r0
 80055da:	4688      	mov	r8, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80055dc:	fb02 5204 	mla	r2, r2, r4, r5
 80055e0:	7d12      	ldrb	r2, [r2, #20]
 80055e2:	2a01      	cmp	r2, #1
 80055e4:	d806      	bhi.n	80055f4 <etharp_output_to_arp_index+0x28>
 80055e6:	4b23      	ldr	r3, [pc, #140]	; (8005674 <etharp_output_to_arp_index+0xa8>)
 80055e8:	f240 22ed 	movw	r2, #749	; 0x2ed
 80055ec:	4922      	ldr	r1, [pc, #136]	; (8005678 <etharp_output_to_arp_index+0xac>)
 80055ee:	4823      	ldr	r0, [pc, #140]	; (800567c <etharp_output_to_arp_index+0xb0>)
 80055f0:	f005 fdce 	bl	800b190 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80055f4:	2118      	movs	r1, #24
 80055f6:	f106 0729 	add.w	r7, r6, #41	; 0x29
 80055fa:	fb01 5904 	mla	r9, r1, r4, r5
 80055fe:	f899 3014 	ldrb.w	r3, [r9, #20]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d10d      	bne.n	8005622 <etharp_output_to_arp_index+0x56>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8005606:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 800560a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800560e:	d917      	bls.n	8005640 <etharp_output_to_arp_index+0x74>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8005610:	4649      	mov	r1, r9
 8005612:	4630      	mov	r0, r6
 8005614:	3104      	adds	r1, #4
 8005616:	f7ff ff99 	bl	800554c <etharp_request>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800561a:	b910      	cbnz	r0, 8005622 <etharp_output_to_arp_index+0x56>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800561c:	2303      	movs	r3, #3
 800561e:	f889 3014 	strb.w	r3, [r9, #20]
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8005622:	2318      	movs	r3, #24
 8005624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005628:	4641      	mov	r1, r8
 800562a:	4630      	mov	r0, r6
 800562c:	fb03 5304 	mla	r3, r3, r4, r5
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	463a      	mov	r2, r7
 8005634:	330c      	adds	r3, #12
 8005636:	f004 fe91 	bl	800a35c <ethernet_output>
}
 800563a:	b005      	add	sp, #20
 800563c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8005640:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8005644:	d3ed      	bcc.n	8005622 <etharp_output_to_arp_index+0x56>
 8005646:	eb04 0344 	add.w	r3, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800564a:	2101      	movs	r1, #1
 800564c:	4630      	mov	r0, r6
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	9103      	str	r1, [sp, #12]
 8005652:	4639      	mov	r1, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8005654:	f103 020c 	add.w	r2, r3, #12
 8005658:	3304      	adds	r3, #4
 800565a:	442b      	add	r3, r5
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800565c:	442a      	add	r2, r5
 800565e:	9302      	str	r3, [sp, #8]
 8005660:	4b07      	ldr	r3, [pc, #28]	; (8005680 <etharp_output_to_arp_index+0xb4>)
 8005662:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8005664:	1d33      	adds	r3, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8005666:	9300      	str	r3, [sp, #0]
 8005668:	463b      	mov	r3, r7
 800566a:	f7ff fdbf 	bl	80051ec <etharp_raw>
 800566e:	e7d4      	b.n	800561a <etharp_output_to_arp_index+0x4e>
 8005670:	20003df8 	.word	0x20003df8
 8005674:	0800c691 	.word	0x0800c691
 8005678:	0800c61f 	.word	0x0800c61f
 800567c:	0800c106 	.word	0x0800c106
 8005680:	0800da2a 	.word	0x0800da2a

08005684 <etharp_query>:
{
 8005684:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005688:	4689      	mov	r9, r1
 800568a:	4680      	mov	r8, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800568c:	4601      	mov	r1, r0
{
 800568e:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8005690:	f8d9 0000 	ldr.w	r0, [r9]
 8005694:	f000 fba1 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8005698:	4604      	mov	r4, r0
 800569a:	2800      	cmp	r0, #0
 800569c:	d15e      	bne.n	800575c <etharp_query+0xd8>
      ip4_addr_ismulticast(ipaddr) ||
 800569e:	f8d9 3000 	ldr.w	r3, [r9]
 80056a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80056a6:	2ae0      	cmp	r2, #224	; 0xe0
 80056a8:	d058      	beq.n	800575c <etharp_query+0xd8>
      ip4_addr_isany(ipaddr)) {
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d056      	beq.n	800575c <etharp_query+0xd8>
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80056ae:	2101      	movs	r1, #1
 80056b0:	4648      	mov	r0, r9
 80056b2:	f7ff fe07 	bl	80052c4 <etharp_find_entry.isra.0>
  if (i < 0) {
 80056b6:	1e05      	subs	r5, r0, #0
 80056b8:	db53      	blt.n	8005762 <etharp_query+0xde>
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80056ba:	4f40      	ldr	r7, [pc, #256]	; (80057bc <etharp_query+0x138>)
 80056bc:	2318      	movs	r3, #24
 80056be:	fb03 7305 	mla	r3, r3, r5, r7
 80056c2:	7d1a      	ldrb	r2, [r3, #20]
 80056c4:	b91a      	cbnz	r2, 80056ce <etharp_query+0x4a>
    arp_table[i].state = ETHARP_STATE_PENDING;
 80056c6:	2401      	movs	r4, #1
    arp_table[i].netif = netif;
 80056c8:	f8c3 8008 	str.w	r8, [r3, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80056cc:	751c      	strb	r4, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80056ce:	2318      	movs	r3, #24
 80056d0:	fb03 7305 	mla	r3, r3, r5, r7
 80056d4:	7d1b      	ldrb	r3, [r3, #20]
 80056d6:	b933      	cbnz	r3, 80056e6 <etharp_query+0x62>
 80056d8:	4b39      	ldr	r3, [pc, #228]	; (80057c0 <etharp_query+0x13c>)
 80056da:	f240 32c9 	movw	r2, #969	; 0x3c9
 80056de:	4939      	ldr	r1, [pc, #228]	; (80057c4 <etharp_query+0x140>)
 80056e0:	4839      	ldr	r0, [pc, #228]	; (80057c8 <etharp_query+0x144>)
 80056e2:	f005 fd55 	bl	800b190 <iprintf>
  if (is_new_entry || (q == NULL)) {
 80056e6:	b90c      	cbnz	r4, 80056ec <etharp_query+0x68>
 80056e8:	2e00      	cmp	r6, #0
 80056ea:	d13c      	bne.n	8005766 <etharp_query+0xe2>
    result = etharp_request(netif, ipaddr);
 80056ec:	4649      	mov	r1, r9
 80056ee:	4640      	mov	r0, r8
 80056f0:	f7ff ff2c 	bl	800554c <etharp_request>
    if (q == NULL) {
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	d138      	bne.n	800576a <etharp_query+0xe6>
}
 80056f8:	b002      	add	sp, #8
 80056fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80056fe:	d1fb      	bne.n	80056f8 <etharp_query+0x74>
 8005700:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005702:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 80057c0 <etharp_query+0x13c>
 8005706:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80057d0 <etharp_query+0x14c>
 800570a:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80057c8 <etharp_query+0x144>
    while (p) {
 800570e:	b99c      	cbnz	r4, 8005738 <etharp_query+0xb4>
      pbuf_ref(p);
 8005710:	4630      	mov	r0, r6
 8005712:	f001 fceb 	bl	80070ec <pbuf_ref>
    if (p != NULL) {
 8005716:	2e00      	cmp	r6, #0
 8005718:	d04c      	beq.n	80057b4 <etharp_query+0x130>
 800571a:	46b0      	mov	r8, r6
      if (arp_table[i].q != NULL) {
 800571c:	2318      	movs	r3, #24
 800571e:	fb03 f205 	mul.w	r2, r3, r5
 8005722:	461c      	mov	r4, r3
 8005724:	58b8      	ldr	r0, [r7, r2]
 8005726:	b108      	cbz	r0, 800572c <etharp_query+0xa8>
        pbuf_free(arp_table[i].q);
 8005728:	f001 fb22 	bl	8006d70 <pbuf_free>
      arp_table[i].q = p;
 800572c:	fb04 f305 	mul.w	r3, r4, r5
      result = ERR_OK;
 8005730:	2000      	movs	r0, #0
      arp_table[i].q = p;
 8005732:	f847 8003 	str.w	r8, [r7, r3]
 8005736:	e7df      	b.n	80056f8 <etharp_query+0x74>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8005738:	8962      	ldrh	r2, [r4, #10]
 800573a:	8923      	ldrh	r3, [r4, #8]
 800573c:	429a      	cmp	r2, r3
 800573e:	d108      	bne.n	8005752 <etharp_query+0xce>
 8005740:	6823      	ldr	r3, [r4, #0]
 8005742:	b133      	cbz	r3, 8005752 <etharp_query+0xce>
 8005744:	4643      	mov	r3, r8
 8005746:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 800574a:	4649      	mov	r1, r9
 800574c:	4650      	mov	r0, sl
 800574e:	f005 fd1f 	bl	800b190 <iprintf>
      if (p->type != PBUF_ROM) {
 8005752:	7b23      	ldrb	r3, [r4, #12]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d11e      	bne.n	8005796 <etharp_query+0x112>
      p = p->next;
 8005758:	6824      	ldr	r4, [r4, #0]
 800575a:	e7d8      	b.n	800570e <etharp_query+0x8a>
    return ERR_ARG;
 800575c:	f06f 000f 	mvn.w	r0, #15
 8005760:	e7ca      	b.n	80056f8 <etharp_query+0x74>
 8005762:	4628      	mov	r0, r5
 8005764:	e7c8      	b.n	80056f8 <etharp_query+0x74>
  err_t result = ERR_MEM;
 8005766:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800576a:	2318      	movs	r3, #24
 800576c:	fb03 7205 	mla	r2, r3, r5, r7
 8005770:	7d12      	ldrb	r2, [r2, #20]
 8005772:	2a01      	cmp	r2, #1
 8005774:	d9c3      	bls.n	80056fe <etharp_query+0x7a>
    ETHARP_SET_HINT(netif, i);
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <etharp_query+0x148>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8005778:	4631      	mov	r1, r6
 800577a:	4640      	mov	r0, r8
    ETHARP_SET_HINT(netif, i);
 800577c:	7015      	strb	r5, [r2, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800577e:	220c      	movs	r2, #12
 8005780:	fb13 2305 	smlabb	r3, r3, r5, r2
 8005784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005788:	443b      	add	r3, r7
 800578a:	9200      	str	r2, [sp, #0]
 800578c:	f108 0229 	add.w	r2, r8, #41	; 0x29
 8005790:	f004 fde4 	bl	800a35c <ethernet_output>
 8005794:	e7b0      	b.n	80056f8 <etharp_query+0x74>
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8005796:	2200      	movs	r2, #0
 8005798:	8921      	ldrh	r1, [r4, #8]
 800579a:	2002      	movs	r0, #2
 800579c:	f001 fb52 	bl	8006e44 <pbuf_alloc>
      if (p != NULL) {
 80057a0:	4680      	mov	r8, r0
 80057a2:	b138      	cbz	r0, 80057b4 <etharp_query+0x130>
        if (pbuf_copy(p, q) != ERR_OK) {
 80057a4:	4631      	mov	r1, r6
 80057a6:	f001 fd01 	bl	80071ac <pbuf_copy>
 80057aa:	2800      	cmp	r0, #0
 80057ac:	d0b6      	beq.n	800571c <etharp_query+0x98>
          pbuf_free(p);
 80057ae:	4640      	mov	r0, r8
 80057b0:	f001 fade 	bl	8006d70 <pbuf_free>
      result = ERR_MEM;
 80057b4:	f04f 30ff 	mov.w	r0, #4294967295
 80057b8:	e79e      	b.n	80056f8 <etharp_query+0x74>
 80057ba:	bf00      	nop
 80057bc:	20003df8 	.word	0x20003df8
 80057c0:	0800c691 	.word	0x0800c691
 80057c4:	0800c64f 	.word	0x0800c64f
 80057c8:	0800c106 	.word	0x0800c106
 80057cc:	20003ee8 	.word	0x20003ee8
 80057d0:	0800c677 	.word	0x0800c677

080057d4 <etharp_output>:
{
 80057d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d6:	460e      	mov	r6, r1
 80057d8:	b085      	sub	sp, #20
 80057da:	4615      	mov	r5, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80057dc:	4604      	mov	r4, r0
 80057de:	b930      	cbnz	r0, 80057ee <etharp_output+0x1a>
 80057e0:	4b3e      	ldr	r3, [pc, #248]	; (80058dc <etharp_output+0x108>)
 80057e2:	f240 321b 	movw	r2, #795	; 0x31b
 80057e6:	493e      	ldr	r1, [pc, #248]	; (80058e0 <etharp_output+0x10c>)
 80057e8:	483e      	ldr	r0, [pc, #248]	; (80058e4 <etharp_output+0x110>)
 80057ea:	f005 fcd1 	bl	800b190 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80057ee:	b936      	cbnz	r6, 80057fe <etharp_output+0x2a>
 80057f0:	4b3a      	ldr	r3, [pc, #232]	; (80058dc <etharp_output+0x108>)
 80057f2:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80057f6:	493c      	ldr	r1, [pc, #240]	; (80058e8 <etharp_output+0x114>)
 80057f8:	483a      	ldr	r0, [pc, #232]	; (80058e4 <etharp_output+0x110>)
 80057fa:	f005 fcc9 	bl	800b190 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80057fe:	b935      	cbnz	r5, 800580e <etharp_output+0x3a>
 8005800:	4b36      	ldr	r3, [pc, #216]	; (80058dc <etharp_output+0x108>)
 8005802:	f240 321d 	movw	r2, #797	; 0x31d
 8005806:	4939      	ldr	r1, [pc, #228]	; (80058ec <etharp_output+0x118>)
 8005808:	4836      	ldr	r0, [pc, #216]	; (80058e4 <etharp_output+0x110>)
 800580a:	f005 fcc1 	bl	800b190 <iprintf>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800580e:	4621      	mov	r1, r4
 8005810:	6828      	ldr	r0, [r5, #0]
 8005812:	f000 fae2 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8005816:	2800      	cmp	r0, #0
 8005818:	d15a      	bne.n	80058d0 <etharp_output+0xfc>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800581a:	682b      	ldr	r3, [r5, #0]
 800581c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005820:	2ae0      	cmp	r2, #224	; 0xe0
 8005822:	d11d      	bne.n	8005860 <etharp_output+0x8c>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8005824:	2301      	movs	r3, #1
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8005826:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800582a:	f88d 3008 	strb.w	r3, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800582e:	235e      	movs	r3, #94	; 0x5e
 8005830:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8005834:	786b      	ldrb	r3, [r5, #1]
 8005836:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800583a:	f88d 300b 	strb.w	r3, [sp, #11]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800583e:	78ab      	ldrb	r3, [r5, #2]
 8005840:	f88d 300c 	strb.w	r3, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8005844:	78eb      	ldrb	r3, [r5, #3]
 8005846:	f88d 300d 	strb.w	r3, [sp, #13]
    dest = &mcastaddr;
 800584a:	ab02      	add	r3, sp, #8
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 800584c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005850:	4631      	mov	r1, r6
 8005852:	4620      	mov	r0, r4
 8005854:	9200      	str	r2, [sp, #0]
 8005856:	f104 0229 	add.w	r2, r4, #41	; 0x29
 800585a:	f004 fd7f 	bl	800a35c <ethernet_output>
 800585e:	e01f      	b.n	80058a0 <etharp_output+0xcc>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8005860:	6862      	ldr	r2, [r4, #4]
 8005862:	68a1      	ldr	r1, [r4, #8]
 8005864:	405a      	eors	r2, r3
 8005866:	420a      	tst	r2, r1
 8005868:	d008      	beq.n	800587c <etharp_output+0xa8>
        !ip4_addr_islinklocal(ipaddr)) {
 800586a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800586c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8005870:	4293      	cmp	r3, r2
 8005872:	d003      	beq.n	800587c <etharp_output+0xa8>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8005874:	68e3      	ldr	r3, [r4, #12]
 8005876:	b36b      	cbz	r3, 80058d4 <etharp_output+0x100>
            dst_addr = netif_ip4_gw(netif);
 8005878:	f104 050c 	add.w	r5, r4, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <etharp_output+0x11c>)
 800587e:	2018      	movs	r0, #24
 8005880:	491c      	ldr	r1, [pc, #112]	; (80058f4 <etharp_output+0x120>)
 8005882:	781a      	ldrb	r2, [r3, #0]
 8005884:	fb00 1002 	mla	r0, r0, r2, r1
 8005888:	7d01      	ldrb	r1, [r0, #20]
 800588a:	2901      	cmp	r1, #1
 800588c:	4619      	mov	r1, r3
 800588e:	d909      	bls.n	80058a4 <etharp_output+0xd0>
 8005890:	682f      	ldr	r7, [r5, #0]
 8005892:	6843      	ldr	r3, [r0, #4]
 8005894:	429f      	cmp	r7, r3
 8005896:	d105      	bne.n	80058a4 <etharp_output+0xd0>
        return etharp_output_to_arp_index(netif, q, i);
 8005898:	4631      	mov	r1, r6
 800589a:	4620      	mov	r0, r4
 800589c:	f7ff fe96 	bl	80055cc <etharp_output_to_arp_index>
}
 80058a0:	b005      	add	sp, #20
 80058a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058a4:	4b13      	ldr	r3, [pc, #76]	; (80058f4 <etharp_output+0x120>)
{
 80058a6:	2200      	movs	r2, #0
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80058a8:	7d18      	ldrb	r0, [r3, #20]
 80058aa:	2801      	cmp	r0, #1
 80058ac:	d906      	bls.n	80058bc <etharp_output+0xe8>
 80058ae:	682f      	ldr	r7, [r5, #0]
 80058b0:	6858      	ldr	r0, [r3, #4]
 80058b2:	4287      	cmp	r7, r0
 80058b4:	d102      	bne.n	80058bc <etharp_output+0xe8>
        ETHARP_SET_HINT(netif, i);
 80058b6:	b2d2      	uxtb	r2, r2
 80058b8:	700a      	strb	r2, [r1, #0]
 80058ba:	e7ed      	b.n	8005898 <etharp_output+0xc4>
 80058bc:	3201      	adds	r2, #1
 80058be:	3318      	adds	r3, #24
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80058c0:	2a0a      	cmp	r2, #10
 80058c2:	d1f1      	bne.n	80058a8 <etharp_output+0xd4>
    return etharp_query(netif, dst_addr, q);
 80058c4:	4632      	mov	r2, r6
 80058c6:	4629      	mov	r1, r5
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff fedb 	bl	8005684 <etharp_query>
 80058ce:	e7e7      	b.n	80058a0 <etharp_output+0xcc>
    dest = (const struct eth_addr *)&ethbroadcast;
 80058d0:	4b09      	ldr	r3, [pc, #36]	; (80058f8 <etharp_output+0x124>)
 80058d2:	e7bb      	b.n	800584c <etharp_output+0x78>
            return ERR_RTE;
 80058d4:	f06f 0003 	mvn.w	r0, #3
 80058d8:	e7e2      	b.n	80058a0 <etharp_output+0xcc>
 80058da:	bf00      	nop
 80058dc:	0800c691 	.word	0x0800c691
 80058e0:	0800c139 	.word	0x0800c139
 80058e4:	0800c106 	.word	0x0800c106
 80058e8:	0800d0c7 	.word	0x0800d0c7
 80058ec:	0800c5dc 	.word	0x0800c5dc
 80058f0:	20003ee8 	.word	0x20003ee8
 80058f4:	20003df8 	.word	0x20003df8
 80058f8:	0800d9be 	.word	0x0800d9be

080058fc <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 80058fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058fe:	4604      	mov	r4, r0
 8005900:	b087      	sub	sp, #28
 8005902:	460f      	mov	r7, r1
 8005904:	4616      	mov	r6, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8005906:	2124      	movs	r1, #36	; 0x24
 8005908:	2200      	movs	r2, #0
 800590a:	2001      	movs	r0, #1
 800590c:	f001 fa9a 	bl	8006e44 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8005910:	4605      	mov	r5, r0
 8005912:	b3a0      	cbz	r0, 800597e <icmp_send_response.isra.0+0x82>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8005914:	8943      	ldrh	r3, [r0, #10]
 8005916:	2b23      	cmp	r3, #35	; 0x23
 8005918:	d806      	bhi.n	8005928 <icmp_send_response.isra.0+0x2c>
 800591a:	4b1a      	ldr	r3, [pc, #104]	; (8005984 <icmp_send_response.isra.0+0x88>)
 800591c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8005920:	4919      	ldr	r1, [pc, #100]	; (8005988 <icmp_send_response.isra.0+0x8c>)
 8005922:	481a      	ldr	r0, [pc, #104]	; (800598c <icmp_send_response.isra.0+0x90>)
 8005924:	f005 fc34 	bl	800b190 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8005928:	6822      	ldr	r2, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 800592a:	2300      	movs	r3, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800592c:	686c      	ldr	r4, [r5, #4]
  icmphdr->seqno = 0;

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800592e:	f102 001c 	add.w	r0, r2, #28
  icmphdr->id = 0;
 8005932:	7123      	strb	r3, [r4, #4]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005934:	f104 0108 	add.w	r1, r4, #8
  icmphdr->id = 0;
 8005938:	7163      	strb	r3, [r4, #5]
  icmphdr->seqno = 0;
 800593a:	71a3      	strb	r3, [r4, #6]
 800593c:	71e3      	strb	r3, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800593e:	4613      	mov	r3, r2
  icmphdr->type = type;
 8005940:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 8005942:	7066      	strb	r6, [r4, #1]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8005944:	f853 6b04 	ldr.w	r6, [r3], #4
 8005948:	4283      	cmp	r3, r0
 800594a:	f841 6b04 	str.w	r6, [r1], #4
 800594e:	d1f9      	bne.n	8005944 <icmp_send_response.isra.0+0x48>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8005950:	ae06      	add	r6, sp, #24
 8005952:	68d3      	ldr	r3, [r2, #12]
 8005954:	f846 3d04 	str.w	r3, [r6, #-4]!
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8005958:	4630      	mov	r0, r6
 800595a:	f000 f8bb 	bl	8005ad4 <ip4_route>
#endif
  if (netif != NULL) {
 800595e:	b158      	cbz	r0, 8005978 <icmp_send_response.isra.0+0x7c>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8005960:	2100      	movs	r1, #0
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8005962:	2301      	movs	r3, #1
 8005964:	4632      	mov	r2, r6
    icmphdr->chksum = 0;
 8005966:	70a1      	strb	r1, [r4, #2]
 8005968:	70e1      	strb	r1, [r4, #3]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800596a:	9002      	str	r0, [sp, #8]
 800596c:	4628      	mov	r0, r5
 800596e:	e88d 000a 	stmia.w	sp, {r1, r3}
 8005972:	23ff      	movs	r3, #255	; 0xff
 8005974:	f000 fa20 	bl	8005db8 <ip4_output_if>
  }
  pbuf_free(q);
 8005978:	4628      	mov	r0, r5
 800597a:	f001 f9f9 	bl	8006d70 <pbuf_free>
}
 800597e:	b007      	add	sp, #28
 8005980:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005982:	bf00      	nop
 8005984:	0800c7a1 	.word	0x0800c7a1
 8005988:	0800c7d6 	.word	0x0800c7d6
 800598c:	0800c106 	.word	0x0800c106

08005990 <icmp_input>:
  iphdr_in = ip4_current_header();
 8005990:	4b45      	ldr	r3, [pc, #276]	; (8005aa8 <icmp_input+0x118>)
{
 8005992:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  iphdr_in = ip4_current_header();
 8005996:	f8d3 9008 	ldr.w	r9, [r3, #8]
{
 800599a:	b085      	sub	sp, #20
 800599c:	4604      	mov	r4, r0
 800599e:	4688      	mov	r8, r1
  hlen = IPH_HL(iphdr_in) * 4;
 80059a0:	f899 5000 	ldrb.w	r5, [r9]
 80059a4:	461f      	mov	r7, r3
 80059a6:	f005 050f 	and.w	r5, r5, #15
 80059aa:	00ad      	lsls	r5, r5, #2
  if (hlen < IP_HLEN) {
 80059ac:	2d13      	cmp	r5, #19
 80059ae:	d92a      	bls.n	8005a06 <icmp_input+0x76>
  if (p->len < sizeof(u16_t)*2) {
 80059b0:	8942      	ldrh	r2, [r0, #10]
 80059b2:	2a03      	cmp	r2, #3
 80059b4:	d927      	bls.n	8005a06 <icmp_input+0x76>
  type = *((u8_t *)p->payload);
 80059b6:	6842      	ldr	r2, [r0, #4]
  switch (type) {
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	2a08      	cmp	r2, #8
 80059bc:	d123      	bne.n	8005a06 <icmp_input+0x76>
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80059be:	6958      	ldr	r0, [r3, #20]
 80059c0:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
 80059c4:	2ae0      	cmp	r2, #224	; 0xe0
 80059c6:	d01e      	beq.n	8005a06 <icmp_input+0x76>
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	f000 fa06 	bl	8005dda <ip4_addr_isbroadcast_u32>
 80059ce:	4606      	mov	r6, r0
 80059d0:	b9c8      	cbnz	r0, 8005a06 <icmp_input+0x76>
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80059d2:	8923      	ldrh	r3, [r4, #8]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d916      	bls.n	8005a06 <icmp_input+0x76>
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80059d8:	f105 010e 	add.w	r1, r5, #14
 80059dc:	4620      	mov	r0, r4
 80059de:	f001 f9c1 	bl	8006d64 <pbuf_header>
 80059e2:	2800      	cmp	r0, #0
 80059e4:	d04f      	beq.n	8005a86 <icmp_input+0xf6>
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80059e6:	8921      	ldrh	r1, [r4, #8]
 80059e8:	4632      	mov	r2, r6
 80059ea:	2002      	movs	r0, #2
 80059ec:	4429      	add	r1, r5
 80059ee:	b289      	uxth	r1, r1
 80059f0:	f001 fa28 	bl	8006e44 <pbuf_alloc>
      if (r == NULL) {
 80059f4:	4606      	mov	r6, r0
 80059f6:	b130      	cbz	r0, 8005a06 <icmp_input+0x76>
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80059f8:	8942      	ldrh	r2, [r0, #10]
 80059fa:	f105 0308 	add.w	r3, r5, #8
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d207      	bcs.n	8005a12 <icmp_input+0x82>
        pbuf_free(r);
 8005a02:	f001 f9b5 	bl	8006d70 <pbuf_free>
  pbuf_free(p);
 8005a06:	4620      	mov	r0, r4
}
 8005a08:	b005      	add	sp, #20
 8005a0a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  pbuf_free(p);
 8005a0e:	f001 b9af 	b.w	8006d70 <pbuf_free>
      MEMCPY(r->payload, iphdr_in, hlen);
 8005a12:	4649      	mov	r1, r9
 8005a14:	462a      	mov	r2, r5
 8005a16:	6840      	ldr	r0, [r0, #4]
 8005a18:	f005 fba7 	bl	800b16a <memcpy>
      if (pbuf_header(r, (s16_t)-hlen)) {
 8005a1c:	4269      	negs	r1, r5
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f001 f9a0 	bl	8006d64 <pbuf_header>
 8005a24:	b138      	cbz	r0, 8005a36 <icmp_input+0xa6>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <icmp_input+0x11c>)
 8005a28:	22af      	movs	r2, #175	; 0xaf
 8005a2a:	4921      	ldr	r1, [pc, #132]	; (8005ab0 <icmp_input+0x120>)
 8005a2c:	4821      	ldr	r0, [pc, #132]	; (8005ab4 <icmp_input+0x124>)
 8005a2e:	f005 fbaf 	bl	800b190 <iprintf>
        pbuf_free(r);
 8005a32:	4630      	mov	r0, r6
 8005a34:	e7e5      	b.n	8005a02 <icmp_input+0x72>
      if (pbuf_copy(r, p) != ERR_OK) {
 8005a36:	4621      	mov	r1, r4
 8005a38:	4630      	mov	r0, r6
 8005a3a:	f001 fbb7 	bl	80071ac <pbuf_copy>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	d1f7      	bne.n	8005a32 <icmp_input+0xa2>
      pbuf_free(p);
 8005a42:	4620      	mov	r0, r4
 8005a44:	4634      	mov	r4, r6
 8005a46:	f001 f993 	bl	8006d70 <pbuf_free>
    if (pbuf_header(p, (s16_t)hlen)) {
 8005a4a:	4629      	mov	r1, r5
 8005a4c:	4620      	mov	r0, r4
    iecho = (struct icmp_echo_hdr *)p->payload;
 8005a4e:	6866      	ldr	r6, [r4, #4]
    if (pbuf_header(p, (s16_t)hlen)) {
 8005a50:	f001 f988 	bl	8006d64 <pbuf_header>
 8005a54:	4602      	mov	r2, r0
 8005a56:	2800      	cmp	r0, #0
 8005a58:	d1d5      	bne.n	8005a06 <icmp_input+0x76>
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8005a5a:	6861      	ldr	r1, [r4, #4]
      ip4_addr_copy(iphdr->src, *src);
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	60cb      	str	r3, [r1, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	610b      	str	r3, [r1, #16]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005a64:	23ff      	movs	r3, #255	; 0xff
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8005a66:	7030      	strb	r0, [r6, #0]
      iecho->chksum = 0;
 8005a68:	70b0      	strb	r0, [r6, #2]
 8005a6a:	70f0      	strb	r0, [r6, #3]
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8005a6c:	720b      	strb	r3, [r1, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8005a6e:	7288      	strb	r0, [r1, #10]
 8005a70:	72c8      	strb	r0, [r1, #11]
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8005a72:	2101      	movs	r1, #1
 8005a74:	9000      	str	r0, [sp, #0]
 8005a76:	4620      	mov	r0, r4
 8005a78:	9101      	str	r1, [sp, #4]
 8005a7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8005a7e:	490e      	ldr	r1, [pc, #56]	; (8005ab8 <icmp_input+0x128>)
 8005a80:	f000 f99a 	bl	8005db8 <ip4_output_if>
 8005a84:	e7bf      	b.n	8005a06 <icmp_input+0x76>
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8005a86:	f5c5 417f 	rsb	r1, r5, #65280	; 0xff00
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	31f2      	adds	r1, #242	; 0xf2
 8005a8e:	b209      	sxth	r1, r1
 8005a90:	f001 f968 	bl	8006d64 <pbuf_header>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	d0d8      	beq.n	8005a4a <icmp_input+0xba>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8005a98:	4b04      	ldr	r3, [pc, #16]	; (8005aac <icmp_input+0x11c>)
 8005a9a:	22c0      	movs	r2, #192	; 0xc0
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <icmp_input+0x12c>)
 8005a9e:	4805      	ldr	r0, [pc, #20]	; (8005ab4 <icmp_input+0x124>)
 8005aa0:	f005 fb76 	bl	800b190 <iprintf>
        goto icmperr;
 8005aa4:	e7af      	b.n	8005a06 <icmp_input+0x76>
 8005aa6:	bf00      	nop
 8005aa8:	20003fa0 	.word	0x20003fa0
 8005aac:	0800c7a1 	.word	0x0800c7a1
 8005ab0:	0800c73a 	.word	0x0800c73a
 8005ab4:	0800c106 	.word	0x0800c106
 8005ab8:	20003fb4 	.word	0x20003fb4
 8005abc:	0800c76f 	.word	0x0800c76f

08005ac0 <icmp_dest_unreach>:
  icmp_send_response(p, ICMP_DUR, t);
 8005ac0:	460a      	mov	r2, r1
 8005ac2:	3004      	adds	r0, #4
 8005ac4:	2103      	movs	r1, #3
 8005ac6:	f7ff bf19 	b.w	80058fc <icmp_send_response.isra.0>

08005aca <icmp_time_exceeded>:
  icmp_send_response(p, ICMP_TE, t);
 8005aca:	460a      	mov	r2, r1
 8005acc:	3004      	adds	r0, #4
 8005ace:	210b      	movs	r1, #11
 8005ad0:	f7ff bf14 	b.w	80058fc <icmp_send_response.isra.0>

08005ad4 <ip4_route>:
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <ip4_route+0x50>)
{
 8005ad6:	b530      	push	{r4, r5, lr}
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	b96b      	cbnz	r3, 8005af8 <ip4_route+0x24>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8005adc:	4a12      	ldr	r2, [pc, #72]	; (8005b28 <ip4_route+0x54>)
 8005ade:	6812      	ldr	r2, [r2, #0]
 8005ae0:	b1ea      	cbz	r2, 8005b1e <ip4_route+0x4a>
 8005ae2:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
 8005ae6:	f001 0105 	and.w	r1, r1, #5
 8005aea:	2905      	cmp	r1, #5
 8005aec:	d117      	bne.n	8005b1e <ip4_route+0x4a>
 8005aee:	6851      	ldr	r1, [r2, #4]
 8005af0:	2900      	cmp	r1, #0
 8005af2:	bf18      	it	ne
 8005af4:	4613      	movne	r3, r2
 8005af6:	e012      	b.n	8005b1e <ip4_route+0x4a>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8005af8:	f893 402f 	ldrb.w	r4, [r3, #47]	; 0x2f
 8005afc:	f004 0205 	and.w	r2, r4, #5
 8005b00:	2a05      	cmp	r2, #5
 8005b02:	d1e9      	bne.n	8005ad8 <ip4_route+0x4>
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d0e6      	beq.n	8005ad8 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8005b0a:	6801      	ldr	r1, [r0, #0]
 8005b0c:	689d      	ldr	r5, [r3, #8]
 8005b0e:	404a      	eors	r2, r1
 8005b10:	422a      	tst	r2, r5
 8005b12:	d004      	beq.n	8005b1e <ip4_route+0x4a>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8005b14:	07a2      	lsls	r2, r4, #30
 8005b16:	d4df      	bmi.n	8005ad8 <ip4_route+0x4>
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	d1dc      	bne.n	8005ad8 <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	bd30      	pop	{r4, r5, pc}
 8005b22:	bf00      	nop
 8005b24:	200076dc 	.word	0x200076dc
 8005b28:	200076e0 	.word	0x200076e0

08005b2c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8005b2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8005b30:	6847      	ldr	r7, [r0, #4]
{
 8005b32:	4605      	mov	r5, r0
 8005b34:	4688      	mov	r8, r1
  if (IPH_V(iphdr) != 4) {
 8005b36:	f897 9000 	ldrb.w	r9, [r7]
 8005b3a:	ea4f 1319 	mov.w	r3, r9, lsr #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d005      	beq.n	8005b4e <ip4_input+0x22>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8005b42:	4628      	mov	r0, r5
 8005b44:	f001 f914 	bl	8006d70 <pbuf_free>
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8005b48:	2000      	movs	r0, #0
 8005b4a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005b4e:	8878      	ldrh	r0, [r7, #2]
  iphdr_hlen = IPH_HL(iphdr);
 8005b50:	f009 090f 	and.w	r9, r9, #15
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005b54:	f7fe fa52 	bl	8003ffc <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8005b58:	892b      	ldrh	r3, [r5, #8]
  iphdr_hlen *= 4;
 8005b5a:	ea4f 0989 	mov.w	r9, r9, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8005b5e:	4604      	mov	r4, r0
  if (iphdr_len < p->tot_len) {
 8005b60:	4283      	cmp	r3, r0
 8005b62:	d903      	bls.n	8005b6c <ip4_input+0x40>
    pbuf_realloc(p, iphdr_len);
 8005b64:	4601      	mov	r1, r0
 8005b66:	4628      	mov	r0, r5
 8005b68:	f001 fa48 	bl	8006ffc <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8005b6c:	896b      	ldrh	r3, [r5, #10]
 8005b6e:	454b      	cmp	r3, r9
 8005b70:	d3e7      	bcc.n	8005b42 <ip4_input+0x16>
 8005b72:	892b      	ldrh	r3, [r5, #8]
 8005b74:	42a3      	cmp	r3, r4
 8005b76:	d3e4      	bcc.n	8005b42 <ip4_input+0x16>
 8005b78:	f1b9 0f13 	cmp.w	r9, #19
 8005b7c:	d9e1      	bls.n	8005b42 <ip4_input+0x16>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	4c4f      	ldr	r4, [pc, #316]	; (8005cc0 <ip4_input+0x194>)
 8005b82:	6163      	str	r3, [r4, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005b88:	68fa      	ldr	r2, [r7, #12]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005b8a:	2be0      	cmp	r3, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8005b8c:	6122      	str	r2, [r4, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005b8e:	d113      	bne.n	8005bb8 <ip4_input+0x8c>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8005b90:	f898 302f 	ldrb.w	r3, [r8, #47]	; 0x2f
 8005b94:	07da      	lsls	r2, r3, #31
 8005b96:	d504      	bpl.n	8005ba2 <ip4_input+0x76>
 8005b98:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	f040 808d 	bne.w	8005cbc <ip4_input+0x190>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8005ba2:	7a7b      	ldrb	r3, [r7, #9]
 8005ba4:	2b11      	cmp	r3, #17
 8005ba6:	d105      	bne.n	8005bb4 <ip4_input+0x88>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8005ba8:	eb07 0309 	add.w	r3, r7, r9
 8005bac:	885b      	ldrh	r3, [r3, #2]
 8005bae:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8005bb2:	d059      	beq.n	8005c68 <ip4_input+0x13c>
 8005bb4:	2600      	movs	r6, #0
 8005bb6:	e018      	b.n	8005bea <ip4_input+0xbe>
 8005bb8:	4646      	mov	r6, r8
 8005bba:	f04f 0a01 	mov.w	sl, #1
        netif = netif_list;
 8005bbe:	f8df b104 	ldr.w	fp, [pc, #260]	; 8005cc4 <ip4_input+0x198>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005bc2:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
 8005bc6:	07db      	lsls	r3, r3, #31
 8005bc8:	d404      	bmi.n	8005bd4 <ip4_input+0xa8>
      if (first) {
 8005bca:	f1ba 0f00 	cmp.w	sl, #0
 8005bce:	d13e      	bne.n	8005c4e <ip4_input+0x122>
        netif = netif->next;
 8005bd0:	6836      	ldr	r6, [r6, #0]
 8005bd2:	e041      	b.n	8005c58 <ip4_input+0x12c>
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8005bd4:	6873      	ldr	r3, [r6, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d0f7      	beq.n	8005bca <ip4_input+0x9e>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005bda:	6960      	ldr	r0, [r4, #20]
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	d004      	beq.n	8005bea <ip4_input+0xbe>
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8005be0:	4631      	mov	r1, r6
 8005be2:	f000 f8fa 	bl	8005dda <ip4_addr_isbroadcast_u32>
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8005be6:	2800      	cmp	r0, #0
 8005be8:	d0ef      	beq.n	8005bca <ip4_input+0x9e>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8005bea:	6920      	ldr	r0, [r4, #16]
 8005bec:	b148      	cbz	r0, 8005c02 <ip4_input+0xd6>
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005bee:	4641      	mov	r1, r8
 8005bf0:	f000 f8f3 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d1a4      	bne.n	8005b42 <ip4_input+0x16>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8005bf8:	6923      	ldr	r3, [r4, #16]
 8005bfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8005bfe:	2be0      	cmp	r3, #224	; 0xe0
 8005c00:	d09f      	beq.n	8005b42 <ip4_input+0x16>
  if (netif == NULL) {
 8005c02:	2e00      	cmp	r6, #0
 8005c04:	d09d      	beq.n	8005b42 <ip4_input+0x16>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005c0c:	b133      	cbz	r3, 8005c1c <ip4_input+0xf0>
    p = ip4_reass(p);
 8005c0e:	4628      	mov	r0, r5
 8005c10:	f000 fa12 	bl	8006038 <ip4_reass>
    if (p == NULL) {
 8005c14:	4605      	mov	r5, r0
 8005c16:	2800      	cmp	r0, #0
 8005c18:	d096      	beq.n	8005b48 <ip4_input+0x1c>
    iphdr = (struct ip_hdr *)p->payload;
 8005c1a:	6847      	ldr	r7, [r0, #4]
  ip_data.current_ip4_header = iphdr;
 8005c1c:	60a7      	str	r7, [r4, #8]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005c1e:	f1c9 0100 	rsb	r1, r9, #0
 8005c22:	4628      	mov	r0, r5
  ip_data.current_input_netif = inp;
 8005c24:	e884 0140 	stmia.w	r4, {r6, r8}
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8005c28:	783b      	ldrb	r3, [r7, #0]
 8005c2a:	f003 030f 	and.w	r3, r3, #15
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	81a3      	strh	r3, [r4, #12]
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8005c32:	f001 f897 	bl	8006d64 <pbuf_header>
    switch (IPH_PROTO(iphdr)) {
 8005c36:	7a7b      	ldrb	r3, [r7, #9]
 8005c38:	2b06      	cmp	r3, #6
 8005c3a:	d023      	beq.n	8005c84 <ip4_input+0x158>
 8005c3c:	2b11      	cmp	r3, #17
 8005c3e:	d015      	beq.n	8005c6c <ip4_input+0x140>
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d124      	bne.n	8005c8e <ip4_input+0x162>
      icmp_input(p, inp);
 8005c44:	4641      	mov	r1, r8
 8005c46:	4628      	mov	r0, r5
 8005c48:	f7ff fea2 	bl	8005990 <icmp_input>
      break;
 8005c4c:	e012      	b.n	8005c74 <ip4_input+0x148>
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8005c4e:	7d23      	ldrb	r3, [r4, #20]
 8005c50:	2b7f      	cmp	r3, #127	; 0x7f
 8005c52:	d0a6      	beq.n	8005ba2 <ip4_input+0x76>
        netif = netif_list;
 8005c54:	f8db 6000 	ldr.w	r6, [fp]
      if (netif == inp) {
 8005c58:	4546      	cmp	r6, r8
 8005c5a:	f04f 0a00 	mov.w	sl, #0
        netif = netif->next;
 8005c5e:	bf08      	it	eq
 8005c60:	6836      	ldreq	r6, [r6, #0]
    } while (netif != NULL);
 8005c62:	2e00      	cmp	r6, #0
 8005c64:	d1ad      	bne.n	8005bc2 <ip4_input+0x96>
 8005c66:	e79c      	b.n	8005ba2 <ip4_input+0x76>
 8005c68:	4646      	mov	r6, r8
 8005c6a:	e7ca      	b.n	8005c02 <ip4_input+0xd6>
      udp_input(p, inp);
 8005c6c:	4641      	mov	r1, r8
 8005c6e:	4628      	mov	r0, r5
 8005c70:	f004 f952 	bl	8009f18 <udp_input>
  ip_data.current_netif = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	6023      	str	r3, [r4, #0]
  ip_data.current_input_netif = NULL;
 8005c78:	6063      	str	r3, [r4, #4]
  ip_data.current_ip4_header = NULL;
 8005c7a:	60a3      	str	r3, [r4, #8]
  ip_data.current_ip_header_tot_len = 0;
 8005c7c:	81a3      	strh	r3, [r4, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8005c7e:	6123      	str	r3, [r4, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8005c80:	6163      	str	r3, [r4, #20]
  return ERR_OK;
 8005c82:	e761      	b.n	8005b48 <ip4_input+0x1c>
      tcp_input(p, inp);
 8005c84:	4641      	mov	r1, r8
 8005c86:	4628      	mov	r0, r5
 8005c88:	f002 fece 	bl	8008a28 <tcp_input>
      break;
 8005c8c:	e7f2      	b.n	8005c74 <ip4_input+0x148>
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005c8e:	4631      	mov	r1, r6
 8005c90:	6960      	ldr	r0, [r4, #20]
 8005c92:	f000 f8a2 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8005c96:	b968      	cbnz	r0, 8005cb4 <ip4_input+0x188>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8005c98:	6963      	ldr	r3, [r4, #20]
 8005c9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8005c9e:	2be0      	cmp	r3, #224	; 0xe0
 8005ca0:	d008      	beq.n	8005cb4 <ip4_input+0x188>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4628      	mov	r0, r5
 8005ca6:	f001 f860 	bl	8006d6a <pbuf_header_force>
        p->payload = iphdr;
 8005caa:	606f      	str	r7, [r5, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8005cac:	2102      	movs	r1, #2
 8005cae:	4628      	mov	r0, r5
 8005cb0:	f7ff ff06 	bl	8005ac0 <icmp_dest_unreach>
      pbuf_free(p);
 8005cb4:	4628      	mov	r0, r5
 8005cb6:	f001 f85b 	bl	8006d70 <pbuf_free>
 8005cba:	e7db      	b.n	8005c74 <ip4_input+0x148>
 8005cbc:	4646      	mov	r6, r8
 8005cbe:	e794      	b.n	8005bea <ip4_input+0xbe>
 8005cc0:	20003fa0 	.word	0x20003fa0
 8005cc4:	200076dc 	.word	0x200076dc

08005cc8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8005cc8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ccc:	461f      	mov	r7, r3
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005cce:	89c3      	ldrh	r3, [r0, #14]
{
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	468a      	mov	sl, r1
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005cd4:	2b01      	cmp	r3, #1
{
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8005cdc:	d006      	beq.n	8005cec <ip4_output_if_src+0x24>
 8005cde:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <ip4_output_if_src+0xd8>)
 8005ce0:	f240 3233 	movw	r2, #819	; 0x333
 8005ce4:	492f      	ldr	r1, [pc, #188]	; (8005da4 <ip4_output_if_src+0xdc>)
 8005ce6:	4830      	ldr	r0, [pc, #192]	; (8005da8 <ip4_output_if_src+0xe0>)
 8005ce8:	f005 fa52 	bl	800b190 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8005cec:	2e00      	cmp	r6, #0
 8005cee:	d047      	beq.n	8005d80 <ip4_output_if_src+0xb8>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8005cf0:	2114      	movs	r1, #20
 8005cf2:	4628      	mov	r0, r5
 8005cf4:	f001 f836 	bl	8006d64 <pbuf_header>
 8005cf8:	2800      	cmp	r0, #0
 8005cfa:	d14e      	bne.n	8005d9a <ip4_output_if_src+0xd2>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005cfc:	896b      	ldrh	r3, [r5, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8005cfe:	686c      	ldr	r4, [r5, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8005d00:	2b13      	cmp	r3, #19
 8005d02:	d806      	bhi.n	8005d12 <ip4_output_if_src+0x4a>
 8005d04:	4b26      	ldr	r3, [pc, #152]	; (8005da0 <ip4_output_if_src+0xd8>)
 8005d06:	f240 3261 	movw	r2, #865	; 0x361
 8005d0a:	4928      	ldr	r1, [pc, #160]	; (8005dac <ip4_output_if_src+0xe4>)
 8005d0c:	4826      	ldr	r0, [pc, #152]	; (8005da8 <ip4_output_if_src+0xe0>)
 8005d0e:	f005 fa3f 	bl	800b190 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
    IPH_PROTO_SET(iphdr, proto);
 8005d12:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    IPH_TTL_SET(iphdr, ttl);
 8005d16:	7227      	strb	r7, [r4, #8]
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8005d18:	2700      	movs	r7, #0
    IPH_PROTO_SET(iphdr, proto);
 8005d1a:	7263      	strb	r3, [r4, #9]
    ip4_addr_copy(iphdr->dest, *dest);
 8005d1c:	6833      	ldr	r3, [r6, #0]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005d1e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8005db4 <ip4_output_if_src+0xec>
    ip4_addr_copy(iphdr->dest, *dest);
 8005d22:	6123      	str	r3, [r4, #16]
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8005d24:	2345      	movs	r3, #69	; 0x45
 8005d26:	7023      	strb	r3, [r4, #0]
    IPH_TOS_SET(iphdr, tos);
 8005d28:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8005d2c:	7063      	strb	r3, [r4, #1]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005d2e:	8928      	ldrh	r0, [r5, #8]
 8005d30:	f7fe f964 	bl	8003ffc <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8005d34:	71a7      	strb	r7, [r4, #6]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8005d36:	8060      	strh	r0, [r4, #2]
    IPH_OFFSET_SET(iphdr, 0);
 8005d38:	71e7      	strb	r7, [r4, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005d3a:	f8b9 0000 	ldrh.w	r0, [r9]
 8005d3e:	f7fe f95d 	bl	8003ffc <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8005d42:	f8b9 3000 	ldrh.w	r3, [r9]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8005d46:	80a0      	strh	r0, [r4, #4]
    ++ip_id;
 8005d48:	3301      	adds	r3, #1
 8005d4a:	f8a9 3000 	strh.w	r3, [r9]

    if (src == NULL) {
 8005d4e:	f1ba 0f00 	cmp.w	sl, #0
 8005d52:	d112      	bne.n	8005d7a <ip4_output_if_src+0xb2>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8005d54:	4b16      	ldr	r3, [pc, #88]	; (8005db0 <ip4_output_if_src+0xe8>)
 8005d56:	681b      	ldr	r3, [r3, #0]
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8005d58:	60e3      	str	r3, [r4, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8005d5a:	72a7      	strb	r7, [r4, #10]
 8005d5c:	72e7      	strb	r7, [r4, #11]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8005d5e:	f8b8 3026 	ldrh.w	r3, [r8, #38]	; 0x26
 8005d62:	b19b      	cbz	r3, 8005d8c <ip4_output_if_src+0xc4>
 8005d64:	892a      	ldrh	r2, [r5, #8]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d910      	bls.n	8005d8c <ip4_output_if_src+0xc4>
    return ip4_frag(p, netif, dest);
 8005d6a:	4632      	mov	r2, r6
 8005d6c:	4641      	mov	r1, r8
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 fb0c 	bl	800638c <ip4_frag>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
}
 8005d74:	b002      	add	sp, #8
 8005d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ip4_addr_copy(iphdr->src, *src);
 8005d7a:	f8da 3000 	ldr.w	r3, [sl]
 8005d7e:	e7eb      	b.n	8005d58 <ip4_output_if_src+0x90>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8005d80:	686b      	ldr	r3, [r5, #4]
 8005d82:	ae02      	add	r6, sp, #8
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f846 3d04 	str.w	r3, [r6, #-4]!
 8005d8a:	e7e8      	b.n	8005d5e <ip4_output_if_src+0x96>
  return netif->output(netif, p, dest);
 8005d8c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005d90:	4632      	mov	r2, r6
 8005d92:	4629      	mov	r1, r5
 8005d94:	4640      	mov	r0, r8
 8005d96:	4798      	blx	r3
 8005d98:	e7ec      	b.n	8005d74 <ip4_output_if_src+0xac>
      return ERR_BUF;
 8005d9a:	f06f 0001 	mvn.w	r0, #1
 8005d9e:	e7e9      	b.n	8005d74 <ip4_output_if_src+0xac>
 8005da0:	0800c802 	.word	0x0800c802
 8005da4:	0800c836 	.word	0x0800c836
 8005da8:	0800c106 	.word	0x0800c106
 8005dac:	0800c842 	.word	0x0800c842
 8005db0:	0800c870 	.word	0x0800c870
 8005db4:	20003eea 	.word	0x20003eea

08005db8 <ip4_output_if>:
{
 8005db8:	b4f0      	push	{r4, r5, r6, r7}
 8005dba:	9c06      	ldr	r4, [sp, #24]
 8005dbc:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8005dc0:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8005dc4:	b11a      	cbz	r2, 8005dce <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8005dc6:	b109      	cbz	r1, 8005dcc <ip4_output_if+0x14>
 8005dc8:	680f      	ldr	r7, [r1, #0]
 8005dca:	b907      	cbnz	r7, 8005dce <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8005dcc:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005dce:	9406      	str	r4, [sp, #24]
 8005dd0:	9605      	str	r6, [sp, #20]
 8005dd2:	9504      	str	r5, [sp, #16]
}
 8005dd4:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8005dd6:	f7ff bf77 	b.w	8005cc8 <ip4_output_if_src>

08005dda <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8005dda:	1e43      	subs	r3, r0, #1
 8005ddc:	3303      	adds	r3, #3
 8005dde:	d811      	bhi.n	8005e04 <ip4_addr_isbroadcast_u32+0x2a>
      (addr == IPADDR_ANY)) {
    return 1;
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8005de0:	f891 302f 	ldrb.w	r3, [r1, #47]	; 0x2f
 8005de4:	f013 0302 	ands.w	r3, r3, #2
 8005de8:	d00e      	beq.n	8005e08 <ip4_addr_isbroadcast_u32+0x2e>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8005dea:	684a      	ldr	r2, [r1, #4]
 8005dec:	4290      	cmp	r0, r2
 8005dee:	d00b      	beq.n	8005e08 <ip4_addr_isbroadcast_u32+0x2e>
    return 0;
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8005df0:	688b      	ldr	r3, [r1, #8]
 8005df2:	4042      	eors	r2, r0
 8005df4:	421a      	tst	r2, r3
 8005df6:	d107      	bne.n	8005e08 <ip4_addr_isbroadcast_u32+0x2e>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8005df8:	43db      	mvns	r3, r3
 8005dfa:	4383      	bics	r3, r0
    return 1;
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2001      	moveq	r0, #1
 8005e00:	2000      	movne	r0, #0
 8005e02:	4770      	bx	lr
 8005e04:	2001      	movs	r0, #1
 8005e06:	4770      	bx	lr
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8005e08:	2000      	movs	r0, #0
  }
}
 8005e0a:	4770      	bx	lr

08005e0c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8005e0c:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8005e0e:	4b0c      	ldr	r3, [pc, #48]	; (8005e40 <ip_reass_dequeue_datagram+0x34>)
{
 8005e10:	4604      	mov	r4, r0
 8005e12:	460d      	mov	r5, r1
  if (reassdatagrams == ipr) {
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4282      	cmp	r2, r0
 8005e18:	d107      	bne.n	8005e2a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8005e1a:	6802      	ldr	r2, [r0, #0]
 8005e1c:	601a      	str	r2, [r3, #0]
    LWIP_ASSERT("sanity check linked list", prev != NULL);
    prev->next = ipr->next;
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8005e1e:	4621      	mov	r1, r4
 8005e20:	2004      	movs	r0, #4
}
 8005e22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8005e26:	f000 be1d 	b.w	8006a64 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8005e2a:	b931      	cbnz	r1, 8005e3a <ip_reass_dequeue_datagram+0x2e>
 8005e2c:	4b05      	ldr	r3, [pc, #20]	; (8005e44 <ip_reass_dequeue_datagram+0x38>)
 8005e2e:	f240 1245 	movw	r2, #325	; 0x145
 8005e32:	4905      	ldr	r1, [pc, #20]	; (8005e48 <ip_reass_dequeue_datagram+0x3c>)
 8005e34:	4805      	ldr	r0, [pc, #20]	; (8005e4c <ip_reass_dequeue_datagram+0x40>)
 8005e36:	f005 f9ab 	bl	800b190 <iprintf>
    prev->next = ipr->next;
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	602b      	str	r3, [r5, #0]
 8005e3e:	e7ee      	b.n	8005e1e <ip_reass_dequeue_datagram+0x12>
 8005e40:	20003ef0 	.word	0x20003ef0
 8005e44:	0800c95d 	.word	0x0800c95d
 8005e48:	0800c996 	.word	0x0800c996
 8005e4c:	0800c106 	.word	0x0800c106

08005e50 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005e50:	4281      	cmp	r1, r0
{
 8005e52:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e56:	4605      	mov	r5, r0
 8005e58:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8005e5a:	d105      	bne.n	8005e68 <ip_reass_free_complete_datagram+0x18>
 8005e5c:	4b2f      	ldr	r3, [pc, #188]	; (8005f1c <ip_reass_free_complete_datagram+0xcc>)
 8005e5e:	22ab      	movs	r2, #171	; 0xab
 8005e60:	492f      	ldr	r1, [pc, #188]	; (8005f20 <ip_reass_free_complete_datagram+0xd0>)
 8005e62:	4830      	ldr	r0, [pc, #192]	; (8005f24 <ip_reass_free_complete_datagram+0xd4>)
 8005e64:	f005 f994 	bl	800b190 <iprintf>
  if (prev != NULL) {
 8005e68:	b147      	cbz	r7, 8005e7c <ip_reass_free_complete_datagram+0x2c>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	429d      	cmp	r5, r3
 8005e6e:	d005      	beq.n	8005e7c <ip_reass_free_complete_datagram+0x2c>
 8005e70:	4b2a      	ldr	r3, [pc, #168]	; (8005f1c <ip_reass_free_complete_datagram+0xcc>)
 8005e72:	22ad      	movs	r2, #173	; 0xad
 8005e74:	492c      	ldr	r1, [pc, #176]	; (8005f28 <ip_reass_free_complete_datagram+0xd8>)
 8005e76:	482b      	ldr	r0, [pc, #172]	; (8005f24 <ip_reass_free_complete_datagram+0xd4>)
 8005e78:	f005 f98a 	bl	800b190 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8005e7c:	686e      	ldr	r6, [r5, #4]
 8005e7e:	6873      	ldr	r3, [r6, #4]
  if (iprh->start == 0) {
 8005e80:	889a      	ldrh	r2, [r3, #4]
 8005e82:	bb92      	cbnz	r2, 8005eea <ip_reass_free_complete_datagram+0x9a>
    ipr->p = iprh->next_pbuf;
 8005e84:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005e86:	f105 011c 	add.w	r1, r5, #28
    ipr->p = iprh->next_pbuf;
 8005e8a:	606a      	str	r2, [r5, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8005e8c:	f105 0208 	add.w	r2, r5, #8
 8005e90:	f852 0b04 	ldr.w	r0, [r2], #4
 8005e94:	428a      	cmp	r2, r1
 8005e96:	f843 0b04 	str.w	r0, [r3], #4
 8005e9a:	d1f9      	bne.n	8005e90 <ip_reass_free_complete_datagram+0x40>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8005e9c:	2101      	movs	r1, #1
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	f7ff fe13 	bl	8005aca <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8005ea4:	4630      	mov	r0, r6
 8005ea6:	f001 f919 	bl	80070dc <pbuf_clen>
 8005eaa:	4604      	mov	r4, r0
    pbuf_free(p);
 8005eac:	4630      	mov	r0, r6
 8005eae:	f000 ff5f 	bl	8006d70 <pbuf_free>
  p = ipr->p;
 8005eb2:	686e      	ldr	r6, [r5, #4]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005eb4:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8005f1c <ip_reass_free_complete_datagram+0xcc>
 8005eb8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8005f34 <ip_reass_free_complete_datagram+0xe4>
 8005ebc:	f8df a064 	ldr.w	sl, [pc, #100]	; 8005f24 <ip_reass_free_complete_datagram+0xd4>
  while (p != NULL) {
 8005ec0:	b9ae      	cbnz	r6, 8005eee <ip_reass_free_complete_datagram+0x9e>
  ip_reass_dequeue_datagram(ipr, prev);
 8005ec2:	4628      	mov	r0, r5
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005ec4:	4d19      	ldr	r5, [pc, #100]	; (8005f2c <ip_reass_free_complete_datagram+0xdc>)
  ip_reass_dequeue_datagram(ipr, prev);
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7ff ffa0 	bl	8005e0c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8005ecc:	882b      	ldrh	r3, [r5, #0]
 8005ece:	42a3      	cmp	r3, r4
 8005ed0:	d205      	bcs.n	8005ede <ip_reass_free_complete_datagram+0x8e>
 8005ed2:	4b12      	ldr	r3, [pc, #72]	; (8005f1c <ip_reass_free_complete_datagram+0xcc>)
 8005ed4:	22d2      	movs	r2, #210	; 0xd2
 8005ed6:	4916      	ldr	r1, [pc, #88]	; (8005f30 <ip_reass_free_complete_datagram+0xe0>)
 8005ed8:	4812      	ldr	r0, [pc, #72]	; (8005f24 <ip_reass_free_complete_datagram+0xd4>)
 8005eda:	f005 f959 	bl	800b190 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8005ede:	882b      	ldrh	r3, [r5, #0]
}
 8005ee0:	4620      	mov	r0, r4
  ip_reass_pbufcount -= pbufs_freed;
 8005ee2:	1b1b      	subs	r3, r3, r4
 8005ee4:	802b      	strh	r3, [r5, #0]
}
 8005ee6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  u16_t pbufs_freed = 0;
 8005eea:	2400      	movs	r4, #0
 8005eec:	e7e1      	b.n	8005eb2 <ip_reass_free_complete_datagram+0x62>
    iprh = (struct ip_reass_helper *)p->payload;
 8005eee:	6873      	ldr	r3, [r6, #4]
    clen = pbuf_clen(pcur);
 8005ef0:	4630      	mov	r0, r6
    p = iprh->next_pbuf;
 8005ef2:	f8d3 b000 	ldr.w	fp, [r3]
    clen = pbuf_clen(pcur);
 8005ef6:	f001 f8f1 	bl	80070dc <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8005efa:	4404      	add	r4, r0
 8005efc:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8005f00:	db05      	blt.n	8005f0e <ip_reass_free_complete_datagram+0xbe>
 8005f02:	4643      	mov	r3, r8
 8005f04:	22cc      	movs	r2, #204	; 0xcc
 8005f06:	4649      	mov	r1, r9
 8005f08:	4650      	mov	r0, sl
 8005f0a:	f005 f941 	bl	800b190 <iprintf>
    pbuf_free(pcur);
 8005f0e:	4630      	mov	r0, r6
    pbufs_freed += clen;
 8005f10:	b2a4      	uxth	r4, r4
    pbuf_free(pcur);
 8005f12:	f000 ff2d 	bl	8006d70 <pbuf_free>
    p = iprh->next_pbuf;
 8005f16:	465e      	mov	r6, fp
 8005f18:	e7d2      	b.n	8005ec0 <ip_reass_free_complete_datagram+0x70>
 8005f1a:	bf00      	nop
 8005f1c:	0800c95d 	.word	0x0800c95d
 8005f20:	0800c9af 	.word	0x0800c9af
 8005f24:	0800c106 	.word	0x0800c106
 8005f28:	0800c9bb 	.word	0x0800c9bb
 8005f2c:	20003eec 	.word	0x20003eec
 8005f30:	0800c9ea 	.word	0x0800c9ea
 8005f34:	0800c9cd 	.word	0x0800c9cd

08005f38 <ip_reass_remove_oldest_datagram>:
{
 8005f38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f3c:	4606      	mov	r6, r0
 8005f3e:	460f      	mov	r7, r1
  int pbufs_freed = 0, pbufs_freed_current;
 8005f40:	2500      	movs	r5, #0
    r = reassdatagrams;
 8005f42:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8005fac <ip_reass_remove_oldest_datagram+0x74>
    other_datagrams = 0;
 8005f46:	2400      	movs	r4, #0
    r = reassdatagrams;
 8005f48:	f8d8 3000 	ldr.w	r3, [r8]
    oldest_prev = NULL;
 8005f4c:	4621      	mov	r1, r4
    prev = NULL;
 8005f4e:	46a6      	mov	lr, r4
    oldest = NULL;
 8005f50:	4620      	mov	r0, r4
    while (r != NULL) {
 8005f52:	b953      	cbnz	r3, 8005f6a <ip_reass_remove_oldest_datagram+0x32>
    if (oldest != NULL) {
 8005f54:	b110      	cbz	r0, 8005f5c <ip_reass_remove_oldest_datagram+0x24>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8005f56:	f7ff ff7b 	bl	8005e50 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8005f5a:	4405      	add	r5, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8005f5c:	42bd      	cmp	r5, r7
 8005f5e:	da01      	bge.n	8005f64 <ip_reass_remove_oldest_datagram+0x2c>
 8005f60:	2c01      	cmp	r4, #1
 8005f62:	dcf0      	bgt.n	8005f46 <ip_reass_remove_oldest_datagram+0xe>
}
 8005f64:	4628      	mov	r0, r5
 8005f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8005f6a:	f8d6 c00c 	ldr.w	ip, [r6, #12]
 8005f6e:	695a      	ldr	r2, [r3, #20]
 8005f70:	4562      	cmp	r2, ip
 8005f72:	d109      	bne.n	8005f88 <ip_reass_remove_oldest_datagram+0x50>
 8005f74:	f8d6 c010 	ldr.w	ip, [r6, #16]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	4562      	cmp	r2, ip
 8005f7c:	d104      	bne.n	8005f88 <ip_reass_remove_oldest_datagram+0x50>
 8005f7e:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
 8005f82:	88b2      	ldrh	r2, [r6, #4]
 8005f84:	4594      	cmp	ip, r2
 8005f86:	d008      	beq.n	8005f9a <ip_reass_remove_oldest_datagram+0x62>
        other_datagrams++;
 8005f88:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8005f8a:	b160      	cbz	r0, 8005fa6 <ip_reass_remove_oldest_datagram+0x6e>
        } else if (r->timer <= oldest->timer) {
 8005f8c:	7fc2      	ldrb	r2, [r0, #31]
 8005f8e:	f893 c01f 	ldrb.w	ip, [r3, #31]
          oldest_prev = prev;
 8005f92:	4594      	cmp	ip, r2
 8005f94:	bf9c      	itt	ls
 8005f96:	4671      	movls	r1, lr
 8005f98:	4618      	movls	r0, r3
      if (r->next != NULL) {
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	bf18      	it	ne
 8005fa0:	469e      	movne	lr, r3
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	e7d5      	b.n	8005f52 <ip_reass_remove_oldest_datagram+0x1a>
          oldest_prev = prev;
 8005fa6:	4671      	mov	r1, lr
 8005fa8:	4618      	mov	r0, r3
 8005faa:	e7f6      	b.n	8005f9a <ip_reass_remove_oldest_datagram+0x62>
 8005fac:	20003ef0 	.word	0x20003ef0

08005fb0 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8005fb0:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	b930      	cbnz	r0, 8005fc4 <ip_frag_free_pbuf_custom_ref+0x14>
 8005fb6:	4b06      	ldr	r3, [pc, #24]	; (8005fd0 <ip_frag_free_pbuf_custom_ref+0x20>)
 8005fb8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8005fbc:	4905      	ldr	r1, [pc, #20]	; (8005fd4 <ip_frag_free_pbuf_custom_ref+0x24>)
 8005fbe:	4806      	ldr	r0, [pc, #24]	; (8005fd8 <ip_frag_free_pbuf_custom_ref+0x28>)
 8005fc0:	f005 f8e6 	bl	800b190 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8005fc4:	4621      	mov	r1, r4
 8005fc6:	2005      	movs	r0, #5
}
 8005fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8005fcc:	f000 bd4a 	b.w	8006a64 <memp_free>
 8005fd0:	0800c95d 	.word	0x0800c95d
 8005fd4:	0800d083 	.word	0x0800d083
 8005fd8:	0800c106 	.word	0x0800c106

08005fdc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8005fdc:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8005fde:	4604      	mov	r4, r0
 8005fe0:	b930      	cbnz	r0, 8005ff0 <ipfrag_free_pbuf_custom+0x14>
 8005fe2:	4b08      	ldr	r3, [pc, #32]	; (8006004 <ipfrag_free_pbuf_custom+0x28>)
 8005fe4:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8005fe8:	4907      	ldr	r1, [pc, #28]	; (8006008 <ipfrag_free_pbuf_custom+0x2c>)
 8005fea:	4808      	ldr	r0, [pc, #32]	; (800600c <ipfrag_free_pbuf_custom+0x30>)
 8005fec:	f005 f8d0 	bl	800b190 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
  if (pcr->original != NULL) {
 8005ff0:	6960      	ldr	r0, [r4, #20]
 8005ff2:	b108      	cbz	r0, 8005ff8 <ipfrag_free_pbuf_custom+0x1c>
    pbuf_free(pcr->original);
 8005ff4:	f000 febc 	bl	8006d70 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ff8:	4620      	mov	r0, r4
}
 8005ffa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8005ffe:	f7ff bfd7 	b.w	8005fb0 <ip_frag_free_pbuf_custom_ref>
 8006002:	bf00      	nop
 8006004:	0800c95d 	.word	0x0800c95d
 8006008:	0800ca05 	.word	0x0800ca05
 800600c:	0800c106 	.word	0x0800c106

08006010 <ip_reass_tmr>:
{
 8006010:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8006012:	4b08      	ldr	r3, [pc, #32]	; (8006034 <ip_reass_tmr+0x24>)
  struct ip_reassdata *r, *prev = NULL;
 8006014:	2400      	movs	r4, #0
  r = reassdatagrams;
 8006016:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8006018:	b900      	cbnz	r0, 800601c <ip_reass_tmr+0xc>
}
 800601a:	bd38      	pop	{r3, r4, r5, pc}
    if (r->timer > 0) {
 800601c:	7fc3      	ldrb	r3, [r0, #31]
 800601e:	6805      	ldr	r5, [r0, #0]
 8006020:	b123      	cbz	r3, 800602c <ip_reass_tmr+0x1c>
      r->timer--;
 8006022:	3b01      	subs	r3, #1
 8006024:	4604      	mov	r4, r0
 8006026:	77c3      	strb	r3, [r0, #31]
      r = r->next;
 8006028:	4628      	mov	r0, r5
 800602a:	e7f5      	b.n	8006018 <ip_reass_tmr+0x8>
      ip_reass_free_complete_datagram(tmp, prev);
 800602c:	4621      	mov	r1, r4
 800602e:	f7ff ff0f 	bl	8005e50 <ip_reass_free_complete_datagram>
 8006032:	e7f9      	b.n	8006028 <ip_reass_tmr+0x18>
 8006034:	20003ef0 	.word	0x20003ef0

08006038 <ip4_reass>:
{
 8006038:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr*)p->payload;
 800603c:	6845      	ldr	r5, [r0, #4]
{
 800603e:	4607      	mov	r7, r0
  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8006040:	782b      	ldrb	r3, [r5, #0]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	2b05      	cmp	r3, #5
 8006048:	f040 808c 	bne.w	8006164 <ip4_reass+0x12c>
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800604c:	88e8      	ldrh	r0, [r5, #6]
 800604e:	f7fd ffd5 	bl	8003ffc <lwip_htons>
 8006052:	f3c0 000c 	ubfx	r0, r0, #0, #13
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006056:	4cb2      	ldr	r4, [pc, #712]	; (8006320 <ip4_reass+0x2e8>)
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006058:	ea4f 09c0 	mov.w	r9, r0, lsl #3
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800605c:	8868      	ldrh	r0, [r5, #2]
 800605e:	f7fd ffcd 	bl	8003ffc <lwip_htons>
 8006062:	782b      	ldrb	r3, [r5, #0]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	eba0 0083 	sub.w	r0, r0, r3, lsl #2
 800606c:	b283      	uxth	r3, r0
  clen = pbuf_clen(p);
 800606e:	4638      	mov	r0, r7
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8006070:	9301      	str	r3, [sp, #4]
  clen = pbuf_clen(p);
 8006072:	f001 f833 	bl	80070dc <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8006076:	8823      	ldrh	r3, [r4, #0]
  clen = pbuf_clen(p);
 8006078:	4682      	mov	sl, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800607a:	4403      	add	r3, r0
 800607c:	2b0a      	cmp	r3, #10
 800607e:	dc68      	bgt.n	8006152 <ip4_reass+0x11a>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006080:	4ea8      	ldr	r6, [pc, #672]	; (8006324 <ip4_reass+0x2ec>)
 8006082:	6834      	ldr	r4, [r6, #0]
 8006084:	2c00      	cmp	r4, #0
 8006086:	d172      	bne.n	800616e <ip4_reass+0x136>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8006088:	2004      	movs	r0, #4
 800608a:	f000 fccf 	bl	8006a2c <memp_malloc>
  if (ipr == NULL) {
 800608e:	4604      	mov	r4, r0
 8006090:	b958      	cbnz	r0, 80060aa <ip4_reass+0x72>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8006092:	4651      	mov	r1, sl
 8006094:	4628      	mov	r0, r5
 8006096:	f7ff ff4f 	bl	8005f38 <ip_reass_remove_oldest_datagram>
 800609a:	4582      	cmp	sl, r0
 800609c:	dc62      	bgt.n	8006164 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800609e:	2004      	movs	r0, #4
 80060a0:	f000 fcc4 	bl	8006a2c <memp_malloc>
    if (ipr == NULL)
 80060a4:	4604      	mov	r4, r0
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d05c      	beq.n	8006164 <ip4_reass+0x12c>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80060aa:	2220      	movs	r2, #32
 80060ac:	2100      	movs	r1, #0
 80060ae:	4620      	mov	r0, r4
 80060b0:	f005 f866 	bl	800b180 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80060b4:	2303      	movs	r3, #3
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80060b6:	f104 0208 	add.w	r2, r4, #8
 80060ba:	f105 0114 	add.w	r1, r5, #20
  ipr->timer = IP_REASS_MAXAGE;
 80060be:	77e3      	strb	r3, [r4, #31]
  ipr->next = reassdatagrams;
 80060c0:	6833      	ldr	r3, [r6, #0]
  reassdatagrams = ipr;
 80060c2:	6034      	str	r4, [r6, #0]
  ipr->next = reassdatagrams;
 80060c4:	6023      	str	r3, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80060c6:	462b      	mov	r3, r5
 80060c8:	f853 0b04 	ldr.w	r0, [r3], #4
 80060cc:	428b      	cmp	r3, r1
 80060ce:	f842 0b04 	str.w	r0, [r2], #4
 80060d2:	d1f9      	bne.n	80060c8 <ip4_reass+0x90>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80060d4:	f8b5 b006 	ldrh.w	fp, [r5, #6]
  if (is_last) {
 80060d8:	f01b 0b20 	ands.w	fp, fp, #32
 80060dc:	d108      	bne.n	80060f0 <ip4_reass+0xb8>
    u16_t datagram_len = (u16_t)(offset + len);
 80060de:	9b01      	ldr	r3, [sp, #4]
 80060e0:	444b      	add	r3, r9
 80060e2:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80060e4:	4599      	cmp	r9, r3
 80060e6:	d83d      	bhi.n	8006164 <ip4_reass+0x12c>
 80060e8:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d839      	bhi.n	8006164 <ip4_reass+0x12c>
  fraghdr = (struct ip_hdr*)new_p->payload;
 80060f0:	687d      	ldr	r5, [r7, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 80060f2:	8868      	ldrh	r0, [r5, #2]
 80060f4:	f7fd ff82 	bl	8003ffc <lwip_htons>
 80060f8:	f895 8000 	ldrb.w	r8, [r5]
 80060fc:	f008 080f 	and.w	r8, r8, #15
 8006100:	eba0 0888 	sub.w	r8, r0, r8, lsl #2
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006104:	88e8      	ldrh	r0, [r5, #6]
 8006106:	f7fd ff79 	bl	8003ffc <lwip_htons>
 800610a:	f3c0 000c 	ubfx	r0, r0, #0, #13
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800610e:	fa1f f888 	uxth.w	r8, r8
  for (q = ipr->p; q != NULL;) {
 8006112:	f8d4 e004 	ldr.w	lr, [r4, #4]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8006116:	00c0      	lsls	r0, r0, #3
  iprh = (struct ip_reass_helper*)new_p->payload;
 8006118:	687e      	ldr	r6, [r7, #4]
  iprh->next_pbuf = NULL;
 800611a:	2500      	movs	r5, #0
  for (q = ipr->p; q != NULL;) {
 800611c:	4672      	mov	r2, lr
  iprh->end = offset + len;
 800611e:	eb08 0300 	add.w	r3, r8, r0
  int valid = 1;
 8006122:	f04f 0801 	mov.w	r8, #1
  iprh->next_pbuf = NULL;
 8006126:	7035      	strb	r5, [r6, #0]
  iprh->end = offset + len;
 8006128:	b29b      	uxth	r3, r3
  iprh->next_pbuf = NULL;
 800612a:	7075      	strb	r5, [r6, #1]
 800612c:	70b5      	strb	r5, [r6, #2]
 800612e:	70f5      	strb	r5, [r6, #3]
  iprh->start = offset;
 8006130:	80b0      	strh	r0, [r6, #4]
  iprh->end = offset + len;
 8006132:	80f3      	strh	r3, [r6, #6]
  for (q = ipr->p; q != NULL;) {
 8006134:	bb52      	cbnz	r2, 800618c <ip4_reass+0x154>
    if (iprh_prev != NULL) {
 8006136:	2d00      	cmp	r5, #0
 8006138:	f040 8092 	bne.w	8006260 <ip4_reass+0x228>
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800613c:	f1be 0f00 	cmp.w	lr, #0
 8006140:	d07d      	beq.n	800623e <ip4_reass+0x206>
 8006142:	4b79      	ldr	r3, [pc, #484]	; (8006328 <ip4_reass+0x2f0>)
 8006144:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8006148:	4978      	ldr	r1, [pc, #480]	; (800632c <ip4_reass+0x2f4>)
 800614a:	4879      	ldr	r0, [pc, #484]	; (8006330 <ip4_reass+0x2f8>)
 800614c:	f005 f820 	bl	800b190 <iprintf>
 8006150:	e075      	b.n	800623e <ip4_reass+0x206>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006152:	4601      	mov	r1, r0
 8006154:	4628      	mov	r0, r5
 8006156:	f7ff feef 	bl	8005f38 <ip_reass_remove_oldest_datagram>
 800615a:	b118      	cbz	r0, 8006164 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800615c:	8823      	ldrh	r3, [r4, #0]
 800615e:	4453      	add	r3, sl
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8006160:	2b0a      	cmp	r3, #10
 8006162:	dd8d      	ble.n	8006080 <ip4_reass+0x48>
  pbuf_free(p);
 8006164:	4638      	mov	r0, r7
 8006166:	f000 fe03 	bl	8006d70 <pbuf_free>
  return NULL;
 800616a:	2500      	movs	r5, #0
 800616c:	e0d4      	b.n	8006318 <ip4_reass+0x2e0>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800616e:	68eb      	ldr	r3, [r5, #12]
 8006170:	6962      	ldr	r2, [r4, #20]
 8006172:	429a      	cmp	r2, r3
 8006174:	d108      	bne.n	8006188 <ip4_reass+0x150>
 8006176:	692b      	ldr	r3, [r5, #16]
 8006178:	69a2      	ldr	r2, [r4, #24]
 800617a:	429a      	cmp	r2, r3
 800617c:	d104      	bne.n	8006188 <ip4_reass+0x150>
 800617e:	89a2      	ldrh	r2, [r4, #12]
 8006180:	88ab      	ldrh	r3, [r5, #4]
 8006182:	429a      	cmp	r2, r3
 8006184:	f000 80dc 	beq.w	8006340 <ip4_reass+0x308>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8006188:	6824      	ldr	r4, [r4, #0]
 800618a:	e77b      	b.n	8006084 <ip4_reass+0x4c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800618c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    if (iprh->start < iprh_tmp->start) {
 8006190:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8006194:	4288      	cmp	r0, r1
 8006196:	d254      	bcs.n	8006242 <ip4_reass+0x20a>
      iprh->next_pbuf = q;
 8006198:	6032      	str	r2, [r6, #0]
      if (iprh_prev != NULL) {
 800619a:	2d00      	cmp	r5, #0
 800619c:	d04d      	beq.n	800623a <ip4_reass+0x202>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800619e:	88ea      	ldrh	r2, [r5, #6]
 80061a0:	4290      	cmp	r0, r2
 80061a2:	f0c0 8091 	bcc.w	80062c8 <ip4_reass+0x290>
 80061a6:	428b      	cmp	r3, r1
 80061a8:	f200 808e 	bhi.w	80062c8 <ip4_reass+0x290>
        if (iprh_prev->end != iprh->start) {
 80061ac:	4290      	cmp	r0, r2
        iprh_prev->next_pbuf = new_p;
 80061ae:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 80061b0:	f040 80e4 	bne.w	800637c <ip4_reass+0x344>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80061b4:	f1bb 0f00 	cmp.w	fp, #0
 80061b8:	d004      	beq.n	80061c4 <ip4_reass+0x18c>
 80061ba:	7fa3      	ldrb	r3, [r4, #30]
 80061bc:	f013 0301 	ands.w	r3, r3, #1
 80061c0:	f000 80da 	beq.w	8006378 <ip4_reass+0x340>
    if (valid) {
 80061c4:	f1b8 0f00 	cmp.w	r8, #0
 80061c8:	d159      	bne.n	800627e <ip4_reass+0x246>
          q = iprh->next_pbuf;
 80061ca:	f04f 0800 	mov.w	r8, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80061ce:	4e54      	ldr	r6, [pc, #336]	; (8006320 <ip4_reass+0x2e8>)
 80061d0:	8833      	ldrh	r3, [r6, #0]
 80061d2:	449a      	add	sl, r3
 80061d4:	f8a6 a000 	strh.w	sl, [r6]
  if (is_last) {
 80061d8:	f1bb 0f00 	cmp.w	fp, #0
 80061dc:	d107      	bne.n	80061ee <ip4_reass+0x1b6>
    u16_t datagram_len = (u16_t)(offset + len);
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	4499      	add	r9, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80061e2:	7fa3      	ldrb	r3, [r4, #30]
 80061e4:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 80061e8:	f8a4 901c 	strh.w	r9, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80061ec:	77a3      	strb	r3, [r4, #30]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80061ee:	f1b8 0f01 	cmp.w	r8, #1
 80061f2:	d1ba      	bne.n	800616a <ip4_reass+0x132>
    ipr->datagram_len += IP_HLEN;
 80061f4:	8ba3      	ldrh	r3, [r4, #28]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80061f6:	f104 011c 	add.w	r1, r4, #28
    ipr->datagram_len += IP_HLEN;
 80061fa:	3314      	adds	r3, #20
 80061fc:	83a3      	strh	r3, [r4, #28]
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80061fe:	6863      	ldr	r3, [r4, #4]
 8006200:	685d      	ldr	r5, [r3, #4]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006202:	f104 0308 	add.w	r3, r4, #8
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 8006206:	682f      	ldr	r7, [r5, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8006208:	462a      	mov	r2, r5
 800620a:	f853 0b04 	ldr.w	r0, [r3], #4
 800620e:	428b      	cmp	r3, r1
 8006210:	f842 0b04 	str.w	r0, [r2], #4
 8006214:	d1f9      	bne.n	800620a <ip4_reass+0x1d2>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 8006216:	8ba0      	ldrh	r0, [r4, #28]
 8006218:	f7fd fef0 	bl	8003ffc <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 800621c:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800621e:	8068      	strh	r0, [r5, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8006220:	71ab      	strb	r3, [r5, #6]
 8006222:	71eb      	strb	r3, [r5, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8006224:	72ab      	strb	r3, [r5, #10]
 8006226:	72eb      	strb	r3, [r5, #11]
    p = ipr->p;
 8006228:	6865      	ldr	r5, [r4, #4]
    while (r != NULL) {
 800622a:	2f00      	cmp	r7, #0
 800622c:	d157      	bne.n	80062de <ip4_reass+0x2a6>
    if (ipr == reassdatagrams) {
 800622e:	4b3d      	ldr	r3, [pc, #244]	; (8006324 <ip4_reass+0x2ec>)
 8006230:	6819      	ldr	r1, [r3, #0]
 8006232:	428c      	cmp	r4, r1
 8006234:	d165      	bne.n	8006302 <ip4_reass+0x2ca>
      ipr_prev = NULL;
 8006236:	4639      	mov	r1, r7
 8006238:	e065      	b.n	8006306 <ip4_reass+0x2ce>
        if (iprh->end > iprh_tmp->start) {
 800623a:	428b      	cmp	r3, r1
 800623c:	d844      	bhi.n	80062c8 <ip4_reass+0x290>
      ipr->p = new_p;
 800623e:	6067      	str	r7, [r4, #4]
 8006240:	e7b8      	b.n	80061b4 <ip4_reass+0x17c>
    } else if (iprh->start == iprh_tmp->start) {
 8006242:	d041      	beq.n	80062c8 <ip4_reass+0x290>
    } else if (iprh->start < iprh_tmp->end) {
 8006244:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8006248:	4282      	cmp	r2, r0
 800624a:	d83d      	bhi.n	80062c8 <ip4_reass+0x290>
      if (iprh_prev != NULL) {
 800624c:	b125      	cbz	r5, 8006258 <ip4_reass+0x220>
        if (iprh_prev->end != iprh_tmp->start) {
 800624e:	88ea      	ldrh	r2, [r5, #6]
          valid = 0;
 8006250:	428a      	cmp	r2, r1
 8006252:	bf18      	it	ne
 8006254:	f04f 0800 	movne.w	r8, #0
    q = iprh_tmp->next_pbuf;
 8006258:	f8dc 2000 	ldr.w	r2, [ip]
 800625c:	4665      	mov	r5, ip
 800625e:	e769      	b.n	8006134 <ip4_reass+0xfc>
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8006260:	88eb      	ldrh	r3, [r5, #6]
 8006262:	4283      	cmp	r3, r0
 8006264:	d906      	bls.n	8006274 <ip4_reass+0x23c>
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <ip4_reass+0x2f0>)
 8006268:	f240 12ab 	movw	r2, #427	; 0x1ab
 800626c:	4931      	ldr	r1, [pc, #196]	; (8006334 <ip4_reass+0x2fc>)
 800626e:	4830      	ldr	r0, [pc, #192]	; (8006330 <ip4_reass+0x2f8>)
 8006270:	f004 ff8e 	bl	800b190 <iprintf>
      iprh_prev->next_pbuf = new_p;
 8006274:	602f      	str	r7, [r5, #0]
      if (iprh_prev->end != iprh->start) {
 8006276:	88ea      	ldrh	r2, [r5, #6]
 8006278:	88b3      	ldrh	r3, [r6, #4]
 800627a:	429a      	cmp	r2, r3
 800627c:	e798      	b.n	80061b0 <ip4_reass+0x178>
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d0a2      	beq.n	80061ca <ip4_reass+0x192>
 8006284:	6859      	ldr	r1, [r3, #4]
 8006286:	888b      	ldrh	r3, [r1, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d19e      	bne.n	80061ca <ip4_reass+0x192>
        q = iprh->next_pbuf;
 800628c:	6833      	ldr	r3, [r6, #0]
        while (q != NULL) {
 800628e:	b99b      	cbnz	r3, 80062b8 <ip4_reass+0x280>
          LWIP_ASSERT("sanity check",
 8006290:	42b1      	cmp	r1, r6
 8006292:	d106      	bne.n	80062a2 <ip4_reass+0x26a>
 8006294:	4b24      	ldr	r3, [pc, #144]	; (8006328 <ip4_reass+0x2f0>)
 8006296:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800629a:	4927      	ldr	r1, [pc, #156]	; (8006338 <ip4_reass+0x300>)
 800629c:	4824      	ldr	r0, [pc, #144]	; (8006330 <ip4_reass+0x2f8>)
 800629e:	f004 ff77 	bl	800b190 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80062a2:	6833      	ldr	r3, [r6, #0]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d092      	beq.n	80061ce <ip4_reass+0x196>
 80062a8:	4b1f      	ldr	r3, [pc, #124]	; (8006328 <ip4_reass+0x2f0>)
 80062aa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80062ae:	4923      	ldr	r1, [pc, #140]	; (800633c <ip4_reass+0x304>)
 80062b0:	481f      	ldr	r0, [pc, #124]	; (8006330 <ip4_reass+0x2f8>)
 80062b2:	f004 ff6d 	bl	800b190 <iprintf>
 80062b6:	e78a      	b.n	80061ce <ip4_reass+0x196>
          iprh = (struct ip_reass_helper*)q->payload;
 80062b8:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 80062ba:	88f0      	ldrh	r0, [r6, #6]
 80062bc:	8893      	ldrh	r3, [r2, #4]
 80062be:	4298      	cmp	r0, r3
 80062c0:	d183      	bne.n	80061ca <ip4_reass+0x192>
          q = iprh->next_pbuf;
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	4616      	mov	r6, r2
 80062c6:	e7e2      	b.n	800628e <ip4_reass+0x256>
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80062c8:	4638      	mov	r0, r7
 80062ca:	f000 ff07 	bl	80070dc <pbuf_clen>
 80062ce:	4a14      	ldr	r2, [pc, #80]	; (8006320 <ip4_reass+0x2e8>)
 80062d0:	8813      	ldrh	r3, [r2, #0]
 80062d2:	1a18      	subs	r0, r3, r0
 80062d4:	8010      	strh	r0, [r2, #0]
  pbuf_free(new_p);
 80062d6:	4638      	mov	r0, r7
 80062d8:	f000 fd4a 	bl	8006d70 <pbuf_free>
 80062dc:	e742      	b.n	8006164 <ip4_reass+0x12c>
      iprh = (struct ip_reass_helper*)r->payload;
 80062de:	f8d7 8004 	ldr.w	r8, [r7, #4]
      pbuf_header(r, -IP_HLEN);
 80062e2:	f06f 0113 	mvn.w	r1, #19
 80062e6:	4638      	mov	r0, r7
 80062e8:	f000 fd3c 	bl	8006d64 <pbuf_header>
      pbuf_cat(p, r);
 80062ec:	4639      	mov	r1, r7
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 ff18 	bl	8007124 <pbuf_cat>
      r = iprh->next_pbuf;
 80062f4:	f8d8 7000 	ldr.w	r7, [r8]
 80062f8:	e797      	b.n	800622a <ip4_reass+0x1f2>
        if (ipr_prev->next == ipr) {
 80062fa:	680b      	ldr	r3, [r1, #0]
 80062fc:	429c      	cmp	r4, r3
 80062fe:	d002      	beq.n	8006306 <ip4_reass+0x2ce>
 8006300:	4619      	mov	r1, r3
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8006302:	2900      	cmp	r1, #0
 8006304:	d1f9      	bne.n	80062fa <ip4_reass+0x2c2>
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8006306:	4620      	mov	r0, r4
 8006308:	f7ff fd80 	bl	8005e0c <ip_reass_dequeue_datagram>
    ip_reass_pbufcount -= pbuf_clen(p);
 800630c:	4628      	mov	r0, r5
 800630e:	f000 fee5 	bl	80070dc <pbuf_clen>
 8006312:	8833      	ldrh	r3, [r6, #0]
 8006314:	1a18      	subs	r0, r3, r0
 8006316:	8030      	strh	r0, [r6, #0]
}
 8006318:	4628      	mov	r0, r5
 800631a:	b003      	add	sp, #12
 800631c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006320:	20003eec 	.word	0x20003eec
 8006324:	20003ef0 	.word	0x20003ef0
 8006328:	0800c95d 	.word	0x0800c95d
 800632c:	0800c8f7 	.word	0x0800c8f7
 8006330:	0800c106 	.word	0x0800c106
 8006334:	0800c8d9 	.word	0x0800c8d9
 8006338:	0800c92e 	.word	0x0800c92e
 800633c:	0800c93b 	.word	0x0800c93b
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006340:	88e8      	ldrh	r0, [r5, #6]
 8006342:	f7fd fe5b 	bl	8003ffc <lwip_htons>
 8006346:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800634a:	2800      	cmp	r0, #0
 800634c:	f47f aec2 	bne.w	80060d4 <ip4_reass+0x9c>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8006350:	89e0      	ldrh	r0, [r4, #14]
 8006352:	f7fd fe53 	bl	8003ffc <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8006356:	f3c0 000c 	ubfx	r0, r0, #0, #13
 800635a:	2800      	cmp	r0, #0
 800635c:	f43f aeba 	beq.w	80060d4 <ip4_reass+0x9c>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8006360:	462b      	mov	r3, r5
 8006362:	f104 0208 	add.w	r2, r4, #8
 8006366:	f105 0114 	add.w	r1, r5, #20
 800636a:	f853 0b04 	ldr.w	r0, [r3], #4
 800636e:	428b      	cmp	r3, r1
 8006370:	f842 0b04 	str.w	r0, [r2], #4
 8006374:	d1f9      	bne.n	800636a <ip4_reass+0x332>
 8006376:	e6ad      	b.n	80060d4 <ip4_reass+0x9c>
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8006378:	4698      	mov	r8, r3
 800637a:	e728      	b.n	80061ce <ip4_reass+0x196>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800637c:	f1bb 0f00 	cmp.w	fp, #0
 8006380:	f43f af23 	beq.w	80061ca <ip4_reass+0x192>
 8006384:	f04f 0800 	mov.w	r8, #0
 8006388:	e717      	b.n	80061ba <ip4_reass+0x182>
 800638a:	bf00      	nop

0800638c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800638c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8006390:	f8b1 8026 	ldrh.w	r8, [r1, #38]	; 0x26
 8006394:	2308      	movs	r3, #8
{
 8006396:	b08b      	sub	sp, #44	; 0x2c
 8006398:	4607      	mov	r7, r0
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800639a:	f1a8 0814 	sub.w	r8, r8, #20
{
 800639e:	468b      	mov	fp, r1
 80063a0:	9208      	str	r2, [sp, #32]
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 80063a2:	fb98 f8f3 	sdiv	r8, r8, r3
 80063a6:	fa1f f388 	uxth.w	r3, r8
 80063aa:	9306      	str	r3, [sp, #24]
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 80063ac:	6843      	ldr	r3, [r0, #4]
  iphdr = original_iphdr;
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80063ae:	781e      	ldrb	r6, [r3, #0]
  original_iphdr = (struct ip_hdr *)p->payload;
 80063b0:	9302      	str	r3, [sp, #8]
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 80063b2:	f006 060f 	and.w	r6, r6, #15
 80063b6:	00b6      	lsls	r6, r6, #2
 80063b8:	2e14      	cmp	r6, #20
 80063ba:	d00b      	beq.n	80063d4 <ip4_frag+0x48>
 80063bc:	4b5a      	ldr	r3, [pc, #360]	; (8006528 <ip4_frag+0x19c>)
 80063be:	f240 22e1 	movw	r2, #737	; 0x2e1
 80063c2:	495a      	ldr	r1, [pc, #360]	; (800652c <ip4_frag+0x1a0>)

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
  ofo = tmp & IP_OFFMASK;
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80063c4:	485a      	ldr	r0, [pc, #360]	; (8006530 <ip4_frag+0x1a4>)
 80063c6:	f004 fee3 	bl	800b190 <iprintf>
 80063ca:	f06f 0005 	mvn.w	r0, #5
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
}
 80063ce:	b00b      	add	sp, #44	; 0x2c
 80063d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80063d4:	9b02      	ldr	r3, [sp, #8]
 80063d6:	88d8      	ldrh	r0, [r3, #6]
 80063d8:	f7fd fe10 	bl	8003ffc <lwip_htons>
  ofo = tmp & IP_OFFMASK;
 80063dc:	f3c0 030c 	ubfx	r3, r0, #0, #13
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80063e0:	f410 5400 	ands.w	r4, r0, #8192	; 0x2000
  ofo = tmp & IP_OFFMASK;
 80063e4:	9304      	str	r3, [sp, #16]
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80063e6:	d004      	beq.n	80063f2 <ip4_frag+0x66>
 80063e8:	4b4f      	ldr	r3, [pc, #316]	; (8006528 <ip4_frag+0x19c>)
 80063ea:	f240 22e6 	movw	r2, #742	; 0x2e6
 80063ee:	4951      	ldr	r1, [pc, #324]	; (8006534 <ip4_frag+0x1a8>)
 80063f0:	e7e8      	b.n	80063c4 <ip4_frag+0x38>
  left = p->tot_len - IP_HLEN;
 80063f2:	893d      	ldrh	r5, [r7, #8]
    fragsize = LWIP_MIN(left, nfb * 8);
 80063f4:	fa1f f888 	uxth.w	r8, r8
  left = p->tot_len - IP_HLEN;
 80063f8:	3d14      	subs	r5, #20
    fragsize = LWIP_MIN(left, nfb * 8);
 80063fa:	ea4f 03c8 	mov.w	r3, r8, lsl #3
  left = p->tot_len - IP_HLEN;
 80063fe:	b2ad      	uxth	r5, r5
    fragsize = LWIP_MIN(left, nfb * 8);
 8006400:	9307      	str	r3, [sp, #28]
  while (left) {
 8006402:	b90d      	cbnz	r5, 8006408 <ip4_frag+0x7c>
  return ERR_OK;
 8006404:	4628      	mov	r0, r5
 8006406:	e7e2      	b.n	80063ce <ip4_frag+0x42>
    fragsize = LWIP_MIN(left, nfb * 8);
 8006408:	9b07      	ldr	r3, [sp, #28]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800640a:	2200      	movs	r2, #0
 800640c:	2114      	movs	r1, #20
 800640e:	2002      	movs	r0, #2
    fragsize = LWIP_MIN(left, nfb * 8);
 8006410:	42ab      	cmp	r3, r5
 8006412:	bfa8      	it	ge
 8006414:	462b      	movge	r3, r5
 8006416:	b29b      	uxth	r3, r3
 8006418:	9305      	str	r3, [sp, #20]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800641a:	f000 fd13 	bl	8006e44 <pbuf_alloc>
    if (rambuf == NULL) {
 800641e:	4680      	mov	r8, r0
 8006420:	b370      	cbz	r0, 8006480 <ip4_frag+0xf4>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8006422:	897b      	ldrh	r3, [r7, #10]
 8006424:	2b13      	cmp	r3, #19
 8006426:	d806      	bhi.n	8006436 <ip4_frag+0xaa>
 8006428:	4b3f      	ldr	r3, [pc, #252]	; (8006528 <ip4_frag+0x19c>)
 800642a:	f240 3209 	movw	r2, #777	; 0x309
 800642e:	4942      	ldr	r1, [pc, #264]	; (8006538 <ip4_frag+0x1ac>)
 8006430:	483f      	ldr	r0, [pc, #252]	; (8006530 <ip4_frag+0x1a4>)
 8006432:	f004 fead 	bl	800b190 <iprintf>
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8006436:	9b02      	ldr	r3, [sp, #8]
 8006438:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800643c:	4619      	mov	r1, r3
 800643e:	3114      	adds	r1, #20
 8006440:	f853 0b04 	ldr.w	r0, [r3], #4
 8006444:	428b      	cmp	r3, r1
 8006446:	f842 0b04 	str.w	r0, [r2], #4
 800644a:	d1f9      	bne.n	8006440 <ip4_frag+0xb4>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800644c:	f8d8 3004 	ldr.w	r3, [r8, #4]
    left_to_copy = fragsize;
 8006450:	f8dd 9014 	ldr.w	r9, [sp, #20]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8006454:	9303      	str	r3, [sp, #12]
    while (left_to_copy) {
 8006456:	f1b9 0f00 	cmp.w	r9, #0
 800645a:	d037      	beq.n	80064cc <ip4_frag+0x140>
      u16_t plen = p->len - poff;
 800645c:	897c      	ldrh	r4, [r7, #10]
 800645e:	1ba4      	subs	r4, r4, r6
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8006460:	b2a4      	uxth	r4, r4
 8006462:	454c      	cmp	r4, r9
 8006464:	bf28      	it	cs
 8006466:	464c      	movcs	r4, r9
      if (!newpbuflen) {
 8006468:	b914      	cbnz	r4, 8006470 <ip4_frag+0xe4>
        p = p->next;
 800646a:	683f      	ldr	r7, [r7, #0]
        poff = 0;
 800646c:	2600      	movs	r6, #0
 800646e:	e7f2      	b.n	8006456 <ip4_frag+0xca>
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8006470:	2005      	movs	r0, #5
 8006472:	f000 fadb 	bl	8006a2c <memp_malloc>
      if (pcr == NULL) {
 8006476:	4682      	mov	sl, r0
 8006478:	b928      	cbnz	r0, 8006486 <ip4_frag+0xfa>
        pbuf_free(rambuf);
 800647a:	4640      	mov	r0, r8
 800647c:	f000 fc78 	bl	8006d70 <pbuf_free>
  return ERR_MEM;
 8006480:	f04f 30ff 	mov.w	r0, #4294967295
 8006484:	e7a3      	b.n	80063ce <ip4_frag+0x42>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8006486:	9401      	str	r4, [sp, #4]
 8006488:	2202      	movs	r2, #2
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4621      	mov	r1, r4
 800648e:	4433      	add	r3, r6
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4603      	mov	r3, r0
 8006494:	2004      	movs	r0, #4
 8006496:	f000 fc2d 	bl	8006cf4 <pbuf_alloced_custom>
      if (newpbuf == NULL) {
 800649a:	b918      	cbnz	r0, 80064a4 <ip4_frag+0x118>
        ip_frag_free_pbuf_custom_ref(pcr);
 800649c:	4650      	mov	r0, sl
 800649e:	f7ff fd87 	bl	8005fb0 <ip_frag_free_pbuf_custom_ref>
 80064a2:	e7ea      	b.n	800647a <ip4_frag+0xee>
 80064a4:	9009      	str	r0, [sp, #36]	; 0x24
      left_to_copy -= newpbuflen;
 80064a6:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 fe1e 	bl	80070ec <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80064b0:	4b22      	ldr	r3, [pc, #136]	; (800653c <ip4_frag+0x1b0>)
      left_to_copy -= newpbuflen;
 80064b2:	fa1f f989 	uxth.w	r9, r9
      pcr->original = p;
 80064b6:	f8ca 7014 	str.w	r7, [sl, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80064ba:	f8ca 3010 	str.w	r3, [sl, #16]
      pbuf_cat(rambuf, newpbuf);
 80064be:	4640      	mov	r0, r8
 80064c0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064c2:	f000 fe2f 	bl	8007124 <pbuf_cat>
      if (left_to_copy) {
 80064c6:	f1b9 0f00 	cmp.w	r9, #0
 80064ca:	d1ce      	bne.n	800646a <ip4_frag+0xde>
    tmp = (IP_OFFMASK & (ofo));
 80064cc:	9b04      	ldr	r3, [sp, #16]
    poff += newpbuflen;
 80064ce:	4426      	add	r6, r4
    tmp = (IP_OFFMASK & (ofo));
 80064d0:	f3c3 000c 	ubfx	r0, r3, #0, #13
    last = (left <= netif->mtu - IP_HLEN);
 80064d4:	f8bb 3026 	ldrh.w	r3, [fp, #38]	; 0x26
    poff += newpbuflen;
 80064d8:	b2b6      	uxth	r6, r6
    last = (left <= netif->mtu - IP_HLEN);
 80064da:	3b13      	subs	r3, #19
    if (!last) {
 80064dc:	429d      	cmp	r5, r3
      tmp = tmp | IP_MF;
 80064de:	bfa8      	it	ge
 80064e0:	f440 5000 	orrge.w	r0, r0, #8192	; 0x2000
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80064e4:	f7fd fd8a 	bl	8003ffc <lwip_htons>
 80064e8:	9b03      	ldr	r3, [sp, #12]
 80064ea:	80d8      	strh	r0, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80064ec:	9b05      	ldr	r3, [sp, #20]
 80064ee:	f103 0014 	add.w	r0, r3, #20
 80064f2:	b280      	uxth	r0, r0
 80064f4:	f7fd fd82 	bl	8003ffc <lwip_htons>
 80064f8:	9b03      	ldr	r3, [sp, #12]
    IPH_CHKSUM_SET(iphdr, 0);
 80064fa:	9a03      	ldr	r2, [sp, #12]
    netif->output(netif, rambuf, dest);
 80064fc:	4641      	mov	r1, r8
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 80064fe:	8058      	strh	r0, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8006500:	2300      	movs	r3, #0
    netif->output(netif, rambuf, dest);
 8006502:	4658      	mov	r0, fp
    IPH_CHKSUM_SET(iphdr, 0);
 8006504:	7293      	strb	r3, [r2, #10]
 8006506:	72d3      	strb	r3, [r2, #11]
    netif->output(netif, rambuf, dest);
 8006508:	f8db 3014 	ldr.w	r3, [fp, #20]
 800650c:	9a08      	ldr	r2, [sp, #32]
 800650e:	4798      	blx	r3
    pbuf_free(rambuf);
 8006510:	4640      	mov	r0, r8
 8006512:	f000 fc2d 	bl	8006d70 <pbuf_free>
    left -= fragsize;
 8006516:	9b05      	ldr	r3, [sp, #20]
    ofo += nfb;
 8006518:	9a06      	ldr	r2, [sp, #24]
    left -= fragsize;
 800651a:	1aed      	subs	r5, r5, r3
    ofo += nfb;
 800651c:	9b04      	ldr	r3, [sp, #16]
 800651e:	4413      	add	r3, r2
    left -= fragsize;
 8006520:	b2ad      	uxth	r5, r5
    ofo += nfb;
 8006522:	b29b      	uxth	r3, r3
 8006524:	9304      	str	r3, [sp, #16]
 8006526:	e76c      	b.n	8006402 <ip4_frag+0x76>
 8006528:	0800c95d 	.word	0x0800c95d
 800652c:	0800c878 	.word	0x0800c878
 8006530:	0800c106 	.word	0x0800c106
 8006534:	0800c89f 	.word	0x0800c89f
 8006538:	0800c8b9 	.word	0x0800c8b9
 800653c:	08005fdd 	.word	0x08005fdd

08006540 <mem_init>:

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006540:	4b12      	ldr	r3, [pc, #72]	; (800658c <mem_init+0x4c>)
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
  mem->next = MEM_SIZE_ALIGNED;
  mem->prev = 0;
 8006542:	2100      	movs	r1, #0
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006544:	4a12      	ldr	r2, [pc, #72]	; (8006590 <mem_init+0x50>)
 8006546:	f023 0303 	bic.w	r3, r3, #3
{
 800654a:	b510      	push	{r4, lr}
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800654c:	6013      	str	r3, [r2, #0]
  mem->next = MEM_SIZE_ALIGNED;
 800654e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
  mem->prev = 0;
 8006552:	8059      	strh	r1, [r3, #2]
  mem->used = 0;
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006554:	1898      	adds	r0, r3, r2
  mem->used = 0;
 8006556:	7119      	strb	r1, [r3, #4]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 8006558:	490e      	ldr	r1, [pc, #56]	; (8006594 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 800655a:	801a      	strh	r2, [r3, #0]
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800655c:	6008      	str	r0, [r1, #0]
  ram_end->used = 1;
 800655e:	2101      	movs	r1, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8006560:	f8a3 2640 	strh.w	r2, [r3, #1600]	; 0x640
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006564:	f8a3 2642 	strh.w	r2, [r3, #1602]	; 0x642

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006568:	4a0b      	ldr	r2, [pc, #44]	; (8006598 <mem_init+0x58>)
  ram_end->used = 1;
 800656a:	f883 1644 	strb.w	r1, [r3, #1604]	; 0x644

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800656e:	480b      	ldr	r0, [pc, #44]	; (800659c <mem_init+0x5c>)
  lfree = (struct mem *)(void *)ram;
 8006570:	6013      	str	r3, [r2, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8006572:	f003 ff85 	bl	800a480 <sys_mutex_new>
 8006576:	b140      	cbz	r0, 800658a <mem_init+0x4a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006578:	4b09      	ldr	r3, [pc, #36]	; (80065a0 <mem_init+0x60>)
 800657a:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800657e:	4909      	ldr	r1, [pc, #36]	; (80065a4 <mem_init+0x64>)
 8006580:	4809      	ldr	r0, [pc, #36]	; (80065a8 <mem_init+0x68>)
  }
}
 8006582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8006586:	f004 be03 	b.w	800b190 <iprintf>
 800658a:	bd10      	pop	{r4, pc}
 800658c:	20003fe3 	.word	0x20003fe3
 8006590:	20003efc 	.word	0x20003efc
 8006594:	20003f00 	.word	0x20003f00
 8006598:	20003ef4 	.word	0x20003ef4
 800659c:	20003ef8 	.word	0x20003ef8
 80065a0:	0800cad3 	.word	0x0800cad3
 80065a4:	0800cb02 	.word	0x0800cb02
 80065a8:	0800c106 	.word	0x0800c106

080065ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80065b0:	4604      	mov	r4, r0
 80065b2:	2800      	cmp	r0, #0
 80065b4:	f000 8097 	beq.w	80066e6 <mem_free+0x13a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 80065b8:	0783      	lsls	r3, r0, #30
 80065ba:	d006      	beq.n	80065ca <mem_free+0x1e>
 80065bc:	4b4b      	ldr	r3, [pc, #300]	; (80066ec <mem_free+0x140>)
 80065be:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 80065c2:	494b      	ldr	r1, [pc, #300]	; (80066f0 <mem_free+0x144>)
 80065c4:	484b      	ldr	r0, [pc, #300]	; (80066f4 <mem_free+0x148>)
 80065c6:	f004 fde3 	bl	800b190 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80065ca:	4f4b      	ldr	r7, [pc, #300]	; (80066f8 <mem_free+0x14c>)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	429c      	cmp	r4, r3
 80065d0:	d303      	bcc.n	80065da <mem_free+0x2e>
 80065d2:	4b4a      	ldr	r3, [pc, #296]	; (80066fc <mem_free+0x150>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	429c      	cmp	r4, r3
 80065d8:	d306      	bcc.n	80065e8 <mem_free+0x3c>
 80065da:	4b44      	ldr	r3, [pc, #272]	; (80066ec <mem_free+0x140>)
 80065dc:	f240 12af 	movw	r2, #431	; 0x1af
 80065e0:	4947      	ldr	r1, [pc, #284]	; (8006700 <mem_free+0x154>)
 80065e2:	4844      	ldr	r0, [pc, #272]	; (80066f4 <mem_free+0x148>)
 80065e4:	f004 fdd4 	bl	800b190 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	429c      	cmp	r4, r3
 80065ec:	d304      	bcc.n	80065f8 <mem_free+0x4c>
 80065ee:	4b43      	ldr	r3, [pc, #268]	; (80066fc <mem_free+0x150>)
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	4698      	mov	r8, r3
 80065f4:	4294      	cmp	r4, r2
 80065f6:	d305      	bcc.n	8006604 <mem_free+0x58>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 80065f8:	f003 ff6a 	bl	800a4d0 <sys_arch_protect>
  plug_holes(mem);
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 80065fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    SYS_ARCH_UNPROTECT(lev);
 8006600:	f003 bf72 	b.w	800a4e8 <sys_arch_unprotect>
  LWIP_MEM_FREE_PROTECT();
 8006604:	483f      	ldr	r0, [pc, #252]	; (8006704 <mem_free+0x158>)
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8006606:	f1a4 0508 	sub.w	r5, r4, #8
  LWIP_MEM_FREE_PROTECT();
 800660a:	f003 ff48 	bl	800a49e <sys_mutex_lock>
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800660e:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006612:	b933      	cbnz	r3, 8006622 <mem_free+0x76>
 8006614:	4b35      	ldr	r3, [pc, #212]	; (80066ec <mem_free+0x140>)
 8006616:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800661a:	493b      	ldr	r1, [pc, #236]	; (8006708 <mem_free+0x15c>)
 800661c:	4835      	ldr	r0, [pc, #212]	; (80066f4 <mem_free+0x148>)
 800661e:	f004 fdb7 	bl	800b190 <iprintf>
  mem->used = 0;
 8006622:	2300      	movs	r3, #0
  if (mem < lfree) {
 8006624:	4e39      	ldr	r6, [pc, #228]	; (800670c <mem_free+0x160>)
  mem->used = 0;
 8006626:	f804 3c04 	strb.w	r3, [r4, #-4]
  if (mem < lfree) {
 800662a:	6833      	ldr	r3, [r6, #0]
 800662c:	429d      	cmp	r5, r3
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800662e:	683b      	ldr	r3, [r7, #0]
    lfree = mem;
 8006630:	bf38      	it	cc
 8006632:	6035      	strcc	r5, [r6, #0]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006634:	429d      	cmp	r5, r3
 8006636:	d206      	bcs.n	8006646 <mem_free+0x9a>
 8006638:	4b2c      	ldr	r3, [pc, #176]	; (80066ec <mem_free+0x140>)
 800663a:	f240 125d 	movw	r2, #349	; 0x15d
 800663e:	4934      	ldr	r1, [pc, #208]	; (8006710 <mem_free+0x164>)
 8006640:	482c      	ldr	r0, [pc, #176]	; (80066f4 <mem_free+0x148>)
 8006642:	f004 fda5 	bl	800b190 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006646:	f8d8 3000 	ldr.w	r3, [r8]
 800664a:	429d      	cmp	r5, r3
 800664c:	d306      	bcc.n	800665c <mem_free+0xb0>
 800664e:	4b27      	ldr	r3, [pc, #156]	; (80066ec <mem_free+0x140>)
 8006650:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8006654:	492f      	ldr	r1, [pc, #188]	; (8006714 <mem_free+0x168>)
 8006656:	4827      	ldr	r0, [pc, #156]	; (80066f4 <mem_free+0x148>)
 8006658:	f004 fd9a 	bl	800b190 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800665c:	f814 3c04 	ldrb.w	r3, [r4, #-4]
 8006660:	b133      	cbz	r3, 8006670 <mem_free+0xc4>
 8006662:	4b22      	ldr	r3, [pc, #136]	; (80066ec <mem_free+0x140>)
 8006664:	f240 125f 	movw	r2, #351	; 0x15f
 8006668:	492b      	ldr	r1, [pc, #172]	; (8006718 <mem_free+0x16c>)
 800666a:	4822      	ldr	r0, [pc, #136]	; (80066f4 <mem_free+0x148>)
 800666c:	f004 fd90 	bl	800b190 <iprintf>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006670:	f834 3c08 	ldrh.w	r3, [r4, #-8]
 8006674:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8006678:	d906      	bls.n	8006688 <mem_free+0xdc>
 800667a:	4b1c      	ldr	r3, [pc, #112]	; (80066ec <mem_free+0x140>)
 800667c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8006680:	4926      	ldr	r1, [pc, #152]	; (800671c <mem_free+0x170>)
 8006682:	481c      	ldr	r0, [pc, #112]	; (80066f4 <mem_free+0x148>)
 8006684:	f004 fd84 	bl	800b190 <iprintf>
  nmem = (struct mem *)(void *)&ram[mem->next];
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 800668e:	185a      	adds	r2, r3, r1
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006690:	4295      	cmp	r5, r2
 8006692:	d011      	beq.n	80066b8 <mem_free+0x10c>
 8006694:	7910      	ldrb	r0, [r2, #4]
 8006696:	b978      	cbnz	r0, 80066b8 <mem_free+0x10c>
 8006698:	f8d8 0000 	ldr.w	r0, [r8]
 800669c:	4282      	cmp	r2, r0
 800669e:	d00b      	beq.n	80066b8 <mem_free+0x10c>
    if (lfree == nmem) {
 80066a0:	6830      	ldr	r0, [r6, #0]
 80066a2:	4282      	cmp	r2, r0
    mem->next = nmem->next;
 80066a4:	5a5a      	ldrh	r2, [r3, r1]
 80066a6:	f824 2c08 	strh.w	r2, [r4, #-8]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80066aa:	5a5a      	ldrh	r2, [r3, r1]
 80066ac:	eba5 0103 	sub.w	r1, r5, r3
      lfree = mem;
 80066b0:	bf08      	it	eq
 80066b2:	6035      	streq	r5, [r6, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 80066b4:	441a      	add	r2, r3
 80066b6:	8051      	strh	r1, [r2, #2]
  pmem = (struct mem *)(void *)&ram[mem->prev];
 80066b8:	f834 2c06 	ldrh.w	r2, [r4, #-6]
 80066bc:	1899      	adds	r1, r3, r2
  if (pmem != mem && pmem->used == 0) {
 80066be:	428d      	cmp	r5, r1
 80066c0:	d00c      	beq.n	80066dc <mem_free+0x130>
 80066c2:	7908      	ldrb	r0, [r1, #4]
 80066c4:	b950      	cbnz	r0, 80066dc <mem_free+0x130>
    if (lfree == mem) {
 80066c6:	6830      	ldr	r0, [r6, #0]
 80066c8:	4285      	cmp	r5, r0
      lfree = pmem;
 80066ca:	bf08      	it	eq
 80066cc:	6031      	streq	r1, [r6, #0]
    pmem->next = mem->next;
 80066ce:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80066d2:	5299      	strh	r1, [r3, r2]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 80066d4:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80066d8:	440b      	add	r3, r1
 80066da:	805a      	strh	r2, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 80066dc:	4809      	ldr	r0, [pc, #36]	; (8006704 <mem_free+0x158>)
}
 80066de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_MEM_FREE_UNPROTECT();
 80066e2:	f003 bee1 	b.w	800a4a8 <sys_mutex_unlock>
 80066e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ea:	bf00      	nop
 80066ec:	0800cad3 	.word	0x0800cad3
 80066f0:	0800ca11 	.word	0x0800ca11
 80066f4:	0800c106 	.word	0x0800c106
 80066f8:	20003efc 	.word	0x20003efc
 80066fc:	20003f00 	.word	0x20003f00
 8006700:	0800ca32 	.word	0x0800ca32
 8006704:	20003ef8 	.word	0x20003ef8
 8006708:	0800ca49 	.word	0x0800ca49
 800670c:	20003ef4 	.word	0x20003ef4
 8006710:	0800ca5d 	.word	0x0800ca5d
 8006714:	0800ca74 	.word	0x0800ca74
 8006718:	0800ca8e 	.word	0x0800ca8e
 800671c:	0800caa9 	.word	0x0800caa9

08006720 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 8006720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8006724:	3103      	adds	r1, #3
 8006726:	f64f 75fc 	movw	r5, #65532	; 0xfffc
{
 800672a:	4604      	mov	r4, r0
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800672c:	400d      	ands	r5, r1

  if (newsize < MIN_SIZE_ALIGNED) {
 800672e:	2d0b      	cmp	r5, #11
 8006730:	d904      	bls.n	800673c <mem_trim+0x1c>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 8006732:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 8006736:	d902      	bls.n	800673e <mem_trim+0x1e>
    return NULL;
 8006738:	2400      	movs	r4, #0
 800673a:	e01c      	b.n	8006776 <mem_trim+0x56>
    newsize = MIN_SIZE_ALIGNED;
 800673c:	250c      	movs	r5, #12
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800673e:	4b36      	ldr	r3, [pc, #216]	; (8006818 <mem_trim+0xf8>)
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	4698      	mov	r8, r3
 8006744:	42a2      	cmp	r2, r4
 8006746:	d803      	bhi.n	8006750 <mem_trim+0x30>
 8006748:	4b34      	ldr	r3, [pc, #208]	; (800681c <mem_trim+0xfc>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	429c      	cmp	r4, r3
 800674e:	d306      	bcc.n	800675e <mem_trim+0x3e>
 8006750:	4b33      	ldr	r3, [pc, #204]	; (8006820 <mem_trim+0x100>)
 8006752:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006756:	4933      	ldr	r1, [pc, #204]	; (8006824 <mem_trim+0x104>)
 8006758:	4833      	ldr	r0, [pc, #204]	; (8006828 <mem_trim+0x108>)
 800675a:	f004 fd19 	bl	800b190 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800675e:	f8d8 3000 	ldr.w	r3, [r8]
 8006762:	429c      	cmp	r4, r3
 8006764:	d303      	bcc.n	800676e <mem_trim+0x4e>
 8006766:	4a2d      	ldr	r2, [pc, #180]	; (800681c <mem_trim+0xfc>)
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	4294      	cmp	r4, r2
 800676c:	d306      	bcc.n	800677c <mem_trim+0x5c>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800676e:	f003 feaf 	bl	800a4d0 <sys_arch_protect>
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8006772:	f003 feb9 	bl	800a4e8 <sys_arch_unprotect>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8006776:	4620      	mov	r0, r4
 8006778:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800677c:	f1a4 0608 	sub.w	r6, r4, #8
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006780:	f834 7c08 	ldrh.w	r7, [r4, #-8]
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006784:	1af6      	subs	r6, r6, r3
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8006786:	3f08      	subs	r7, #8
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8006788:	b2b6      	uxth	r6, r6
  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800678a:	1bbf      	subs	r7, r7, r6
 800678c:	b2bf      	uxth	r7, r7
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800678e:	42af      	cmp	r7, r5
 8006790:	d219      	bcs.n	80067c6 <mem_trim+0xa6>
 8006792:	4b23      	ldr	r3, [pc, #140]	; (8006820 <mem_trim+0x100>)
 8006794:	f240 2206 	movw	r2, #518	; 0x206
 8006798:	4924      	ldr	r1, [pc, #144]	; (800682c <mem_trim+0x10c>)
 800679a:	4823      	ldr	r0, [pc, #140]	; (8006828 <mem_trim+0x108>)
 800679c:	f004 fcf8 	bl	800b190 <iprintf>
 80067a0:	e7ca      	b.n	8006738 <mem_trim+0x18>
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80067a2:	f105 0214 	add.w	r2, r5, #20
 80067a6:	42ba      	cmp	r2, r7
 80067a8:	d831      	bhi.n	800680e <mem_trim+0xee>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067aa:	f106 0208 	add.w	r2, r6, #8
    if (mem2 < lfree) {
 80067ae:	4820      	ldr	r0, [pc, #128]	; (8006830 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067b0:	4415      	add	r5, r2
    if (mem2 < lfree) {
 80067b2:	6807      	ldr	r7, [r0, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067b4:	b2ad      	uxth	r5, r5
    mem2 = (struct mem *)(void *)&ram[ptr2];
 80067b6:	195a      	adds	r2, r3, r5
    if (mem2 < lfree) {
 80067b8:	42ba      	cmp	r2, r7
      lfree = mem2;
 80067ba:	bf38      	it	cc
 80067bc:	6002      	strcc	r2, [r0, #0]
    mem2->used = 0;
 80067be:	2000      	movs	r0, #0
 80067c0:	7110      	strb	r0, [r2, #4]
    mem2->next = mem->next;
 80067c2:	5359      	strh	r1, [r3, r5]
 80067c4:	e01a      	b.n	80067fc <mem_trim+0xdc>
  if (newsize == size) {
 80067c6:	d0d6      	beq.n	8006776 <mem_trim+0x56>
  LWIP_MEM_FREE_PROTECT();
 80067c8:	481a      	ldr	r0, [pc, #104]	; (8006834 <mem_trim+0x114>)
 80067ca:	f003 fe68 	bl	800a49e <sys_mutex_lock>
  mem2 = (struct mem *)(void *)&ram[mem->next];
 80067ce:	f8d8 3000 	ldr.w	r3, [r8]
 80067d2:	f834 1c08 	ldrh.w	r1, [r4, #-8]
 80067d6:	1858      	adds	r0, r3, r1
  if (mem2->used == 0) {
 80067d8:	7902      	ldrb	r2, [r0, #4]
 80067da:	2a00      	cmp	r2, #0
 80067dc:	d1e1      	bne.n	80067a2 <mem_trim+0x82>
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067de:	f106 0208 	add.w	r2, r6, #8
    next = mem2->next;
 80067e2:	5a5f      	ldrh	r7, [r3, r1]
    if (lfree == mem2) {
 80067e4:	4912      	ldr	r1, [pc, #72]	; (8006830 <mem_trim+0x110>)
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067e6:	4415      	add	r5, r2
    if (lfree == mem2) {
 80067e8:	680a      	ldr	r2, [r1, #0]
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80067ea:	b2ad      	uxth	r5, r5
    if (lfree == mem2) {
 80067ec:	4290      	cmp	r0, r2
 80067ee:	eb03 0205 	add.w	r2, r3, r5
      lfree = (struct mem *)(void *)&ram[ptr2];
 80067f2:	bf08      	it	eq
 80067f4:	600a      	streq	r2, [r1, #0]
    mem2->used = 0;
 80067f6:	2100      	movs	r1, #0
 80067f8:	7111      	strb	r1, [r2, #4]
    mem2->next = next;
 80067fa:	535f      	strh	r7, [r3, r5]
    mem2->prev = ptr;
 80067fc:	8056      	strh	r6, [r2, #2]
    mem->next = ptr2;
 80067fe:	f824 5c08 	strh.w	r5, [r4, #-8]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8006802:	5b5a      	ldrh	r2, [r3, r5]
 8006804:	f5b2 6fc8 	cmp.w	r2, #1600	; 0x640
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8006808:	bf1c      	itt	ne
 800680a:	189b      	addne	r3, r3, r2
 800680c:	805d      	strhne	r5, [r3, #2]
  LWIP_MEM_FREE_UNPROTECT();
 800680e:	4809      	ldr	r0, [pc, #36]	; (8006834 <mem_trim+0x114>)
 8006810:	f003 fe4a 	bl	800a4a8 <sys_mutex_unlock>
  return rmem;
 8006814:	e7af      	b.n	8006776 <mem_trim+0x56>
 8006816:	bf00      	nop
 8006818:	20003efc 	.word	0x20003efc
 800681c:	20003f00 	.word	0x20003f00
 8006820:	0800cad3 	.word	0x0800cad3
 8006824:	0800cbb8 	.word	0x0800cbb8
 8006828:	0800c106 	.word	0x0800c106
 800682c:	0800cbcf 	.word	0x0800cbcf
 8006830:	20003ef4 	.word	0x20003ef4
 8006834:	20003ef8 	.word	0x20003ef8

08006838 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8006838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800683c:	b148      	cbz	r0, 8006852 <mem_malloc+0x1a>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800683e:	3003      	adds	r0, #3
 8006840:	f64f 75fc 	movw	r5, #65532	; 0xfffc
 8006844:	4005      	ands	r5, r0

  if (size < MIN_SIZE_ALIGNED) {
 8006846:	2d0b      	cmp	r5, #11
 8006848:	d905      	bls.n	8006856 <mem_malloc+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
  }

  if (size > MEM_SIZE_ALIGNED) {
 800684a:	f5b5 6fc8 	cmp.w	r5, #1600	; 0x640
 800684e:	d903      	bls.n	8006858 <mem_malloc+0x20>
    return NULL;
 8006850:	2000      	movs	r0, #0
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  return NULL;
}
 8006852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    size = MIN_SIZE_ALIGNED;
 8006856:	250c      	movs	r5, #12
  sys_mutex_lock(&mem_mutex);
 8006858:	483c      	ldr	r0, [pc, #240]	; (800694c <mem_malloc+0x114>)
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800685a:	f5c5 68c8 	rsb	r8, r5, #1600	; 0x640
  sys_mutex_lock(&mem_mutex);
 800685e:	f003 fe1e 	bl	800a49e <sys_mutex_lock>
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8006862:	4e3b      	ldr	r6, [pc, #236]	; (8006950 <mem_malloc+0x118>)
 8006864:	483b      	ldr	r0, [pc, #236]	; (8006954 <mem_malloc+0x11c>)
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8006866:	f06f 0907 	mvn.w	r9, #7
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800686a:	6831      	ldr	r1, [r6, #0]
 800686c:	6807      	ldr	r7, [r0, #0]
 800686e:	1a7b      	subs	r3, r7, r1
 8006870:	b29b      	uxth	r3, r3
 8006872:	4543      	cmp	r3, r8
 8006874:	d303      	bcc.n	800687e <mem_malloc+0x46>
  sys_mutex_unlock(&mem_mutex);
 8006876:	4835      	ldr	r0, [pc, #212]	; (800694c <mem_malloc+0x114>)
 8006878:	f003 fe16 	bl	800a4a8 <sys_mutex_unlock>
 800687c:	e7e8      	b.n	8006850 <mem_malloc+0x18>
      mem = (struct mem *)(void *)&ram[ptr];
 800687e:	18cc      	adds	r4, r1, r3
 8006880:	f831 e003 	ldrh.w	lr, [r1, r3]
      if ((!mem->used) &&
 8006884:	f894 c004 	ldrb.w	ip, [r4, #4]
 8006888:	f1bc 0f00 	cmp.w	ip, #0
 800688c:	d15b      	bne.n	8006946 <mem_malloc+0x10e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800688e:	eba9 0203 	sub.w	r2, r9, r3
 8006892:	4472      	add	r2, lr
      if ((!mem->used) &&
 8006894:	4295      	cmp	r5, r2
 8006896:	d856      	bhi.n	8006946 <mem_malloc+0x10e>
        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8006898:	f105 0814 	add.w	r8, r5, #20
 800689c:	4542      	cmp	r2, r8
 800689e:	d34c      	bcc.n	800693a <mem_malloc+0x102>
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 80068a0:	f105 0208 	add.w	r2, r5, #8
 80068a4:	441a      	add	r2, r3
 80068a6:	b292      	uxth	r2, r2
          mem2 = (struct mem *)(void *)&ram[ptr2];
 80068a8:	eb01 0802 	add.w	r8, r1, r2
          mem2->used = 0;
 80068ac:	f888 c004 	strb.w	ip, [r8, #4]
          mem2->next = mem->next;
 80068b0:	f821 e002 	strh.w	lr, [r1, r2]
          mem2->prev = ptr;
 80068b4:	f8a8 3002 	strh.w	r3, [r8, #2]
          mem->used = 1;
 80068b8:	2301      	movs	r3, #1
          mem->next = ptr2;
 80068ba:	8022      	strh	r2, [r4, #0]
          mem->used = 1;
 80068bc:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80068be:	5a8b      	ldrh	r3, [r1, r2]
 80068c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80068c4:	d001      	beq.n	80068ca <mem_malloc+0x92>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 80068c6:	4419      	add	r1, r3
 80068c8:	804a      	strh	r2, [r1, #2]
        if (mem == lfree) {
 80068ca:	42a7      	cmp	r7, r4
 80068cc:	4f22      	ldr	r7, [pc, #136]	; (8006958 <mem_malloc+0x120>)
 80068ce:	d111      	bne.n	80068f4 <mem_malloc+0xbc>
          while (cur->used && cur != ram_end) {
 80068d0:	6839      	ldr	r1, [r7, #0]
            cur = (struct mem *)(void *)&ram[cur->next];
 80068d2:	4623      	mov	r3, r4
 80068d4:	6836      	ldr	r6, [r6, #0]
          while (cur->used && cur != ram_end) {
 80068d6:	791a      	ldrb	r2, [r3, #4]
 80068d8:	b10a      	cbz	r2, 80068de <mem_malloc+0xa6>
 80068da:	428b      	cmp	r3, r1
 80068dc:	d130      	bne.n	8006940 <mem_malloc+0x108>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80068de:	428b      	cmp	r3, r1
          lfree = cur;
 80068e0:	6003      	str	r3, [r0, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80068e2:	d007      	beq.n	80068f4 <mem_malloc+0xbc>
 80068e4:	b132      	cbz	r2, 80068f4 <mem_malloc+0xbc>
 80068e6:	4b1d      	ldr	r3, [pc, #116]	; (800695c <mem_malloc+0x124>)
 80068e8:	f240 22cf 	movw	r2, #719	; 0x2cf
 80068ec:	491c      	ldr	r1, [pc, #112]	; (8006960 <mem_malloc+0x128>)
 80068ee:	481d      	ldr	r0, [pc, #116]	; (8006964 <mem_malloc+0x12c>)
 80068f0:	f004 fc4e 	bl	800b190 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80068f4:	3508      	adds	r5, #8
        sys_mutex_unlock(&mem_mutex);
 80068f6:	4815      	ldr	r0, [pc, #84]	; (800694c <mem_malloc+0x114>)
 80068f8:	f003 fdd6 	bl	800a4a8 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	4425      	add	r5, r4
 8006900:	42ab      	cmp	r3, r5
 8006902:	d206      	bcs.n	8006912 <mem_malloc+0xda>
 8006904:	4b15      	ldr	r3, [pc, #84]	; (800695c <mem_malloc+0x124>)
 8006906:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800690a:	4917      	ldr	r1, [pc, #92]	; (8006968 <mem_malloc+0x130>)
 800690c:	4815      	ldr	r0, [pc, #84]	; (8006964 <mem_malloc+0x12c>)
 800690e:	f004 fc3f 	bl	800b190 <iprintf>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8006912:	07a3      	lsls	r3, r4, #30
 8006914:	d00d      	beq.n	8006932 <mem_malloc+0xfa>
 8006916:	4b11      	ldr	r3, [pc, #68]	; (800695c <mem_malloc+0x124>)
 8006918:	f240 22d6 	movw	r2, #726	; 0x2d6
 800691c:	4913      	ldr	r1, [pc, #76]	; (800696c <mem_malloc+0x134>)
 800691e:	4811      	ldr	r0, [pc, #68]	; (8006964 <mem_malloc+0x12c>)
 8006920:	f004 fc36 	bl	800b190 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8006924:	4b0d      	ldr	r3, [pc, #52]	; (800695c <mem_malloc+0x124>)
 8006926:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800692a:	4911      	ldr	r1, [pc, #68]	; (8006970 <mem_malloc+0x138>)
 800692c:	480d      	ldr	r0, [pc, #52]	; (8006964 <mem_malloc+0x12c>)
 800692e:	f004 fc2f 	bl	800b190 <iprintf>
        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8006932:	f104 0008 	add.w	r0, r4, #8
 8006936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          mem->used = 1;
 800693a:	2301      	movs	r3, #1
 800693c:	7123      	strb	r3, [r4, #4]
 800693e:	e7c4      	b.n	80068ca <mem_malloc+0x92>
            cur = (struct mem *)(void *)&ram[cur->next];
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	4433      	add	r3, r6
 8006944:	e7c7      	b.n	80068d6 <mem_malloc+0x9e>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8006946:	4673      	mov	r3, lr
 8006948:	e793      	b.n	8006872 <mem_malloc+0x3a>
 800694a:	bf00      	nop
 800694c:	20003ef8 	.word	0x20003ef8
 8006950:	20003efc 	.word	0x20003efc
 8006954:	20003ef4 	.word	0x20003ef4
 8006958:	20003f00 	.word	0x20003f00
 800695c:	0800cad3 	.word	0x0800cad3
 8006960:	0800cb1d 	.word	0x0800cb1d
 8006964:	0800c106 	.word	0x0800c106
 8006968:	0800cb36 	.word	0x0800cb36
 800696c:	0800cb66 	.word	0x0800cb66
 8006970:	0800cb95 	.word	0x0800cb95

08006974 <do_memp_malloc_pool.isra.0>:
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}

static void*
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
 8006974:	b538      	push	{r3, r4, r5, lr}
 8006976:	4604      	mov	r4, r0

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8006978:	f003 fdaa 	bl	800a4d0 <sys_arch_protect>
 800697c:	4605      	mov	r5, r0

  memp = *desc->tab;
 800697e:	6823      	ldr	r3, [r4, #0]
 8006980:	681c      	ldr	r4, [r3, #0]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8006982:	b15c      	cbz	r4, 800699c <do_memp_malloc_pool.isra.0+0x28>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8006984:	6822      	ldr	r2, [r4, #0]
 8006986:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8006988:	07a3      	lsls	r3, r4, #30
 800698a:	d006      	beq.n	800699a <do_memp_malloc_pool.isra.0+0x26>
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <do_memp_malloc_pool.isra.0+0x30>)
 800698e:	f240 1249 	movw	r2, #329	; 0x149
 8006992:	4905      	ldr	r1, [pc, #20]	; (80069a8 <do_memp_malloc_pool.isra.0+0x34>)
 8006994:	4805      	ldr	r0, [pc, #20]	; (80069ac <do_memp_malloc_pool.isra.0+0x38>)
 8006996:	f004 fbfb 	bl	800b190 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800699a:	4628      	mov	r0, r5
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800699c:	f003 fda4 	bl	800a4e8 <sys_arch_unprotect>
  return NULL;
}
 80069a0:	4620      	mov	r0, r4
 80069a2:	bd38      	pop	{r3, r4, r5, pc}
 80069a4:	0800cc0f 	.word	0x0800cc0f
 80069a8:	0800cc3f 	.word	0x0800cc3f
 80069ac:	0800c106 	.word	0x0800c106

080069b0 <do_memp_free_pool.isra.1>:

  return memp;
}

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80069b0:	b538      	push	{r3, r4, r5, lr}
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80069b2:	078b      	lsls	r3, r1, #30
do_memp_free_pool(const struct memp_desc* desc, void *mem)
 80069b4:	4605      	mov	r5, r0
 80069b6:	460c      	mov	r4, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80069b8:	d006      	beq.n	80069c8 <do_memp_free_pool.isra.1+0x18>
 80069ba:	4b08      	ldr	r3, [pc, #32]	; (80069dc <do_memp_free_pool.isra.1+0x2c>)
 80069bc:	f240 129d 	movw	r2, #413	; 0x19d
 80069c0:	4907      	ldr	r1, [pc, #28]	; (80069e0 <do_memp_free_pool.isra.1+0x30>)
 80069c2:	4808      	ldr	r0, [pc, #32]	; (80069e4 <do_memp_free_pool.isra.1+0x34>)
 80069c4:	f004 fbe4 	bl	800b190 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);

  SYS_ARCH_PROTECT(old_level);
 80069c8:	f003 fd82 	bl	800a4d0 <sys_arch_protect>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	6022      	str	r2, [r4, #0]
  *desc->tab = memp;
 80069d2:	601c      	str	r4, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80069d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  SYS_ARCH_UNPROTECT(old_level);
 80069d8:	f003 bd86 	b.w	800a4e8 <sys_arch_unprotect>
 80069dc:	0800cc0f 	.word	0x0800cc0f
 80069e0:	0800cbef 	.word	0x0800cbef
 80069e4:	0800c106 	.word	0x0800c106

080069e8 <memp_init_pool>:
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80069e8:	6843      	ldr	r3, [r0, #4]
  *desc->tab = NULL;
 80069ea:	2200      	movs	r2, #0
 80069ec:	6881      	ldr	r1, [r0, #8]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80069ee:	3303      	adds	r3, #3
{
 80069f0:	b530      	push	{r4, r5, lr}
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 80069f2:	f023 0303 	bic.w	r3, r3, #3
  for (i = 0; i < desc->num; ++i) {
 80069f6:	8844      	ldrh	r4, [r0, #2]
  *desc->tab = NULL;
 80069f8:	600a      	str	r2, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 80069fa:	42a2      	cmp	r2, r4
 80069fc:	db00      	blt.n	8006a00 <memp_init_pool+0x18>
}
 80069fe:	bd30      	pop	{r4, r5, pc}
    memp->next = *desc->tab;
 8006a00:	680d      	ldr	r5, [r1, #0]
  for (i = 0; i < desc->num; ++i) {
 8006a02:	3201      	adds	r2, #1
    memp->next = *desc->tab;
 8006a04:	601d      	str	r5, [r3, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a06:	8805      	ldrh	r5, [r0, #0]
    *desc->tab = memp;
 8006a08:	600b      	str	r3, [r1, #0]
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8006a0a:	442b      	add	r3, r5
 8006a0c:	e7f5      	b.n	80069fa <memp_init_pool+0x12>
	...

08006a10 <memp_init>:
{
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2400      	movs	r4, #0
    memp_init_pool(memp_pools[i]);
 8006a14:	4d04      	ldr	r5, [pc, #16]	; (8006a28 <memp_init+0x18>)
 8006a16:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8006a1a:	3401      	adds	r4, #1
 8006a1c:	f7ff ffe4 	bl	80069e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8006a20:	2c0d      	cmp	r4, #13
 8006a22:	d1f8      	bne.n	8006a16 <memp_init+0x6>
}
 8006a24:	bd38      	pop	{r3, r4, r5, pc}
 8006a26:	bf00      	nop
 8006a28:	0800cd38 	.word	0x0800cd38

08006a2c <memp_malloc>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a2c:	280c      	cmp	r0, #12
{
 8006a2e:	b508      	push	{r3, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a30:	d807      	bhi.n	8006a42 <memp_malloc+0x16>
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006a32:	4b08      	ldr	r3, [pc, #32]	; (8006a54 <memp_malloc+0x28>)
 8006a34:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
 8006a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  memp = do_memp_malloc_pool(memp_pools[type]);
 8006a3c:	3008      	adds	r0, #8
 8006a3e:	f7ff bf99 	b.w	8006974 <do_memp_malloc_pool.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <memp_malloc+0x2c>)
 8006a44:	f240 1287 	movw	r2, #391	; 0x187
 8006a48:	4904      	ldr	r1, [pc, #16]	; (8006a5c <memp_malloc+0x30>)
 8006a4a:	4805      	ldr	r0, [pc, #20]	; (8006a60 <memp_malloc+0x34>)
 8006a4c:	f004 fba0 	bl	800b190 <iprintf>
}
 8006a50:	2000      	movs	r0, #0
 8006a52:	bd08      	pop	{r3, pc}
 8006a54:	0800cd38 	.word	0x0800cd38
 8006a58:	0800cc0f 	.word	0x0800cc0f
 8006a5c:	0800cd1b 	.word	0x0800cd1b
 8006a60:	0800c106 	.word	0x0800c106

08006a64 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8006a64:	280c      	cmp	r0, #12
 8006a66:	d906      	bls.n	8006a76 <memp_free+0x12>
 8006a68:	4b07      	ldr	r3, [pc, #28]	; (8006a88 <memp_free+0x24>)
 8006a6a:	f240 12db 	movw	r2, #475	; 0x1db
 8006a6e:	4907      	ldr	r1, [pc, #28]	; (8006a8c <memp_free+0x28>)
 8006a70:	4807      	ldr	r0, [pc, #28]	; (8006a90 <memp_free+0x2c>)
 8006a72:	f004 bb8d 	b.w	800b190 <iprintf>

  if (mem == NULL) {
 8006a76:	b129      	cbz	r1, 8006a84 <memp_free+0x20>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8006a78:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <memp_free+0x30>)
 8006a7a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8006a7e:	3008      	adds	r0, #8
 8006a80:	f7ff bf96 	b.w	80069b0 <do_memp_free_pool.isra.1>
 8006a84:	4770      	bx	lr
 8006a86:	bf00      	nop
 8006a88:	0800cc0f 	.word	0x0800cc0f
 8006a8c:	0800cd00 	.word	0x0800cd00
 8006a90:	0800c106 	.word	0x0800c106
 8006a94:	0800cd38 	.word	0x0800cd38

08006a98 <netif_issue_reports.part.0>:
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006a98:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
netif_issue_reports(struct netif* netif, u8_t report_type)
 8006a9c:	4601      	mov	r1, r0
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8006a9e:	071b      	lsls	r3, r3, #28
 8006aa0:	d502      	bpl.n	8006aa8 <netif_issue_reports.part.0+0x10>
      etharp_gratuitous(netif);
 8006aa2:	3104      	adds	r1, #4
 8006aa4:	f7fe bd52 	b.w	800554c <etharp_request>
 8006aa8:	4770      	bx	lr

08006aaa <netif_init>:
{
 8006aaa:	4770      	bx	lr

08006aac <netif_set_ipaddr>:
{
 8006aac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aae:	4605      	mov	r5, r0
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	b1b9      	cbz	r1, 8006ae4 <netif_set_ipaddr+0x38>
 8006ab4:	680b      	ldr	r3, [r1, #0]
 8006ab6:	9301      	str	r3, [sp, #4]
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8006ab8:	9a01      	ldr	r2, [sp, #4]
 8006aba:	686b      	ldr	r3, [r5, #4]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d00f      	beq.n	8006ae0 <netif_set_ipaddr+0x34>
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006ac0:	1d2e      	adds	r6, r5, #4
 8006ac2:	a901      	add	r1, sp, #4
 8006ac4:	4630      	mov	r0, r6
 8006ac6:	f001 f9ff 	bl	8007ec8 <tcp_netif_ip_addr_changed>
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8006aca:	a901      	add	r1, sp, #4
 8006acc:	4630      	mov	r0, r6
 8006ace:	f003 fbe3 	bl	800a298 <udp_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8006ad2:	b104      	cbz	r4, 8006ad6 <netif_set_ipaddr+0x2a>
 8006ad4:	6824      	ldr	r4, [r4, #0]
 8006ad6:	606c      	str	r4, [r5, #4]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006ad8:	b114      	cbz	r4, 8006ae0 <netif_set_ipaddr+0x34>
 8006ada:	4628      	mov	r0, r5
 8006adc:	f7ff ffdc 	bl	8006a98 <netif_issue_reports.part.0>
}
 8006ae0:	b002      	add	sp, #8
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8006ae4:	4b01      	ldr	r3, [pc, #4]	; (8006aec <netif_set_ipaddr+0x40>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	e7e5      	b.n	8006ab6 <netif_set_ipaddr+0xa>
 8006aea:	bf00      	nop
 8006aec:	0800c870 	.word	0x0800c870

08006af0 <netif_set_addr>:
{
 8006af0:	b570      	push	{r4, r5, r6, lr}
 8006af2:	4606      	mov	r6, r0
 8006af4:	4615      	mov	r5, r2
 8006af6:	461c      	mov	r4, r3
  if (ip4_addr_isany(ipaddr)) {
 8006af8:	b109      	cbz	r1, 8006afe <netif_set_addr+0xe>
 8006afa:	680b      	ldr	r3, [r1, #0]
 8006afc:	b94b      	cbnz	r3, 8006b12 <netif_set_addr+0x22>
    netif_set_ipaddr(netif, ipaddr);
 8006afe:	4630      	mov	r0, r6
 8006b00:	f7ff ffd4 	bl	8006aac <netif_set_ipaddr>
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006b04:	b105      	cbz	r5, 8006b08 <netif_set_addr+0x18>
 8006b06:	682d      	ldr	r5, [r5, #0]
 8006b08:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b0a:	b104      	cbz	r4, 8006b0e <netif_set_addr+0x1e>
 8006b0c:	6824      	ldr	r4, [r4, #0]
 8006b0e:	60f4      	str	r4, [r6, #12]
 8006b10:	bd70      	pop	{r4, r5, r6, pc}
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8006b12:	b102      	cbz	r2, 8006b16 <netif_set_addr+0x26>
 8006b14:	6815      	ldr	r5, [r2, #0]
 8006b16:	60b5      	str	r5, [r6, #8]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8006b18:	b104      	cbz	r4, 8006b1c <netif_set_addr+0x2c>
 8006b1a:	6824      	ldr	r4, [r4, #0]
 8006b1c:	60f4      	str	r4, [r6, #12]
    netif_set_ipaddr(netif, ipaddr);
 8006b1e:	4630      	mov	r0, r6
}
 8006b20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    netif_set_ipaddr(netif, ipaddr);
 8006b24:	f7ff bfc2 	b.w	8006aac <netif_set_ipaddr>

08006b28 <netif_add>:
{
 8006b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006b2e:	4604      	mov	r4, r0
 8006b30:	460f      	mov	r7, r1
 8006b32:	4690      	mov	r8, r2
 8006b34:	4699      	mov	r9, r3
  LWIP_ASSERT("No init function given", init != NULL);
 8006b36:	b92e      	cbnz	r6, 8006b44 <netif_add+0x1c>
 8006b38:	4b15      	ldr	r3, [pc, #84]	; (8006b90 <netif_add+0x68>)
 8006b3a:	22fb      	movs	r2, #251	; 0xfb
 8006b3c:	4915      	ldr	r1, [pc, #84]	; (8006b94 <netif_add+0x6c>)
 8006b3e:	4816      	ldr	r0, [pc, #88]	; (8006b98 <netif_add+0x70>)
 8006b40:	f004 fb26 	bl	800b190 <iprintf>
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006b44:	2303      	movs	r3, #3
  netif->num = netif_num++;
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <netif_add+0x74>)
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006b48:	2500      	movs	r5, #0
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b4a:	4620      	mov	r0, r4
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8006b4c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  netif->state = state;
 8006b50:	9b08      	ldr	r3, [sp, #32]
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8006b52:	6065      	str	r5, [r4, #4]
  netif->state = state;
 8006b54:	61e3      	str	r3, [r4, #28]
  netif->num = netif_num++;
 8006b56:	7813      	ldrb	r3, [r2, #0]
  ip_addr_set_zero_ip4(&netif->netmask);
 8006b58:	60a5      	str	r5, [r4, #8]
  netif->num = netif_num++;
 8006b5a:	1c59      	adds	r1, r3, #1
 8006b5c:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  netif->input = input;
 8006b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  netif->num = netif_num++;
 8006b62:	7011      	strb	r1, [r2, #0]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b64:	4642      	mov	r2, r8
  netif->input = input;
 8006b66:	6123      	str	r3, [r4, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b68:	4639      	mov	r1, r7
  ip_addr_set_zero_ip4(&netif->gw);
 8006b6a:	60e5      	str	r5, [r4, #12]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b6c:	464b      	mov	r3, r9
  netif->flags = 0;
 8006b6e:	f884 502f 	strb.w	r5, [r4, #47]	; 0x2f
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8006b72:	6225      	str	r5, [r4, #32]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8006b74:	f7ff ffbc 	bl	8006af0 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8006b78:	4620      	mov	r0, r4
 8006b7a:	47b0      	blx	r6
 8006b7c:	b930      	cbnz	r0, 8006b8c <netif_add+0x64>
  netif->next = netif_list;
 8006b7e:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <netif_add+0x78>)
 8006b80:	681a      	ldr	r2, [r3, #0]
 8006b82:	6022      	str	r2, [r4, #0]
  netif_list = netif;
 8006b84:	601c      	str	r4, [r3, #0]
}
 8006b86:	4620      	mov	r0, r4
 8006b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return NULL;
 8006b8c:	462c      	mov	r4, r5
 8006b8e:	e7fa      	b.n	8006b86 <netif_add+0x5e>
 8006b90:	0800cd6c 	.word	0x0800cd6c
 8006b94:	0800cd9d 	.word	0x0800cd9d
 8006b98:	0800c106 	.word	0x0800c106
 8006b9c:	20003f38 	.word	0x20003f38
 8006ba0:	200076dc 	.word	0x200076dc

08006ba4 <netif_set_default>:
  netif_default = netif;
 8006ba4:	4b01      	ldr	r3, [pc, #4]	; (8006bac <netif_set_default+0x8>)
 8006ba6:	6018      	str	r0, [r3, #0]
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	200076e0 	.word	0x200076e0

08006bb0 <netif_set_up>:
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8006bb0:	f890 202f 	ldrb.w	r2, [r0, #47]	; 0x2f
 8006bb4:	07d1      	lsls	r1, r2, #31
 8006bb6:	d409      	bmi.n	8006bcc <netif_set_up+0x1c>
    netif->flags |= NETIF_FLAG_UP;
 8006bb8:	f042 0101 	orr.w	r1, r2, #1
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006bbc:	0752      	lsls	r2, r2, #29
    netif->flags |= NETIF_FLAG_UP;
 8006bbe:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_LINK_UP) {
 8006bc2:	d503      	bpl.n	8006bcc <netif_set_up+0x1c>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8006bc4:	6843      	ldr	r3, [r0, #4]
 8006bc6:	b10b      	cbz	r3, 8006bcc <netif_set_up+0x1c>
 8006bc8:	f7ff bf66 	b.w	8006a98 <netif_issue_reports.part.0>
 8006bcc:	4770      	bx	lr

08006bce <netif_set_down>:
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
  if (netif->flags & NETIF_FLAG_UP) {
 8006bce:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
 8006bd2:	07d9      	lsls	r1, r3, #31
 8006bd4:	d507      	bpl.n	8006be6 <netif_set_down+0x18>
    netif->flags &= ~NETIF_FLAG_UP;
 8006bd6:	f023 0101 	bic.w	r1, r3, #1
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006bda:	071b      	lsls	r3, r3, #28
    netif->flags &= ~NETIF_FLAG_UP;
 8006bdc:	f880 102f 	strb.w	r1, [r0, #47]	; 0x2f
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8006be0:	d501      	bpl.n	8006be6 <netif_set_down+0x18>
      etharp_cleanup_netif(netif);
 8006be2:	f7fe bbf9 	b.w	80053d8 <etharp_cleanup_netif>
 8006be6:	4770      	bx	lr

08006be8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8006be8:	b510      	push	{r4, lr}
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8006bea:	f003 fc71 	bl	800a4d0 <sys_arch_protect>
 8006bee:	4b09      	ldr	r3, [pc, #36]	; (8006c14 <pbuf_free_ooseq_callback+0x2c>)
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	f003 fc78 	bl	800a4e8 <sys_arch_unprotect>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <pbuf_free_ooseq_callback+0x30>)
 8006bfa:	681c      	ldr	r4, [r3, #0]
 8006bfc:	b904      	cbnz	r4, 8006c00 <pbuf_free_ooseq_callback+0x18>
 8006bfe:	bd10      	pop	{r4, pc}
    if (NULL != pcb->ooseq) {
 8006c00:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006c02:	b120      	cbz	r0, 8006c0e <pbuf_free_ooseq_callback+0x26>
      tcp_segs_free(pcb->ooseq);
 8006c04:	f000 fc4c 	bl	80074a0 <tcp_segs_free>
      pcb->ooseq = NULL;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	6723      	str	r3, [r4, #112]	; 0x70
 8006c0c:	bd10      	pop	{r4, pc}
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8006c0e:	68e4      	ldr	r4, [r4, #12]
 8006c10:	e7f4      	b.n	8006bfc <pbuf_free_ooseq_callback+0x14>
 8006c12:	bf00      	nop
 8006c14:	200076e4 	.word	0x200076e4
 8006c18:	200076ec 	.word	0x200076ec

08006c1c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8006c1c:	b538      	push	{r3, r4, r5, lr}
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8006c1e:	4604      	mov	r4, r0
 8006c20:	2800      	cmp	r0, #0
 8006c22:	d12f      	bne.n	8006c84 <pbuf_header_impl+0x68>
 8006c24:	4b1f      	ldr	r3, [pc, #124]	; (8006ca4 <pbuf_header_impl+0x88>)
 8006c26:	f240 223f 	movw	r2, #575	; 0x23f
 8006c2a:	491f      	ldr	r1, [pc, #124]	; (8006ca8 <pbuf_header_impl+0x8c>)
 8006c2c:	481f      	ldr	r0, [pc, #124]	; (8006cac <pbuf_header_impl+0x90>)
 8006c2e:	f004 faaf 	bl	800b190 <iprintf>
  p->tot_len += header_size_increment;

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 8006c32:	2000      	movs	r0, #0
 8006c34:	bd38      	pop	{r3, r4, r5, pc}
    increment_magnitude = (u16_t)header_size_increment;
 8006c36:	b288      	uxth	r0, r1
  type = p->type;
 8006c38:	7b25      	ldrb	r5, [r4, #12]
  payload = p->payload;
 8006c3a:	6863      	ldr	r3, [r4, #4]
  if (type == PBUF_RAM || type == PBUF_POOL) {
 8006c3c:	b10d      	cbz	r5, 8006c42 <pbuf_header_impl+0x26>
 8006c3e:	2d03      	cmp	r5, #3
 8006c40:	d106      	bne.n	8006c50 <pbuf_header_impl+0x34>
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006c42:	1a5b      	subs	r3, r3, r1
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8006c44:	f104 0210 	add.w	r2, r4, #16
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d20a      	bcs.n	8006c62 <pbuf_header_impl+0x46>
      return 1;
 8006c4c:	2001      	movs	r0, #1
 8006c4e:	bd38      	pop	{r3, r4, r5, pc}
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 8006c50:	3d01      	subs	r5, #1
 8006c52:	2d01      	cmp	r5, #1
 8006c54:	d811      	bhi.n	8006c7a <pbuf_header_impl+0x5e>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8006c56:	2900      	cmp	r1, #0
 8006c58:	da0c      	bge.n	8006c74 <pbuf_header_impl+0x58>
 8006c5a:	8962      	ldrh	r2, [r4, #10]
 8006c5c:	4282      	cmp	r2, r0
 8006c5e:	d3f5      	bcc.n	8006c4c <pbuf_header_impl+0x30>
      p->payload = (u8_t *)p->payload - header_size_increment;
 8006c60:	1a5b      	subs	r3, r3, r1
  p->len += header_size_increment;
 8006c62:	b289      	uxth	r1, r1
  p->tot_len += header_size_increment;
 8006c64:	8920      	ldrh	r0, [r4, #8]
    p->payload = (u8_t *)p->payload - header_size_increment;
 8006c66:	6063      	str	r3, [r4, #4]
  p->len += header_size_increment;
 8006c68:	8963      	ldrh	r3, [r4, #10]
 8006c6a:	440b      	add	r3, r1
  p->tot_len += header_size_increment;
 8006c6c:	4401      	add	r1, r0
  p->len += header_size_increment;
 8006c6e:	8163      	strh	r3, [r4, #10]
  p->tot_len += header_size_increment;
 8006c70:	8121      	strh	r1, [r4, #8]
 8006c72:	e7de      	b.n	8006c32 <pbuf_header_impl+0x16>
    } else if ((header_size_increment > 0) && force) {
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d1f3      	bne.n	8006c60 <pbuf_header_impl+0x44>
 8006c78:	e7e8      	b.n	8006c4c <pbuf_header_impl+0x30>
    LWIP_ASSERT("bad pbuf type", 0);
 8006c7a:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <pbuf_header_impl+0x88>)
 8006c7c:	f240 2277 	movw	r2, #631	; 0x277
 8006c80:	490b      	ldr	r1, [pc, #44]	; (8006cb0 <pbuf_header_impl+0x94>)
 8006c82:	e00b      	b.n	8006c9c <pbuf_header_impl+0x80>
  if ((header_size_increment == 0) || (p == NULL)) {
 8006c84:	2900      	cmp	r1, #0
 8006c86:	d0d4      	beq.n	8006c32 <pbuf_header_impl+0x16>
  if (header_size_increment < 0) {
 8006c88:	dad5      	bge.n	8006c36 <pbuf_header_impl+0x1a>
    increment_magnitude = (u16_t)-header_size_increment;
 8006c8a:	4248      	negs	r0, r1
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c8c:	8963      	ldrh	r3, [r4, #10]
    increment_magnitude = (u16_t)-header_size_increment;
 8006c8e:	b280      	uxth	r0, r0
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8006c90:	4283      	cmp	r3, r0
 8006c92:	d2d1      	bcs.n	8006c38 <pbuf_header_impl+0x1c>
 8006c94:	4b03      	ldr	r3, [pc, #12]	; (8006ca4 <pbuf_header_impl+0x88>)
 8006c96:	f240 2247 	movw	r2, #583	; 0x247
 8006c9a:	4906      	ldr	r1, [pc, #24]	; (8006cb4 <pbuf_header_impl+0x98>)
    LWIP_ASSERT("bad pbuf type", 0);
 8006c9c:	4803      	ldr	r0, [pc, #12]	; (8006cac <pbuf_header_impl+0x90>)
 8006c9e:	f004 fa77 	bl	800b190 <iprintf>
 8006ca2:	e7d3      	b.n	8006c4c <pbuf_header_impl+0x30>
 8006ca4:	0800d019 	.word	0x0800d019
 8006ca8:	0800d083 	.word	0x0800d083
 8006cac:	0800c106 	.word	0x0800c106
 8006cb0:	0800d067 	.word	0x0800d067
 8006cb4:	0800d049 	.word	0x0800d049

08006cb8 <pbuf_pool_is_empty>:
{
 8006cb8:	b538      	push	{r3, r4, r5, lr}
  queued = pbuf_free_ooseq_pending;
 8006cba:	4d0c      	ldr	r5, [pc, #48]	; (8006cec <pbuf_pool_is_empty+0x34>)
  SYS_ARCH_PROTECT(old_level);
 8006cbc:	f003 fc08 	bl	800a4d0 <sys_arch_protect>
  pbuf_free_ooseq_pending = 1;
 8006cc0:	2301      	movs	r3, #1
  queued = pbuf_free_ooseq_pending;
 8006cc2:	782c      	ldrb	r4, [r5, #0]
  pbuf_free_ooseq_pending = 1;
 8006cc4:	702b      	strb	r3, [r5, #0]
  queued = pbuf_free_ooseq_pending;
 8006cc6:	b2e4      	uxtb	r4, r4
  SYS_ARCH_UNPROTECT(old_level);
 8006cc8:	f003 fc0e 	bl	800a4e8 <sys_arch_unprotect>
  if (!queued) {
 8006ccc:	b964      	cbnz	r4, 8006ce8 <pbuf_pool_is_empty+0x30>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8006cce:	4622      	mov	r2, r4
 8006cd0:	4621      	mov	r1, r4
 8006cd2:	4807      	ldr	r0, [pc, #28]	; (8006cf0 <pbuf_pool_is_empty+0x38>)
 8006cd4:	f7fd f922 	bl	8003f1c <tcpip_callback_with_block>
 8006cd8:	b130      	cbz	r0, 8006ce8 <pbuf_pool_is_empty+0x30>
 8006cda:	f003 fbf9 	bl	800a4d0 <sys_arch_protect>
 8006cde:	702c      	strb	r4, [r5, #0]
}
 8006ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8006ce4:	f003 bc00 	b.w	800a4e8 <sys_arch_unprotect>
 8006ce8:	bd38      	pop	{r3, r4, r5, pc}
 8006cea:	bf00      	nop
 8006cec:	200076e4 	.word	0x200076e4
 8006cf0:	08006be9 	.word	0x08006be9

08006cf4 <pbuf_alloced_custom>:
{
 8006cf4:	b570      	push	{r4, r5, r6, lr}
 8006cf6:	9d04      	ldr	r5, [sp, #16]
  switch (l) {
 8006cf8:	2804      	cmp	r0, #4
 8006cfa:	d81e      	bhi.n	8006d3a <pbuf_alloced_custom+0x46>
 8006cfc:	e8df f000 	tbb	[pc, r0]
 8006d00:	1b280326 	.word	0x1b280326
 8006d04:	1b          	.byte	0x1b
 8006d05:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006d06:	2422      	movs	r4, #34	; 0x22
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8006d08:	3403      	adds	r4, #3
 8006d0a:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 8006d0e:	f024 0403 	bic.w	r4, r4, #3
 8006d12:	190e      	adds	r6, r1, r4
 8006d14:	4286      	cmp	r6, r0
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	d80b      	bhi.n	8006d34 <pbuf_alloced_custom+0x40>
  p->pbuf.next = NULL;
 8006d1c:	6018      	str	r0, [r3, #0]
  if (payload_mem != NULL) {
 8006d1e:	b1cd      	cbz	r5, 8006d54 <pbuf_alloced_custom+0x60>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8006d20:	442c      	add	r4, r5
 8006d22:	605c      	str	r4, [r3, #4]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d24:	2002      	movs	r0, #2
  p->pbuf.type = type;
 8006d26:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8006d28:	2201      	movs	r2, #1
  p->pbuf.len = p->pbuf.tot_len = length;
 8006d2a:	8119      	strh	r1, [r3, #8]
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 8006d2c:	7358      	strb	r0, [r3, #13]
  return &p->pbuf;
 8006d2e:	4618      	mov	r0, r3
  p->pbuf.len = p->pbuf.tot_len = length;
 8006d30:	8159      	strh	r1, [r3, #10]
  p->pbuf.ref = 1;
 8006d32:	81da      	strh	r2, [r3, #14]
}
 8006d34:	bd70      	pop	{r4, r5, r6, pc}
    offset = 0;
 8006d36:	2400      	movs	r4, #0
    break;
 8006d38:	e7e6      	b.n	8006d08 <pbuf_alloced_custom+0x14>
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <pbuf_alloced_custom+0x64>)
 8006d3c:	f240 12c5 	movw	r2, #453	; 0x1c5
 8006d40:	4906      	ldr	r1, [pc, #24]	; (8006d5c <pbuf_alloced_custom+0x68>)
 8006d42:	4807      	ldr	r0, [pc, #28]	; (8006d60 <pbuf_alloced_custom+0x6c>)
 8006d44:	f004 fa24 	bl	800b190 <iprintf>
    return NULL;
 8006d48:	2000      	movs	r0, #0
 8006d4a:	bd70      	pop	{r4, r5, r6, pc}
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006d4c:	2436      	movs	r4, #54	; 0x36
 8006d4e:	e7db      	b.n	8006d08 <pbuf_alloced_custom+0x14>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006d50:	240e      	movs	r4, #14
 8006d52:	e7d9      	b.n	8006d08 <pbuf_alloced_custom+0x14>
    p->pbuf.payload = NULL;
 8006d54:	605d      	str	r5, [r3, #4]
 8006d56:	e7e5      	b.n	8006d24 <pbuf_alloced_custom+0x30>
 8006d58:	0800d019 	.word	0x0800d019
 8006d5c:	0800ce5c 	.word	0x0800ce5c
 8006d60:	0800c106 	.word	0x0800c106

08006d64 <pbuf_header>:
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 0);
 8006d64:	2200      	movs	r2, #0
 8006d66:	f7ff bf59 	b.w	8006c1c <pbuf_header_impl>

08006d6a <pbuf_header_force>:
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
   return pbuf_header_impl(p, header_size_increment, 1);
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f7ff bf56 	b.w	8006c1c <pbuf_header_impl>

08006d70 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8006d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8006d74:	4604      	mov	r4, r0
 8006d76:	b950      	cbnz	r0, 8006d8e <pbuf_free+0x1e>
    LWIP_ASSERT("p != NULL", p != NULL);
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8006d78:	4627      	mov	r7, r4
    LWIP_ASSERT("p != NULL", p != NULL);
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	; (8006e2c <pbuf_free+0xbc>)
 8006d7c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8006d80:	492b      	ldr	r1, [pc, #172]	; (8006e30 <pbuf_free+0xc0>)
 8006d82:	482c      	ldr	r0, [pc, #176]	; (8006e34 <pbuf_free+0xc4>)
 8006d84:	f004 fa04 	bl	800b190 <iprintf>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8006d88:	4638      	mov	r0, r7
 8006d8a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("pbuf_free: sane type",
 8006d8e:	7b03      	ldrb	r3, [r0, #12]
 8006d90:	2b03      	cmp	r3, #3
 8006d92:	d906      	bls.n	8006da2 <pbuf_free+0x32>
 8006d94:	4b25      	ldr	r3, [pc, #148]	; (8006e2c <pbuf_free+0xbc>)
 8006d96:	f240 22de 	movw	r2, #734	; 0x2de
 8006d9a:	4927      	ldr	r1, [pc, #156]	; (8006e38 <pbuf_free+0xc8>)
 8006d9c:	4825      	ldr	r0, [pc, #148]	; (8006e34 <pbuf_free+0xc4>)
 8006d9e:	f004 f9f7 	bl	800b190 <iprintf>
{
 8006da2:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006da4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006e2c <pbuf_free+0xbc>
 8006da8:	f8df a094 	ldr.w	sl, [pc, #148]	; 8006e40 <pbuf_free+0xd0>
 8006dac:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006e34 <pbuf_free+0xc4>
 8006db0:	b2f7      	uxtb	r7, r6
  while (p != NULL) {
 8006db2:	2c00      	cmp	r4, #0
 8006db4:	d0e8      	beq.n	8006d88 <pbuf_free+0x18>
    SYS_ARCH_PROTECT(old_level);
 8006db6:	f003 fb8b 	bl	800a4d0 <sys_arch_protect>
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006dba:	89e3      	ldrh	r3, [r4, #14]
    SYS_ARCH_PROTECT(old_level);
 8006dbc:	4683      	mov	fp, r0
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8006dbe:	b933      	cbnz	r3, 8006dce <pbuf_free+0x5e>
 8006dc0:	4643      	mov	r3, r8
 8006dc2:	f240 22eb 	movw	r2, #747	; 0x2eb
 8006dc6:	4651      	mov	r1, sl
 8006dc8:	4648      	mov	r0, r9
 8006dca:	f004 f9e1 	bl	800b190 <iprintf>
    ref = --(p->ref);
 8006dce:	89e5      	ldrh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8006dd0:	4658      	mov	r0, fp
    ref = --(p->ref);
 8006dd2:	3d01      	subs	r5, #1
 8006dd4:	b2ad      	uxth	r5, r5
 8006dd6:	81e5      	strh	r5, [r4, #14]
    SYS_ARCH_UNPROTECT(old_level);
 8006dd8:	f003 fb86 	bl	800a4e8 <sys_arch_unprotect>
    if (ref == 0) {
 8006ddc:	2d00      	cmp	r5, #0
 8006dde:	d1d3      	bne.n	8006d88 <pbuf_free+0x18>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006de0:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8006de2:	6825      	ldr	r5, [r4, #0]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8006de4:	079b      	lsls	r3, r3, #30
 8006de6:	d50e      	bpl.n	8006e06 <pbuf_free+0x96>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8006de8:	6923      	ldr	r3, [r4, #16]
 8006dea:	b933      	cbnz	r3, 8006dfa <pbuf_free+0x8a>
 8006dec:	4643      	mov	r3, r8
 8006dee:	f240 22f9 	movw	r2, #761	; 0x2f9
 8006df2:	4912      	ldr	r1, [pc, #72]	; (8006e3c <pbuf_free+0xcc>)
 8006df4:	4648      	mov	r0, r9
 8006df6:	f004 f9cb 	bl	800b190 <iprintf>
        pc->custom_free_function(p);
 8006dfa:	6923      	ldr	r3, [r4, #16]
 8006dfc:	4620      	mov	r0, r4
 8006dfe:	4798      	blx	r3
 8006e00:	3601      	adds	r6, #1
      p = q;
 8006e02:	462c      	mov	r4, r5
 8006e04:	e7d4      	b.n	8006db0 <pbuf_free+0x40>
      type = p->type;
 8006e06:	7b23      	ldrb	r3, [r4, #12]
        if (type == PBUF_POOL) {
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d104      	bne.n	8006e16 <pbuf_free+0xa6>
          memp_free(MEMP_PBUF_POOL, p);
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	200c      	movs	r0, #12
          memp_free(MEMP_PBUF, p);
 8006e10:	f7ff fe28 	bl	8006a64 <memp_free>
 8006e14:	e7f4      	b.n	8006e00 <pbuf_free+0x90>
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 8006e16:	3b01      	subs	r3, #1
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d802      	bhi.n	8006e22 <pbuf_free+0xb2>
          memp_free(MEMP_PBUF, p);
 8006e1c:	4621      	mov	r1, r4
 8006e1e:	200b      	movs	r0, #11
 8006e20:	e7f6      	b.n	8006e10 <pbuf_free+0xa0>
          mem_free(p);
 8006e22:	4620      	mov	r0, r4
 8006e24:	f7ff fbc2 	bl	80065ac <mem_free>
 8006e28:	e7ea      	b.n	8006e00 <pbuf_free+0x90>
 8006e2a:	bf00      	nop
 8006e2c:	0800d019 	.word	0x0800d019
 8006e30:	0800d083 	.word	0x0800d083
 8006e34:	0800c106 	.word	0x0800c106
 8006e38:	0800cfcd 	.word	0x0800cfcd
 8006e3c:	0800cff8 	.word	0x0800cff8
 8006e40:	0800cfe2 	.word	0x0800cfe2

08006e44 <pbuf_alloc>:
{
 8006e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e48:	460e      	mov	r6, r1
 8006e4a:	4617      	mov	r7, r2
  switch (layer) {
 8006e4c:	2804      	cmp	r0, #4
 8006e4e:	d80e      	bhi.n	8006e6e <pbuf_alloc+0x2a>
 8006e50:	e8df f000 	tbb	[pc, r0]
 8006e54:	0b170315 	.word	0x0b170315
 8006e58:	0b          	.byte	0x0b
 8006e59:	00          	.byte	0x00
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8006e5a:	2522      	movs	r5, #34	; 0x22
  switch (type) {
 8006e5c:	2f03      	cmp	r7, #3
 8006e5e:	f200 80b9 	bhi.w	8006fd4 <pbuf_alloc+0x190>
 8006e62:	e8df f007 	tbb	[pc, r7]
 8006e66:	aa8f      	.short	0xaa8f
 8006e68:	10aa      	.short	0x10aa
    offset = 0;
 8006e6a:	2500      	movs	r5, #0
    break;
 8006e6c:	e7f6      	b.n	8006e5c <pbuf_alloc+0x18>
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8006e6e:	4b5c      	ldr	r3, [pc, #368]	; (8006fe0 <pbuf_alloc+0x19c>)
 8006e70:	f44f 728b 	mov.w	r2, #278	; 0x116
 8006e74:	495b      	ldr	r1, [pc, #364]	; (8006fe4 <pbuf_alloc+0x1a0>)
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006e76:	485c      	ldr	r0, [pc, #368]	; (8006fe8 <pbuf_alloc+0x1a4>)
 8006e78:	f004 f98a 	bl	800b190 <iprintf>
 8006e7c:	e049      	b.n	8006f12 <pbuf_alloc+0xce>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8006e7e:	2536      	movs	r5, #54	; 0x36
 8006e80:	e7ec      	b.n	8006e5c <pbuf_alloc+0x18>
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8006e82:	250e      	movs	r5, #14
 8006e84:	e7ea      	b.n	8006e5c <pbuf_alloc+0x18>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006e86:	200c      	movs	r0, #12
 8006e88:	f7ff fdd0 	bl	8006a2c <memp_malloc>
    if (p == NULL) {
 8006e8c:	4604      	mov	r4, r0
 8006e8e:	b920      	cbnz	r0, 8006e9a <pbuf_alloc+0x56>
      PBUF_POOL_IS_EMPTY();
 8006e90:	f7ff ff12 	bl	8006cb8 <pbuf_pool_is_empty>
}
 8006e94:	4620      	mov	r0, r4
 8006e96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    p->type = type;
 8006e9a:	2303      	movs	r3, #3
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006e9c:	f500 7718 	add.w	r7, r0, #608	; 0x260
    p->tot_len = length;
 8006ea0:	8106      	strh	r6, [r0, #8]
    p->type = type;
 8006ea2:	7303      	strb	r3, [r0, #12]
    p->next = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006ea8:	1943      	adds	r3, r0, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006eaa:	3503      	adds	r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006eac:	3313      	adds	r3, #19
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006eae:	f025 0503 	bic.w	r5, r5, #3
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006eb2:	f023 0303 	bic.w	r3, r3, #3
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006eb6:	f5c5 7514 	rsb	r5, r5, #592	; 0x250
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 8006eba:	6043      	str	r3, [r0, #4]
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006ebc:	42b5      	cmp	r5, r6
 8006ebe:	bf28      	it	cs
 8006ec0:	4635      	movcs	r5, r6
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006ec2:	442b      	add	r3, r5
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 8006ec4:	8145      	strh	r5, [r0, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006ec6:	429f      	cmp	r7, r3
 8006ec8:	d206      	bcs.n	8006ed8 <pbuf_alloc+0x94>
 8006eca:	4b45      	ldr	r3, [pc, #276]	; (8006fe0 <pbuf_alloc+0x19c>)
 8006ecc:	f44f 7298 	mov.w	r2, #304	; 0x130
 8006ed0:	4946      	ldr	r1, [pc, #280]	; (8006fec <pbuf_alloc+0x1a8>)
 8006ed2:	4845      	ldr	r0, [pc, #276]	; (8006fe8 <pbuf_alloc+0x1a4>)
 8006ed4:	f004 f95c 	bl	800b190 <iprintf>
    p->ref = 1;
 8006ed8:	2301      	movs	r3, #1
    while (rem_len > 0) {
 8006eda:	46a3      	mov	fp, r4
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006edc:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8006fe0 <pbuf_alloc+0x19c>
    p->ref = 1;
 8006ee0:	81e3      	strh	r3, [r4, #14]
    rem_len = length - p->len;
 8006ee2:	8963      	ldrh	r3, [r4, #10]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006ee4:	f8df a110 	ldr.w	sl, [pc, #272]	; 8006ff8 <pbuf_alloc+0x1b4>
    rem_len = length - p->len;
 8006ee8:	1af6      	subs	r6, r6, r3
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006eea:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8006fe8 <pbuf_alloc+0x1a4>
    while (rem_len > 0) {
 8006eee:	2e00      	cmp	r6, #0
 8006ef0:	dc04      	bgt.n	8006efc <pbuf_alloc+0xb8>
  p->ref = 1;
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	81e3      	strh	r3, [r4, #14]
  p->flags = 0;
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	7363      	strb	r3, [r4, #13]
  return p;
 8006efa:	e7cb      	b.n	8006e94 <pbuf_alloc+0x50>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8006efc:	200c      	movs	r0, #12
 8006efe:	f7ff fd95 	bl	8006a2c <memp_malloc>
 8006f02:	2300      	movs	r3, #0
      if (q == NULL) {
 8006f04:	4605      	mov	r5, r0
 8006f06:	b930      	cbnz	r0, 8006f16 <pbuf_alloc+0xd2>
        PBUF_POOL_IS_EMPTY();
 8006f08:	f7ff fed6 	bl	8006cb8 <pbuf_pool_is_empty>
        pbuf_free(p);
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f7ff ff2f 	bl	8006d70 <pbuf_free>
    return NULL;
 8006f12:	2400      	movs	r4, #0
 8006f14:	e7be      	b.n	8006e94 <pbuf_alloc+0x50>
      q->flags = 0;
 8006f16:	7343      	strb	r3, [r0, #13]
      q->type = type;
 8006f18:	2203      	movs	r2, #3
      q->next = NULL;
 8006f1a:	6003      	str	r3, [r0, #0]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
      q->type = type;
 8006f20:	7302      	strb	r2, [r0, #12]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f22:	429e      	cmp	r6, r3
      r->next = q;
 8006f24:	f8cb 0000 	str.w	r0, [fp]
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 8006f28:	d106      	bne.n	8006f38 <pbuf_alloc+0xf4>
 8006f2a:	4643      	mov	r3, r8
 8006f2c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8006f30:	4651      	mov	r1, sl
 8006f32:	4648      	mov	r0, r9
 8006f34:	f004 f92c 	bl	800b190 <iprintf>
      q->tot_len = (u16_t)rem_len;
 8006f38:	b2b3      	uxth	r3, r6
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006f3a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
      q->tot_len = (u16_t)rem_len;
 8006f3e:	812b      	strh	r3, [r5, #8]
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 8006f40:	bf28      	it	cs
 8006f42:	f44f 7314 	movcs.w	r3, #592	; 0x250
 8006f46:	816b      	strh	r3, [r5, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 8006f48:	f105 0310 	add.w	r3, r5, #16
 8006f4c:	606b      	str	r3, [r5, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8006f4e:	079b      	lsls	r3, r3, #30
 8006f50:	d006      	beq.n	8006f60 <pbuf_alloc+0x11c>
 8006f52:	4643      	mov	r3, r8
 8006f54:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8006f58:	4925      	ldr	r1, [pc, #148]	; (8006ff0 <pbuf_alloc+0x1ac>)
 8006f5a:	4648      	mov	r0, r9
 8006f5c:	f004 f918 	bl	800b190 <iprintf>
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8006f60:	8962      	ldrh	r2, [r4, #10]
 8006f62:	6863      	ldr	r3, [r4, #4]
 8006f64:	4413      	add	r3, r2
 8006f66:	429f      	cmp	r7, r3
 8006f68:	d206      	bcs.n	8006f78 <pbuf_alloc+0x134>
 8006f6a:	4643      	mov	r3, r8
 8006f6c:	f240 1255 	movw	r2, #341	; 0x155
 8006f70:	491e      	ldr	r1, [pc, #120]	; (8006fec <pbuf_alloc+0x1a8>)
 8006f72:	4648      	mov	r0, r9
 8006f74:	f004 f90c 	bl	800b190 <iprintf>
      q->ref = 1;
 8006f78:	2301      	movs	r3, #1
      rem_len -= q->len;
 8006f7a:	46ab      	mov	fp, r5
      q->ref = 1;
 8006f7c:	81eb      	strh	r3, [r5, #14]
      rem_len -= q->len;
 8006f7e:	896b      	ldrh	r3, [r5, #10]
 8006f80:	1af6      	subs	r6, r6, r3
 8006f82:	e7b4      	b.n	8006eee <pbuf_alloc+0xaa>
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8006f84:	f105 0013 	add.w	r0, r5, #19
 8006f88:	1cf3      	adds	r3, r6, #3
 8006f8a:	f020 0003 	bic.w	r0, r0, #3
 8006f8e:	f023 0303 	bic.w	r3, r3, #3
 8006f92:	4418      	add	r0, r3
 8006f94:	b280      	uxth	r0, r0
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8006f96:	4298      	cmp	r0, r3
 8006f98:	d3bb      	bcc.n	8006f12 <pbuf_alloc+0xce>
      p = (struct pbuf*)mem_malloc(alloc_len);
 8006f9a:	f7ff fc4d 	bl	8006838 <mem_malloc>
    if (p == NULL) {
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2800      	cmp	r0, #0
 8006fa2:	d0b6      	beq.n	8006f12 <pbuf_alloc+0xce>
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006fa4:	4405      	add	r5, r0
    p->next = NULL;
 8006fa6:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006fa8:	8106      	strh	r6, [r0, #8]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006faa:	3513      	adds	r5, #19
    p->len = p->tot_len = length;
 8006fac:	8146      	strh	r6, [r0, #10]
    p->next = NULL;
 8006fae:	6003      	str	r3, [r0, #0]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006fb0:	f025 0503 	bic.w	r5, r5, #3
    p->type = type;
 8006fb4:	7303      	strb	r3, [r0, #12]
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 8006fb6:	6045      	str	r5, [r0, #4]
 8006fb8:	e79b      	b.n	8006ef2 <pbuf_alloc+0xae>
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8006fba:	200b      	movs	r0, #11
 8006fbc:	f7ff fd36 	bl	8006a2c <memp_malloc>
    if (p == NULL) {
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	2800      	cmp	r0, #0
 8006fc4:	d0a5      	beq.n	8006f12 <pbuf_alloc+0xce>
    p->payload = NULL;
 8006fc6:	2300      	movs	r3, #0
    p->len = p->tot_len = length;
 8006fc8:	8106      	strh	r6, [r0, #8]
 8006fca:	8146      	strh	r6, [r0, #10]
    p->payload = NULL;
 8006fcc:	6043      	str	r3, [r0, #4]
    p->next = NULL;
 8006fce:	6003      	str	r3, [r0, #0]
    p->type = type;
 8006fd0:	7307      	strb	r7, [r0, #12]
    break;
 8006fd2:	e78e      	b.n	8006ef2 <pbuf_alloc+0xae>
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <pbuf_alloc+0x19c>)
 8006fd6:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8006fda:	4906      	ldr	r1, [pc, #24]	; (8006ff4 <pbuf_alloc+0x1b0>)
 8006fdc:	e74b      	b.n	8006e76 <pbuf_alloc+0x32>
 8006fde:	bf00      	nop
 8006fe0:	0800d019 	.word	0x0800d019
 8006fe4:	0800cdb4 	.word	0x0800cdb4
 8006fe8:	0800c106 	.word	0x0800c106
 8006fec:	0800cdcf 	.word	0x0800cdcf
 8006ff0:	0800ce14 	.word	0x0800ce14
 8006ff4:	0800ce41 	.word	0x0800ce41
 8006ff8:	0800ce00 	.word	0x0800ce00

08006ffc <pbuf_realloc>:
{
 8006ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007000:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8007002:	4604      	mov	r4, r0
 8007004:	b930      	cbnz	r0, 8007014 <pbuf_realloc+0x18>
 8007006:	4b2e      	ldr	r3, [pc, #184]	; (80070c0 <pbuf_realloc+0xc4>)
 8007008:	f240 12f3 	movw	r2, #499	; 0x1f3
 800700c:	492d      	ldr	r1, [pc, #180]	; (80070c4 <pbuf_realloc+0xc8>)
 800700e:	482e      	ldr	r0, [pc, #184]	; (80070c8 <pbuf_realloc+0xcc>)
 8007010:	f004 f8be 	bl	800b190 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8007014:	7b23      	ldrb	r3, [r4, #12]
 8007016:	2b03      	cmp	r3, #3
 8007018:	d906      	bls.n	8007028 <pbuf_realloc+0x2c>
 800701a:	4b29      	ldr	r3, [pc, #164]	; (80070c0 <pbuf_realloc+0xc4>)
 800701c:	f240 12f7 	movw	r2, #503	; 0x1f7
 8007020:	492a      	ldr	r1, [pc, #168]	; (80070cc <pbuf_realloc+0xd0>)
 8007022:	4829      	ldr	r0, [pc, #164]	; (80070c8 <pbuf_realloc+0xcc>)
 8007024:	f004 f8b4 	bl	800b190 <iprintf>
  if (new_len >= p->tot_len) {
 8007028:	8926      	ldrh	r6, [r4, #8]
 800702a:	42ae      	cmp	r6, r5
 800702c:	d945      	bls.n	80070ba <pbuf_realloc+0xbe>
  grow = new_len - p->tot_len;
 800702e:	1bae      	subs	r6, r5, r6
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007030:	4f23      	ldr	r7, [pc, #140]	; (80070c0 <pbuf_realloc+0xc4>)
 8007032:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 80070d8 <pbuf_realloc+0xdc>
 8007036:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80070c8 <pbuf_realloc+0xcc>
  while (rem_len > q->len) {
 800703a:	8963      	ldrh	r3, [r4, #10]
 800703c:	429d      	cmp	r5, r3
 800703e:	d819      	bhi.n	8007074 <pbuf_realloc+0x78>
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 8007040:	7b22      	ldrb	r2, [r4, #12]
 8007042:	2a00      	cmp	r2, #0
 8007044:	d131      	bne.n	80070aa <pbuf_realloc+0xae>
 8007046:	429d      	cmp	r5, r3
 8007048:	d02f      	beq.n	80070aa <pbuf_realloc+0xae>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800704a:	7b63      	ldrb	r3, [r4, #13]
 800704c:	079b      	lsls	r3, r3, #30
 800704e:	d42c      	bmi.n	80070aa <pbuf_realloc+0xae>
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8007050:	6861      	ldr	r1, [r4, #4]
 8007052:	4620      	mov	r0, r4
 8007054:	1b09      	subs	r1, r1, r4
 8007056:	4429      	add	r1, r5
 8007058:	b289      	uxth	r1, r1
 800705a:	f7ff fb61 	bl	8006720 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800705e:	4604      	mov	r4, r0
 8007060:	bb18      	cbnz	r0, 80070aa <pbuf_realloc+0xae>
 8007062:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <pbuf_realloc+0xc4>)
 8007064:	f240 221d 	movw	r2, #541	; 0x21d
 8007068:	4919      	ldr	r1, [pc, #100]	; (80070d0 <pbuf_realloc+0xd4>)
 800706a:	4817      	ldr	r0, [pc, #92]	; (80070c8 <pbuf_realloc+0xcc>)
 800706c:	f004 f890 	bl	800b190 <iprintf>
  q->len = rem_len;
 8007070:	8164      	strh	r4, [r4, #10]
 8007072:	deff      	udf	#255	; 0xff
    rem_len -= q->len;
 8007074:	1aed      	subs	r5, r5, r3
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 8007076:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800707a:	429e      	cmp	r6, r3
    rem_len -= q->len;
 800707c:	b2ad      	uxth	r5, r5
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800707e:	dd06      	ble.n	800708e <pbuf_realloc+0x92>
 8007080:	463b      	mov	r3, r7
 8007082:	f240 220b 	movw	r2, #523	; 0x20b
 8007086:	4649      	mov	r1, r9
 8007088:	4640      	mov	r0, r8
 800708a:	f004 f881 	bl	800b190 <iprintf>
    q->tot_len += (u16_t)grow;
 800708e:	8923      	ldrh	r3, [r4, #8]
 8007090:	4433      	add	r3, r6
 8007092:	8123      	strh	r3, [r4, #8]
    q = q->next;
 8007094:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8007096:	2c00      	cmp	r4, #0
 8007098:	d1cf      	bne.n	800703a <pbuf_realloc+0x3e>
 800709a:	463b      	mov	r3, r7
 800709c:	f240 220f 	movw	r2, #527	; 0x20f
 80070a0:	490c      	ldr	r1, [pc, #48]	; (80070d4 <pbuf_realloc+0xd8>)
 80070a2:	4640      	mov	r0, r8
 80070a4:	f004 f874 	bl	800b190 <iprintf>
 80070a8:	e7c7      	b.n	800703a <pbuf_realloc+0x3e>
  if (q->next != NULL) {
 80070aa:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 80070ac:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 80070ae:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 80070b0:	b108      	cbz	r0, 80070b6 <pbuf_realloc+0xba>
    pbuf_free(q->next);
 80070b2:	f7ff fe5d 	bl	8006d70 <pbuf_free>
  q->next = NULL;
 80070b6:	2300      	movs	r3, #0
 80070b8:	6023      	str	r3, [r4, #0]
 80070ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070be:	bf00      	nop
 80070c0:	0800d019 	.word	0x0800d019
 80070c4:	0800d075 	.word	0x0800d075
 80070c8:	0800c106 	.word	0x0800c106
 80070cc:	0800d08d 	.word	0x0800d08d
 80070d0:	0800d0d1 	.word	0x0800d0d1
 80070d4:	0800d0b9 	.word	0x0800d0b9
 80070d8:	0800d0a8 	.word	0x0800d0a8

080070dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80070dc:	4603      	mov	r3, r0
  u16_t len;

  len = 0;
  while (p != NULL) {
 80070de:	2200      	movs	r2, #0
 80070e0:	b290      	uxth	r0, r2
 80070e2:	3201      	adds	r2, #1
 80070e4:	b903      	cbnz	r3, 80070e8 <pbuf_clen+0xc>
    ++len;
    p = p->next;
  }
  return len;
}
 80070e6:	4770      	bx	lr
    p = p->next;
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	e7f9      	b.n	80070e0 <pbuf_clen+0x4>

080070ec <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80070ec:	b510      	push	{r4, lr}
  /* pbuf given? */
  if (p != NULL) {
 80070ee:	4604      	mov	r4, r0
 80070f0:	b188      	cbz	r0, 8007116 <pbuf_ref+0x2a>
    SYS_ARCH_INC(p->ref, 1);
 80070f2:	f003 f9ed 	bl	800a4d0 <sys_arch_protect>
 80070f6:	89e3      	ldrh	r3, [r4, #14]
 80070f8:	3301      	adds	r3, #1
 80070fa:	81e3      	strh	r3, [r4, #14]
 80070fc:	f003 f9f4 	bl	800a4e8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007100:	89e3      	ldrh	r3, [r4, #14]
 8007102:	b943      	cbnz	r3, 8007116 <pbuf_ref+0x2a>
 8007104:	4b04      	ldr	r3, [pc, #16]	; (8007118 <pbuf_ref+0x2c>)
 8007106:	f240 3239 	movw	r2, #825	; 0x339
 800710a:	4904      	ldr	r1, [pc, #16]	; (800711c <pbuf_ref+0x30>)
 800710c:	4804      	ldr	r0, [pc, #16]	; (8007120 <pbuf_ref+0x34>)
  }
}
 800710e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8007112:	f004 b83d 	b.w	800b190 <iprintf>
 8007116:	bd10      	pop	{r4, pc}
 8007118:	0800d019 	.word	0x0800d019
 800711c:	0800d0ed 	.word	0x0800d0ed
 8007120:	0800c106 	.word	0x0800c106

08007124 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	460d      	mov	r5, r1
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8007128:	4604      	mov	r4, r0
 800712a:	b100      	cbz	r0, 800712e <pbuf_cat+0xa>
 800712c:	b969      	cbnz	r1, 800714a <pbuf_cat+0x26>
 800712e:	4b15      	ldr	r3, [pc, #84]	; (8007184 <pbuf_cat+0x60>)
 8007130:	f240 324d 	movw	r2, #845	; 0x34d
 8007134:	4914      	ldr	r1, [pc, #80]	; (8007188 <pbuf_cat+0x64>)
 8007136:	4815      	ldr	r0, [pc, #84]	; (800718c <pbuf_cat+0x68>)
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8007138:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800713c:	f004 b828 	b.w	800b190 <iprintf>
    p->tot_len += t->tot_len;
 8007140:	8923      	ldrh	r3, [r4, #8]
 8007142:	8929      	ldrh	r1, [r5, #8]
 8007144:	440b      	add	r3, r1
 8007146:	8123      	strh	r3, [r4, #8]
 8007148:	4614      	mov	r4, r2
  for (p = h; p->next != NULL; p = p->next) {
 800714a:	6822      	ldr	r2, [r4, #0]
 800714c:	2a00      	cmp	r2, #0
 800714e:	d1f7      	bne.n	8007140 <pbuf_cat+0x1c>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8007150:	8922      	ldrh	r2, [r4, #8]
 8007152:	8963      	ldrh	r3, [r4, #10]
 8007154:	429a      	cmp	r2, r3
 8007156:	d006      	beq.n	8007166 <pbuf_cat+0x42>
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <pbuf_cat+0x60>)
 800715a:	f240 3255 	movw	r2, #853	; 0x355
 800715e:	490c      	ldr	r1, [pc, #48]	; (8007190 <pbuf_cat+0x6c>)
 8007160:	480a      	ldr	r0, [pc, #40]	; (800718c <pbuf_cat+0x68>)
 8007162:	f004 f815 	bl	800b190 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8007166:	6823      	ldr	r3, [r4, #0]
 8007168:	b133      	cbz	r3, 8007178 <pbuf_cat+0x54>
 800716a:	4b06      	ldr	r3, [pc, #24]	; (8007184 <pbuf_cat+0x60>)
 800716c:	f240 3256 	movw	r2, #854	; 0x356
 8007170:	4908      	ldr	r1, [pc, #32]	; (8007194 <pbuf_cat+0x70>)
 8007172:	4806      	ldr	r0, [pc, #24]	; (800718c <pbuf_cat+0x68>)
 8007174:	f004 f80c 	bl	800b190 <iprintf>
  p->tot_len += t->tot_len;
 8007178:	892a      	ldrh	r2, [r5, #8]
 800717a:	8923      	ldrh	r3, [r4, #8]
  p->next = t;
 800717c:	6025      	str	r5, [r4, #0]
  p->tot_len += t->tot_len;
 800717e:	4413      	add	r3, r2
 8007180:	8123      	strh	r3, [r4, #8]
  p->next = t;
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	0800d019 	.word	0x0800d019
 8007188:	0800ce80 	.word	0x0800ce80
 800718c:	0800c106 	.word	0x0800c106
 8007190:	0800ceb5 	.word	0x0800ceb5
 8007194:	0800cee2 	.word	0x0800cee2

08007198 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8007198:	b510      	push	{r4, lr}
 800719a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 800719c:	f7ff ffc2 	bl	8007124 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80071a0:	4620      	mov	r0, r4
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80071a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pbuf_ref(t);
 80071a6:	f7ff bfa1 	b.w	80070ec <pbuf_ref>
	...

080071ac <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80071ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071b0:	460c      	mov	r4, r1

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80071b2:	4605      	mov	r5, r0
 80071b4:	b120      	cbz	r0, 80071c0 <pbuf_copy+0x14>
 80071b6:	b119      	cbz	r1, 80071c0 <pbuf_copy+0x14>
 80071b8:	8902      	ldrh	r2, [r0, #8]
 80071ba:	890b      	ldrh	r3, [r1, #8]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d20a      	bcs.n	80071d6 <pbuf_copy+0x2a>
 80071c0:	4b38      	ldr	r3, [pc, #224]	; (80072a4 <pbuf_copy+0xf8>)
 80071c2:	f240 32bd 	movw	r2, #957	; 0x3bd
 80071c6:	4938      	ldr	r1, [pc, #224]	; (80072a8 <pbuf_copy+0xfc>)
    }
    if (offset_to == p_to->len) {
      /* on to next p_to (if any) */
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 80071c8:	4838      	ldr	r0, [pc, #224]	; (80072ac <pbuf_copy+0x100>)
 80071ca:	f003 ffe1 	bl	800b190 <iprintf>
 80071ce:	f06f 000f 	mvn.w	r0, #15
 80071d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d6:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80071da:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 80072a4 <pbuf_copy+0xf8>
 80071de:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 80072bc <pbuf_copy+0x110>
 80071e2:	465f      	mov	r7, fp
 80071e4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80072ac <pbuf_copy+0x100>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80071e8:	896e      	ldrh	r6, [r5, #10]
 80071ea:	8963      	ldrh	r3, [r4, #10]
 80071ec:	1bf6      	subs	r6, r6, r7
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80071ee:	6868      	ldr	r0, [r5, #4]
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80071f0:	eba3 030b 	sub.w	r3, r3, fp
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80071f4:	6861      	ldr	r1, [r4, #4]
 80071f6:	4438      	add	r0, r7
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80071f8:	429e      	cmp	r6, r3
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 80071fa:	4459      	add	r1, fp
      len = p_from->len - offset_from;
 80071fc:	bfac      	ite	ge
 80071fe:	b29e      	uxthge	r6, r3
      len = p_to->len - offset_to;
 8007200:	b2b6      	uxthlt	r6, r6
    offset_to += len;
 8007202:	4437      	add	r7, r6
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8007204:	4632      	mov	r2, r6
 8007206:	f003 ffb0 	bl	800b16a <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800720a:	896b      	ldrh	r3, [r5, #10]
    offset_to += len;
 800720c:	b2bf      	uxth	r7, r7
    offset_from += len;
 800720e:	445e      	add	r6, fp
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007210:	42bb      	cmp	r3, r7
    offset_from += len;
 8007212:	fa1f fb86 	uxth.w	fp, r6
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8007216:	d206      	bcs.n	8007226 <pbuf_copy+0x7a>
 8007218:	4643      	mov	r3, r8
 800721a:	f240 32cd 	movw	r2, #973	; 0x3cd
 800721e:	4651      	mov	r1, sl
 8007220:	4648      	mov	r0, r9
 8007222:	f003 ffb5 	bl	800b190 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8007226:	8963      	ldrh	r3, [r4, #10]
 8007228:	455b      	cmp	r3, fp
 800722a:	d206      	bcs.n	800723a <pbuf_copy+0x8e>
 800722c:	4643      	mov	r3, r8
 800722e:	f240 32ce 	movw	r2, #974	; 0x3ce
 8007232:	491f      	ldr	r1, [pc, #124]	; (80072b0 <pbuf_copy+0x104>)
 8007234:	4648      	mov	r0, r9
 8007236:	f003 ffab 	bl	800b190 <iprintf>
    if (offset_from >= p_from->len) {
 800723a:	8963      	ldrh	r3, [r4, #10]
 800723c:	455b      	cmp	r3, fp
    if (offset_to == p_to->len) {
 800723e:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 8007240:	bf9c      	itt	ls
 8007242:	6824      	ldrls	r4, [r4, #0]
      offset_from = 0;
 8007244:	f04f 0b00 	movls.w	fp, #0
    if (offset_to == p_to->len) {
 8007248:	42bb      	cmp	r3, r7
 800724a:	d11e      	bne.n	800728a <pbuf_copy+0xde>
      p_to = p_to->next;
 800724c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800724e:	b9dd      	cbnz	r5, 8007288 <pbuf_copy+0xdc>
 8007250:	b1bc      	cbz	r4, 8007282 <pbuf_copy+0xd6>
 8007252:	4b14      	ldr	r3, [pc, #80]	; (80072a4 <pbuf_copy+0xf8>)
 8007254:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8007258:	4916      	ldr	r1, [pc, #88]	; (80072b4 <pbuf_copy+0x108>)
 800725a:	e7b5      	b.n	80071c8 <pbuf_copy+0x1c>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800725c:	8962      	ldrh	r2, [r4, #10]
 800725e:	8923      	ldrh	r3, [r4, #8]
 8007260:	429a      	cmp	r2, r3
 8007262:	d114      	bne.n	800728e <pbuf_copy+0xe2>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007264:	6823      	ldr	r3, [r4, #0]
 8007266:	b193      	cbz	r3, 800728e <pbuf_copy+0xe2>
 8007268:	4b0e      	ldr	r3, [pc, #56]	; (80072a4 <pbuf_copy+0xf8>)
 800726a:	f240 32de 	movw	r2, #990	; 0x3de
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800726e:	4912      	ldr	r1, [pc, #72]	; (80072b8 <pbuf_copy+0x10c>)
 8007270:	480e      	ldr	r0, [pc, #56]	; (80072ac <pbuf_copy+0x100>)
 8007272:	f003 ff8d 	bl	800b190 <iprintf>
 8007276:	f06f 0005 	mvn.w	r0, #5
 800727a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800727e:	2c00      	cmp	r4, #0
 8007280:	d1b2      	bne.n	80071e8 <pbuf_copy+0x3c>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8007282:	4620      	mov	r0, r4
 8007284:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      offset_to = 0;
 8007288:	2700      	movs	r7, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800728a:	2c00      	cmp	r4, #0
 800728c:	d1e6      	bne.n	800725c <pbuf_copy+0xb0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800728e:	896a      	ldrh	r2, [r5, #10]
 8007290:	892b      	ldrh	r3, [r5, #8]
 8007292:	429a      	cmp	r2, r3
 8007294:	d1f3      	bne.n	800727e <pbuf_copy+0xd2>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8007296:	682b      	ldr	r3, [r5, #0]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0f0      	beq.n	800727e <pbuf_copy+0xd2>
 800729c:	4b01      	ldr	r3, [pc, #4]	; (80072a4 <pbuf_copy+0xf8>)
 800729e:	f240 32e3 	movw	r2, #995	; 0x3e3
 80072a2:	e7e4      	b.n	800726e <pbuf_copy+0xc2>
 80072a4:	0800d019 	.word	0x0800d019
 80072a8:	0800cef2 	.word	0x0800cef2
 80072ac:	0800c106 	.word	0x0800c106
 80072b0:	0800cf39 	.word	0x0800cf39
 80072b4:	0800cf54 	.word	0x0800cf54
 80072b8:	0800cf61 	.word	0x0800cf61
 80072bc:	0800cf22 	.word	0x0800cf22

080072c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80072c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c4:	460f      	mov	r7, r1
 80072c6:	4690      	mov	r8, r2
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80072c8:	4606      	mov	r6, r0
 80072ca:	b950      	cbnz	r0, 80072e2 <pbuf_copy_partial+0x22>
 80072cc:	4635      	mov	r5, r6
 80072ce:	4b1b      	ldr	r3, [pc, #108]	; (800733c <pbuf_copy_partial+0x7c>)
 80072d0:	f240 32fe 	movw	r2, #1022	; 0x3fe
 80072d4:	491a      	ldr	r1, [pc, #104]	; (8007340 <pbuf_copy_partial+0x80>)
 80072d6:	481b      	ldr	r0, [pc, #108]	; (8007344 <pbuf_copy_partial+0x84>)
 80072d8:	f003 ff5a 	bl	800b190 <iprintf>
      len -= buf_copy_len;
      offset = 0;
    }
  }
  return copied_total;
}
 80072dc:	4628      	mov	r0, r5
 80072de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80072e2:	b169      	cbz	r1, 8007300 <pbuf_copy_partial+0x40>
 80072e4:	2500      	movs	r5, #0
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072e6:	f1b8 0f00 	cmp.w	r8, #0
 80072ea:	d0f7      	beq.n	80072dc <pbuf_copy_partial+0x1c>
 80072ec:	2e00      	cmp	r6, #0
 80072ee:	d0f5      	beq.n	80072dc <pbuf_copy_partial+0x1c>
    if ((offset != 0) && (offset >= p->len)) {
 80072f0:	b17b      	cbz	r3, 8007312 <pbuf_copy_partial+0x52>
 80072f2:	8971      	ldrh	r1, [r6, #10]
 80072f4:	428b      	cmp	r3, r1
 80072f6:	d30c      	bcc.n	8007312 <pbuf_copy_partial+0x52>
      offset -= p->len;
 80072f8:	1a5b      	subs	r3, r3, r1
 80072fa:	b29b      	uxth	r3, r3
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80072fc:	6836      	ldr	r6, [r6, #0]
 80072fe:	e7f2      	b.n	80072e6 <pbuf_copy_partial+0x26>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8007300:	4b0e      	ldr	r3, [pc, #56]	; (800733c <pbuf_copy_partial+0x7c>)
 8007302:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007306:	4910      	ldr	r1, [pc, #64]	; (8007348 <pbuf_copy_partial+0x88>)
 8007308:	463d      	mov	r5, r7
 800730a:	480e      	ldr	r0, [pc, #56]	; (8007344 <pbuf_copy_partial+0x84>)
 800730c:	f003 ff40 	bl	800b190 <iprintf>
 8007310:	e7e4      	b.n	80072dc <pbuf_copy_partial+0x1c>
      buf_copy_len = p->len - offset;
 8007312:	8974      	ldrh	r4, [r6, #10]
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007314:	1978      	adds	r0, r7, r5
 8007316:	6871      	ldr	r1, [r6, #4]
      buf_copy_len = p->len - offset;
 8007318:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800731a:	4419      	add	r1, r3
      buf_copy_len = p->len - offset;
 800731c:	b2a4      	uxth	r4, r4
 800731e:	4544      	cmp	r4, r8
 8007320:	bf28      	it	cs
 8007322:	4644      	movcs	r4, r8
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8007324:	4622      	mov	r2, r4
      copied_total += buf_copy_len;
 8007326:	4425      	add	r5, r4
      len -= buf_copy_len;
 8007328:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800732c:	f003 ff1d 	bl	800b16a <memcpy>
      copied_total += buf_copy_len;
 8007330:	b2ad      	uxth	r5, r5
      offset = 0;
 8007332:	2300      	movs	r3, #0
      len -= buf_copy_len;
 8007334:	fa1f f884 	uxth.w	r8, r4
 8007338:	e7e0      	b.n	80072fc <pbuf_copy_partial+0x3c>
 800733a:	bf00      	nop
 800733c:	0800d019 	.word	0x0800d019
 8007340:	0800cf8b 	.word	0x0800cf8b
 8007344:	0800c106 	.word	0x0800c106
 8007348:	0800cfaa 	.word	0x0800cfaa

0800734c <tcp_close_shutdown_fin>:
  return ERR_OK;
}

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800734c:	b510      	push	{r4, lr}
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800734e:	4604      	mov	r4, r0
 8007350:	b930      	cbnz	r0, 8007360 <tcp_close_shutdown_fin+0x14>
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <tcp_close_shutdown_fin+0x54>)
 8007354:	f240 124d 	movw	r2, #333	; 0x14d
 8007358:	4912      	ldr	r1, [pc, #72]	; (80073a4 <tcp_close_shutdown_fin+0x58>)
 800735a:	4813      	ldr	r0, [pc, #76]	; (80073a8 <tcp_close_shutdown_fin+0x5c>)
 800735c:	f003 ff18 	bl	800b190 <iprintf>

  switch (pcb->state) {
 8007360:	7d23      	ldrb	r3, [r4, #20]
 8007362:	2b04      	cmp	r3, #4
 8007364:	d003      	beq.n	800736e <tcp_close_shutdown_fin+0x22>
 8007366:	2b07      	cmp	r3, #7
 8007368:	d00c      	beq.n	8007384 <tcp_close_shutdown_fin+0x38>
 800736a:	2b03      	cmp	r3, #3
 800736c:	d108      	bne.n	8007380 <tcp_close_shutdown_fin+0x34>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800736e:	4620      	mov	r0, r4
 8007370:	f002 f998 	bl	80096a4 <tcp_send_fin>
    if (err == ERR_OK) {
 8007374:	b988      	cbnz	r0, 800739a <tcp_close_shutdown_fin+0x4e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 8007376:	2305      	movs	r3, #5
    break;
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
    if (err == ERR_OK) {
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8007378:	7523      	strb	r3, [r4, #20]
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800737a:	4620      	mov	r0, r4
 800737c:	f002 f9ea 	bl	8009754 <tcp_output>
 8007380:	2000      	movs	r0, #0
 8007382:	bd10      	pop	{r4, pc}
    err = tcp_send_fin(pcb);
 8007384:	4620      	mov	r0, r4
 8007386:	f002 f98d 	bl	80096a4 <tcp_send_fin>
    if (err == ERR_OK) {
 800738a:	b930      	cbnz	r0, 800739a <tcp_close_shutdown_fin+0x4e>
      pcb->state = LAST_ACK;
 800738c:	2309      	movs	r3, #9
 800738e:	e7f3      	b.n	8007378 <tcp_close_shutdown_fin+0x2c>
  } else if (err == ERR_MEM) {
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8007390:	7ea3      	ldrb	r3, [r4, #26]
 8007392:	f043 0308 	orr.w	r3, r3, #8
 8007396:	76a3      	strb	r3, [r4, #26]
 8007398:	e7f2      	b.n	8007380 <tcp_close_shutdown_fin+0x34>
  } else if (err == ERR_MEM) {
 800739a:	1c43      	adds	r3, r0, #1
 800739c:	d0f8      	beq.n	8007390 <tcp_close_shutdown_fin+0x44>
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
  }
  return err;
}
 800739e:	bd10      	pop	{r4, pc}
 80073a0:	0800d156 	.word	0x0800d156
 80073a4:	0800d185 	.word	0x0800d185
 80073a8:	0800c106 	.word	0x0800c106

080073ac <tcp_init>:
{
 80073ac:	4770      	bx	lr
	...

080073b0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80073b0:	b538      	push	{r3, r4, r5, lr}
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80073b2:	8d01      	ldrh	r1, [r0, #40]	; 0x28
{
 80073b4:	4604      	mov	r4, r0

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80073b6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80073b8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80073ba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80073bc:	1ac8      	subs	r0, r1, r3
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80073be:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80073c2:	4428      	add	r0, r5
 80073c4:	bf94      	ite	ls
 80073c6:	1a82      	subls	r2, r0, r2
 80073c8:	f5a0 6286 	subhi.w	r2, r0, #1072	; 0x430
 80073cc:	2a00      	cmp	r2, #0
 80073ce:	db01      	blt.n	80073d4 <tcp_update_rcv_ann_wnd+0x24>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80073d0:	8561      	strh	r1, [r4, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80073d4:	1aea      	subs	r2, r5, r3
 80073d6:	2a00      	cmp	r2, #0
 80073d8:	dd02      	ble.n	80073e0 <tcp_update_rcv_ann_wnd+0x30>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80073da:	2000      	movs	r0, #0
 80073dc:	8560      	strh	r0, [r4, #42]	; 0x2a
 80073de:	bd38      	pop	{r3, r4, r5, pc}
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80073e0:	1b5d      	subs	r5, r3, r5
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80073e2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 80073e6:	d306      	bcc.n	80073f6 <tcp_update_rcv_ann_wnd+0x46>
 80073e8:	4b04      	ldr	r3, [pc, #16]	; (80073fc <tcp_update_rcv_ann_wnd+0x4c>)
 80073ea:	f44f 7242 	mov.w	r2, #776	; 0x308
 80073ee:	4904      	ldr	r1, [pc, #16]	; (8007400 <tcp_update_rcv_ann_wnd+0x50>)
 80073f0:	4804      	ldr	r0, [pc, #16]	; (8007404 <tcp_update_rcv_ann_wnd+0x54>)
 80073f2:	f003 fecd 	bl	800b190 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80073f6:	8565      	strh	r5, [r4, #42]	; 0x2a
    }
    return 0;
 80073f8:	2000      	movs	r0, #0
  }
}
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	0800d156 	.word	0x0800d156
 8007400:	0800d398 	.word	0x0800d398
 8007404:	0800c106 	.word	0x0800c106

08007408 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8007408:	b538      	push	{r3, r4, r5, lr}
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800740a:	7d03      	ldrb	r3, [r0, #20]
{
 800740c:	4604      	mov	r4, r0
 800740e:	460d      	mov	r5, r1
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8007410:	2b01      	cmp	r3, #1
 8007412:	d106      	bne.n	8007422 <tcp_recved+0x1a>
 8007414:	4b17      	ldr	r3, [pc, #92]	; (8007474 <tcp_recved+0x6c>)
 8007416:	f44f 7248 	mov.w	r2, #800	; 0x320
 800741a:	4917      	ldr	r1, [pc, #92]	; (8007478 <tcp_recved+0x70>)
 800741c:	4817      	ldr	r0, [pc, #92]	; (800747c <tcp_recved+0x74>)
 800741e:	f003 feb7 	bl	800b190 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 8007422:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 8007424:	4429      	add	r1, r5
 8007426:	b289      	uxth	r1, r1
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 8007428:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
  pcb->rcv_wnd += len;
 800742c:	8521      	strh	r1, [r4, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800742e:	d911      	bls.n	8007454 <tcp_recved+0x4c>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8007430:	f44f 6306 	mov.w	r3, #2144	; 0x860
 8007434:	8523      	strh	r3, [r4, #40]	; 0x28
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8007436:	4620      	mov	r0, r4
 8007438:	f7ff ffba 	bl	80073b0 <tcp_update_rcv_ann_wnd>

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800743c:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8007440:	db17      	blt.n	8007472 <tcp_recved+0x6a>
    tcp_ack_now(pcb);
 8007442:	7ea3      	ldrb	r3, [r4, #26]
    tcp_output(pcb);
 8007444:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 8007446:	f043 0302 	orr.w	r3, r3, #2
 800744a:	76a3      	strb	r3, [r4, #26]
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800744c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_output(pcb);
 8007450:	f002 b980 	b.w	8009754 <tcp_output>
  } else if (pcb->rcv_wnd == 0) {
 8007454:	2900      	cmp	r1, #0
 8007456:	d1ee      	bne.n	8007436 <tcp_recved+0x2e>
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8007458:	7d23      	ldrb	r3, [r4, #20]
 800745a:	2b07      	cmp	r3, #7
 800745c:	d0e8      	beq.n	8007430 <tcp_recved+0x28>
 800745e:	2b09      	cmp	r3, #9
 8007460:	d0e6      	beq.n	8007430 <tcp_recved+0x28>
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8007462:	4b04      	ldr	r3, [pc, #16]	; (8007474 <tcp_recved+0x6c>)
 8007464:	f240 322d 	movw	r2, #813	; 0x32d
 8007468:	4905      	ldr	r1, [pc, #20]	; (8007480 <tcp_recved+0x78>)
 800746a:	4804      	ldr	r0, [pc, #16]	; (800747c <tcp_recved+0x74>)
 800746c:	f003 fe90 	bl	800b190 <iprintf>
 8007470:	e7e1      	b.n	8007436 <tcp_recved+0x2e>
 8007472:	bd38      	pop	{r3, r4, r5, pc}
 8007474:	0800d156 	.word	0x0800d156
 8007478:	0800d1ff 	.word	0x0800d1ff
 800747c:	0800c106 	.word	0x0800c106
 8007480:	0800d225 	.word	0x0800d225

08007484 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8007484:	b510      	push	{r4, lr}
  if (seg != NULL) {
 8007486:	4604      	mov	r4, r0
 8007488:	b148      	cbz	r0, 800749e <tcp_seg_free+0x1a>
    if (seg->p != NULL) {
 800748a:	6840      	ldr	r0, [r0, #4]
 800748c:	b108      	cbz	r0, 8007492 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 800748e:	f7ff fc6f 	bl	8006d70 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8007492:	4621      	mov	r1, r4
 8007494:	2003      	movs	r0, #3
  }
}
 8007496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 800749a:	f7ff bae3 	b.w	8006a64 <memp_free>
 800749e:	bd10      	pop	{r4, pc}

080074a0 <tcp_segs_free>:
{
 80074a0:	b510      	push	{r4, lr}
  while (seg != NULL) {
 80074a2:	b900      	cbnz	r0, 80074a6 <tcp_segs_free+0x6>
}
 80074a4:	bd10      	pop	{r4, pc}
    struct tcp_seg *next = seg->next;
 80074a6:	6804      	ldr	r4, [r0, #0]
    tcp_seg_free(seg);
 80074a8:	f7ff ffec 	bl	8007484 <tcp_seg_free>
    seg = next;
 80074ac:	4620      	mov	r0, r4
 80074ae:	e7f8      	b.n	80074a2 <tcp_segs_free+0x2>

080074b0 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80074b0:	b538      	push	{r3, r4, r5, lr}
 80074b2:	4604      	mov	r4, r0
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80074b4:	2003      	movs	r0, #3
 80074b6:	f7ff fab9 	bl	8006a2c <memp_malloc>
  if (cseg == NULL) {
 80074ba:	4605      	mov	r5, r0
 80074bc:	b160      	cbz	r0, 80074d8 <tcp_seg_copy+0x28>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80074be:	4620      	mov	r0, r4
 80074c0:	462b      	mov	r3, r5
 80074c2:	f104 0210 	add.w	r2, r4, #16
 80074c6:	f850 1b04 	ldr.w	r1, [r0], #4
 80074ca:	4290      	cmp	r0, r2
 80074cc:	f843 1b04 	str.w	r1, [r3], #4
 80074d0:	d1f9      	bne.n	80074c6 <tcp_seg_copy+0x16>
  pbuf_ref(cseg->p);
 80074d2:	6868      	ldr	r0, [r5, #4]
 80074d4:	f7ff fe0a 	bl	80070ec <pbuf_ref>
  return cseg;
}
 80074d8:	4628      	mov	r0, r5
 80074da:	bd38      	pop	{r3, r4, r5, pc}

080074dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80074dc:	b538      	push	{r3, r4, r5, lr}
  if (pcb->state != CLOSED &&
 80074de:	7d03      	ldrb	r3, [r0, #20]
{
 80074e0:	4604      	mov	r4, r0
  if (pcb->state != CLOSED &&
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d919      	bls.n	800751a <tcp_pcb_purge+0x3e>
 80074e6:	2b0a      	cmp	r3, #10
 80074e8:	d017      	beq.n	800751a <tcp_pcb_purge+0x3e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80074ea:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80074ec:	b118      	cbz	r0, 80074f6 <tcp_pcb_purge+0x1a>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80074ee:	f7ff fc3f 	bl	8006d70 <pbuf_free>
      pcb->refused_data = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	6763      	str	r3, [r4, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 80074f6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    pcb->ooseq = NULL;
 80074f8:	2500      	movs	r5, #0
    tcp_segs_free(pcb->ooseq);
 80074fa:	f7ff ffd1 	bl	80074a0 <tcp_segs_free>
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80074fe:	f64f 73ff 	movw	r3, #65535	; 0xffff

    tcp_segs_free(pcb->unsent);
 8007502:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    pcb->rtime = -1;
 8007504:	8623      	strh	r3, [r4, #48]	; 0x30
    pcb->ooseq = NULL;
 8007506:	6725      	str	r5, [r4, #112]	; 0x70
    tcp_segs_free(pcb->unsent);
 8007508:	f7ff ffca 	bl	80074a0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800750c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800750e:	f7ff ffc7 	bl	80074a0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8007512:	66a5      	str	r5, [r4, #104]	; 0x68
 8007514:	66e5      	str	r5, [r4, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8007516:	f8a4 5064 	strh.w	r5, [r4, #100]	; 0x64
 800751a:	bd38      	pop	{r3, r4, r5, pc}

0800751c <tcp_slowtmr>:
{
 800751c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8007520:	4eb0      	ldr	r6, [pc, #704]	; (80077e4 <tcp_slowtmr+0x2c8>)
{
 8007522:	b085      	sub	sp, #20
      tcp_active_pcbs_changed = 0;
 8007524:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8007818 <tcp_slowtmr+0x2fc>
  ++tcp_ticks;
 8007528:	6833      	ldr	r3, [r6, #0]
 800752a:	3301      	adds	r3, #1
 800752c:	6033      	str	r3, [r6, #0]
  ++tcp_timer_ctr;
 800752e:	4bae      	ldr	r3, [pc, #696]	; (80077e8 <tcp_slowtmr+0x2cc>)
 8007530:	781a      	ldrb	r2, [r3, #0]
 8007532:	9302      	str	r3, [sp, #8]
 8007534:	3201      	adds	r2, #1
 8007536:	701a      	strb	r2, [r3, #0]
  pcb = tcp_active_pcbs;
 8007538:	4fac      	ldr	r7, [pc, #688]	; (80077ec <tcp_slowtmr+0x2d0>)
  prev = NULL;
 800753a:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800753e:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 800781c <tcp_slowtmr+0x300>
  pcb = tcp_active_pcbs;
 8007542:	683c      	ldr	r4, [r7, #0]
  while (pcb != NULL) {
 8007544:	b96c      	cbnz	r4, 8007562 <tcp_slowtmr+0x46>
  pcb = tcp_tw_pcbs;
 8007546:	4faa      	ldr	r7, [pc, #680]	; (80077f0 <tcp_slowtmr+0x2d4>)
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007548:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 800781c <tcp_slowtmr+0x300>
  pcb = tcp_tw_pcbs;
 800754c:	683d      	ldr	r5, [r7, #0]
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800754e:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8007820 <tcp_slowtmr+0x304>
 8007552:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 80077f8 <tcp_slowtmr+0x2dc>
  while (pcb != NULL) {
 8007556:	2d00      	cmp	r5, #0
 8007558:	f040 8185 	bne.w	8007866 <tcp_slowtmr+0x34a>
}
 800755c:	b005      	add	sp, #20
 800755e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8007562:	7d23      	ldrb	r3, [r4, #20]
 8007564:	b933      	cbnz	r3, 8007574 <tcp_slowtmr+0x58>
 8007566:	464b      	mov	r3, r9
 8007568:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800756c:	49a1      	ldr	r1, [pc, #644]	; (80077f4 <tcp_slowtmr+0x2d8>)
 800756e:	48a2      	ldr	r0, [pc, #648]	; (80077f8 <tcp_slowtmr+0x2dc>)
 8007570:	f003 fe0e 	bl	800b190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8007574:	7d23      	ldrb	r3, [r4, #20]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d106      	bne.n	8007588 <tcp_slowtmr+0x6c>
 800757a:	464b      	mov	r3, r9
 800757c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8007580:	499e      	ldr	r1, [pc, #632]	; (80077fc <tcp_slowtmr+0x2e0>)
 8007582:	489d      	ldr	r0, [pc, #628]	; (80077f8 <tcp_slowtmr+0x2dc>)
 8007584:	f003 fe04 	bl	800b190 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8007588:	7d23      	ldrb	r3, [r4, #20]
 800758a:	2b0a      	cmp	r3, #10
 800758c:	d106      	bne.n	800759c <tcp_slowtmr+0x80>
 800758e:	464b      	mov	r3, r9
 8007590:	f240 32f2 	movw	r2, #1010	; 0x3f2
 8007594:	499a      	ldr	r1, [pc, #616]	; (8007800 <tcp_slowtmr+0x2e4>)
 8007596:	4898      	ldr	r0, [pc, #608]	; (80077f8 <tcp_slowtmr+0x2dc>)
 8007598:	f003 fdfa 	bl	800b190 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800759c:	9b02      	ldr	r3, [sp, #8]
 800759e:	7f62      	ldrb	r2, [r4, #29]
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	429a      	cmp	r2, r3
 80075a4:	d104      	bne.n	80075b0 <tcp_slowtmr+0x94>
      pcb = pcb->next;
 80075a6:	68e5      	ldr	r5, [r4, #12]
 80075a8:	4644      	mov	r4, r8
      continue;
 80075aa:	46a0      	mov	r8, r4
 80075ac:	462c      	mov	r4, r5
 80075ae:	e7c9      	b.n	8007544 <tcp_slowtmr+0x28>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80075b0:	7d21      	ldrb	r1, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 80075b2:	7763      	strb	r3, [r4, #29]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80075b4:	2902      	cmp	r1, #2
 80075b6:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 80075ba:	d102      	bne.n	80075c2 <tcp_slowtmr+0xa6>
 80075bc:	2a05      	cmp	r2, #5
 80075be:	f200 80e6 	bhi.w	800778e <tcp_slowtmr+0x272>
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80075c2:	2a0b      	cmp	r2, #11
 80075c4:	f200 80e3 	bhi.w	800778e <tcp_slowtmr+0x272>
      if (pcb->persist_backoff > 0) {
 80075c8:	f894 b095 	ldrb.w	fp, [r4, #149]	; 0x95
 80075cc:	f1bb 0f00 	cmp.w	fp, #0
 80075d0:	f000 80a6 	beq.w	8007720 <tcp_slowtmr+0x204>
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80075d4:	488b      	ldr	r0, [pc, #556]	; (8007804 <tcp_slowtmr+0x2e8>)
        if (pcb->persist_cnt < backoff_cnt) {
 80075d6:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80075da:	4483      	add	fp, r0
 80075dc:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
        if (pcb->persist_cnt < backoff_cnt) {
 80075e0:	429a      	cmp	r2, r3
          pcb->persist_cnt++;
 80075e2:	bf84      	itt	hi
 80075e4:	3301      	addhi	r3, #1
 80075e6:	f884 3094 	strbhi.w	r3, [r4, #148]	; 0x94
        if (pcb->persist_cnt >= backoff_cnt) {
 80075ea:	f894 3094 	ldrb.w	r3, [r4, #148]	; 0x94
 80075ee:	4293      	cmp	r3, r2
 80075f0:	f080 8085 	bcs.w	80076fe <tcp_slowtmr+0x1e2>
    pcb_remove = 0;
 80075f4:	f04f 0b00 	mov.w	fp, #0
    if (pcb->state == FIN_WAIT_2) {
 80075f8:	7d23      	ldrb	r3, [r4, #20]
 80075fa:	2b06      	cmp	r3, #6
 80075fc:	d10b      	bne.n	8007616 <tcp_slowtmr+0xfa>
      if (pcb->flags & TF_RXCLOSED) {
 80075fe:	7ea2      	ldrb	r2, [r4, #26]
 8007600:	06d2      	lsls	r2, r2, #27
 8007602:	d508      	bpl.n	8007616 <tcp_slowtmr+0xfa>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007604:	6832      	ldr	r2, [r6, #0]
 8007606:	6a21      	ldr	r1, [r4, #32]
 8007608:	1a52      	subs	r2, r2, r1
 800760a:	2a28      	cmp	r2, #40	; 0x28
          ++pcb_remove;
 800760c:	bf84      	itt	hi
 800760e:	f10b 0b01 	addhi.w	fp, fp, #1
 8007612:	fa5f fb8b 	uxtbhi.w	fp, fp
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8007616:	7a25      	ldrb	r5, [r4, #8]
 8007618:	f015 0508 	ands.w	r5, r5, #8
 800761c:	d019      	beq.n	8007652 <tcp_slowtmr+0x136>
 800761e:	2b04      	cmp	r3, #4
 8007620:	d002      	beq.n	8007628 <tcp_slowtmr+0x10c>
       ((pcb->state == ESTABLISHED) ||
 8007622:	2b07      	cmp	r3, #7
 8007624:	f040 80c8 	bne.w	80077b8 <tcp_slowtmr+0x29c>
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007628:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
 800762c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007630:	6831      	ldr	r1, [r6, #0]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007632:	f505 2224 	add.w	r2, r5, #671744	; 0xa4000
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007636:	6a23      	ldr	r3, [r4, #32]
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8007638:	f602 42b8 	addw	r2, r2, #3256	; 0xcb8
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800763c:	1ac9      	subs	r1, r1, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800763e:	fbb2 f2f0 	udiv	r2, r2, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8007642:	4291      	cmp	r1, r2
 8007644:	f240 80a6 	bls.w	8007794 <tcp_slowtmr+0x278>
        ++pcb_remove;
 8007648:	f10b 0b01 	add.w	fp, fp, #1
        ++pcb_reset;
 800764c:	2501      	movs	r5, #1
        ++pcb_remove;
 800764e:	fa5f fb8b 	uxtb.w	fp, fp
    if (pcb->ooseq != NULL &&
 8007652:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007654:	b168      	cbz	r0, 8007672 <tcp_slowtmr+0x156>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8007656:	6833      	ldr	r3, [r6, #0]
 8007658:	6a22      	ldr	r2, [r4, #32]
 800765a:	1a9a      	subs	r2, r3, r2
 800765c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 8007660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 8007664:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 8007668:	d303      	bcc.n	8007672 <tcp_slowtmr+0x156>
      tcp_segs_free(pcb->ooseq);
 800766a:	f7ff ff19 	bl	80074a0 <tcp_segs_free>
      pcb->ooseq = NULL;
 800766e:	2300      	movs	r3, #0
 8007670:	6723      	str	r3, [r4, #112]	; 0x70
    if (pcb->state == SYN_RCVD) {
 8007672:	7d23      	ldrb	r3, [r4, #20]
 8007674:	2b03      	cmp	r3, #3
 8007676:	f040 80a1 	bne.w	80077bc <tcp_slowtmr+0x2a0>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800767a:	6833      	ldr	r3, [r6, #0]
 800767c:	6a22      	ldr	r2, [r4, #32]
 800767e:	1a9b      	subs	r3, r3, r2
 8007680:	2b28      	cmp	r3, #40	; 0x28
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8007682:	d803      	bhi.n	800768c <tcp_slowtmr+0x170>
    if (pcb_remove) {
 8007684:	f1bb 0f00 	cmp.w	fp, #0
 8007688:	f000 80cc 	beq.w	8007824 <tcp_slowtmr+0x308>
      tcp_pcb_purge(pcb);
 800768c:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 800768e:	f8d4 b08c 	ldr.w	fp, [r4, #140]	; 0x8c
      tcp_pcb_purge(pcb);
 8007692:	f7ff ff23 	bl	80074dc <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8007696:	683b      	ldr	r3, [r7, #0]
      if (prev != NULL) {
 8007698:	f1b8 0f00 	cmp.w	r8, #0
 800769c:	f000 8096 	beq.w	80077cc <tcp_slowtmr+0x2b0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80076a0:	429c      	cmp	r4, r3
 80076a2:	d106      	bne.n	80076b2 <tcp_slowtmr+0x196>
 80076a4:	464b      	mov	r3, r9
 80076a6:	f240 4289 	movw	r2, #1161	; 0x489
 80076aa:	4957      	ldr	r1, [pc, #348]	; (8007808 <tcp_slowtmr+0x2ec>)
 80076ac:	4852      	ldr	r0, [pc, #328]	; (80077f8 <tcp_slowtmr+0x2dc>)
 80076ae:	f003 fd6f 	bl	800b190 <iprintf>
        prev->next = pcb->next;
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 80076b8:	b14d      	cbz	r5, 80076ce <tcp_slowtmr+0x1b2>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80076ba:	8b23      	ldrh	r3, [r4, #24]
 80076bc:	4622      	mov	r2, r4
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	8ae3      	ldrh	r3, [r4, #22]
 80076c2:	9300      	str	r3, [sp, #0]
 80076c4:	1d23      	adds	r3, r4, #4
 80076c6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80076c8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80076ca:	f002 f9c1 	bl	8009a50 <tcp_rst>
      err_arg = pcb->callback_arg;
 80076ce:	6923      	ldr	r3, [r4, #16]
      memp_free(MEMP_TCP_PCB, pcb2);
 80076d0:	4621      	mov	r1, r4
 80076d2:	2001      	movs	r0, #1
      pcb = pcb->next;
 80076d4:	68e5      	ldr	r5, [r4, #12]
      err_arg = pcb->callback_arg;
 80076d6:	9303      	str	r3, [sp, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80076d8:	f7ff f9c4 	bl	8006a64 <memp_free>
      tcp_active_pcbs_changed = 0;
 80076dc:	2200      	movs	r2, #0
 80076de:	f88a 2000 	strb.w	r2, [sl]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80076e2:	f1bb 0f00 	cmp.w	fp, #0
 80076e6:	d004      	beq.n	80076f2 <tcp_slowtmr+0x1d6>
 80076e8:	9b03      	ldr	r3, [sp, #12]
 80076ea:	f06f 010c 	mvn.w	r1, #12
 80076ee:	4618      	mov	r0, r3
 80076f0:	47d8      	blx	fp
      if (tcp_active_pcbs_changed) {
 80076f2:	f89a 3000 	ldrb.w	r3, [sl]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	f43f af56 	beq.w	80075a8 <tcp_slowtmr+0x8c>
 80076fc:	e71c      	b.n	8007538 <tcp_slowtmr+0x1c>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 80076fe:	4620      	mov	r0, r4
 8007700:	f002 fa96 	bl	8009c30 <tcp_zero_window_probe>
 8007704:	2800      	cmp	r0, #0
 8007706:	f47f af75 	bne.w	80075f4 <tcp_slowtmr+0xd8>
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800770a:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
            pcb->persist_cnt = 0;
 800770e:	f884 0094 	strb.w	r0, [r4, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8007712:	2b06      	cmp	r3, #6
 8007714:	f63f af6e 	bhi.w	80075f4 <tcp_slowtmr+0xd8>
              pcb->persist_backoff++;
 8007718:	3301      	adds	r3, #1
 800771a:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
 800771e:	e769      	b.n	80075f4 <tcp_slowtmr+0xd8>
        if (pcb->rtime >= 0) {
 8007720:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8007724:	2b00      	cmp	r3, #0
          ++pcb->rtime;
 8007726:	bfa4      	itt	ge
 8007728:	3301      	addge	r3, #1
 800772a:	8623      	strhge	r3, [r4, #48]	; 0x30
        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800772c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800772e:	2b00      	cmp	r3, #0
 8007730:	f43f af60 	beq.w	80075f4 <tcp_slowtmr+0xd8>
 8007734:	f9b4 0030 	ldrsh.w	r0, [r4, #48]	; 0x30
 8007738:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 800773c:	4298      	cmp	r0, r3
 800773e:	f6ff af59 	blt.w	80075f4 <tcp_slowtmr+0xd8>
          if (pcb->state != SYN_SENT) {
 8007742:	2902      	cmp	r1, #2
 8007744:	d00a      	beq.n	800775c <tcp_slowtmr+0x240>
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8007746:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 800774a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 800774e:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 8007752:	492e      	ldr	r1, [pc, #184]	; (800780c <tcp_slowtmr+0x2f0>)
 8007754:	5c8a      	ldrb	r2, [r1, r2]
 8007756:	4093      	lsls	r3, r2
 8007758:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
          pcb->rtime = 0;
 800775c:	2300      	movs	r3, #0
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800775e:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007762:	8e61      	ldrh	r1, [r4, #50]	; 0x32
          tcp_rexmit_rto(pcb);
 8007764:	4620      	mov	r0, r4
          pcb->rtime = 0;
 8007766:	8623      	strh	r3, [r4, #48]	; 0x30
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8007768:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
          pcb->cwnd = pcb->mss;
 800776c:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
          pcb->ssthresh = eff_wnd >> 1;
 8007770:	4293      	cmp	r3, r2
 8007772:	bf28      	it	cs
 8007774:	4613      	movcs	r3, r2
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007776:	004a      	lsls	r2, r1, #1
          pcb->ssthresh = eff_wnd >> 1;
 8007778:	085b      	lsrs	r3, r3, #1
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800777a:	b292      	uxth	r2, r2
          pcb->ssthresh = eff_wnd >> 1;
 800777c:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8007780:	4293      	cmp	r3, r2
            pcb->ssthresh = (pcb->mss << 1);
 8007782:	bf38      	it	cc
 8007784:	f8a4 204a 	strhcc.w	r2, [r4, #74]	; 0x4a
          tcp_rexmit_rto(pcb);
 8007788:	f002 f9bc 	bl	8009b04 <tcp_rexmit_rto>
 800778c:	e734      	b.n	80075f8 <tcp_slowtmr+0xdc>
      ++pcb_remove;
 800778e:	f04f 0b01 	mov.w	fp, #1
 8007792:	e731      	b.n	80075f8 <tcp_slowtmr+0xdc>
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8007794:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 8007798:	4a1d      	ldr	r2, [pc, #116]	; (8007810 <tcp_slowtmr+0x2f4>)
 800779a:	fb02 5303 	mla	r3, r2, r3, r5
                / TCP_SLOW_INTERVAL)
 800779e:	fbb3 f3f0 	udiv	r3, r3, r0
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80077a2:	4299      	cmp	r1, r3
 80077a4:	d908      	bls.n	80077b8 <tcp_slowtmr+0x29c>
        err = tcp_keepalive(pcb);
 80077a6:	4620      	mov	r0, r4
 80077a8:	f002 fa18 	bl	8009bdc <tcp_keepalive>
        if (err == ERR_OK) {
 80077ac:	b920      	cbnz	r0, 80077b8 <tcp_slowtmr+0x29c>
          pcb->keep_cnt_sent++;
 80077ae:	f894 3096 	ldrb.w	r3, [r4, #150]	; 0x96
 80077b2:	3301      	adds	r3, #1
 80077b4:	f884 3096 	strb.w	r3, [r4, #150]	; 0x96
    pcb_reset = 0;
 80077b8:	2500      	movs	r5, #0
 80077ba:	e74a      	b.n	8007652 <tcp_slowtmr+0x136>
    if (pcb->state == LAST_ACK) {
 80077bc:	2b09      	cmp	r3, #9
 80077be:	f47f af61 	bne.w	8007684 <tcp_slowtmr+0x168>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80077c2:	6833      	ldr	r3, [r6, #0]
 80077c4:	6a22      	ldr	r2, [r4, #32]
 80077c6:	1a9b      	subs	r3, r3, r2
 80077c8:	2bf0      	cmp	r3, #240	; 0xf0
 80077ca:	e75a      	b.n	8007682 <tcp_slowtmr+0x166>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80077cc:	429c      	cmp	r4, r3
 80077ce:	d006      	beq.n	80077de <tcp_slowtmr+0x2c2>
 80077d0:	464b      	mov	r3, r9
 80077d2:	f240 428d 	movw	r2, #1165	; 0x48d
 80077d6:	490f      	ldr	r1, [pc, #60]	; (8007814 <tcp_slowtmr+0x2f8>)
 80077d8:	4807      	ldr	r0, [pc, #28]	; (80077f8 <tcp_slowtmr+0x2dc>)
 80077da:	f003 fcd9 	bl	800b190 <iprintf>
        tcp_active_pcbs = pcb->next;
 80077de:	68e3      	ldr	r3, [r4, #12]
 80077e0:	603b      	str	r3, [r7, #0]
 80077e2:	e769      	b.n	80076b8 <tcp_slowtmr+0x19c>
 80077e4:	200076f0 	.word	0x200076f0
 80077e8:	20003f3a 	.word	0x20003f3a
 80077ec:	200076ec 	.word	0x200076ec
 80077f0:	200076fc 	.word	0x200076fc
 80077f4:	0800d246 	.word	0x0800d246
 80077f8:	0800c106 	.word	0x0800c106
 80077fc:	0800d270 	.word	0x0800d270
 8007800:	0800d29a 	.word	0x0800d29a
 8007804:	0800d1f8 	.word	0x0800d1f8
 8007808:	0800d2c7 	.word	0x0800d2c7
 800780c:	0800d130 	.word	0x0800d130
 8007810:	000124f8 	.word	0x000124f8
 8007814:	0800d2f2 	.word	0x0800d2f2
 8007818:	200076e8 	.word	0x200076e8
 800781c:	0800d156 	.word	0x0800d156
 8007820:	0800d31c 	.word	0x0800d31c
      ++prev->polltmr;
 8007824:	7ee3      	ldrb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8007826:	7f22      	ldrb	r2, [r4, #28]
      ++prev->polltmr;
 8007828:	3301      	adds	r3, #1
      pcb = pcb->next;
 800782a:	68e5      	ldr	r5, [r4, #12]
      ++prev->polltmr;
 800782c:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 800782e:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8007830:	76e3      	strb	r3, [r4, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8007832:	f63f aeba 	bhi.w	80075aa <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8007836:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
        prev->polltmr = 0;
 800783a:	f884 b01b 	strb.w	fp, [r4, #27]
        tcp_active_pcbs_changed = 0;
 800783e:	f88a b000 	strb.w	fp, [sl]
        TCP_EVENT_POLL(prev, err);
 8007842:	b173      	cbz	r3, 8007862 <tcp_slowtmr+0x346>
 8007844:	4621      	mov	r1, r4
 8007846:	6920      	ldr	r0, [r4, #16]
 8007848:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 800784a:	f89a 3000 	ldrb.w	r3, [sl]
 800784e:	2b00      	cmp	r3, #0
 8007850:	f47f ae72 	bne.w	8007538 <tcp_slowtmr+0x1c>
        if (err == ERR_OK) {
 8007854:	2800      	cmp	r0, #0
 8007856:	f47f aea8 	bne.w	80075aa <tcp_slowtmr+0x8e>
          tcp_output(prev);
 800785a:	4620      	mov	r0, r4
 800785c:	f001 ff7a 	bl	8009754 <tcp_output>
 8007860:	e6a3      	b.n	80075aa <tcp_slowtmr+0x8e>
        TCP_EVENT_POLL(prev, err);
 8007862:	4658      	mov	r0, fp
 8007864:	e7f1      	b.n	800784a <tcp_slowtmr+0x32e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007866:	7d2b      	ldrb	r3, [r5, #20]
 8007868:	2b0a      	cmp	r3, #10
 800786a:	d006      	beq.n	800787a <tcp_slowtmr+0x35e>
 800786c:	4643      	mov	r3, r8
 800786e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8007872:	4651      	mov	r1, sl
 8007874:	4648      	mov	r0, r9
 8007876:	f003 fc8b 	bl	800b190 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800787a:	6833      	ldr	r3, [r6, #0]
 800787c:	6a2a      	ldr	r2, [r5, #32]
 800787e:	1a9b      	subs	r3, r3, r2
 8007880:	2bf0      	cmp	r3, #240	; 0xf0
 8007882:	d816      	bhi.n	80078b2 <tcp_slowtmr+0x396>
      pcb = pcb->next;
 8007884:	462c      	mov	r4, r5
 8007886:	68ed      	ldr	r5, [r5, #12]
 8007888:	e665      	b.n	8007556 <tcp_slowtmr+0x3a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	429d      	cmp	r5, r3
 800788e:	d106      	bne.n	800789e <tcp_slowtmr+0x382>
 8007890:	4643      	mov	r3, r8
 8007892:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8007896:	4910      	ldr	r1, [pc, #64]	; (80078d8 <tcp_slowtmr+0x3bc>)
 8007898:	4648      	mov	r0, r9
 800789a:	f003 fc79 	bl	800b190 <iprintf>
        prev->next = pcb->next;
 800789e:	68eb      	ldr	r3, [r5, #12]
 80078a0:	60e3      	str	r3, [r4, #12]
      pcb = pcb->next;
 80078a2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
      memp_free(MEMP_TCP_PCB, pcb2);
 80078a6:	4629      	mov	r1, r5
 80078a8:	2001      	movs	r0, #1
 80078aa:	f7ff f8db 	bl	8006a64 <memp_free>
      pcb = pcb->next;
 80078ae:	465d      	mov	r5, fp
 80078b0:	e651      	b.n	8007556 <tcp_slowtmr+0x3a>
      tcp_pcb_purge(pcb);
 80078b2:	4628      	mov	r0, r5
 80078b4:	f7ff fe12 	bl	80074dc <tcp_pcb_purge>
      if (prev != NULL) {
 80078b8:	2c00      	cmp	r4, #0
 80078ba:	d1e6      	bne.n	800788a <tcp_slowtmr+0x36e>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	429d      	cmp	r5, r3
 80078c0:	d006      	beq.n	80078d0 <tcp_slowtmr+0x3b4>
 80078c2:	4643      	mov	r3, r8
 80078c4:	f240 42cf 	movw	r2, #1231	; 0x4cf
 80078c8:	4904      	ldr	r1, [pc, #16]	; (80078dc <tcp_slowtmr+0x3c0>)
 80078ca:	4648      	mov	r0, r9
 80078cc:	f003 fc60 	bl	800b190 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80078d0:	68eb      	ldr	r3, [r5, #12]
 80078d2:	603b      	str	r3, [r7, #0]
 80078d4:	e7e5      	b.n	80078a2 <tcp_slowtmr+0x386>
 80078d6:	bf00      	nop
 80078d8:	0800d34b 	.word	0x0800d34b
 80078dc:	0800d372 	.word	0x0800d372

080078e0 <tcp_pcb_remove>:
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
  TCP_RMV(pcblist, pcb);
 80078e0:	6803      	ldr	r3, [r0, #0]
 80078e2:	428b      	cmp	r3, r1
{
 80078e4:	b510      	push	{r4, lr}
 80078e6:	460c      	mov	r4, r1
  TCP_RMV(pcblist, pcb);
 80078e8:	d137      	bne.n	800795a <tcp_pcb_remove+0x7a>
 80078ea:	68cb      	ldr	r3, [r1, #12]
 80078ec:	6003      	str	r3, [r0, #0]
 80078ee:	2300      	movs	r3, #0

  tcp_pcb_purge(pcb);
 80078f0:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 80078f2:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 80078f4:	f7ff fdf2 	bl	80074dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80078f8:	7d23      	ldrb	r3, [r4, #20]
 80078fa:	2b0a      	cmp	r3, #10
 80078fc:	d00a      	beq.n	8007914 <tcp_pcb_remove+0x34>
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d008      	beq.n	8007914 <tcp_pcb_remove+0x34>
     pcb->state != LISTEN &&
     pcb->flags & TF_ACK_DELAY) {
 8007902:	7ea3      	ldrb	r3, [r4, #26]
     pcb->state != LISTEN &&
 8007904:	07da      	lsls	r2, r3, #31
 8007906:	d505      	bpl.n	8007914 <tcp_pcb_remove+0x34>
    pcb->flags |= TF_ACK_NOW;
 8007908:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 800790c:	4620      	mov	r0, r4
    pcb->flags |= TF_ACK_NOW;
 800790e:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8007910:	f001 ff20 	bl	8009754 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8007914:	7d23      	ldrb	r3, [r4, #20]
 8007916:	2b01      	cmp	r3, #1
 8007918:	d01a      	beq.n	8007950 <tcp_pcb_remove+0x70>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800791a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800791c:	b133      	cbz	r3, 800792c <tcp_pcb_remove+0x4c>
 800791e:	4b13      	ldr	r3, [pc, #76]	; (800796c <tcp_pcb_remove+0x8c>)
 8007920:	f240 7253 	movw	r2, #1875	; 0x753
 8007924:	4912      	ldr	r1, [pc, #72]	; (8007970 <tcp_pcb_remove+0x90>)
 8007926:	4813      	ldr	r0, [pc, #76]	; (8007974 <tcp_pcb_remove+0x94>)
 8007928:	f003 fc32 	bl	800b190 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800792c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800792e:	b133      	cbz	r3, 800793e <tcp_pcb_remove+0x5e>
 8007930:	4b0e      	ldr	r3, [pc, #56]	; (800796c <tcp_pcb_remove+0x8c>)
 8007932:	f240 7254 	movw	r2, #1876	; 0x754
 8007936:	4910      	ldr	r1, [pc, #64]	; (8007978 <tcp_pcb_remove+0x98>)
 8007938:	480e      	ldr	r0, [pc, #56]	; (8007974 <tcp_pcb_remove+0x94>)
 800793a:	f003 fc29 	bl	800b190 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800793e:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8007940:	b133      	cbz	r3, 8007950 <tcp_pcb_remove+0x70>
 8007942:	4b0a      	ldr	r3, [pc, #40]	; (800796c <tcp_pcb_remove+0x8c>)
 8007944:	f240 7256 	movw	r2, #1878	; 0x756
 8007948:	490c      	ldr	r1, [pc, #48]	; (800797c <tcp_pcb_remove+0x9c>)
 800794a:	480a      	ldr	r0, [pc, #40]	; (8007974 <tcp_pcb_remove+0x94>)
 800794c:	f003 fc20 	bl	800b190 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8007950:	2300      	movs	r3, #0
 8007952:	7523      	strb	r3, [r4, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007954:	82e3      	strh	r3, [r4, #22]
 8007956:	bd10      	pop	{r4, pc}
 8007958:	4613      	mov	r3, r2
  TCP_RMV(pcblist, pcb);
 800795a:	2b00      	cmp	r3, #0
 800795c:	d0c7      	beq.n	80078ee <tcp_pcb_remove+0xe>
 800795e:	68da      	ldr	r2, [r3, #12]
 8007960:	4294      	cmp	r4, r2
 8007962:	d1f9      	bne.n	8007958 <tcp_pcb_remove+0x78>
 8007964:	68e2      	ldr	r2, [r4, #12]
 8007966:	60da      	str	r2, [r3, #12]
 8007968:	e7c1      	b.n	80078ee <tcp_pcb_remove+0xe>
 800796a:	bf00      	nop
 800796c:	0800d156 	.word	0x0800d156
 8007970:	0800d1b0 	.word	0x0800d1b0
 8007974:	0800c106 	.word	0x0800c106
 8007978:	0800d1c8 	.word	0x0800d1c8
 800797c:	0800d1e1 	.word	0x0800d1e1

08007980 <tcp_close_shutdown>:
{
 8007980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007982:	7d03      	ldrb	r3, [r0, #20]
 8007984:	4604      	mov	r4, r0
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8007986:	2900      	cmp	r1, #0
 8007988:	d049      	beq.n	8007a1e <tcp_close_shutdown+0x9e>
 800798a:	2b04      	cmp	r3, #4
 800798c:	d001      	beq.n	8007992 <tcp_close_shutdown+0x12>
 800798e:	2b07      	cmp	r3, #7
 8007990:	d145      	bne.n	8007a1e <tcp_close_shutdown+0x9e>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8007992:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8007994:	b91a      	cbnz	r2, 800799e <tcp_close_shutdown+0x1e>
 8007996:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8007998:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 800799c:	d03f      	beq.n	8007a1e <tcp_close_shutdown+0x9e>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800799e:	7ea3      	ldrb	r3, [r4, #26]
 80079a0:	06db      	lsls	r3, r3, #27
 80079a2:	d406      	bmi.n	80079b2 <tcp_close_shutdown+0x32>
 80079a4:	4b3f      	ldr	r3, [pc, #252]	; (8007aa4 <tcp_close_shutdown+0x124>)
 80079a6:	f240 120f 	movw	r2, #271	; 0x10f
 80079aa:	493f      	ldr	r1, [pc, #252]	; (8007aa8 <tcp_close_shutdown+0x128>)
 80079ac:	483f      	ldr	r0, [pc, #252]	; (8007aac <tcp_close_shutdown+0x12c>)
 80079ae:	f003 fbef 	bl	800b190 <iprintf>
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80079b2:	8b23      	ldrh	r3, [r4, #24]
 80079b4:	4622      	mov	r2, r4
 80079b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80079b8:	9301      	str	r3, [sp, #4]
 80079ba:	8ae3      	ldrh	r3, [r4, #22]
 80079bc:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	1d23      	adds	r3, r4, #4
 80079c2:	f002 f845 	bl	8009a50 <tcp_rst>
      tcp_pcb_purge(pcb);
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff fd88 	bl	80074dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80079cc:	4a38      	ldr	r2, [pc, #224]	; (8007ab0 <tcp_close_shutdown+0x130>)
 80079ce:	6813      	ldr	r3, [r2, #0]
 80079d0:	429c      	cmp	r4, r3
 80079d2:	d115      	bne.n	8007a00 <tcp_close_shutdown+0x80>
 80079d4:	68e3      	ldr	r3, [r4, #12]
 80079d6:	6013      	str	r3, [r2, #0]
 80079d8:	2300      	movs	r3, #0
 80079da:	2201      	movs	r2, #1
 80079dc:	60e3      	str	r3, [r4, #12]
 80079de:	4b35      	ldr	r3, [pc, #212]	; (8007ab4 <tcp_close_shutdown+0x134>)
 80079e0:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 80079e2:	7d23      	ldrb	r3, [r4, #20]
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d113      	bne.n	8007a10 <tcp_close_shutdown+0x90>
        pcb->state = TIME_WAIT;
 80079e8:	230a      	movs	r3, #10
 80079ea:	7523      	strb	r3, [r4, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80079ec:	4b32      	ldr	r3, [pc, #200]	; (8007ab8 <tcp_close_shutdown+0x138>)
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	601c      	str	r4, [r3, #0]
 80079f2:	60e2      	str	r2, [r4, #12]
 80079f4:	f002 f9ce 	bl	8009d94 <tcp_timer_needed>
}
 80079f8:	2000      	movs	r0, #0
 80079fa:	b003      	add	sp, #12
 80079fc:	bd30      	pop	{r4, r5, pc}
 80079fe:	4613      	mov	r3, r2
      TCP_RMV_ACTIVE(pcb);
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d0e9      	beq.n	80079d8 <tcp_close_shutdown+0x58>
 8007a04:	68da      	ldr	r2, [r3, #12]
 8007a06:	4294      	cmp	r4, r2
 8007a08:	d1f9      	bne.n	80079fe <tcp_close_shutdown+0x7e>
 8007a0a:	68e2      	ldr	r2, [r4, #12]
 8007a0c:	60da      	str	r2, [r3, #12]
 8007a0e:	e7e3      	b.n	80079d8 <tcp_close_shutdown+0x58>
        if (tcp_input_pcb == pcb) {
 8007a10:	4b2a      	ldr	r3, [pc, #168]	; (8007abc <tcp_close_shutdown+0x13c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	429c      	cmp	r4, r3
 8007a16:	d117      	bne.n	8007a48 <tcp_close_shutdown+0xc8>
          tcp_trigger_input_pcb_close();
 8007a18:	f001 fd04 	bl	8009424 <tcp_trigger_input_pcb_close>
 8007a1c:	e7ec      	b.n	80079f8 <tcp_close_shutdown+0x78>
  switch (pcb->state) {
 8007a1e:	2b01      	cmp	r3, #1
 8007a20:	d020      	beq.n	8007a64 <tcp_close_shutdown+0xe4>
 8007a22:	d307      	bcc.n	8007a34 <tcp_close_shutdown+0xb4>
 8007a24:	2b02      	cmp	r3, #2
 8007a26:	d033      	beq.n	8007a90 <tcp_close_shutdown+0x110>
    return tcp_close_shutdown_fin(pcb);
 8007a28:	4620      	mov	r0, r4
}
 8007a2a:	b003      	add	sp, #12
 8007a2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return tcp_close_shutdown_fin(pcb);
 8007a30:	f7ff bc8c 	b.w	800734c <tcp_close_shutdown_fin>
    if (pcb->local_port != 0) {
 8007a34:	8ae3      	ldrh	r3, [r4, #22]
 8007a36:	b13b      	cbz	r3, 8007a48 <tcp_close_shutdown+0xc8>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a38:	4a21      	ldr	r2, [pc, #132]	; (8007ac0 <tcp_close_shutdown+0x140>)
 8007a3a:	6813      	ldr	r3, [r2, #0]
 8007a3c:	429c      	cmp	r4, r3
 8007a3e:	d109      	bne.n	8007a54 <tcp_close_shutdown+0xd4>
 8007a40:	68e3      	ldr	r3, [r4, #12]
 8007a42:	6013      	str	r3, [r2, #0]
 8007a44:	2300      	movs	r3, #0
 8007a46:	60e3      	str	r3, [r4, #12]
          memp_free(MEMP_TCP_PCB, pcb);
 8007a48:	4621      	mov	r1, r4
 8007a4a:	2001      	movs	r0, #1
    memp_free(MEMP_TCP_PCB, pcb);
 8007a4c:	f7ff f80a 	bl	8006a64 <memp_free>
    break;
 8007a50:	e7d2      	b.n	80079f8 <tcp_close_shutdown+0x78>
 8007a52:	4613      	mov	r3, r2
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d0f5      	beq.n	8007a44 <tcp_close_shutdown+0xc4>
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	4294      	cmp	r4, r2
 8007a5c:	d1f9      	bne.n	8007a52 <tcp_close_shutdown+0xd2>
 8007a5e:	68e2      	ldr	r2, [r4, #12]
 8007a60:	60da      	str	r2, [r3, #12]
 8007a62:	e7ef      	b.n	8007a44 <tcp_close_shutdown+0xc4>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007a64:	4917      	ldr	r1, [pc, #92]	; (8007ac4 <tcp_close_shutdown+0x144>)
         pcb->listener = NULL;
 8007a66:	2000      	movs	r0, #0
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8007a68:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8007a6c:	6812      	ldr	r2, [r2, #0]
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007a6e:	b94a      	cbnz	r2, 8007a84 <tcp_close_shutdown+0x104>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8007a70:	3301      	adds	r3, #1
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d1f8      	bne.n	8007a68 <tcp_close_shutdown+0xe8>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8007a76:	4621      	mov	r1, r4
 8007a78:	4813      	ldr	r0, [pc, #76]	; (8007ac8 <tcp_close_shutdown+0x148>)
 8007a7a:	f7ff ff31 	bl	80078e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8007a7e:	4621      	mov	r1, r4
 8007a80:	2002      	movs	r0, #2
 8007a82:	e7e3      	b.n	8007a4c <tcp_close_shutdown+0xcc>
      if (pcb->listener == lpcb) {
 8007a84:	6f95      	ldr	r5, [r2, #120]	; 0x78
 8007a86:	42ac      	cmp	r4, r5
         pcb->listener = NULL;
 8007a88:	bf08      	it	eq
 8007a8a:	6790      	streq	r0, [r2, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8007a8c:	68d2      	ldr	r2, [r2, #12]
 8007a8e:	e7ee      	b.n	8007a6e <tcp_close_shutdown+0xee>
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a90:	4621      	mov	r1, r4
 8007a92:	4807      	ldr	r0, [pc, #28]	; (8007ab0 <tcp_close_shutdown+0x130>)
 8007a94:	f7ff ff24 	bl	80078e0 <tcp_pcb_remove>
 8007a98:	2001      	movs	r0, #1
 8007a9a:	4b06      	ldr	r3, [pc, #24]	; (8007ab4 <tcp_close_shutdown+0x134>)
    memp_free(MEMP_TCP_PCB, pcb);
 8007a9c:	4621      	mov	r1, r4
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8007a9e:	7018      	strb	r0, [r3, #0]
 8007aa0:	e7d4      	b.n	8007a4c <tcp_close_shutdown+0xcc>
 8007aa2:	bf00      	nop
 8007aa4:	0800d156 	.word	0x0800d156
 8007aa8:	0800d13d 	.word	0x0800d13d
 8007aac:	0800c106 	.word	0x0800c106
 8007ab0:	200076ec 	.word	0x200076ec
 8007ab4:	200076e8 	.word	0x200076e8
 8007ab8:	200076fc 	.word	0x200076fc
 8007abc:	20007700 	.word	0x20007700
 8007ac0:	200076f8 	.word	0x200076f8
 8007ac4:	0800d1a0 	.word	0x0800d1a0
 8007ac8:	200076f4 	.word	0x200076f4

08007acc <tcp_close>:
  if (pcb->state != LISTEN) {
 8007acc:	7d03      	ldrb	r3, [r0, #20]
  return tcp_close_shutdown(pcb, 1);
 8007ace:	2101      	movs	r1, #1
  if (pcb->state != LISTEN) {
 8007ad0:	2b01      	cmp	r3, #1
    pcb->flags |= TF_RXCLOSED;
 8007ad2:	bf1e      	ittt	ne
 8007ad4:	7e83      	ldrbne	r3, [r0, #26]
 8007ad6:	f043 0310 	orrne.w	r3, r3, #16
 8007ada:	7683      	strbne	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 8007adc:	f7ff bf50 	b.w	8007980 <tcp_close_shutdown>

08007ae0 <tcp_recv_null>:
{
 8007ae0:	b510      	push	{r4, lr}
 8007ae2:	4608      	mov	r0, r1
  if (p != NULL) {
 8007ae4:	4614      	mov	r4, r2
 8007ae6:	b13a      	cbz	r2, 8007af8 <tcp_recv_null+0x18>
    tcp_recved(pcb, p->tot_len);
 8007ae8:	8911      	ldrh	r1, [r2, #8]
 8007aea:	f7ff fc8d 	bl	8007408 <tcp_recved>
    pbuf_free(p);
 8007aee:	4620      	mov	r0, r4
 8007af0:	f7ff f93e 	bl	8006d70 <pbuf_free>
}
 8007af4:	2000      	movs	r0, #0
 8007af6:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d1fb      	bne.n	8007af4 <tcp_recv_null+0x14>
}
 8007afc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 8007b00:	f7ff bfe4 	b.w	8007acc <tcp_close>

08007b04 <tcp_process_refused_data>:
{
 8007b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    u8_t refused_flags = pcb->refused_data->flags;
 8007b06:	6f46      	ldr	r6, [r0, #116]	; 0x74
    pcb->refused_data = NULL;
 8007b08:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007b0a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
{
 8007b0e:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 8007b10:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 8007b12:	6743      	str	r3, [r0, #116]	; 0x74
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007b14:	b1dd      	cbz	r5, 8007b4e <tcp_process_refused_data+0x4a>
 8007b16:	4601      	mov	r1, r0
 8007b18:	4632      	mov	r2, r6
 8007b1a:	6900      	ldr	r0, [r0, #16]
 8007b1c:	47a8      	blx	r5
 8007b1e:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 8007b20:	b9e0      	cbnz	r0, 8007b5c <tcp_process_refused_data+0x58>
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8007b22:	06bb      	lsls	r3, r7, #26
 8007b24:	d511      	bpl.n	8007b4a <tcp_process_refused_data+0x46>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b26:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007b28:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007b2c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
          pcb->rcv_wnd++;
 8007b30:	bf1c      	itt	ne
 8007b32:	3301      	addne	r3, #1
 8007b34:	8523      	strhne	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 8007b36:	b146      	cbz	r6, 8007b4a <tcp_process_refused_data+0x46>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	6920      	ldr	r0, [r4, #16]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 8007b42:	300d      	adds	r0, #13
 8007b44:	d101      	bne.n	8007b4a <tcp_process_refused_data+0x46>
          return ERR_ABRT;
 8007b46:	f06f 050c 	mvn.w	r5, #12
}
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8007b4e:	4601      	mov	r1, r0
 8007b50:	462b      	mov	r3, r5
 8007b52:	4632      	mov	r2, r6
 8007b54:	4628      	mov	r0, r5
 8007b56:	f7ff ffc3 	bl	8007ae0 <tcp_recv_null>
 8007b5a:	e7e0      	b.n	8007b1e <tcp_process_refused_data+0x1a>
    } else if (err == ERR_ABRT) {
 8007b5c:	f110 050d 	adds.w	r5, r0, #13
 8007b60:	d0f1      	beq.n	8007b46 <tcp_process_refused_data+0x42>
      pcb->refused_data = refused_data;
 8007b62:	6766      	str	r6, [r4, #116]	; 0x74
      return ERR_INPROGRESS;
 8007b64:	f06f 0504 	mvn.w	r5, #4
 8007b68:	e7ef      	b.n	8007b4a <tcp_process_refused_data+0x46>
	...

08007b6c <tcp_fasttmr>:
{
 8007b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 8007b70:	4d1b      	ldr	r5, [pc, #108]	; (8007be0 <tcp_fasttmr+0x74>)
  pcb = tcp_active_pcbs;
 8007b72:	4f1c      	ldr	r7, [pc, #112]	; (8007be4 <tcp_fasttmr+0x78>)
  ++tcp_timer_ctr;
 8007b74:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 8007b76:	4e1c      	ldr	r6, [pc, #112]	; (8007be8 <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 8007b78:	3301      	adds	r3, #1
 8007b7a:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 8007b7c:	683c      	ldr	r4, [r7, #0]
        tcp_active_pcbs_changed = 0;
 8007b7e:	f04f 0800 	mov.w	r8, #0
  while (pcb != NULL) {
 8007b82:	b90c      	cbnz	r4, 8007b88 <tcp_fasttmr+0x1c>
}
 8007b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (pcb->last_timer != tcp_timer_ctr) {
 8007b88:	782b      	ldrb	r3, [r5, #0]
 8007b8a:	7f62      	ldrb	r2, [r4, #29]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d024      	beq.n	8007bda <tcp_fasttmr+0x6e>
      pcb->last_timer = tcp_timer_ctr;
 8007b90:	7763      	strb	r3, [r4, #29]
      if (pcb->flags & TF_ACK_DELAY) {
 8007b92:	7ea3      	ldrb	r3, [r4, #26]
 8007b94:	07d9      	lsls	r1, r3, #31
 8007b96:	d509      	bpl.n	8007bac <tcp_fasttmr+0x40>
        tcp_ack_now(pcb);
 8007b98:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 8007b9c:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 8007b9e:	76a3      	strb	r3, [r4, #26]
        tcp_output(pcb);
 8007ba0:	f001 fdd8 	bl	8009754 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8007ba4:	7ea3      	ldrb	r3, [r4, #26]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	76a3      	strb	r3, [r4, #26]
      if (pcb->flags & TF_CLOSEPEND) {
 8007bac:	7ea3      	ldrb	r3, [r4, #26]
 8007bae:	071a      	lsls	r2, r3, #28
 8007bb0:	d505      	bpl.n	8007bbe <tcp_fasttmr+0x52>
        pcb->flags &= ~(TF_CLOSEPEND);
 8007bb2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 8007bb6:	4620      	mov	r0, r4
        pcb->flags &= ~(TF_CLOSEPEND);
 8007bb8:	76a3      	strb	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 8007bba:	f7ff fbc7 	bl	800734c <tcp_close_shutdown_fin>
      if (pcb->refused_data != NULL) {
 8007bbe:	6f63      	ldr	r3, [r4, #116]	; 0x74
      next = pcb->next;
 8007bc0:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 8007bc4:	b13b      	cbz	r3, 8007bd6 <tcp_fasttmr+0x6a>
        tcp_process_refused_data(pcb);
 8007bc6:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 8007bc8:	f886 8000 	strb.w	r8, [r6]
        tcp_process_refused_data(pcb);
 8007bcc:	f7ff ff9a 	bl	8007b04 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8007bd0:	7833      	ldrb	r3, [r6, #0]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1d2      	bne.n	8007b7c <tcp_fasttmr+0x10>
{
 8007bd6:	464c      	mov	r4, r9
 8007bd8:	e7d3      	b.n	8007b82 <tcp_fasttmr+0x16>
      pcb = pcb->next;
 8007bda:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8007bde:	e7fa      	b.n	8007bd6 <tcp_fasttmr+0x6a>
 8007be0:	20003f3a 	.word	0x20003f3a
 8007be4:	200076ec 	.word	0x200076ec
 8007be8:	200076e8 	.word	0x200076e8

08007bec <tcp_tmr>:
{
 8007bec:	b508      	push	{r3, lr}
  tcp_fasttmr();
 8007bee:	f7ff ffbd 	bl	8007b6c <tcp_fasttmr>
  if (++tcp_timer & 1) {
 8007bf2:	4a06      	ldr	r2, [pc, #24]	; (8007c0c <tcp_tmr+0x20>)
 8007bf4:	7813      	ldrb	r3, [r2, #0]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	7013      	strb	r3, [r2, #0]
 8007bfc:	07db      	lsls	r3, r3, #31
 8007bfe:	d503      	bpl.n	8007c08 <tcp_tmr+0x1c>
}
 8007c00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 8007c04:	f7ff bc8a 	b.w	800751c <tcp_slowtmr>
 8007c08:	bd08      	pop	{r3, pc}
 8007c0a:	bf00      	nop
 8007c0c:	20003f39 	.word	0x20003f39

08007c10 <tcp_abandon>:
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007c10:	7d03      	ldrb	r3, [r0, #20]
 8007c12:	2b01      	cmp	r3, #1
{
 8007c14:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8007c18:	4604      	mov	r4, r0
 8007c1a:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8007c1c:	d106      	bne.n	8007c2c <tcp_abandon+0x1c>
 8007c1e:	4b30      	ldr	r3, [pc, #192]	; (8007ce0 <tcp_abandon+0xd0>)
 8007c20:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8007c24:	492f      	ldr	r1, [pc, #188]	; (8007ce4 <tcp_abandon+0xd4>)
 8007c26:	4830      	ldr	r0, [pc, #192]	; (8007ce8 <tcp_abandon+0xd8>)
 8007c28:	f003 fab2 	bl	800b190 <iprintf>
  if (pcb->state == TIME_WAIT) {
 8007c2c:	7d23      	ldrb	r3, [r4, #20]
 8007c2e:	2b0a      	cmp	r3, #10
 8007c30:	d10a      	bne.n	8007c48 <tcp_abandon+0x38>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8007c32:	4621      	mov	r1, r4
 8007c34:	482d      	ldr	r0, [pc, #180]	; (8007cec <tcp_abandon+0xdc>)
 8007c36:	f7ff fe53 	bl	80078e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	2001      	movs	r0, #1
}
 8007c3e:	b002      	add	sp, #8
 8007c40:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    memp_free(MEMP_TCP_PCB, pcb);
 8007c44:	f7fe bf0e 	b.w	8006a64 <memp_free>
    seqno = pcb->snd_nxt;
 8007c48:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
    ackno = pcb->rcv_nxt;
 8007c4c:	f8d4 a024 	ldr.w	sl, [r4, #36]	; 0x24
    errf = pcb->errf;
 8007c50:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    errf_arg = pcb->callback_arg;
 8007c54:	f8d4 8010 	ldr.w	r8, [r4, #16]
 8007c58:	8ae5      	ldrh	r5, [r4, #22]
    if (pcb->state == CLOSED) {
 8007c5a:	b99b      	cbnz	r3, 8007c84 <tcp_abandon+0x74>
      if (pcb->local_port != 0) {
 8007c5c:	b13d      	cbz	r5, 8007c6e <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c5e:	4a24      	ldr	r2, [pc, #144]	; (8007cf0 <tcp_abandon+0xe0>)
 8007c60:	6813      	ldr	r3, [r2, #0]
 8007c62:	429c      	cmp	r4, r3
 8007c64:	d106      	bne.n	8007c74 <tcp_abandon+0x64>
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	6013      	str	r3, [r2, #0]
 8007c6a:	2500      	movs	r5, #0
 8007c6c:	60e5      	str	r5, [r4, #12]
    int send_rst = 0;
 8007c6e:	462e      	mov	r6, r5
 8007c70:	e00f      	b.n	8007c92 <tcp_abandon+0x82>
 8007c72:	4613      	mov	r3, r2
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d0f8      	beq.n	8007c6a <tcp_abandon+0x5a>
 8007c78:	68da      	ldr	r2, [r3, #12]
 8007c7a:	4294      	cmp	r4, r2
 8007c7c:	d1f9      	bne.n	8007c72 <tcp_abandon+0x62>
 8007c7e:	68e2      	ldr	r2, [r4, #12]
 8007c80:	60da      	str	r2, [r3, #12]
 8007c82:	e7f2      	b.n	8007c6a <tcp_abandon+0x5a>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8007c84:	4621      	mov	r1, r4
 8007c86:	481b      	ldr	r0, [pc, #108]	; (8007cf4 <tcp_abandon+0xe4>)
 8007c88:	f7ff fe2a 	bl	80078e0 <tcp_pcb_remove>
 8007c8c:	2201      	movs	r2, #1
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <tcp_abandon+0xe8>)
 8007c90:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 8007c92:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007c94:	b108      	cbz	r0, 8007c9a <tcp_abandon+0x8a>
      tcp_segs_free(pcb->unacked);
 8007c96:	f7ff fc03 	bl	80074a0 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 8007c9a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007c9c:	b108      	cbz	r0, 8007ca2 <tcp_abandon+0x92>
      tcp_segs_free(pcb->unsent);
 8007c9e:	f7ff fbff 	bl	80074a0 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 8007ca2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8007ca4:	b108      	cbz	r0, 8007caa <tcp_abandon+0x9a>
      tcp_segs_free(pcb->ooseq);
 8007ca6:	f7ff fbfb 	bl	80074a0 <tcp_segs_free>
    if (send_rst) {
 8007caa:	b146      	cbz	r6, 8007cbe <tcp_abandon+0xae>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8007cac:	8b23      	ldrh	r3, [r4, #24]
 8007cae:	4622      	mov	r2, r4
 8007cb0:	9500      	str	r5, [sp, #0]
 8007cb2:	4651      	mov	r1, sl
 8007cb4:	9301      	str	r3, [sp, #4]
 8007cb6:	4648      	mov	r0, r9
 8007cb8:	1d23      	adds	r3, r4, #4
 8007cba:	f001 fec9 	bl	8009a50 <tcp_rst>
    memp_free(MEMP_TCP_PCB, pcb);
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	2001      	movs	r0, #1
 8007cc2:	f7fe fecf 	bl	8006a64 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007cc6:	b13f      	cbz	r7, 8007cd8 <tcp_abandon+0xc8>
 8007cc8:	f06f 010c 	mvn.w	r1, #12
 8007ccc:	4640      	mov	r0, r8
 8007cce:	463b      	mov	r3, r7
}
 8007cd0:	b002      	add	sp, #8
 8007cd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8007cd6:	4718      	bx	r3
}
 8007cd8:	b002      	add	sp, #8
 8007cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cde:	bf00      	nop
 8007ce0:	0800d156 	.word	0x0800d156
 8007ce4:	0800d0ff 	.word	0x0800d0ff
 8007ce8:	0800c106 	.word	0x0800c106
 8007cec:	200076fc 	.word	0x200076fc
 8007cf0:	200076f8 	.word	0x200076f8
 8007cf4:	200076ec 	.word	0x200076ec
 8007cf8:	200076e8 	.word	0x200076e8

08007cfc <tcp_abort>:
  tcp_abandon(pcb, 1);
 8007cfc:	2101      	movs	r1, #1
 8007cfe:	f7ff bf87 	b.w	8007c10 <tcp_abandon>

08007d02 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 8007d02:	b538      	push	{r3, r4, r5, lr}
 8007d04:	4605      	mov	r5, r0
  struct tcp_pcb *pcb;
  pcb = pcb_list;
  while (pcb != NULL) {
 8007d06:	b901      	cbnz	r1, 8007d0a <tcp_netif_ip_addr_changed_pcblist+0x8>
      pcb = next;
    } else {
      pcb = pcb->next;
    }
  }
}
 8007d08:	bd38      	pop	{r3, r4, r5, pc}
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007d0a:	680a      	ldr	r2, [r1, #0]
 8007d0c:	682b      	ldr	r3, [r5, #0]
 8007d0e:	68cc      	ldr	r4, [r1, #12]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d102      	bne.n	8007d1a <tcp_netif_ip_addr_changed_pcblist+0x18>
      tcp_abort(pcb);
 8007d14:	4608      	mov	r0, r1
 8007d16:	f7ff fff1 	bl	8007cfc <tcp_abort>
      pcb = pcb->next;
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	e7f3      	b.n	8007d06 <tcp_netif_ip_addr_changed_pcblist+0x4>
	...

08007d20 <tcp_kill_state>:
{
 8007d20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007d22:	f1a0 0308 	sub.w	r3, r0, #8
{
 8007d26:	4604      	mov	r4, r0
  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d906      	bls.n	8007d3a <tcp_kill_state+0x1a>
 8007d2c:	4b0f      	ldr	r3, [pc, #60]	; (8007d6c <tcp_kill_state+0x4c>)
 8007d2e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8007d32:	490f      	ldr	r1, [pc, #60]	; (8007d70 <tcp_kill_state+0x50>)
 8007d34:	480f      	ldr	r0, [pc, #60]	; (8007d74 <tcp_kill_state+0x54>)
 8007d36:	f003 fa2b 	bl	800b190 <iprintf>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d3a:	4b0f      	ldr	r3, [pc, #60]	; (8007d78 <tcp_kill_state+0x58>)
  inactivity = 0;
 8007d3c:	2200      	movs	r2, #0
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d3e:	6819      	ldr	r1, [r3, #0]
  inactive = NULL;
 8007d40:	4610      	mov	r0, r2
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d42:	4b0e      	ldr	r3, [pc, #56]	; (8007d7c <tcp_kill_state+0x5c>)
 8007d44:	681d      	ldr	r5, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d46:	b921      	cbnz	r1, 8007d52 <tcp_kill_state+0x32>
  if (inactive != NULL) {
 8007d48:	b170      	cbz	r0, 8007d68 <tcp_kill_state+0x48>
}
 8007d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tcp_abandon(inactive, 0);
 8007d4e:	f7ff bf5f 	b.w	8007c10 <tcp_abandon>
    if (pcb->state == state) {
 8007d52:	7d0b      	ldrb	r3, [r1, #20]
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d105      	bne.n	8007d64 <tcp_kill_state+0x44>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d58:	6a0b      	ldr	r3, [r1, #32]
 8007d5a:	1aeb      	subs	r3, r5, r3
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	bf9c      	itt	ls
 8007d60:	461a      	movls	r2, r3
 8007d62:	4608      	movls	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d64:	68c9      	ldr	r1, [r1, #12]
 8007d66:	e7ee      	b.n	8007d46 <tcp_kill_state+0x26>
 8007d68:	bd38      	pop	{r3, r4, r5, pc}
 8007d6a:	bf00      	nop
 8007d6c:	0800d156 	.word	0x0800d156
 8007d70:	0800d191 	.word	0x0800d191
 8007d74:	0800c106 	.word	0x0800c106
 8007d78:	200076ec 	.word	0x200076ec
 8007d7c:	200076f0 	.word	0x200076f0

08007d80 <tcp_alloc>:
{
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	4606      	mov	r6, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007d84:	2001      	movs	r0, #1
 8007d86:	f7fe fe51 	bl	8006a2c <memp_malloc>
 8007d8a:	4d3b      	ldr	r5, [pc, #236]	; (8007e78 <tcp_alloc+0xf8>)
  if (pcb == NULL) {
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	bb90      	cbnz	r0, 8007df6 <tcp_alloc+0x76>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d90:	4b3a      	ldr	r3, [pc, #232]	; (8007e7c <tcp_alloc+0xfc>)
  inactivity = 0;
 8007d92:	4621      	mov	r1, r4
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007d94:	6828      	ldr	r0, [r5, #0]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d158      	bne.n	8007e4e <tcp_alloc+0xce>
  if (inactive != NULL) {
 8007d9c:	b114      	cbz	r4, 8007da4 <tcp_alloc+0x24>
    tcp_abort(inactive);
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f7ff ffac 	bl	8007cfc <tcp_abort>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007da4:	2001      	movs	r0, #1
 8007da6:	f7fe fe41 	bl	8006a2c <memp_malloc>
    if (pcb == NULL) {
 8007daa:	4604      	mov	r4, r0
 8007dac:	bb18      	cbnz	r0, 8007df6 <tcp_alloc+0x76>
      tcp_kill_state(LAST_ACK);
 8007dae:	2009      	movs	r0, #9
 8007db0:	f7ff ffb6 	bl	8007d20 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007db4:	2001      	movs	r0, #1
 8007db6:	f7fe fe39 	bl	8006a2c <memp_malloc>
      if (pcb == NULL) {
 8007dba:	4604      	mov	r4, r0
 8007dbc:	b9d8      	cbnz	r0, 8007df6 <tcp_alloc+0x76>
        tcp_kill_state(CLOSING);
 8007dbe:	2008      	movs	r0, #8
 8007dc0:	f7ff ffae 	bl	8007d20 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	f7fe fe31 	bl	8006a2c <memp_malloc>
        if (pcb == NULL) {
 8007dca:	4604      	mov	r4, r0
 8007dcc:	b998      	cbnz	r0, 8007df6 <tcp_alloc+0x76>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007dce:	f016 0f80 	tst.w	r6, #128	; 0x80
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dd2:	4b2b      	ldr	r3, [pc, #172]	; (8007e80 <tcp_alloc+0x100>)
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007dd4:	f8d5 e000 	ldr.w	lr, [r5]
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8007dd8:	bf0c      	ite	eq
 8007dda:	4631      	moveq	r1, r6
 8007ddc:	217f      	movne	r1, #127	; 0x7f
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d13c      	bne.n	8007e5e <tcp_alloc+0xde>
  if (inactive != NULL) {
 8007de4:	b114      	cbz	r4, 8007dec <tcp_alloc+0x6c>
    tcp_abort(inactive);
 8007de6:	4620      	mov	r0, r4
 8007de8:	f7ff ff88 	bl	8007cfc <tcp_abort>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007dec:	2001      	movs	r0, #1
 8007dee:	f7fe fe1d 	bl	8006a2c <memp_malloc>
  if (pcb != NULL) {
 8007df2:	4604      	mov	r4, r0
 8007df4:	b348      	cbz	r0, 8007e4a <tcp_alloc+0xca>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8007df6:	2298      	movs	r2, #152	; 0x98
 8007df8:	2100      	movs	r1, #0
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f003 f9c0 	bl	800b180 <memset>
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e00:	f44f 6206 	mov.w	r2, #2144	; 0x860
    pcb->snd_buf = TCP_SND_BUF;
 8007e04:	f44f 6386 	mov.w	r3, #1072	; 0x430
    pcb->prio = prio;
 8007e08:	7566      	strb	r6, [r4, #21]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8007e0a:	8562      	strh	r2, [r4, #42]	; 0x2a
 8007e0c:	8522      	strh	r2, [r4, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8007e0e:	22ff      	movs	r2, #255	; 0xff
    pcb->snd_buf = TCP_SND_BUF;
 8007e10:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    pcb->ttl = TCP_TTL;
 8007e14:	72a2      	strb	r2, [r4, #10]
    pcb->mss = INITIAL_MSS;
 8007e16:	f44f 7206 	mov.w	r2, #536	; 0x218
    pcb->ssthresh = TCP_SND_BUF;
 8007e1a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
    pcb->mss = INITIAL_MSS;
 8007e1e:	8662      	strh	r2, [r4, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007e20:	2206      	movs	r2, #6
    pcb->recv = tcp_recv_null;
 8007e22:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <tcp_alloc+0x104>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8007e24:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8007e28:	87e2      	strh	r2, [r4, #62]	; 0x3e
    pcb->rtime = -1;
 8007e2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    pcb->recv = tcp_recv_null;
 8007e2e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    pcb->rtime = -1;
 8007e32:	8622      	strh	r2, [r4, #48]	; 0x30
    pcb->cwnd = 1;
 8007e34:	2201      	movs	r2, #1
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <tcp_alloc+0x108>)
    pcb->cwnd = 1;
 8007e38:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8007e3c:	682a      	ldr	r2, [r5, #0]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007e3e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    pcb->tmr = tcp_ticks;
 8007e42:	6222      	str	r2, [r4, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007e44:	4a11      	ldr	r2, [pc, #68]	; (8007e8c <tcp_alloc+0x10c>)
 8007e46:	7812      	ldrb	r2, [r2, #0]
 8007e48:	7762      	strb	r2, [r4, #29]
}
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e4e:	6a1a      	ldr	r2, [r3, #32]
 8007e50:	1a82      	subs	r2, r0, r2
 8007e52:	428a      	cmp	r2, r1
 8007e54:	bf24      	itt	cs
 8007e56:	461c      	movcs	r4, r3
 8007e58:	4611      	movcs	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e5a:	68db      	ldr	r3, [r3, #12]
 8007e5c:	e79c      	b.n	8007d98 <tcp_alloc+0x18>
    if (pcb->prio <= mprio &&
 8007e5e:	7d5f      	ldrb	r7, [r3, #21]
 8007e60:	428f      	cmp	r7, r1
 8007e62:	d807      	bhi.n	8007e74 <tcp_alloc+0xf4>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8007e64:	6a1a      	ldr	r2, [r3, #32]
 8007e66:	ebae 0202 	sub.w	r2, lr, r2
    if (pcb->prio <= mprio &&
 8007e6a:	4282      	cmp	r2, r0
 8007e6c:	bf22      	ittt	cs
 8007e6e:	4639      	movcs	r1, r7
 8007e70:	4610      	movcs	r0, r2
 8007e72:	461c      	movcs	r4, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	e7b3      	b.n	8007de0 <tcp_alloc+0x60>
 8007e78:	200076f0 	.word	0x200076f0
 8007e7c:	200076fc 	.word	0x200076fc
 8007e80:	200076ec 	.word	0x200076ec
 8007e84:	08007ae1 	.word	0x08007ae1
 8007e88:	006ddd00 	.word	0x006ddd00
 8007e8c:	20003f3a 	.word	0x20003f3a

08007e90 <tcp_next_iss>:
  iss += tcp_ticks;       /* XXX */
 8007e90:	4b03      	ldr	r3, [pc, #12]	; (8007ea0 <tcp_next_iss+0x10>)
 8007e92:	4a04      	ldr	r2, [pc, #16]	; (8007ea4 <tcp_next_iss+0x14>)
 8007e94:	6818      	ldr	r0, [r3, #0]
 8007e96:	6812      	ldr	r2, [r2, #0]
 8007e98:	4410      	add	r0, r2
 8007e9a:	6018      	str	r0, [r3, #0]
}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	20000008 	.word	0x20000008
 8007ea4:	200076f0 	.word	0x200076f0

08007ea8 <tcp_eff_send_mss_impl>:
{
 8007ea8:	b510      	push	{r4, lr}
 8007eaa:	4604      	mov	r4, r0
  outif = ip_route(src, dest);
 8007eac:	4608      	mov	r0, r1
 8007eae:	f7fd fe11 	bl	8005ad4 <ip4_route>
    if (outif == NULL) {
 8007eb2:	b130      	cbz	r0, 8007ec2 <tcp_eff_send_mss_impl+0x1a>
    mtu = outif->mtu;
 8007eb4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
  if (mtu != 0) {
 8007eb6:	b123      	cbz	r3, 8007ec2 <tcp_eff_send_mss_impl+0x1a>
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 8007eb8:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	429c      	cmp	r4, r3
 8007ebe:	bf28      	it	cs
 8007ec0:	461c      	movcs	r4, r3
}
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	bd10      	pop	{r4, pc}
	...

08007ec8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8007ec8:	b538      	push	{r3, r4, r5, lr}
 8007eca:	460d      	mov	r5, r1
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8007ecc:	4604      	mov	r4, r0
 8007ece:	b180      	cbz	r0, 8007ef2 <tcp_netif_ip_addr_changed+0x2a>
 8007ed0:	6803      	ldr	r3, [r0, #0]
 8007ed2:	b173      	cbz	r3, 8007ef2 <tcp_netif_ip_addr_changed+0x2a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <tcp_netif_ip_addr_changed+0x40>)
 8007ed6:	6819      	ldr	r1, [r3, #0]
 8007ed8:	f7ff ff13 	bl	8007d02 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8007edc:	4b0b      	ldr	r3, [pc, #44]	; (8007f0c <tcp_netif_ip_addr_changed+0x44>)
 8007ede:	4620      	mov	r0, r4
 8007ee0:	6819      	ldr	r1, [r3, #0]
 8007ee2:	f7ff ff0e 	bl	8007d02 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8007ee6:	b125      	cbz	r5, 8007ef2 <tcp_netif_ip_addr_changed+0x2a>
 8007ee8:	682b      	ldr	r3, [r5, #0]
 8007eea:	b113      	cbz	r3, 8007ef2 <tcp_netif_ip_addr_changed+0x2a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 8007eec:	4b08      	ldr	r3, [pc, #32]	; (8007f10 <tcp_netif_ip_addr_changed+0x48>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	b903      	cbnz	r3, 8007ef4 <tcp_netif_ip_addr_changed+0x2c>
 8007ef2:	bd38      	pop	{r3, r4, r5, pc}
        next = lpcb->next;
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	6821      	ldr	r1, [r4, #0]
        next = lpcb->next;
 8007ef8:	68da      	ldr	r2, [r3, #12]
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8007efa:	4288      	cmp	r0, r1
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8007efc:	bf04      	itt	eq
 8007efe:	6829      	ldreq	r1, [r5, #0]
 8007f00:	6019      	streq	r1, [r3, #0]
{
 8007f02:	4613      	mov	r3, r2
 8007f04:	e7f4      	b.n	8007ef0 <tcp_netif_ip_addr_changed+0x28>
 8007f06:	bf00      	nop
 8007f08:	200076ec 	.word	0x200076ec
 8007f0c:	200076f8 	.word	0x200076f8
 8007f10:	200076f4 	.word	0x200076f4

08007f14 <tcp_oos_insert_segment>:
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f14:	68c3      	ldr	r3, [r0, #12]
{
 8007f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1a:	4605      	mov	r5, r0
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f1c:	8998      	ldrh	r0, [r3, #12]
{
 8007f1e:	460c      	mov	r4, r1
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8007f20:	f7fc f86c 	bl	8003ffc <lwip_htons>
 8007f24:	07c2      	lsls	r2, r0, #31
 8007f26:	d415      	bmi.n	8007f54 <tcp_oos_insert_segment+0x40>
    next = NULL;
  } else {
    /* delete some following segments
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f28:	4e18      	ldr	r6, [pc, #96]	; (8007f8c <tcp_oos_insert_segment+0x78>)
    while (next &&
 8007f2a:	b1bc      	cbz	r4, 8007f5c <tcp_oos_insert_segment+0x48>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8007f2c:	68e7      	ldr	r7, [r4, #12]
 8007f2e:	6830      	ldr	r0, [r6, #0]
 8007f30:	892b      	ldrh	r3, [r5, #8]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	8922      	ldrh	r2, [r4, #8]
 8007f36:	4403      	add	r3, r0
 8007f38:	440a      	add	r2, r1
 8007f3a:	1a9a      	subs	r2, r3, r2
    while (next &&
 8007f3c:	2a00      	cmp	r2, #0
 8007f3e:	da10      	bge.n	8007f62 <tcp_oos_insert_segment+0x4e>
      old_seg = next;
      next = next->next;
      tcp_seg_free(old_seg);
    }
    if (next &&
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8007f40:	1a5b      	subs	r3, r3, r1
    if (next &&
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	dd0a      	ble.n	8007f5c <tcp_oos_insert_segment+0x48>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f46:	1a09      	subs	r1, r1, r0
      pbuf_realloc(cseg->p, cseg->len);
 8007f48:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8007f4a:	b289      	uxth	r1, r1
 8007f4c:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8007f4e:	f7ff f855 	bl	8006ffc <pbuf_realloc>
 8007f52:	e003      	b.n	8007f5c <tcp_oos_insert_segment+0x48>
    tcp_segs_free(next);
 8007f54:	4620      	mov	r0, r4
    next = NULL;
 8007f56:	2400      	movs	r4, #0
    tcp_segs_free(next);
 8007f58:	f7ff faa2 	bl	80074a0 <tcp_segs_free>
    }
  }
  cseg->next = next;
 8007f5c:	602c      	str	r4, [r5, #0]
}
 8007f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8007f62:	89b8      	ldrh	r0, [r7, #12]
 8007f64:	f7fc f84a 	bl	8003ffc <lwip_htons>
 8007f68:	07c3      	lsls	r3, r0, #31
 8007f6a:	d509      	bpl.n	8007f80 <tcp_oos_insert_segment+0x6c>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8007f6c:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8007f70:	2001      	movs	r0, #1
 8007f72:	f8b8 700c 	ldrh.w	r7, [r8, #12]
 8007f76:	f7fc f841 	bl	8003ffc <lwip_htons>
 8007f7a:	4338      	orrs	r0, r7
 8007f7c:	f8a8 000c 	strh.w	r0, [r8, #12]
      next = next->next;
 8007f80:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 8007f82:	4620      	mov	r0, r4
 8007f84:	f7ff fa7e 	bl	8007484 <tcp_seg_free>
      next = next->next;
 8007f88:	463c      	mov	r4, r7
 8007f8a:	e7ce      	b.n	8007f2a <tcp_oos_insert_segment+0x16>
 8007f8c:	20003f60 	.word	0x20003f60

08007f90 <tcp_receive>:
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f90:	7d03      	ldrb	r3, [r0, #20]
 8007f92:	2b03      	cmp	r3, #3
{
 8007f94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f98:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8007f9a:	d806      	bhi.n	8007faa <tcp_receive+0x1a>
 8007f9c:	4b89      	ldr	r3, [pc, #548]	; (80081c4 <tcp_receive+0x234>)
 8007f9e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8007fa2:	4989      	ldr	r1, [pc, #548]	; (80081c8 <tcp_receive+0x238>)
 8007fa4:	4889      	ldr	r0, [pc, #548]	; (80081cc <tcp_receive+0x23c>)
 8007fa6:	f003 f8f3 	bl	800b190 <iprintf>

  if (flags & TCP_ACK) {
 8007faa:	4b89      	ldr	r3, [pc, #548]	; (80081d0 <tcp_receive+0x240>)
 8007fac:	4e89      	ldr	r6, [pc, #548]	; (80081d4 <tcp_receive+0x244>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	f013 0f10 	tst.w	r3, #16
 8007fb4:	f000 8180 	beq.w	80082b8 <tcp_receive+0x328>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fb8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8007fba:	6830      	ldr	r0, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007fbc:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fc0:	1a1d      	subs	r5, r3, r0
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8007fc2:	6d61      	ldr	r1, [r4, #84]	; 0x54
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8007fc4:	2d00      	cmp	r5, #0
 8007fc6:	4d84      	ldr	r5, [pc, #528]	; (80081d8 <tcp_receive+0x248>)
 8007fc8:	db0d      	blt.n	8007fe6 <tcp_receive+0x56>
 8007fca:	4283      	cmp	r3, r0
 8007fcc:	d103      	bne.n	8007fd6 <tcp_receive+0x46>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8007fce:	682b      	ldr	r3, [r5, #0]
 8007fd0:	1acb      	subs	r3, r1, r3
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	db07      	blt.n	8007fe6 <tcp_receive+0x56>
 8007fd6:	682b      	ldr	r3, [r5, #0]
 8007fd8:	4299      	cmp	r1, r3
 8007fda:	d11c      	bne.n	8008016 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8007fdc:	4b7f      	ldr	r3, [pc, #508]	; (80081dc <tcp_receive+0x24c>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	89db      	ldrh	r3, [r3, #14]
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d917      	bls.n	8008016 <tcp_receive+0x86>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007fe6:	4b7d      	ldr	r3, [pc, #500]	; (80081dc <tcp_receive+0x24c>)
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007fe8:	f8b4 e05e 	ldrh.w	lr, [r4, #94]	; 0x5e
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	89df      	ldrh	r7, [r3, #14]
        pcb->snd_wnd_max = pcb->snd_wnd;
      }
      pcb->snd_wl1 = seqno;
 8007ff0:	6520      	str	r0, [r4, #80]	; 0x50
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8007ff2:	45be      	cmp	lr, r7
      pcb->snd_wl2 = ackno;
 8007ff4:	6828      	ldr	r0, [r5, #0]
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8007ff6:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pcb->snd_wl2 = ackno;
 8007ffa:	6560      	str	r0, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007ffc:	bf38      	it	cc
 8007ffe:	f8a4 705e 	strhcc.w	r7, [r4, #94]	; 0x5e
 8008002:	f894 0095 	ldrb.w	r0, [r4, #149]	; 0x95
      if (pcb->snd_wnd == 0) {
 8008006:	2f00      	cmp	r7, #0
 8008008:	d13c      	bne.n	8008084 <tcp_receive+0xf4>
        if (pcb->persist_backoff == 0) {
 800800a:	b920      	cbnz	r0, 8008016 <tcp_receive+0x86>
          /* start persist timer */
          pcb->persist_cnt = 0;
          pcb->persist_backoff = 1;
 800800c:	2301      	movs	r3, #1
          pcb->persist_cnt = 0;
 800800e:	f884 7094 	strb.w	r7, [r4, #148]	; 0x94
        }
      } else if (pcb->persist_backoff > 0) {
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8008012:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 800801c:	4f70      	ldr	r7, [pc, #448]	; (80081e0 <tcp_receive+0x250>)
 800801e:	eba3 000e 	sub.w	r0, r3, lr
 8008022:	2800      	cmp	r0, #0
 8008024:	dc37      	bgt.n	8008096 <tcp_receive+0x106>
      /* Clause 2 */
      if (tcplen == 0) {
 8008026:	486f      	ldr	r0, [pc, #444]	; (80081e4 <tcp_receive+0x254>)
 8008028:	8800      	ldrh	r0, [r0, #0]
 800802a:	2800      	cmp	r0, #0
 800802c:	f040 8476 	bne.w	800891c <tcp_receive+0x98c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008030:	440a      	add	r2, r1
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008032:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008034:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8008038:	4401      	add	r1, r0
 800803a:	428a      	cmp	r2, r1
 800803c:	f040 846e 	bne.w	800891c <tcp_receive+0x98c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008040:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8008044:	2a00      	cmp	r2, #0
 8008046:	f2c0 8469 	blt.w	800891c <tcp_receive+0x98c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800804a:	4573      	cmp	r3, lr
 800804c:	f040 8466 	bne.w	800891c <tcp_receive+0x98c>
              found_dupack = 1;
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008054:	1c53      	adds	r3, r2, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	429a      	cmp	r2, r3
                ++pcb->dupacks;
 800805a:	bf38      	it	cc
 800805c:	f884 3043 	strbcc.w	r3, [r4, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008060:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008064:	2b03      	cmp	r3, #3
 8008066:	d911      	bls.n	800808c <tcp_receive+0xfc>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8008068:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 800806c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800806e:	4413      	add	r3, r2
 8008070:	b29b      	uxth	r3, r3
 8008072:	429a      	cmp	r2, r3
 8008074:	d201      	bcs.n	800807a <tcp_receive+0xea>
                  pcb->cwnd += pcb->mss;
 8008076:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      if (pcb->unsent == NULL) {
        pcb->unsent_oversize = 0;
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800807a:	f8df a148 	ldr.w	sl, [pc, #328]	; 80081c4 <tcp_receive+0x234>
 800807e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80081cc <tcp_receive+0x23c>
 8008082:	e10c      	b.n	800829e <tcp_receive+0x30e>
      } else if (pcb->persist_backoff > 0) {
 8008084:	2800      	cmp	r0, #0
 8008086:	d0c6      	beq.n	8008016 <tcp_receive+0x86>
          pcb->persist_backoff = 0;
 8008088:	2300      	movs	r3, #0
 800808a:	e7c2      	b.n	8008012 <tcp_receive+0x82>
              } else if (pcb->dupacks == 3) {
 800808c:	d1f5      	bne.n	800807a <tcp_receive+0xea>
                tcp_rexmit_fast(pcb);
 800808e:	4620      	mov	r0, r4
 8008090:	f001 fd7d 	bl	8009b8e <tcp_rexmit_fast>
 8008094:	e7f1      	b.n	800807a <tcp_receive+0xea>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8008096:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008098:	1a9a      	subs	r2, r3, r2
 800809a:	2a00      	cmp	r2, #0
 800809c:	f300 808d 	bgt.w	80081ba <tcp_receive+0x22a>
      if (pcb->flags & TF_INFR) {
 80080a0:	7ea2      	ldrb	r2, [r4, #26]
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80080a2:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      if (pcb->flags & TF_INFR) {
 80080a6:	0751      	lsls	r1, r2, #29
      pcb->lastack = ackno;
 80080a8:	6463      	str	r3, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 80080aa:	7d23      	ldrb	r3, [r4, #20]
      pcb->nrtx = 0;
 80080ac:	f04f 0100 	mov.w	r1, #0
        pcb->flags &= ~TF_INFR;
 80080b0:	bf48      	it	mi
 80080b2:	f022 0204 	bicmi.w	r2, r2, #4
      pcb->nrtx = 0;
 80080b6:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        pcb->flags &= ~TF_INFR;
 80080ba:	bf44      	itt	mi
 80080bc:	76a2      	strbmi	r2, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 80080be:	f8b4 204a 	ldrhmi.w	r2, [r4, #74]	; 0x4a
      pcb->dupacks = 0;
 80080c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
        pcb->cwnd = pcb->ssthresh;
 80080c6:	bf48      	it	mi
 80080c8:	f8a4 2048 	strhmi.w	r2, [r4, #72]	; 0x48
      if (pcb->state >= ESTABLISHED) {
 80080cc:	2b03      	cmp	r3, #3
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80080ce:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80080d0:	eb02 02e0 	add.w	r2, r2, r0, asr #3
 80080d4:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 80080d8:	d90f      	bls.n	80080fa <tcp_receive+0x16a>
        if (pcb->cwnd < pcb->ssthresh) {
 80080da:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 80080de:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80080e2:	4293      	cmp	r3, r2
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80080e4:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80080e6:	bf9c      	itt	ls
 80080e8:	435b      	mulls	r3, r3
 80080ea:	fb93 f3f2 	sdivls	r3, r3, r2
 80080ee:	4413      	add	r3, r2
 80080f0:	b29b      	uxth	r3, r3
          if (new_cwnd > pcb->cwnd) {
 80080f2:	429a      	cmp	r2, r3
            pcb->cwnd = new_cwnd;
 80080f4:	bf38      	it	cc
 80080f6:	f8a4 3048 	strhcc.w	r3, [r4, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80080fa:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80081c4 <tcp_receive+0x234>
 80080fe:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 80081cc <tcp_receive+0x23c>
      while (pcb->unacked != NULL &&
 8008102:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008104:	b943      	cbnz	r3, 8008118 <tcp_receive+0x188>
      if (pcb->unacked == NULL) {
 8008106:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8008108:	2300      	movs	r3, #0
 800810a:	2a00      	cmp	r2, #0
 800810c:	d153      	bne.n	80081b6 <tcp_receive+0x226>
        pcb->rtime = -1;
 800810e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008112:	8622      	strh	r2, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 8008114:	76e3      	strb	r3, [r4, #27]
 8008116:	e7b0      	b.n	800807a <tcp_receive+0xea>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8008118:	68db      	ldr	r3, [r3, #12]
 800811a:	6858      	ldr	r0, [r3, #4]
 800811c:	f7fb ff71 	bl	8004002 <lwip_htonl>
 8008120:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8008122:	4683      	mov	fp, r0
 8008124:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	8998      	ldrh	r0, [r3, #12]
 800812c:	f7fb ff66 	bl	8003ffc <lwip_htons>
 8008130:	682b      	ldr	r3, [r5, #0]
 8008132:	f010 0003 	ands.w	r0, r0, #3
 8008136:	eba8 0803 	sub.w	r8, r8, r3
 800813a:	bf18      	it	ne
 800813c:	2001      	movne	r0, #1
 800813e:	44d8      	add	r8, fp
 8008140:	4480      	add	r8, r0
      while (pcb->unacked != NULL &&
 8008142:	f1b8 0f00 	cmp.w	r8, #0
 8008146:	dcde      	bgt.n	8008106 <tcp_receive+0x176>
        next = pcb->unacked;
 8008148:	f8d4 806c 	ldr.w	r8, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800814c:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
        pcb->unacked = pcb->unacked->next;
 8008150:	f8d8 3000 	ldr.w	r3, [r8]
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008154:	f8d8 0004 	ldr.w	r0, [r8, #4]
        pcb->unacked = pcb->unacked->next;
 8008158:	66e3      	str	r3, [r4, #108]	; 0x6c
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800815a:	f7fe ffbf 	bl	80070dc <pbuf_clen>
 800815e:	4583      	cmp	fp, r0
 8008160:	d206      	bcs.n	8008170 <tcp_receive+0x1e0>
 8008162:	464b      	mov	r3, r9
 8008164:	f240 429e 	movw	r2, #1182	; 0x49e
 8008168:	491f      	ldr	r1, [pc, #124]	; (80081e8 <tcp_receive+0x258>)
 800816a:	4650      	mov	r0, sl
 800816c:	f003 f810 	bl	800b190 <iprintf>
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008170:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008174:	f7fe ffb2 	bl	80070dc <pbuf_clen>
 8008178:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
        recv_acked += next->len;
 800817c:	883a      	ldrh	r2, [r7, #0]
        pcb->snd_queuelen -= pbuf_clen(next->p);
 800817e:	1a18      	subs	r0, r3, r0
        recv_acked += next->len;
 8008180:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008184:	4413      	add	r3, r2
        pcb->snd_queuelen -= pbuf_clen(next->p);
 8008186:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
        tcp_seg_free(next);
 800818a:	4640      	mov	r0, r8
        recv_acked += next->len;
 800818c:	803b      	strh	r3, [r7, #0]
        tcp_seg_free(next);
 800818e:	f7ff f979 	bl	8007484 <tcp_seg_free>
        if (pcb->snd_queuelen != 0) {
 8008192:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008196:	2b00      	cmp	r3, #0
 8008198:	d0b3      	beq.n	8008102 <tcp_receive+0x172>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800819a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800819c:	2b00      	cmp	r3, #0
 800819e:	d1b0      	bne.n	8008102 <tcp_receive+0x172>
 80081a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d1ad      	bne.n	8008102 <tcp_receive+0x172>
 80081a6:	464b      	mov	r3, r9
 80081a8:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80081ac:	490f      	ldr	r1, [pc, #60]	; (80081ec <tcp_receive+0x25c>)
 80081ae:	4650      	mov	r0, sl
 80081b0:	f002 ffee 	bl	800b190 <iprintf>
 80081b4:	e7a5      	b.n	8008102 <tcp_receive+0x172>
        pcb->rtime = 0;
 80081b6:	8623      	strh	r3, [r4, #48]	; 0x30
 80081b8:	e7ac      	b.n	8008114 <tcp_receive+0x184>
      tcp_send_empty_ack(pcb);
 80081ba:	4620      	mov	r0, r4
 80081bc:	f001 fa94 	bl	80096e8 <tcp_send_empty_ack>
 80081c0:	e75b      	b.n	800807a <tcp_receive+0xea>
 80081c2:	bf00      	nop
 80081c4:	0800d568 	.word	0x0800d568
 80081c8:	0800d59a 	.word	0x0800d59a
 80081cc:	0800c106 	.word	0x0800c106
 80081d0:	20003f40 	.word	0x20003f40
 80081d4:	20003f60 	.word	0x20003f60
 80081d8:	20003f3c 	.word	0x20003f3c
 80081dc:	20003f68 	.word	0x20003f68
 80081e0:	20003f54 	.word	0x20003f54
 80081e4:	20003f76 	.word	0x20003f76
 80081e8:	0800d5b3 	.word	0x0800d5b3
 80081ec:	0800d5db 	.word	0x0800d5db
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80081f0:	682a      	ldr	r2, [r5, #0]
 80081f2:	68db      	ldr	r3, [r3, #12]
 80081f4:	9201      	str	r2, [sp, #4]
 80081f6:	6858      	ldr	r0, [r3, #4]
 80081f8:	f7fb ff03 	bl	8004002 <lwip_htonl>
 80081fc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80081fe:	4683      	mov	fp, r0
 8008200:	f8b3 8008 	ldrh.w	r8, [r3, #8]
 8008204:	68db      	ldr	r3, [r3, #12]
 8008206:	8998      	ldrh	r0, [r3, #12]
 8008208:	f7fb fef8 	bl	8003ffc <lwip_htons>
 800820c:	9a01      	ldr	r2, [sp, #4]
 800820e:	f010 0003 	ands.w	r0, r0, #3
 8008212:	eba2 0808 	sub.w	r8, r2, r8
 8008216:	bf18      	it	ne
 8008218:	2001      	movne	r0, #1
 800821a:	eba8 080b 	sub.w	r8, r8, fp
 800821e:	eba8 0800 	sub.w	r8, r8, r0
    while (pcb->unsent != NULL &&
 8008222:	f1b8 0f00 	cmp.w	r8, #0
 8008226:	db3d      	blt.n	80082a4 <tcp_receive+0x314>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8008228:	682b      	ldr	r3, [r5, #0]
 800822a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800822c:	1a9b      	subs	r3, r3, r2
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc38      	bgt.n	80082a4 <tcp_receive+0x314>
      next = pcb->unsent;
 8008232:	f8d4 8068 	ldr.w	r8, [r4, #104]	; 0x68
      pcb->unsent = pcb->unsent->next;
 8008236:	f8d8 3000 	ldr.w	r3, [r8]
 800823a:	66a3      	str	r3, [r4, #104]	; 0x68
      if (pcb->unsent == NULL) {
 800823c:	b90b      	cbnz	r3, 8008242 <tcp_receive+0x2b2>
        pcb->unsent_oversize = 0;
 800823e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8008242:	f8b4 b062 	ldrh.w	fp, [r4, #98]	; 0x62
 8008246:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800824a:	f7fe ff47 	bl	80070dc <pbuf_clen>
 800824e:	4583      	cmp	fp, r0
 8008250:	d206      	bcs.n	8008260 <tcp_receive+0x2d0>
 8008252:	4653      	mov	r3, sl
 8008254:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8008258:	49ba      	ldr	r1, [pc, #744]	; (8008544 <tcp_receive+0x5b4>)
 800825a:	4648      	mov	r0, r9
 800825c:	f002 ff98 	bl	800b190 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008260:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008264:	f7fe ff3a 	bl	80070dc <pbuf_clen>
 8008268:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      recv_acked += next->len;
 800826c:	883a      	ldrh	r2, [r7, #0]
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800826e:	1a18      	subs	r0, r3, r0
      recv_acked += next->len;
 8008270:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8008274:	4413      	add	r3, r2
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8008276:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
      tcp_seg_free(next);
 800827a:	4640      	mov	r0, r8
      recv_acked += next->len;
 800827c:	803b      	strh	r3, [r7, #0]
      tcp_seg_free(next);
 800827e:	f7ff f901 	bl	8007484 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8008282:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8008286:	b153      	cbz	r3, 800829e <tcp_receive+0x30e>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8008288:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800828a:	b943      	cbnz	r3, 800829e <tcp_receive+0x30e>
 800828c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800828e:	b933      	cbnz	r3, 800829e <tcp_receive+0x30e>
 8008290:	4653      	mov	r3, sl
 8008292:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8008296:	49ac      	ldr	r1, [pc, #688]	; (8008548 <tcp_receive+0x5b8>)
 8008298:	4648      	mov	r0, r9
 800829a:	f002 ff79 	bl	800b190 <iprintf>
    while (pcb->unsent != NULL &&
 800829e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d1a5      	bne.n	80081f0 <tcp_receive+0x260>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80082a4:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 80082a8:	883a      	ldrh	r2, [r7, #0]
 80082aa:	4413      	add	r3, r2
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80082ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
    pcb->snd_buf += recv_acked;
 80082ae:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80082b2:	2a00      	cmp	r2, #0
 80082b4:	f040 8117 	bne.w	80084e6 <tcp_receive+0x556>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80082b8:	4fa4      	ldr	r7, [pc, #656]	; (800854c <tcp_receive+0x5bc>)
 80082ba:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80082bc:	8838      	ldrh	r0, [r7, #0]
 80082be:	2800      	cmp	r0, #0
 80082c0:	f000 831f 	beq.w	8008902 <tcp_receive+0x972>
 80082c4:	7d23      	ldrb	r3, [r4, #20]
 80082c6:	2b06      	cmp	r3, #6
 80082c8:	f200 831b 	bhi.w	8008902 <tcp_receive+0x972>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80082cc:	6833      	ldr	r3, [r6, #0]
 80082ce:	1ad5      	subs	r5, r2, r3
 80082d0:	2d01      	cmp	r5, #1
 80082d2:	f100 815c 	bmi.w	800858e <tcp_receive+0x5fe>
 80082d6:	f1c3 0101 	rsb	r1, r3, #1
 80082da:	1a09      	subs	r1, r1, r0
 80082dc:	4411      	add	r1, r2
 80082de:	2900      	cmp	r1, #0
 80082e0:	f300 8155 	bgt.w	800858e <tcp_receive+0x5fe>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80082e4:	4b9a      	ldr	r3, [pc, #616]	; (8008550 <tcp_receive+0x5c0>)
      off = pcb->rcv_nxt - seqno;
 80082e6:	46aa      	mov	sl, r5
      struct pbuf *p = inseg.p;
 80082e8:	f8d3 9004 	ldr.w	r9, [r3, #4]
 80082ec:	4698      	mov	r8, r3
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80082ee:	f1b9 0f00 	cmp.w	r9, #0
 80082f2:	d106      	bne.n	8008302 <tcp_receive+0x372>
 80082f4:	4b97      	ldr	r3, [pc, #604]	; (8008554 <tcp_receive+0x5c4>)
 80082f6:	f240 523c 	movw	r2, #1340	; 0x53c
 80082fa:	4997      	ldr	r1, [pc, #604]	; (8008558 <tcp_receive+0x5c8>)
 80082fc:	4897      	ldr	r0, [pc, #604]	; (800855c <tcp_receive+0x5cc>)
 80082fe:	f002 ff47 	bl	800b190 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8008302:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8008306:	429d      	cmp	r5, r3
 8008308:	dd06      	ble.n	8008318 <tcp_receive+0x388>
 800830a:	4b92      	ldr	r3, [pc, #584]	; (8008554 <tcp_receive+0x5c4>)
 800830c:	f240 523d 	movw	r2, #1341	; 0x53d
 8008310:	4993      	ldr	r1, [pc, #588]	; (8008560 <tcp_receive+0x5d0>)
 8008312:	4892      	ldr	r0, [pc, #584]	; (800855c <tcp_receive+0x5cc>)
 8008314:	f002 ff3c 	bl	800b190 <iprintf>
      if (inseg.p->len < off) {
 8008318:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800831c:	8943      	ldrh	r3, [r0, #10]
 800831e:	429d      	cmp	r5, r3
 8008320:	f340 812a 	ble.w	8008578 <tcp_receive+0x5e8>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008324:	8903      	ldrh	r3, [r0, #8]
 8008326:	429d      	cmp	r5, r3
 8008328:	dd06      	ble.n	8008338 <tcp_receive+0x3a8>
 800832a:	4b8a      	ldr	r3, [pc, #552]	; (8008554 <tcp_receive+0x5c4>)
 800832c:	f240 523f 	movw	r2, #1343	; 0x53f
 8008330:	498c      	ldr	r1, [pc, #560]	; (8008564 <tcp_receive+0x5d4>)
 8008332:	488a      	ldr	r0, [pc, #552]	; (800855c <tcp_receive+0x5cc>)
 8008334:	f002 ff2c 	bl	800b190 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008338:	f8d8 3004 	ldr.w	r3, [r8, #4]
          off -= p->len;
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
          p->len = 0;
 800833c:	2200      	movs	r2, #0
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800833e:	8919      	ldrh	r1, [r3, #8]
 8008340:	1b4d      	subs	r5, r1, r5
 8008342:	b2ad      	uxth	r5, r5
        while (p->len < off) {
 8008344:	f8b9 300a 	ldrh.w	r3, [r9, #10]
 8008348:	459a      	cmp	sl, r3
 800834a:	f300 80f1 	bgt.w	8008530 <tcp_receive+0x5a0>
          p = p->next;
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800834e:	f1ca 0100 	rsb	r1, sl, #0
 8008352:	4648      	mov	r0, r9
 8008354:	b209      	sxth	r1, r1
 8008356:	f7fe fd05 	bl	8006d64 <pbuf_header>
 800835a:	b130      	cbz	r0, 800836a <tcp_receive+0x3da>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800835c:	4b7d      	ldr	r3, [pc, #500]	; (8008554 <tcp_receive+0x5c4>)
 800835e:	f240 524c 	movw	r2, #1356	; 0x54c
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8008362:	4981      	ldr	r1, [pc, #516]	; (8008568 <tcp_receive+0x5d8>)
 8008364:	487d      	ldr	r0, [pc, #500]	; (800855c <tcp_receive+0x5cc>)
 8008366:	f002 ff13 	bl	800b190 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800836a:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 800836e:	6833      	ldr	r3, [r6, #0]
 8008370:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008372:	440b      	add	r3, r1
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008374:	6032      	str	r2, [r6, #0]
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8008376:	1a9b      	subs	r3, r3, r2
 8008378:	f8a8 3008 	strh.w	r3, [r8, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800837c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008380:	605a      	str	r2, [r3, #4]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008382:	6831      	ldr	r1, [r6, #0]
 8008384:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008386:	1a8b      	subs	r3, r1, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	f2c0 82b4 	blt.w	80088f6 <tcp_receive+0x966>
 800838e:	1c4b      	adds	r3, r1, #1
 8008390:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 8008392:	1a9b      	subs	r3, r3, r2
 8008394:	1a1b      	subs	r3, r3, r0
 8008396:	2b00      	cmp	r3, #0
 8008398:	f300 82ad 	bgt.w	80088f6 <tcp_receive+0x966>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800839c:	4291      	cmp	r1, r2
 800839e:	f040 81ca 	bne.w	8008736 <tcp_receive+0x7a6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80083a2:	4d6b      	ldr	r5, [pc, #428]	; (8008550 <tcp_receive+0x5c0>)
 80083a4:	68eb      	ldr	r3, [r5, #12]
 80083a6:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 80083aa:	8998      	ldrh	r0, [r3, #12]
 80083ac:	f7fb fe26 	bl	8003ffc <lwip_htons>
 80083b0:	f010 0003 	ands.w	r0, r0, #3

        if (tcplen > pcb->rcv_wnd) {
 80083b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 80083b6:	bf18      	it	ne
 80083b8:	2001      	movne	r0, #1
 80083ba:	4440      	add	r0, r8
 80083bc:	b280      	uxth	r0, r0
        if (tcplen > pcb->rcv_wnd) {
 80083be:	4283      	cmp	r3, r0
        tcplen = TCP_TCPLEN(&inseg);
 80083c0:	8038      	strh	r0, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 80083c2:	d241      	bcs.n	8008448 <tcp_receive+0x4b8>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80083c4:	68eb      	ldr	r3, [r5, #12]
 80083c6:	8998      	ldrh	r0, [r3, #12]
 80083c8:	f7fb fe18 	bl	8003ffc <lwip_htons>
 80083cc:	07c2      	lsls	r2, r0, #31
 80083ce:	d510      	bpl.n	80083f2 <tcp_receive+0x462>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80083d0:	f8d5 900c 	ldr.w	r9, [r5, #12]
 80083d4:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 80083d8:	4640      	mov	r0, r8
 80083da:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 80083de:	f7fb fe0d 	bl	8003ffc <lwip_htons>
 80083e2:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 80083e6:	f7fb fe09 	bl	8003ffc <lwip_htons>
 80083ea:	ea40 0808 	orr.w	r8, r0, r8
 80083ee:	f8a9 800c 	strh.w	r8, [r9, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80083f2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80083f4:	812b      	strh	r3, [r5, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80083f6:	68eb      	ldr	r3, [r5, #12]
 80083f8:	8998      	ldrh	r0, [r3, #12]
 80083fa:	f7fb fdff 	bl	8003ffc <lwip_htons>
 80083fe:	0783      	lsls	r3, r0, #30
            inseg.len -= 1;
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008400:	6868      	ldr	r0, [r5, #4]
            inseg.len -= 1;
 8008402:	bf42      	ittt	mi
 8008404:	892b      	ldrhmi	r3, [r5, #8]
 8008406:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800840a:	812b      	strhmi	r3, [r5, #8]
          pbuf_realloc(inseg.p, inseg.len);
 800840c:	8929      	ldrh	r1, [r5, #8]
 800840e:	f7fe fdf5 	bl	8006ffc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008412:	68eb      	ldr	r3, [r5, #12]
 8008414:	f8b5 8008 	ldrh.w	r8, [r5, #8]
 8008418:	8998      	ldrh	r0, [r3, #12]
 800841a:	f7fb fdef 	bl	8003ffc <lwip_htons>
 800841e:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008422:	6833      	ldr	r3, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 8008424:	bf18      	it	ne
 8008426:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008428:	6a62      	ldr	r2, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 800842a:	4440      	add	r0, r8
 800842c:	b280      	uxth	r0, r0
 800842e:	8038      	strh	r0, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008430:	4418      	add	r0, r3
 8008432:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8008434:	4413      	add	r3, r2
 8008436:	4298      	cmp	r0, r3
 8008438:	d006      	beq.n	8008448 <tcp_receive+0x4b8>
 800843a:	4b46      	ldr	r3, [pc, #280]	; (8008554 <tcp_receive+0x5c4>)
 800843c:	f240 527f 	movw	r2, #1407	; 0x57f
 8008440:	494a      	ldr	r1, [pc, #296]	; (800856c <tcp_receive+0x5dc>)
 8008442:	4846      	ldr	r0, [pc, #280]	; (800855c <tcp_receive+0x5cc>)
 8008444:	f002 fea4 	bl	800b190 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008448:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800844a:	2b00      	cmp	r3, #0
 800844c:	f000 80ae 	beq.w	80085ac <tcp_receive+0x61c>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008450:	68eb      	ldr	r3, [r5, #12]
 8008452:	8998      	ldrh	r0, [r3, #12]
 8008454:	f7fb fdd2 	bl	8003ffc <lwip_htons>
 8008458:	07c0      	lsls	r0, r0, #31
 800845a:	f100 80a4 	bmi.w	80085a6 <tcp_receive+0x616>
              struct tcp_seg *old_ooseq = pcb->ooseq;
              pcb->ooseq = pcb->ooseq->next;
              tcp_seg_free(old_ooseq);
            }
          } else {
            next = pcb->ooseq;
 800845e:	f8d4 8070 	ldr.w	r8, [r4, #112]	; 0x70
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008462:	f1b8 0f00 	cmp.w	r8, #0
 8008466:	d03b      	beq.n	80084e0 <tcp_receive+0x550>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008468:	f8d8 e00c 	ldr.w	lr, [r8, #12]
 800846c:	6830      	ldr	r0, [r6, #0]
 800846e:	883b      	ldrh	r3, [r7, #0]
 8008470:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008474:	f8b8 1008 	ldrh.w	r1, [r8, #8]
 8008478:	4403      	add	r3, r0
 800847a:	4411      	add	r1, r2
 800847c:	1a59      	subs	r1, r3, r1
            while (next &&
 800847e:	2900      	cmp	r1, #0
 8008480:	f280 80d1 	bge.w	8008626 <tcp_receive+0x696>
              tcp_seg_free(prev);
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
                TCP_SEQ_GT(seqno + tcplen,
 8008484:	1a9b      	subs	r3, r3, r2
            if (next &&
 8008486:	2b00      	cmp	r3, #0
 8008488:	dd2a      	ble.n	80084e0 <tcp_receive+0x550>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800848a:	68eb      	ldr	r3, [r5, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800848c:	1a12      	subs	r2, r2, r0
 800848e:	812a      	strh	r2, [r5, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008490:	8998      	ldrh	r0, [r3, #12]
 8008492:	f7fb fdb3 	bl	8003ffc <lwip_htons>
 8008496:	0783      	lsls	r3, r0, #30
                inseg.len -= 1;
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008498:	6868      	ldr	r0, [r5, #4]
                inseg.len -= 1;
 800849a:	bf42      	ittt	mi
 800849c:	892b      	ldrhmi	r3, [r5, #8]
 800849e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80084a2:	812b      	strhmi	r3, [r5, #8]
              pbuf_realloc(inseg.p, inseg.len);
 80084a4:	8929      	ldrh	r1, [r5, #8]
 80084a6:	f7fe fda9 	bl	8006ffc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80084aa:	68eb      	ldr	r3, [r5, #12]
 80084ac:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 80084b0:	8998      	ldrh	r0, [r3, #12]
 80084b2:	f7fb fda3 	bl	8003ffc <lwip_htons>
 80084b6:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80084ba:	6833      	ldr	r3, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 80084bc:	bf18      	it	ne
 80084be:	2001      	movne	r0, #1
 80084c0:	4448      	add	r0, r9
 80084c2:	b280      	uxth	r0, r0
 80084c4:	8038      	strh	r0, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80084c6:	4418      	add	r0, r3
 80084c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	4298      	cmp	r0, r3
 80084d0:	d006      	beq.n	80084e0 <tcp_receive+0x550>
 80084d2:	4b20      	ldr	r3, [pc, #128]	; (8008554 <tcp_receive+0x5c4>)
 80084d4:	f240 52af 	movw	r2, #1455	; 0x5af
 80084d8:	4925      	ldr	r1, [pc, #148]	; (8008570 <tcp_receive+0x5e0>)
 80084da:	4820      	ldr	r0, [pc, #128]	; (800855c <tcp_receive+0x5cc>)
 80084dc:	f002 fe58 	bl	800b190 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80084e0:	f8c4 8070 	str.w	r8, [r4, #112]	; 0x70
 80084e4:	e062      	b.n	80085ac <tcp_receive+0x61c>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80084e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80084e8:	6829      	ldr	r1, [r5, #0]
 80084ea:	1a5b      	subs	r3, r3, r1
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f6bf aee3 	bge.w	80082b8 <tcp_receive+0x328>
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80084f2:	4b20      	ldr	r3, [pc, #128]	; (8008574 <tcp_receive+0x5e4>)
      m = m - (pcb->sa >> 3);
 80084f4:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80084f8:	6819      	ldr	r1, [r3, #0]
 80084fa:	1a89      	subs	r1, r1, r2
      m = m - (pcb->sv >> 2);
 80084fc:	f9b4 203e 	ldrsh.w	r2, [r4, #62]	; 0x3e
      m = m - (pcb->sa >> 3);
 8008500:	eba1 01e0 	sub.w	r1, r1, r0, asr #3
      pcb->sv += m;
 8008504:	eba2 02a2 	sub.w	r2, r2, r2, asr #2
      m = m - (pcb->sa >> 3);
 8008508:	b289      	uxth	r1, r1
 800850a:	b20b      	sxth	r3, r1
      pcb->sa += m;
 800850c:	4408      	add	r0, r1
      if (m < 0) {
 800850e:	2b00      	cmp	r3, #0
      pcb->sa += m;
 8008510:	b200      	sxth	r0, r0
        m = -m;
 8008512:	bfb8      	it	lt
 8008514:	4249      	neglt	r1, r1
      pcb->sa += m;
 8008516:	87a0      	strh	r0, [r4, #60]	; 0x3c
        m = -m;
 8008518:	bfb8      	it	lt
 800851a:	b20b      	sxthlt	r3, r1
      pcb->sv += m;
 800851c:	4413      	add	r3, r2
 800851e:	b29b      	uxth	r3, r3
 8008520:	87e3      	strh	r3, [r4, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8008522:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 8008526:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      pcb->rttest = 0;
 800852a:	2300      	movs	r3, #0
 800852c:	6363      	str	r3, [r4, #52]	; 0x34
 800852e:	e6c3      	b.n	80082b8 <tcp_receive+0x328>
          p->tot_len = new_tot_len;
 8008530:	f8a9 5008 	strh.w	r5, [r9, #8]
          off -= p->len;
 8008534:	ebaa 0a03 	sub.w	sl, sl, r3
          p->len = 0;
 8008538:	f8a9 200a 	strh.w	r2, [r9, #10]
          p = p->next;
 800853c:	f8d9 9000 	ldr.w	r9, [r9]
 8008540:	e700      	b.n	8008344 <tcp_receive+0x3b4>
 8008542:	bf00      	nop
 8008544:	0800d5b3 	.word	0x0800d5b3
 8008548:	0800d5db 	.word	0x0800d5db
 800854c:	20003f76 	.word	0x20003f76
 8008550:	20003f44 	.word	0x20003f44
 8008554:	0800d568 	.word	0x0800d568
 8008558:	0800d5fb 	.word	0x0800d5fb
 800855c:	0800c106 	.word	0x0800c106
 8008560:	0800d60b 	.word	0x0800d60b
 8008564:	0800d61a 	.word	0x0800d61a
 8008568:	0800d62a 	.word	0x0800d62a
 800856c:	0800d63d 	.word	0x0800d63d
 8008570:	0800d674 	.word	0x0800d674
 8008574:	200076f0 	.word	0x200076f0
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8008578:	4269      	negs	r1, r5
 800857a:	b209      	sxth	r1, r1
 800857c:	f7fe fbf2 	bl	8006d64 <pbuf_header>
 8008580:	2800      	cmp	r0, #0
 8008582:	f43f aef2 	beq.w	800836a <tcp_receive+0x3da>
          LWIP_ASSERT("pbuf_header failed", 0);
 8008586:	4b9d      	ldr	r3, [pc, #628]	; (80087fc <tcp_receive+0x86c>)
 8008588:	f240 5251 	movw	r2, #1361	; 0x551
 800858c:	e6e9      	b.n	8008362 <tcp_receive+0x3d2>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	2b00      	cmp	r3, #0
        tcp_ack_now(pcb);
 8008592:	bfbe      	ittt	lt
 8008594:	7ea3      	ldrblt	r3, [r4, #26]
 8008596:	f043 0302 	orrlt.w	r3, r3, #2
 800859a:	76a3      	strblt	r3, [r4, #26]
 800859c:	e6f1      	b.n	8008382 <tcp_receive+0x3f2>
              pcb->ooseq = pcb->ooseq->next;
 800859e:	6803      	ldr	r3, [r0, #0]
 80085a0:	6723      	str	r3, [r4, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 80085a2:	f7fe ff6f 	bl	8007484 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80085a6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d1f8      	bne.n	800859e <tcp_receive+0x60e>
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80085ac:	883a      	ldrh	r2, [r7, #0]
 80085ae:	6833      	ldr	r3, [r6, #0]
 80085b0:	4413      	add	r3, r2
 80085b2:	6263      	str	r3, [r4, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80085b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d206      	bcs.n	80085c8 <tcp_receive+0x638>
 80085ba:	4b90      	ldr	r3, [pc, #576]	; (80087fc <tcp_receive+0x86c>)
 80085bc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80085c0:	498f      	ldr	r1, [pc, #572]	; (8008800 <tcp_receive+0x870>)
 80085c2:	4890      	ldr	r0, [pc, #576]	; (8008804 <tcp_receive+0x874>)
 80085c4:	f002 fde4 	bl	800b190 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80085c8:	8d23      	ldrh	r3, [r4, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80085ca:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 80085cc:	883a      	ldrh	r2, [r7, #0]
 80085ce:	1a9b      	subs	r3, r3, r2
 80085d0:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 80085d2:	f7fe feed 	bl	80073b0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80085d6:	686b      	ldr	r3, [r5, #4]
 80085d8:	891a      	ldrh	r2, [r3, #8]
 80085da:	b11a      	cbz	r2, 80085e4 <tcp_receive+0x654>
          recv_data = inseg.p;
 80085dc:	4a8a      	ldr	r2, [pc, #552]	; (8008808 <tcp_receive+0x878>)
 80085de:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80085e0:	2300      	movs	r3, #0
 80085e2:	606b      	str	r3, [r5, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085e4:	68eb      	ldr	r3, [r5, #12]

          cseg = pcb->ooseq;
          seqno = pcb->ooseq->tcphdr->seqno;

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80085e6:	4f85      	ldr	r7, [pc, #532]	; (80087fc <tcp_receive+0x86c>)
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80085e8:	8998      	ldrh	r0, [r3, #12]
 80085ea:	f7fb fd07 	bl	8003ffc <lwip_htons>
 80085ee:	07c5      	lsls	r5, r0, #31
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80085f0:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8008814 <tcp_receive+0x884>
          recv_flags |= TF_GOT_FIN;
 80085f4:	bf48      	it	mi
 80085f6:	4a85      	ldrmi	r2, [pc, #532]	; (800880c <tcp_receive+0x87c>)
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80085f8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8008804 <tcp_receive+0x874>
          recv_flags |= TF_GOT_FIN;
 80085fc:	bf42      	ittt	mi
 80085fe:	7813      	ldrbmi	r3, [r2, #0]
 8008600:	f043 0320 	orrmi.w	r3, r3, #32
 8008604:	7013      	strbmi	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 8008606:	6f25      	ldr	r5, [r4, #112]	; 0x70
 8008608:	b125      	cbz	r5, 8008614 <tcp_receive+0x684>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800860a:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 800860c:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800860e:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 8008610:	428b      	cmp	r3, r1
 8008612:	d033      	beq.n	800867c <tcp_receive+0x6ec>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8008614:	7ea3      	ldrb	r3, [r4, #26]
 8008616:	07d9      	lsls	r1, r3, #31
 8008618:	f140 8087 	bpl.w	800872a <tcp_receive+0x79a>
 800861c:	f023 0301 	bic.w	r3, r3, #1
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
 8008620:	f043 0302 	orr.w	r3, r3, #2
 8008624:	e083      	b.n	800872e <tcp_receive+0x79e>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008626:	f8be 000c 	ldrh.w	r0, [lr, #12]
 800862a:	f7fb fce7 	bl	8003ffc <lwip_htons>
 800862e:	07c1      	lsls	r1, r0, #31
 8008630:	d51d      	bpl.n	800866e <tcp_receive+0x6de>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008632:	68eb      	ldr	r3, [r5, #12]
 8008634:	8998      	ldrh	r0, [r3, #12]
 8008636:	f7fb fce1 	bl	8003ffc <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800863a:	0782      	lsls	r2, r0, #30
 800863c:	d417      	bmi.n	800866e <tcp_receive+0x6de>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800863e:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 8008642:	2001      	movs	r0, #1
 8008644:	f8ba 900c 	ldrh.w	r9, [sl, #12]
 8008648:	f7fb fcd8 	bl	8003ffc <lwip_htons>
                tcplen = TCP_TCPLEN(&inseg);
 800864c:	68eb      	ldr	r3, [r5, #12]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800864e:	ea49 0000 	orr.w	r0, r9, r0
                tcplen = TCP_TCPLEN(&inseg);
 8008652:	f8b5 9008 	ldrh.w	r9, [r5, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008656:	f8aa 000c 	strh.w	r0, [sl, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800865a:	8998      	ldrh	r0, [r3, #12]
 800865c:	f7fb fcce 	bl	8003ffc <lwip_htons>
 8008660:	f010 0003 	ands.w	r0, r0, #3
 8008664:	bf18      	it	ne
 8008666:	2001      	movne	r0, #1
 8008668:	4481      	add	r9, r0
 800866a:	f8a7 9000 	strh.w	r9, [r7]
              next = next->next;
 800866e:	f8d8 9000 	ldr.w	r9, [r8]
              tcp_seg_free(prev);
 8008672:	4640      	mov	r0, r8
 8008674:	f7fe ff06 	bl	8007484 <tcp_seg_free>
              next = next->next;
 8008678:	46c8      	mov	r8, r9
 800867a:	e6f2      	b.n	8008462 <tcp_receive+0x4d2>
          seqno = pcb->ooseq->tcphdr->seqno;
 800867c:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800867e:	8990      	ldrh	r0, [r2, #12]
 8008680:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 8008684:	f7fb fcba 	bl	8003ffc <lwip_htons>
 8008688:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800868a:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800868e:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008692:	bf18      	it	ne
 8008694:	2001      	movne	r0, #1
 8008696:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008698:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800869a:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800869c:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80086a0:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80086a2:	8998      	ldrh	r0, [r3, #12]
 80086a4:	f7fb fcaa 	bl	8003ffc <lwip_htons>
 80086a8:	f010 0003 	ands.w	r0, r0, #3
 80086ac:	bf18      	it	ne
 80086ae:	2001      	movne	r0, #1
 80086b0:	4458      	add	r0, fp
 80086b2:	4582      	cmp	sl, r0
 80086b4:	d206      	bcs.n	80086c4 <tcp_receive+0x734>
 80086b6:	463b      	mov	r3, r7
 80086b8:	f240 52de 	movw	r2, #1502	; 0x5de
 80086bc:	4641      	mov	r1, r8
 80086be:	4648      	mov	r0, r9
 80086c0:	f002 fd66 	bl	800b190 <iprintf>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80086c4:	68eb      	ldr	r3, [r5, #12]
 80086c6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 80086ca:	8998      	ldrh	r0, [r3, #12]
 80086cc:	f7fb fc96 	bl	8003ffc <lwip_htons>
 80086d0:	f010 0003 	ands.w	r0, r0, #3
 80086d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80086d6:	bf18      	it	ne
 80086d8:	2001      	movne	r0, #1
 80086da:	4450      	add	r0, sl
 80086dc:	1a18      	subs	r0, r3, r0
 80086de:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 80086e0:	4620      	mov	r0, r4
 80086e2:	f7fe fe65 	bl	80073b0 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 80086e6:	6869      	ldr	r1, [r5, #4]
 80086e8:	890b      	ldrh	r3, [r1, #8]
 80086ea:	b133      	cbz	r3, 80086fa <tcp_receive+0x76a>
            if (recv_data) {
 80086ec:	4b46      	ldr	r3, [pc, #280]	; (8008808 <tcp_receive+0x878>)
 80086ee:	6818      	ldr	r0, [r3, #0]
 80086f0:	b1c8      	cbz	r0, 8008726 <tcp_receive+0x796>
              pbuf_cat(recv_data, cseg->p);
 80086f2:	f7fe fd17 	bl	8007124 <pbuf_cat>
            cseg->p = NULL;
 80086f6:	2300      	movs	r3, #0
 80086f8:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80086fa:	68eb      	ldr	r3, [r5, #12]
 80086fc:	8998      	ldrh	r0, [r3, #12]
 80086fe:	f7fb fc7d 	bl	8003ffc <lwip_htons>
 8008702:	07c0      	lsls	r0, r0, #31
 8008704:	d509      	bpl.n	800871a <tcp_receive+0x78a>
            recv_flags |= TF_GOT_FIN;
 8008706:	4a41      	ldr	r2, [pc, #260]	; (800880c <tcp_receive+0x87c>)
 8008708:	7813      	ldrb	r3, [r2, #0]
 800870a:	f043 0320 	orr.w	r3, r3, #32
 800870e:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008710:	7d23      	ldrb	r3, [r4, #20]
 8008712:	2b04      	cmp	r3, #4
              pcb->state = CLOSE_WAIT;
 8008714:	bf04      	itt	eq
 8008716:	2307      	moveq	r3, #7
 8008718:	7523      	strbeq	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 800871a:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 800871c:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 800871e:	6723      	str	r3, [r4, #112]	; 0x70
          tcp_seg_free(cseg);
 8008720:	f7fe feb0 	bl	8007484 <tcp_seg_free>
 8008724:	e76f      	b.n	8008606 <tcp_receive+0x676>
              recv_data = cseg->p;
 8008726:	6019      	str	r1, [r3, #0]
 8008728:	e7e5      	b.n	80086f6 <tcp_receive+0x766>
        tcp_ack(pcb);
 800872a:	f043 0301 	orr.w	r3, r3, #1
 800872e:	76a3      	strb	r3, [r4, #26]
    }
  }
}
 8008730:	b003      	add	sp, #12
 8008732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        tcp_send_empty_ack(pcb);
 8008736:	4620      	mov	r0, r4
 8008738:	f000 ffd6 	bl	80096e8 <tcp_send_empty_ack>
        if (pcb->ooseq == NULL) {
 800873c:	6f25      	ldr	r5, [r4, #112]	; 0x70
 800873e:	b925      	cbnz	r5, 800874a <tcp_receive+0x7ba>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8008740:	4833      	ldr	r0, [pc, #204]	; (8008810 <tcp_receive+0x880>)
 8008742:	f7fe feb5 	bl	80074b0 <tcp_seg_copy>
 8008746:	6720      	str	r0, [r4, #112]	; 0x70
 8008748:	e7f2      	b.n	8008730 <tcp_receive+0x7a0>
            if (seqno == next->tcphdr->seqno) {
 800874a:	6833      	ldr	r3, [r6, #0]
 800874c:	f04f 0800 	mov.w	r8, #0
 8008750:	f103 3eff 	add.w	lr, r3, #4294967295
 8008754:	f103 0c01 	add.w	ip, r3, #1
 8008758:	68e8      	ldr	r0, [r5, #12]
 800875a:	6842      	ldr	r2, [r0, #4]
 800875c:	429a      	cmp	r2, r3
 800875e:	d117      	bne.n	8008790 <tcp_receive+0x800>
              if (inseg.len > next->len) {
 8008760:	482b      	ldr	r0, [pc, #172]	; (8008810 <tcp_receive+0x880>)
 8008762:	892b      	ldrh	r3, [r5, #8]
 8008764:	8902      	ldrh	r2, [r0, #8]
 8008766:	429a      	cmp	r2, r3
 8008768:	d9e2      	bls.n	8008730 <tcp_receive+0x7a0>
                cseg = tcp_seg_copy(&inseg);
 800876a:	f7fe fea1 	bl	80074b0 <tcp_seg_copy>
                if (cseg != NULL) {
 800876e:	2800      	cmp	r0, #0
 8008770:	d0de      	beq.n	8008730 <tcp_receive+0x7a0>
                  if (prev != NULL) {
 8008772:	f1b8 0f00 	cmp.w	r8, #0
 8008776:	d009      	beq.n	800878c <tcp_receive+0x7fc>
                    prev->next = cseg;
 8008778:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 800877c:	4629      	mov	r1, r5
}
 800877e:	b003      	add	sp, #12
 8008780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    tcp_oos_insert_segment(cseg, next);
 8008784:	f7ff bbc6 	b.w	8007f14 <tcp_oos_insert_segment>
 8008788:	460d      	mov	r5, r1
 800878a:	e7e5      	b.n	8008758 <tcp_receive+0x7c8>
                    pcb->ooseq = cseg;
 800878c:	6720      	str	r0, [r4, #112]	; 0x70
 800878e:	e7f5      	b.n	800877c <tcp_receive+0x7ec>
              if (prev == NULL) {
 8008790:	f1b8 0f00 	cmp.w	r8, #0
 8008794:	d109      	bne.n	80087aa <tcp_receive+0x81a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8008796:	1a99      	subs	r1, r3, r2
 8008798:	2900      	cmp	r1, #0
 800879a:	da3d      	bge.n	8008818 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 800879c:	481c      	ldr	r0, [pc, #112]	; (8008810 <tcp_receive+0x880>)
 800879e:	f7fe fe87 	bl	80074b0 <tcp_seg_copy>
                  if (cseg != NULL) {
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0c4      	beq.n	8008730 <tcp_receive+0x7a0>
                    pcb->ooseq = cseg;
 80087a6:	6720      	str	r0, [r4, #112]	; 0x70
 80087a8:	e7e8      	b.n	800877c <tcp_receive+0x7ec>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80087aa:	f8d8 100c 	ldr.w	r1, [r8, #12]
 80087ae:	6849      	ldr	r1, [r1, #4]
 80087b0:	ebae 0101 	sub.w	r1, lr, r1
 80087b4:	2900      	cmp	r1, #0
 80087b6:	db2f      	blt.n	8008818 <tcp_receive+0x888>
 80087b8:	ebac 0102 	sub.w	r1, ip, r2
 80087bc:	2900      	cmp	r1, #0
 80087be:	dc2b      	bgt.n	8008818 <tcp_receive+0x888>
                  cseg = tcp_seg_copy(&inseg);
 80087c0:	4813      	ldr	r0, [pc, #76]	; (8008810 <tcp_receive+0x880>)
 80087c2:	f7fe fe75 	bl	80074b0 <tcp_seg_copy>
                  if (cseg != NULL) {
 80087c6:	4604      	mov	r4, r0
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d0b1      	beq.n	8008730 <tcp_receive+0x7a0>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80087cc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80087d0:	6831      	ldr	r1, [r6, #0]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 80087d8:	4413      	add	r3, r2
 80087da:	1a5b      	subs	r3, r3, r1
 80087dc:	2b00      	cmp	r3, #0
 80087de:	dd07      	ble.n	80087f0 <tcp_receive+0x860>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80087e0:	1a89      	subs	r1, r1, r2
                      pbuf_realloc(prev->p, prev->len);
 80087e2:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80087e6:	b289      	uxth	r1, r1
 80087e8:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 80087ec:	f7fe fc06 	bl	8006ffc <pbuf_realloc>
                    prev->next = cseg;
 80087f0:	f8c8 4000 	str.w	r4, [r8]
                    tcp_oos_insert_segment(cseg, next);
 80087f4:	4629      	mov	r1, r5
 80087f6:	4620      	mov	r0, r4
 80087f8:	e7c1      	b.n	800877e <tcp_receive+0x7ee>
 80087fa:	bf00      	nop
 80087fc:	0800d568 	.word	0x0800d568
 8008800:	0800d6af 	.word	0x0800d6af
 8008804:	0800c106 	.word	0x0800c106
 8008808:	20003f58 	.word	0x20003f58
 800880c:	20003f5c 	.word	0x20003f5c
 8008810:	20003f44 	.word	0x20003f44
 8008814:	0800d6ce 	.word	0x0800d6ce
              if (next->next == NULL &&
 8008818:	6829      	ldr	r1, [r5, #0]
 800881a:	46a8      	mov	r8, r5
 800881c:	2900      	cmp	r1, #0
 800881e:	d1b3      	bne.n	8008788 <tcp_receive+0x7f8>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8008820:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 8008822:	2b00      	cmp	r3, #0
 8008824:	dd84      	ble.n	8008730 <tcp_receive+0x7a0>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008826:	8980      	ldrh	r0, [r0, #12]
 8008828:	f7fb fbe8 	bl	8003ffc <lwip_htons>
 800882c:	07c2      	lsls	r2, r0, #31
 800882e:	f53f af7f 	bmi.w	8008730 <tcp_receive+0x7a0>
                next->next = tcp_seg_copy(&inseg);
 8008832:	483d      	ldr	r0, [pc, #244]	; (8008928 <tcp_receive+0x998>)
 8008834:	f7fe fe3c 	bl	80074b0 <tcp_seg_copy>
 8008838:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 800883a:	2800      	cmp	r0, #0
 800883c:	f43f af78 	beq.w	8008730 <tcp_receive+0x7a0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8008840:	68eb      	ldr	r3, [r5, #12]
 8008842:	6831      	ldr	r1, [r6, #0]
 8008844:	685a      	ldr	r2, [r3, #4]
 8008846:	892b      	ldrh	r3, [r5, #8]
 8008848:	4413      	add	r3, r2
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	2b00      	cmp	r3, #0
 800884e:	dd05      	ble.n	800885c <tcp_receive+0x8cc>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008850:	1a89      	subs	r1, r1, r2
                    pbuf_realloc(next->p, next->len);
 8008852:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8008854:	b289      	uxth	r1, r1
 8008856:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 8008858:	f7fe fbd0 	bl	8006ffc <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800885c:	6832      	ldr	r2, [r6, #0]
 800885e:	883b      	ldrh	r3, [r7, #0]
 8008860:	4413      	add	r3, r2
 8008862:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	2b00      	cmp	r3, #0
 800886c:	f77f af60 	ble.w	8008730 <tcp_receive+0x7a0>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	8998      	ldrh	r0, [r3, #12]
 8008876:	f7fb fbc1 	bl	8003ffc <lwip_htons>
 800887a:	07c3      	lsls	r3, r0, #31
 800887c:	d511      	bpl.n	80088a2 <tcp_receive+0x912>
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800887e:	682b      	ldr	r3, [r5, #0]
 8008880:	f8d3 900c 	ldr.w	r9, [r3, #12]
 8008884:	f8b9 800c 	ldrh.w	r8, [r9, #12]
 8008888:	4640      	mov	r0, r8
 800888a:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 800888e:	f7fb fbb5 	bl	8003ffc <lwip_htons>
 8008892:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 8008896:	f7fb fbb1 	bl	8003ffc <lwip_htons>
 800889a:	ea40 0808 	orr.w	r8, r0, r8
 800889e:	f8a9 800c 	strh.w	r8, [r9, #12]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80088a2:	6832      	ldr	r2, [r6, #0]
 80088a4:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 80088a6:	682b      	ldr	r3, [r5, #0]
 80088a8:	1a89      	subs	r1, r1, r2
 80088aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    pbuf_realloc(next->next->p, next->next->len);
 80088ac:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80088ae:	4411      	add	r1, r2
 80088b0:	b289      	uxth	r1, r1
 80088b2:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80088b4:	f7fe fba2 	bl	8006ffc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80088b8:	682b      	ldr	r3, [r5, #0]
 80088ba:	891d      	ldrh	r5, [r3, #8]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	8998      	ldrh	r0, [r3, #12]
 80088c0:	f7fb fb9c 	bl	8003ffc <lwip_htons>
 80088c4:	f010 0003 	ands.w	r0, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088c8:	6833      	ldr	r3, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 80088ca:	bf18      	it	ne
 80088cc:	2001      	movne	r0, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 80088d0:	4428      	add	r0, r5
 80088d2:	b280      	uxth	r0, r0
 80088d4:	8038      	strh	r0, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088d6:	4418      	add	r0, r3
 80088d8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80088da:	4413      	add	r3, r2
 80088dc:	4298      	cmp	r0, r3
 80088de:	f43f af27 	beq.w	8008730 <tcp_receive+0x7a0>
 80088e2:	4b12      	ldr	r3, [pc, #72]	; (800892c <tcp_receive+0x99c>)
 80088e4:	f240 627b 	movw	r2, #1659	; 0x67b
 80088e8:	4911      	ldr	r1, [pc, #68]	; (8008930 <tcp_receive+0x9a0>)
 80088ea:	4812      	ldr	r0, [pc, #72]	; (8008934 <tcp_receive+0x9a4>)
}
 80088ec:	b003      	add	sp, #12
 80088ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80088f2:	f002 bc4d 	b.w	800b190 <iprintf>
      tcp_send_empty_ack(pcb);
 80088f6:	4620      	mov	r0, r4
}
 80088f8:	b003      	add	sp, #12
 80088fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tcp_send_empty_ack(pcb);
 80088fe:	f000 bef3 	b.w	80096e8 <tcp_send_empty_ack>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8008902:	6833      	ldr	r3, [r6, #0]
 8008904:	1a99      	subs	r1, r3, r2
 8008906:	2900      	cmp	r1, #0
 8008908:	db06      	blt.n	8008918 <tcp_receive+0x988>
 800890a:	3301      	adds	r3, #1
 800890c:	1a9b      	subs	r3, r3, r2
 800890e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008910:	1a9b      	subs	r3, r3, r2
 8008912:	2b00      	cmp	r3, #0
 8008914:	f77f af0c 	ble.w	8008730 <tcp_receive+0x7a0>
      tcp_ack_now(pcb);
 8008918:	7ea3      	ldrb	r3, [r4, #26]
 800891a:	e681      	b.n	8008620 <tcp_receive+0x690>
        pcb->dupacks = 0;
 800891c:	2300      	movs	r3, #0
 800891e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008922:	f7ff bbaa 	b.w	800807a <tcp_receive+0xea>
 8008926:	bf00      	nop
 8008928:	20003f44 	.word	0x20003f44
 800892c:	0800d568 	.word	0x0800d568
 8008930:	0800d63d 	.word	0x0800d63d
 8008934:	0800c106 	.word	0x0800c106

08008938 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008938:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <tcp_getoptbyte+0x30>)
 800893a:	4a0c      	ldr	r2, [pc, #48]	; (800896c <tcp_getoptbyte+0x34>)
 800893c:	6819      	ldr	r1, [r3, #0]
{
 800893e:	b510      	push	{r4, lr}
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8008940:	b121      	cbz	r1, 800894c <tcp_getoptbyte+0x14>
 8008942:	480b      	ldr	r0, [pc, #44]	; (8008970 <tcp_getoptbyte+0x38>)
 8008944:	8813      	ldrh	r3, [r2, #0]
 8008946:	8800      	ldrh	r0, [r0, #0]
 8008948:	4283      	cmp	r3, r0
 800894a:	d207      	bcs.n	800895c <tcp_getoptbyte+0x24>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 800894c:	4b09      	ldr	r3, [pc, #36]	; (8008974 <tcp_getoptbyte+0x3c>)
    return opts[tcp_optidx++];
 800894e:	8811      	ldrh	r1, [r2, #0]
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8008950:	681b      	ldr	r3, [r3, #0]
    return opts[tcp_optidx++];
 8008952:	1c48      	adds	r0, r1, #1
 8008954:	440b      	add	r3, r1
 8008956:	8010      	strh	r0, [r2, #0]
 8008958:	7d18      	ldrb	r0, [r3, #20]
 800895a:	bd10      	pop	{r4, pc}
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 800895c:	1c5c      	adds	r4, r3, #1
 800895e:	1a1b      	subs	r3, r3, r0
    return tcphdr_opt2[idx];
 8008960:	b2db      	uxtb	r3, r3
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8008962:	8014      	strh	r4, [r2, #0]
    return tcphdr_opt2[idx];
 8008964:	5cc8      	ldrb	r0, [r1, r3]
  }
}
 8008966:	bd10      	pop	{r4, pc}
 8008968:	20003f70 	.word	0x20003f70
 800896c:	20003f64 	.word	0x20003f64
 8008970:	20003f6c 	.word	0x20003f6c
 8008974:	20003f68 	.word	0x20003f68

08008978 <tcp_parseopt.isra.1.part.2>:
 * Currently, only the MSS option is supported!
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
 8008978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800897a:	4d19      	ldr	r5, [pc, #100]	; (80089e0 <tcp_parseopt.isra.1.part.2+0x68>)
 800897c:	2300      	movs	r3, #0
tcp_parseopt(struct tcp_pcb *pcb)
 800897e:	4607      	mov	r7, r0
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8008980:	4e18      	ldr	r6, [pc, #96]	; (80089e4 <tcp_parseopt.isra.1.part.2+0x6c>)
 8008982:	802b      	strh	r3, [r5, #0]
 8008984:	8834      	ldrh	r4, [r6, #0]
 8008986:	882b      	ldrh	r3, [r5, #0]
 8008988:	42a3      	cmp	r3, r4
 800898a:	d300      	bcc.n	800898e <tcp_parseopt.isra.1.part.2+0x16>
 800898c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8_t opt = tcp_getoptbyte();
 800898e:	f7ff ffd3 	bl	8008938 <tcp_getoptbyte>
      switch (opt) {
 8008992:	2801      	cmp	r0, #1
 8008994:	d0f6      	beq.n	8008984 <tcp_parseopt.isra.1.part.2+0xc>
 8008996:	d3f9      	bcc.n	800898c <tcp_parseopt.isra.1.part.2+0x14>
 8008998:	2802      	cmp	r0, #2
 800899a:	d117      	bne.n	80089cc <tcp_parseopt.isra.1.part.2+0x54>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800899c:	f7ff ffcc 	bl	8008938 <tcp_getoptbyte>
 80089a0:	2804      	cmp	r0, #4
 80089a2:	d1f3      	bne.n	800898c <tcp_parseopt.isra.1.part.2+0x14>
 80089a4:	882b      	ldrh	r3, [r5, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	42a3      	cmp	r3, r4
 80089aa:	daef      	bge.n	800898c <tcp_parseopt.isra.1.part.2+0x14>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80089ac:	f7ff ffc4 	bl	8008938 <tcp_getoptbyte>
 80089b0:	0200      	lsls	r0, r0, #8
 80089b2:	b284      	uxth	r4, r0
        mss |= tcp_getoptbyte();
 80089b4:	f7ff ffc0 	bl	8008938 <tcp_getoptbyte>
 80089b8:	4320      	orrs	r0, r4
 80089ba:	b280      	uxth	r0, r0
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80089bc:	1e43      	subs	r3, r0, #1
 80089be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80089c2:	bf28      	it	cs
 80089c4:	f44f 7006 	movcs.w	r0, #536	; 0x218
 80089c8:	8038      	strh	r0, [r7, #0]
 80089ca:	e7db      	b.n	8008984 <tcp_parseopt.isra.1.part.2+0xc>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80089cc:	f7ff ffb4 	bl	8008938 <tcp_getoptbyte>
        if (data < 2) {
 80089d0:	2801      	cmp	r0, #1
 80089d2:	d9db      	bls.n	800898c <tcp_parseopt.isra.1.part.2+0x14>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80089d4:	882b      	ldrh	r3, [r5, #0]
 80089d6:	3b02      	subs	r3, #2
 80089d8:	4418      	add	r0, r3
 80089da:	8028      	strh	r0, [r5, #0]
 80089dc:	e7d2      	b.n	8008984 <tcp_parseopt.isra.1.part.2+0xc>
 80089de:	bf00      	nop
 80089e0:	20003f64 	.word	0x20003f64
 80089e4:	20003f74 	.word	0x20003f74

080089e8 <tcp_input_delayed_close>:
  if (recv_flags & TF_CLOSED) {
 80089e8:	4b0d      	ldr	r3, [pc, #52]	; (8008a20 <tcp_input_delayed_close+0x38>)
{
 80089ea:	b510      	push	{r4, lr}
 80089ec:	4604      	mov	r4, r0
  if (recv_flags & TF_CLOSED) {
 80089ee:	7818      	ldrb	r0, [r3, #0]
 80089f0:	f010 0010 	ands.w	r0, r0, #16
 80089f4:	d012      	beq.n	8008a1c <tcp_input_delayed_close+0x34>
    if (!(pcb->flags & TF_RXCLOSED)) {
 80089f6:	7ea3      	ldrb	r3, [r4, #26]
 80089f8:	06db      	lsls	r3, r3, #27
 80089fa:	d406      	bmi.n	8008a0a <tcp_input_delayed_close+0x22>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80089fc:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008a00:	b11b      	cbz	r3, 8008a0a <tcp_input_delayed_close+0x22>
 8008a02:	f06f 010e 	mvn.w	r1, #14
 8008a06:	6920      	ldr	r0, [r4, #16]
 8008a08:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	4805      	ldr	r0, [pc, #20]	; (8008a24 <tcp_input_delayed_close+0x3c>)
 8008a0e:	f7fe ff67 	bl	80078e0 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8008a12:	2001      	movs	r0, #1
 8008a14:	4621      	mov	r1, r4
 8008a16:	f7fe f825 	bl	8006a64 <memp_free>
 8008a1a:	2001      	movs	r0, #1
}
 8008a1c:	bd10      	pop	{r4, pc}
 8008a1e:	bf00      	nop
 8008a20:	20003f5c 	.word	0x20003f5c
 8008a24:	200076ec 	.word	0x200076ec

08008a28 <tcp_input>:
{
 8008a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tcphdr = (struct tcp_hdr *)p->payload;
 8008a2c:	6843      	ldr	r3, [r0, #4]
{
 8008a2e:	b089      	sub	sp, #36	; 0x24
  tcphdr = (struct tcp_hdr *)p->payload;
 8008a30:	4e9e      	ldr	r6, [pc, #632]	; (8008cac <tcp_input+0x284>)
{
 8008a32:	4605      	mov	r5, r0
  tcphdr = (struct tcp_hdr *)p->payload;
 8008a34:	6033      	str	r3, [r6, #0]
  if (p->len < TCP_HLEN) {
 8008a36:	8943      	ldrh	r3, [r0, #10]
 8008a38:	2b13      	cmp	r3, #19
 8008a3a:	f240 81b2 	bls.w	8008da2 <tcp_input+0x37a>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a3e:	4f9c      	ldr	r7, [pc, #624]	; (8008cb0 <tcp_input+0x288>)
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	46b8      	mov	r8, r7
 8008a44:	6978      	ldr	r0, [r7, #20]
 8008a46:	f7fd f9c8 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	f040 81a8 	bne.w	8008da2 <tcp_input+0x37a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8008a52:	697b      	ldr	r3, [r7, #20]
 8008a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8008a58:	2be0      	cmp	r3, #224	; 0xe0
 8008a5a:	f000 81a2 	beq.w	8008da2 <tcp_input+0x37a>
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 8008a5e:	6833      	ldr	r3, [r6, #0]
 8008a60:	8998      	ldrh	r0, [r3, #12]
 8008a62:	f7fb facb 	bl	8003ffc <lwip_htons>
 8008a66:	0a81      	lsrs	r1, r0, #10
 8008a68:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8008a6c:	2913      	cmp	r1, #19
 8008a6e:	f240 8198 	bls.w	8008da2 <tcp_input+0x37a>
 8008a72:	b289      	uxth	r1, r1
 8008a74:	892b      	ldrh	r3, [r5, #8]
 8008a76:	428b      	cmp	r3, r1
 8008a78:	f0c0 8193 	bcc.w	8008da2 <tcp_input+0x37a>
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008a7c:	f1a1 0314 	sub.w	r3, r1, #20
  if (p->len >= hdrlen_bytes) {
 8008a80:	8968      	ldrh	r0, [r5, #10]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008a82:	4a8c      	ldr	r2, [pc, #560]	; (8008cb4 <tcp_input+0x28c>)
 8008a84:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 8008a86:	4f8c      	ldr	r7, [pc, #560]	; (8008cb8 <tcp_input+0x290>)
  if (p->len >= hdrlen_bytes) {
 8008a88:	4288      	cmp	r0, r1
 8008a8a:	9206      	str	r2, [sp, #24]
  tcphdr_opt2 = NULL;
 8008a8c:	603c      	str	r4, [r7, #0]
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 8008a8e:	8013      	strh	r3, [r2, #0]
 8008a90:	4c8a      	ldr	r4, [pc, #552]	; (8008cbc <tcp_input+0x294>)
  if (p->len >= hdrlen_bytes) {
 8008a92:	d344      	bcc.n	8008b1e <tcp_input+0xf6>
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008a94:	4249      	negs	r1, r1
 8008a96:	4628      	mov	r0, r5
    tcphdr_opt1len = tcphdr_optlen;
 8008a98:	8023      	strh	r3, [r4, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8008a9a:	f7fe f963 	bl	8006d64 <pbuf_header>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008a9e:	6834      	ldr	r4, [r6, #0]
  prev = NULL;
 8008aa0:	f04f 0a00 	mov.w	sl, #0
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008aa4:	f8df b268 	ldr.w	fp, [pc, #616]	; 8008d10 <tcp_input+0x2e8>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8008aa8:	8820      	ldrh	r0, [r4, #0]
 8008aaa:	f7fb faa7 	bl	8003ffc <lwip_htons>
 8008aae:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008ab0:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008ab2:	4f83      	ldr	r7, [pc, #524]	; (8008cc0 <tcp_input+0x298>)
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8008ab4:	8860      	ldrh	r0, [r4, #2]
 8008ab6:	f7fb faa1 	bl	8003ffc <lwip_htons>
 8008aba:	8060      	strh	r0, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008abc:	6834      	ldr	r4, [r6, #0]
 8008abe:	6860      	ldr	r0, [r4, #4]
 8008ac0:	f7fb fa9f 	bl	8004002 <lwip_htonl>
 8008ac4:	6060      	str	r0, [r4, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008ac6:	6834      	ldr	r4, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8008ac8:	f8cb 0000 	str.w	r0, [fp]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008acc:	68a0      	ldr	r0, [r4, #8]
 8008ace:	f7fb fa98 	bl	8004002 <lwip_htonl>
 8008ad2:	60a0      	str	r0, [r4, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008ad4:	6834      	ldr	r4, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8008ad6:	6038      	str	r0, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008ad8:	89e0      	ldrh	r0, [r4, #14]
 8008ada:	f7fb fa8f 	bl	8003ffc <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 8008ade:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8008ae0:	81e0      	strh	r0, [r4, #14]
  flags = TCPH_FLAGS(tcphdr);
 8008ae2:	8998      	ldrh	r0, [r3, #12]
 8008ae4:	f7fb fa8a 	bl	8003ffc <lwip_htons>
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008ae8:	8929      	ldrh	r1, [r5, #8]
  flags = TCPH_FLAGS(tcphdr);
 8008aea:	b2c0      	uxtb	r0, r0
 8008aec:	4a75      	ldr	r2, [pc, #468]	; (8008cc4 <tcp_input+0x29c>)
 8008aee:	f000 033f 	and.w	r3, r0, #63	; 0x3f
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008af2:	f010 0003 	ands.w	r0, r0, #3
 8008af6:	9203      	str	r2, [sp, #12]
 8008af8:	bf18      	it	ne
 8008afa:	2001      	movne	r0, #1
  flags = TCPH_FLAGS(tcphdr);
 8008afc:	7013      	strb	r3, [r2, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008afe:	4b72      	ldr	r3, [pc, #456]	; (8008cc8 <tcp_input+0x2a0>)
 8008b00:	4408      	add	r0, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b02:	4972      	ldr	r1, [pc, #456]	; (8008ccc <tcp_input+0x2a4>)
 8008b04:	9304      	str	r3, [sp, #16]
 8008b06:	680c      	ldr	r4, [r1, #0]
 8008b08:	4689      	mov	r9, r1
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8008b0a:	8018      	strh	r0, [r3, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b0c:	2c00      	cmp	r4, #0
 8008b0e:	d140      	bne.n	8008b92 <tcp_input+0x16a>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b10:	4b6f      	ldr	r3, [pc, #444]	; (8008cd0 <tcp_input+0x2a8>)
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b12:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 8008cd4 <tcp_input+0x2ac>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b16:	681c      	ldr	r4, [r3, #0]
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008b18:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8008d14 <tcp_input+0x2ec>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b1c:	e148      	b.n	8008db0 <tcp_input+0x388>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8008b1e:	682b      	ldr	r3, [r5, #0]
 8008b20:	b92b      	cbnz	r3, 8008b2e <tcp_input+0x106>
 8008b22:	4b6c      	ldr	r3, [pc, #432]	; (8008cd4 <tcp_input+0x2ac>)
 8008b24:	22b2      	movs	r2, #178	; 0xb2
 8008b26:	496c      	ldr	r1, [pc, #432]	; (8008cd8 <tcp_input+0x2b0>)
 8008b28:	486c      	ldr	r0, [pc, #432]	; (8008cdc <tcp_input+0x2b4>)
 8008b2a:	f002 fb31 	bl	800b190 <iprintf>
    pbuf_header(p, -TCP_HLEN);
 8008b2e:	f06f 0113 	mvn.w	r1, #19
 8008b32:	4628      	mov	r0, r5
 8008b34:	f7fe f916 	bl	8006d64 <pbuf_header>
    tcphdr_opt1len = p->len;
 8008b38:	8969      	ldrh	r1, [r5, #10]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008b3a:	9b06      	ldr	r3, [sp, #24]
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008b3c:	4628      	mov	r0, r5
    tcphdr_opt1len = p->len;
 8008b3e:	8021      	strh	r1, [r4, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008b40:	881c      	ldrh	r4, [r3, #0]
 8008b42:	1a64      	subs	r4, r4, r1
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 8008b44:	4249      	negs	r1, r1
 8008b46:	b209      	sxth	r1, r1
 8008b48:	f7fe f90c 	bl	8006d64 <pbuf_header>
    if (opt2len > p->next->len) {
 8008b4c:	6828      	ldr	r0, [r5, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 8008b4e:	b2a4      	uxth	r4, r4
    if (opt2len > p->next->len) {
 8008b50:	8943      	ldrh	r3, [r0, #10]
 8008b52:	42a3      	cmp	r3, r4
 8008b54:	f0c0 8125 	bcc.w	8008da2 <tcp_input+0x37a>
    pbuf_header(p->next, -(s16_t)opt2len);
 8008b58:	4261      	negs	r1, r4
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008b5a:	6843      	ldr	r3, [r0, #4]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008b5c:	b209      	sxth	r1, r1
    tcphdr_opt2 = (u8_t*)p->next->payload;
 8008b5e:	603b      	str	r3, [r7, #0]
    pbuf_header(p->next, -(s16_t)opt2len);
 8008b60:	f7fe f900 	bl	8006d64 <pbuf_header>
    p->tot_len -= opt2len;
 8008b64:	892b      	ldrh	r3, [r5, #8]
 8008b66:	1b1c      	subs	r4, r3, r4
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008b68:	896b      	ldrh	r3, [r5, #10]
    p->tot_len -= opt2len;
 8008b6a:	812c      	strh	r4, [r5, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 8008b6c:	b12b      	cbz	r3, 8008b7a <tcp_input+0x152>
 8008b6e:	4b59      	ldr	r3, [pc, #356]	; (8008cd4 <tcp_input+0x2ac>)
 8008b70:	22cf      	movs	r2, #207	; 0xcf
 8008b72:	495b      	ldr	r1, [pc, #364]	; (8008ce0 <tcp_input+0x2b8>)
 8008b74:	4859      	ldr	r0, [pc, #356]	; (8008cdc <tcp_input+0x2b4>)
 8008b76:	f002 fb0b 	bl	800b190 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8008b7a:	682b      	ldr	r3, [r5, #0]
 8008b7c:	892a      	ldrh	r2, [r5, #8]
 8008b7e:	891b      	ldrh	r3, [r3, #8]
 8008b80:	429a      	cmp	r2, r3
 8008b82:	d08c      	beq.n	8008a9e <tcp_input+0x76>
 8008b84:	4b53      	ldr	r3, [pc, #332]	; (8008cd4 <tcp_input+0x2ac>)
 8008b86:	22d0      	movs	r2, #208	; 0xd0
 8008b88:	4956      	ldr	r1, [pc, #344]	; (8008ce4 <tcp_input+0x2bc>)
 8008b8a:	4854      	ldr	r0, [pc, #336]	; (8008cdc <tcp_input+0x2b4>)
 8008b8c:	f002 fb00 	bl	800b190 <iprintf>
 8008b90:	e785      	b.n	8008a9e <tcp_input+0x76>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8008b92:	7d23      	ldrb	r3, [r4, #20]
 8008b94:	b92b      	cbnz	r3, 8008ba2 <tcp_input+0x17a>
 8008b96:	4b4f      	ldr	r3, [pc, #316]	; (8008cd4 <tcp_input+0x2ac>)
 8008b98:	22e2      	movs	r2, #226	; 0xe2
 8008b9a:	4953      	ldr	r1, [pc, #332]	; (8008ce8 <tcp_input+0x2c0>)
 8008b9c:	484f      	ldr	r0, [pc, #316]	; (8008cdc <tcp_input+0x2b4>)
 8008b9e:	f002 faf7 	bl	800b190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8008ba2:	7d23      	ldrb	r3, [r4, #20]
 8008ba4:	2b0a      	cmp	r3, #10
 8008ba6:	d105      	bne.n	8008bb4 <tcp_input+0x18c>
 8008ba8:	4b4a      	ldr	r3, [pc, #296]	; (8008cd4 <tcp_input+0x2ac>)
 8008baa:	22e3      	movs	r2, #227	; 0xe3
 8008bac:	494f      	ldr	r1, [pc, #316]	; (8008cec <tcp_input+0x2c4>)
 8008bae:	484b      	ldr	r0, [pc, #300]	; (8008cdc <tcp_input+0x2b4>)
 8008bb0:	f002 faee 	bl	800b190 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8008bb4:	7d23      	ldrb	r3, [r4, #20]
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d105      	bne.n	8008bc6 <tcp_input+0x19e>
 8008bba:	4b46      	ldr	r3, [pc, #280]	; (8008cd4 <tcp_input+0x2ac>)
 8008bbc:	22e4      	movs	r2, #228	; 0xe4
 8008bbe:	494c      	ldr	r1, [pc, #304]	; (8008cf0 <tcp_input+0x2c8>)
 8008bc0:	4846      	ldr	r0, [pc, #280]	; (8008cdc <tcp_input+0x2b4>)
 8008bc2:	f002 fae5 	bl	800b190 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 8008bc6:	6832      	ldr	r2, [r6, #0]
 8008bc8:	8b21      	ldrh	r1, [r4, #24]
 8008bca:	8813      	ldrh	r3, [r2, #0]
 8008bcc:	4299      	cmp	r1, r3
 8008bce:	68e3      	ldr	r3, [r4, #12]
 8008bd0:	d169      	bne.n	8008ca6 <tcp_input+0x27e>
 8008bd2:	8ae1      	ldrh	r1, [r4, #22]
 8008bd4:	8852      	ldrh	r2, [r2, #2]
 8008bd6:	4291      	cmp	r1, r2
 8008bd8:	d165      	bne.n	8008ca6 <tcp_input+0x27e>
        pcb->local_port == tcphdr->dest &&
 8008bda:	6861      	ldr	r1, [r4, #4]
 8008bdc:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008be0:	4291      	cmp	r1, r2
 8008be2:	d160      	bne.n	8008ca6 <tcp_input+0x27e>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008be4:	6821      	ldr	r1, [r4, #0]
 8008be6:	f8d8 2014 	ldr.w	r2, [r8, #20]
 8008bea:	4291      	cmp	r1, r2
 8008bec:	d15b      	bne.n	8008ca6 <tcp_input+0x27e>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8008bee:	429c      	cmp	r4, r3
 8008bf0:	f040 8406 	bne.w	8009400 <tcp_input+0x9d8>
 8008bf4:	4b37      	ldr	r3, [pc, #220]	; (8008cd4 <tcp_input+0x2ac>)
 8008bf6:	22ec      	movs	r2, #236	; 0xec
 8008bf8:	493e      	ldr	r1, [pc, #248]	; (8008cf4 <tcp_input+0x2cc>)
 8008bfa:	4838      	ldr	r0, [pc, #224]	; (8008cdc <tcp_input+0x2b4>)
 8008bfc:	f002 fac8 	bl	800b190 <iprintf>
      if (prev != NULL) {
 8008c00:	f1ba 0f00 	cmp.w	sl, #0
 8008c04:	d007      	beq.n	8008c16 <tcp_input+0x1ee>
        prev->next = pcb->next;
 8008c06:	68e3      	ldr	r3, [r4, #12]
 8008c08:	f8ca 300c 	str.w	r3, [sl, #12]
        pcb->next = tcp_active_pcbs;
 8008c0c:	f8d9 3000 	ldr.w	r3, [r9]
        tcp_active_pcbs = pcb;
 8008c10:	f8c9 4000 	str.w	r4, [r9]
        pcb->next = tcp_active_pcbs;
 8008c14:	60e3      	str	r3, [r4, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8008c16:	68e3      	ldr	r3, [r4, #12]
 8008c18:	429c      	cmp	r4, r3
 8008c1a:	d105      	bne.n	8008c28 <tcp_input+0x200>
 8008c1c:	4b2d      	ldr	r3, [pc, #180]	; (8008cd4 <tcp_input+0x2ac>)
 8008c1e:	22f4      	movs	r2, #244	; 0xf4
 8008c20:	4935      	ldr	r1, [pc, #212]	; (8008cf8 <tcp_input+0x2d0>)
 8008c22:	482e      	ldr	r0, [pc, #184]	; (8008cdc <tcp_input+0x2b4>)
 8008c24:	f002 fab4 	bl	800b190 <iprintf>
    inseg.next = NULL;
 8008c28:	4b34      	ldr	r3, [pc, #208]	; (8008cfc <tcp_input+0x2d4>)
 8008c2a:	2200      	movs	r2, #0
    inseg.len = p->tot_len;
 8008c2c:	8929      	ldrh	r1, [r5, #8]
    inseg.next = NULL;
 8008c2e:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8008c30:	8119      	strh	r1, [r3, #8]
    inseg.tcphdr = tcphdr;
 8008c32:	6831      	ldr	r1, [r6, #0]
    recv_flags = 0;
 8008c34:	4832      	ldr	r0, [pc, #200]	; (8008d00 <tcp_input+0x2d8>)
    inseg.tcphdr = tcphdr;
 8008c36:	60d9      	str	r1, [r3, #12]
    inseg.p = p;
 8008c38:	605d      	str	r5, [r3, #4]
 8008c3a:	4680      	mov	r8, r0
    recv_data = NULL;
 8008c3c:	4b31      	ldr	r3, [pc, #196]	; (8008d04 <tcp_input+0x2dc>)
    recv_acked = 0;
 8008c3e:	4932      	ldr	r1, [pc, #200]	; (8008d08 <tcp_input+0x2e0>)
    recv_data = NULL;
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	469a      	mov	sl, r3
    recv_flags = 0;
 8008c44:	7002      	strb	r2, [r0, #0]
    recv_acked = 0;
 8008c46:	800a      	strh	r2, [r1, #0]
    if (flags & TCP_PSH) {
 8008c48:	9a03      	ldr	r2, [sp, #12]
 8008c4a:	9105      	str	r1, [sp, #20]
 8008c4c:	7812      	ldrb	r2, [r2, #0]
 8008c4e:	f012 0f08 	tst.w	r2, #8
 8008c52:	d003      	beq.n	8008c5c <tcp_input+0x234>
      p->flags |= PBUF_FLAG_PUSH;
 8008c54:	7b6b      	ldrb	r3, [r5, #13]
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	736b      	strb	r3, [r5, #13]
    if (pcb->refused_data != NULL) {
 8008c5c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008c5e:	4d2b      	ldr	r5, [pc, #172]	; (8008d0c <tcp_input+0x2e4>)
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 8137 	beq.w	8008ed4 <tcp_input+0x4ac>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8008c66:	4620      	mov	r0, r4
 8008c68:	f7fe ff4c 	bl	8007b04 <tcp_process_refused_data>
 8008c6c:	300d      	adds	r0, #13
 8008c6e:	d008      	beq.n	8008c82 <tcp_input+0x25a>
 8008c70:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f000 812e 	beq.w	8008ed4 <tcp_input+0x4ac>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	881b      	ldrh	r3, [r3, #0]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f000 8129 	beq.w	8008ed4 <tcp_input+0x4ac>
        if (pcb->rcv_ann_wnd == 0) {
 8008c82:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8008c84:	b913      	cbnz	r3, 8008c8c <tcp_input+0x264>
          tcp_send_empty_ack(pcb);
 8008c86:	4620      	mov	r0, r4
 8008c88:	f000 fd2e 	bl	80096e8 <tcp_send_empty_ack>
    tcp_input_pcb = NULL;
 8008c8c:	2400      	movs	r4, #0
 8008c8e:	602c      	str	r4, [r5, #0]
    if (inseg.p != NULL)
 8008c90:	4d1a      	ldr	r5, [pc, #104]	; (8008cfc <tcp_input+0x2d4>)
    recv_data = NULL;
 8008c92:	f8ca 4000 	str.w	r4, [sl]
    if (inseg.p != NULL)
 8008c96:	6868      	ldr	r0, [r5, #4]
 8008c98:	b110      	cbz	r0, 8008ca0 <tcp_input+0x278>
      pbuf_free(inseg.p);
 8008c9a:	f7fe f869 	bl	8006d70 <pbuf_free>
      inseg.p = NULL;
 8008c9e:	606c      	str	r4, [r5, #4]
}
 8008ca0:	b009      	add	sp, #36	; 0x24
 8008ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8008ca6:	46a2      	mov	sl, r4
 8008ca8:	461c      	mov	r4, r3
 8008caa:	e72f      	b.n	8008b0c <tcp_input+0xe4>
 8008cac:	20003f68 	.word	0x20003f68
 8008cb0:	20003fa0 	.word	0x20003fa0
 8008cb4:	20003f74 	.word	0x20003f74
 8008cb8:	20003f70 	.word	0x20003f70
 8008cbc:	20003f6c 	.word	0x20003f6c
 8008cc0:	20003f3c 	.word	0x20003f3c
 8008cc4:	20003f40 	.word	0x20003f40
 8008cc8:	20003f76 	.word	0x20003f76
 8008ccc:	200076ec 	.word	0x200076ec
 8008cd0:	200076fc 	.word	0x200076fc
 8008cd4:	0800d568 	.word	0x0800d568
 8008cd8:	0800d3b2 	.word	0x0800d3b2
 8008cdc:	0800c106 	.word	0x0800c106
 8008ce0:	0800d3c2 	.word	0x0800d3c2
 8008ce4:	0800d3ce 	.word	0x0800d3ce
 8008ce8:	0800d3ed 	.word	0x0800d3ed
 8008cec:	0800d414 	.word	0x0800d414
 8008cf0:	0800d43e 	.word	0x0800d43e
 8008cf4:	0800d465 	.word	0x0800d465
 8008cf8:	0800d490 	.word	0x0800d490
 8008cfc:	20003f44 	.word	0x20003f44
 8008d00:	20003f5c 	.word	0x20003f5c
 8008d04:	20003f58 	.word	0x20003f58
 8008d08:	20003f54 	.word	0x20003f54
 8008d0c:	20007700 	.word	0x20007700
 8008d10:	20003f60 	.word	0x20003f60
 8008d14:	0800d4ba 	.word	0x0800d4ba
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8008d18:	7d23      	ldrb	r3, [r4, #20]
 8008d1a:	2b0a      	cmp	r3, #10
 8008d1c:	d005      	beq.n	8008d2a <tcp_input+0x302>
 8008d1e:	4653      	mov	r3, sl
 8008d20:	22fe      	movs	r2, #254	; 0xfe
 8008d22:	4649      	mov	r1, r9
 8008d24:	489d      	ldr	r0, [pc, #628]	; (8008f9c <tcp_input+0x574>)
 8008d26:	f002 fa33 	bl	800b190 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 8008d2a:	6833      	ldr	r3, [r6, #0]
 8008d2c:	8b22      	ldrh	r2, [r4, #24]
 8008d2e:	8818      	ldrh	r0, [r3, #0]
 8008d30:	4290      	cmp	r0, r2
 8008d32:	d13c      	bne.n	8008dae <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008d34:	8ae1      	ldrh	r1, [r4, #22]
      if (pcb->remote_port == tcphdr->src &&
 8008d36:	885a      	ldrh	r2, [r3, #2]
 8008d38:	428a      	cmp	r2, r1
 8008d3a:	d138      	bne.n	8008dae <tcp_input+0x386>
          pcb->local_port == tcphdr->dest &&
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008d42:	4299      	cmp	r1, r3
 8008d44:	d133      	bne.n	8008dae <tcp_input+0x386>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8008d46:	6821      	ldr	r1, [r4, #0]
 8008d48:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008d4c:	4299      	cmp	r1, r3
 8008d4e:	d12e      	bne.n	8008dae <tcp_input+0x386>
  if (flags & TCP_RST) {
 8008d50:	9b03      	ldr	r3, [sp, #12]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	0759      	lsls	r1, r3, #29
 8008d56:	d424      	bmi.n	8008da2 <tcp_input+0x37a>
  if (flags & TCP_SYN) {
 8008d58:	079e      	lsls	r6, r3, #30
 8008d5a:	d513      	bpl.n	8008d84 <tcp_input+0x35c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8008d5c:	f8db 1000 	ldr.w	r1, [fp]
 8008d60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d62:	1acb      	subs	r3, r1, r3
 8008d64:	d413      	bmi.n	8008d8e <tcp_input+0x366>
 8008d66:	8d26      	ldrh	r6, [r4, #40]	; 0x28
 8008d68:	1b9b      	subs	r3, r3, r6
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	dc0f      	bgt.n	8008d8e <tcp_input+0x366>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d6e:	9b04      	ldr	r3, [sp, #16]
 8008d70:	881c      	ldrh	r4, [r3, #0]
 8008d72:	9001      	str	r0, [sp, #4]
 8008d74:	9200      	str	r2, [sp, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008d76:	4b8a      	ldr	r3, [pc, #552]	; (8008fa0 <tcp_input+0x578>)
 8008d78:	4421      	add	r1, r4
 8008d7a:	1d1a      	adds	r2, r3, #4
 8008d7c:	6838      	ldr	r0, [r7, #0]
 8008d7e:	f000 fe67 	bl	8009a50 <tcp_rst>
 8008d82:	e00e      	b.n	8008da2 <tcp_input+0x37a>
  } else if (flags & TCP_FIN) {
 8008d84:	07d8      	lsls	r0, r3, #31
    pcb->tmr = tcp_ticks;
 8008d86:	bf42      	ittt	mi
 8008d88:	4b86      	ldrmi	r3, [pc, #536]	; (8008fa4 <tcp_input+0x57c>)
 8008d8a:	681b      	ldrmi	r3, [r3, #0]
 8008d8c:	6223      	strmi	r3, [r4, #32]
  if ((tcplen > 0)) {
 8008d8e:	9b04      	ldr	r3, [sp, #16]
 8008d90:	881b      	ldrh	r3, [r3, #0]
 8008d92:	b133      	cbz	r3, 8008da2 <tcp_input+0x37a>
    pcb->flags |= TF_ACK_NOW;
 8008d94:	7ea3      	ldrb	r3, [r4, #26]
 8008d96:	f043 0302 	orr.w	r3, r3, #2
 8008d9a:	76a3      	strb	r3, [r4, #26]
    tcp_output(pcb);
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fcd9 	bl	8009754 <tcp_output>
  pbuf_free(p);
 8008da2:	4628      	mov	r0, r5
}
 8008da4:	b009      	add	sp, #36	; 0x24
 8008da6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8008daa:	f7fd bfe1 	b.w	8006d70 <pbuf_free>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8008dae:	68e4      	ldr	r4, [r4, #12]
 8008db0:	2c00      	cmp	r4, #0
 8008db2:	d1b1      	bne.n	8008d18 <tcp_input+0x2f0>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008db4:	4b7c      	ldr	r3, [pc, #496]	; (8008fa8 <tcp_input+0x580>)
      if (lpcb->local_port == tcphdr->dest) {
 8008db6:	6832      	ldr	r2, [r6, #0]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008db8:	6819      	ldr	r1, [r3, #0]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008dba:	f8d8 e014 	ldr.w	lr, [r8, #20]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008dbe:	4689      	mov	r9, r1
 8008dc0:	f1b9 0f00 	cmp.w	r9, #0
 8008dc4:	d111      	bne.n	8008dea <tcp_input+0x3c2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8008dc6:	8990      	ldrh	r0, [r2, #12]
 8008dc8:	f7fb f918 	bl	8003ffc <lwip_htons>
 8008dcc:	0743      	lsls	r3, r0, #29
 8008dce:	d4e8      	bmi.n	8008da2 <tcp_input+0x37a>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008dd0:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8008dd2:	9a04      	ldr	r2, [sp, #16]
 8008dd4:	f8db 1000 	ldr.w	r1, [fp]
 8008dd8:	8810      	ldrh	r0, [r2, #0]
 8008dda:	881a      	ldrh	r2, [r3, #0]
 8008ddc:	4401      	add	r1, r0
 8008dde:	9201      	str	r2, [sp, #4]
 8008de0:	885b      	ldrh	r3, [r3, #2]
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	4b6e      	ldr	r3, [pc, #440]	; (8008fa0 <tcp_input+0x578>)
 8008de6:	1d1a      	adds	r2, r3, #4
 8008de8:	e7c8      	b.n	8008d7c <tcp_input+0x354>
      if (lpcb->local_port == tcphdr->dest) {
 8008dea:	f8b9 0016 	ldrh.w	r0, [r9, #22]
 8008dee:	8853      	ldrh	r3, [r2, #2]
 8008df0:	4283      	cmp	r3, r0
 8008df2:	d107      	bne.n	8008e04 <tcp_input+0x3dc>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8008df4:	f8d9 3000 	ldr.w	r3, [r9]
 8008df8:	4573      	cmp	r3, lr
 8008dfa:	f000 82dd 	beq.w	80093b8 <tcp_input+0x990>
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	f000 82da 	beq.w	80093b8 <tcp_input+0x990>
 8008e04:	464c      	mov	r4, r9
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8008e06:	f8d9 900c 	ldr.w	r9, [r9, #12]
 8008e0a:	e7d9      	b.n	8008dc0 <tcp_input+0x398>
  } else if (flags & TCP_SYN) {
 8008e0c:	0798      	lsls	r0, r3, #30
 8008e0e:	d5c8      	bpl.n	8008da2 <tcp_input+0x37a>
    npcb = tcp_alloc(pcb->prio);
 8008e10:	f899 0015 	ldrb.w	r0, [r9, #21]
 8008e14:	f7fe ffb4 	bl	8007d80 <tcp_alloc>
    if (npcb == NULL) {
 8008e18:	4604      	mov	r4, r0
 8008e1a:	b950      	cbnz	r0, 8008e32 <tcp_input+0x40a>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8008e1c:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d0be      	beq.n	8008da2 <tcp_input+0x37a>
 8008e24:	4601      	mov	r1, r0
 8008e26:	f04f 32ff 	mov.w	r2, #4294967295
 8008e2a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 8008e2e:	4798      	blx	r3
 8008e30:	e7b7      	b.n	8008da2 <tcp_input+0x37a>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008e32:	f8d8 3014 	ldr.w	r3, [r8, #20]
    npcb->remote_port = tcphdr->src;
 8008e36:	6832      	ldr	r2, [r6, #0]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008e38:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8008e3a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008e3e:	6043      	str	r3, [r0, #4]
    npcb->local_port = pcb->local_port;
 8008e40:	f8b9 3016 	ldrh.w	r3, [r9, #22]
 8008e44:	82c3      	strh	r3, [r0, #22]
    npcb->remote_port = tcphdr->src;
 8008e46:	7813      	ldrb	r3, [r2, #0]
 8008e48:	7852      	ldrb	r2, [r2, #1]
 8008e4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e4e:	8303      	strh	r3, [r0, #24]
    npcb->state = SYN_RCVD;
 8008e50:	2303      	movs	r3, #3
 8008e52:	7503      	strb	r3, [r0, #20]
    npcb->rcv_nxt = seqno + 1;
 8008e54:	f8db 3000 	ldr.w	r3, [fp]
 8008e58:	3301      	adds	r3, #1
 8008e5a:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8008e5c:	62c3      	str	r3, [r0, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8008e5e:	f7ff f817 	bl	8007e90 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e62:	f8db 3000 	ldr.w	r3, [fp]
    npcb->snd_wl2 = iss;
 8008e66:	6560      	str	r0, [r4, #84]	; 0x54
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e68:	3b01      	subs	r3, #1
    npcb->snd_nxt = iss;
 8008e6a:	64e0      	str	r0, [r4, #76]	; 0x4c
    npcb->lastack = iss;
 8008e6c:	6460      	str	r0, [r4, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8008e6e:	6523      	str	r3, [r4, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8008e70:	f8d9 3010 	ldr.w	r3, [r9, #16]
    npcb->snd_lbb = iss;
 8008e74:	65a0      	str	r0, [r4, #88]	; 0x58
    npcb->callback_arg = pcb->callback_arg;
 8008e76:	6123      	str	r3, [r4, #16]
    npcb->listener = pcb;
 8008e78:	f8c4 9078 	str.w	r9, [r4, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8008e7c:	f899 3008 	ldrb.w	r3, [r9, #8]
 8008e80:	f003 030c 	and.w	r3, r3, #12
 8008e84:	7223      	strb	r3, [r4, #8]
    TCP_REG_ACTIVE(npcb);
 8008e86:	4b49      	ldr	r3, [pc, #292]	; (8008fac <tcp_input+0x584>)
 8008e88:	681a      	ldr	r2, [r3, #0]
 8008e8a:	601c      	str	r4, [r3, #0]
 8008e8c:	60e2      	str	r2, [r4, #12]
 8008e8e:	f000 ff81 	bl	8009d94 <tcp_timer_needed>
 8008e92:	4b47      	ldr	r3, [pc, #284]	; (8008fb0 <tcp_input+0x588>)
 8008e94:	2201      	movs	r2, #1
 8008e96:	701a      	strb	r2, [r3, #0]
  if (tcphdr_optlen != 0) {
 8008e98:	9b06      	ldr	r3, [sp, #24]
 8008e9a:	881b      	ldrh	r3, [r3, #0]
 8008e9c:	b11b      	cbz	r3, 8008ea6 <tcp_input+0x47e>
 8008e9e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8008ea2:	f7ff fd69 	bl	8008978 <tcp_parseopt.isra.1.part.2>
    npcb->snd_wnd = tcphdr->wnd;
 8008ea6:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ea8:	1d21      	adds	r1, r4, #4
 8008eaa:	8e60      	ldrh	r0, [r4, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 8008eac:	89db      	ldrh	r3, [r3, #14]
 8008eae:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008eb2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008eb6:	f7fe fff7 	bl	8007ea8 <tcp_eff_send_mss_impl>
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008eba:	2112      	movs	r1, #18
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008ebc:	8660      	strh	r0, [r4, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	f000 fb5a 	bl	8009578 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 8008ec4:	2800      	cmp	r0, #0
 8008ec6:	f43f af69 	beq.w	8008d9c <tcp_input+0x374>
      tcp_abandon(npcb, 0);
 8008eca:	2100      	movs	r1, #0
 8008ecc:	4620      	mov	r0, r4
 8008ece:	f7fe fe9f 	bl	8007c10 <tcp_abandon>
 8008ed2:	e766      	b.n	8008da2 <tcp_input+0x37a>
  if (flags & TCP_RST) {
 8008ed4:	9b03      	ldr	r3, [sp, #12]
    tcp_input_pcb = pcb;
 8008ed6:	602c      	str	r4, [r5, #0]
  if (flags & TCP_RST) {
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	0759      	lsls	r1, r3, #29
 8008edc:	d535      	bpl.n	8008f4a <tcp_input+0x522>
    if (pcb->state == SYN_SENT) {
 8008ede:	7d21      	ldrb	r1, [r4, #20]
 8008ee0:	2902      	cmp	r1, #2
 8008ee2:	d122      	bne.n	8008f2a <tcp_input+0x502>
      if (ackno == pcb->snd_nxt) {
 8008ee4:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d109      	bne.n	8008f00 <tcp_input+0x4d8>
      recv_flags |= TF_RESET;
 8008eec:	f898 3000 	ldrb.w	r3, [r8]
 8008ef0:	f043 0308 	orr.w	r3, r3, #8
 8008ef4:	f888 3000 	strb.w	r3, [r8]
      pcb->flags &= ~TF_ACK_DELAY;
 8008ef8:	7ea3      	ldrb	r3, [r4, #26]
 8008efa:	f023 0301 	bic.w	r3, r3, #1
 8008efe:	76a3      	strb	r3, [r4, #26]
      if (recv_flags & TF_RESET) {
 8008f00:	f898 3000 	ldrb.w	r3, [r8]
 8008f04:	0719      	lsls	r1, r3, #28
 8008f06:	f140 81ed 	bpl.w	80092e4 <tcp_input+0x8bc>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8008f0a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
 8008f0e:	b11b      	cbz	r3, 8008f18 <tcp_input+0x4f0>
 8008f10:	f06f 010d 	mvn.w	r1, #13
 8008f14:	6920      	ldr	r0, [r4, #16]
 8008f16:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4824      	ldr	r0, [pc, #144]	; (8008fac <tcp_input+0x584>)
 8008f1c:	f7fe fce0 	bl	80078e0 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8008f20:	4621      	mov	r1, r4
 8008f22:	2001      	movs	r0, #1
 8008f24:	f7fd fd9e 	bl	8006a64 <memp_free>
 8008f28:	e6b0      	b.n	8008c8c <tcp_input+0x264>
      if (seqno == pcb->rcv_nxt) {
 8008f2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8008f2c:	f8db 3000 	ldr.w	r3, [fp]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	f000 825a 	beq.w	80093ea <tcp_input+0x9c2>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008f36:	1a9b      	subs	r3, r3, r2
 8008f38:	d4e2      	bmi.n	8008f00 <tcp_input+0x4d8>
 8008f3a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8008f3c:	1a9b      	subs	r3, r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	dcde      	bgt.n	8008f00 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8008f42:	7ea3      	ldrb	r3, [r4, #26]
 8008f44:	f043 0302 	orr.w	r3, r3, #2
 8008f48:	e7d9      	b.n	8008efe <tcp_input+0x4d6>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008f4a:	f013 0102 	ands.w	r1, r3, #2
 8008f4e:	d003      	beq.n	8008f58 <tcp_input+0x530>
 8008f50:	7d22      	ldrb	r2, [r4, #20]
 8008f52:	3a02      	subs	r2, #2
 8008f54:	2a01      	cmp	r2, #1
 8008f56:	d8f4      	bhi.n	8008f42 <tcp_input+0x51a>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8008f58:	7ea2      	ldrb	r2, [r4, #26]
 8008f5a:	06d2      	lsls	r2, r2, #27
    pcb->tmr = tcp_ticks;
 8008f5c:	bf5e      	ittt	pl
 8008f5e:	4a11      	ldrpl	r2, [pc, #68]	; (8008fa4 <tcp_input+0x57c>)
 8008f60:	6812      	ldrpl	r2, [r2, #0]
 8008f62:	6222      	strpl	r2, [r4, #32]
  pcb->keep_cnt_sent = 0;
 8008f64:	2200      	movs	r2, #0
 8008f66:	f884 2096 	strb.w	r2, [r4, #150]	; 0x96
  if (tcphdr_optlen != 0) {
 8008f6a:	9a06      	ldr	r2, [sp, #24]
 8008f6c:	8812      	ldrh	r2, [r2, #0]
 8008f6e:	b13a      	cbz	r2, 8008f80 <tcp_input+0x558>
 8008f70:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8008f74:	9107      	str	r1, [sp, #28]
 8008f76:	9306      	str	r3, [sp, #24]
 8008f78:	f7ff fcfe 	bl	8008978 <tcp_parseopt.isra.1.part.2>
 8008f7c:	9907      	ldr	r1, [sp, #28]
 8008f7e:	9b06      	ldr	r3, [sp, #24]
  switch (pcb->state) {
 8008f80:	7d22      	ldrb	r2, [r4, #20]
 8008f82:	3a02      	subs	r2, #2
 8008f84:	2a07      	cmp	r2, #7
 8008f86:	d8bb      	bhi.n	8008f00 <tcp_input+0x4d8>
 8008f88:	e8df f012 	tbh	[pc, r2, lsl #1]
 8008f8c:	00940014 	.word	0x00940014
 8008f90:	010000fc 	.word	0x010000fc
 8008f94:	00fc014a 	.word	0x00fc014a
 8008f98:	01830164 	.word	0x01830164
 8008f9c:	0800c106 	.word	0x0800c106
 8008fa0:	20003fb0 	.word	0x20003fb0
 8008fa4:	200076f0 	.word	0x200076f0
 8008fa8:	200076f4 	.word	0x200076f4
 8008fac:	200076ec 	.word	0x200076ec
 8008fb0:	200076e8 	.word	0x200076e8
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008fb4:	f003 0212 	and.w	r2, r3, #18
 8008fb8:	2a12      	cmp	r2, #18
 8008fba:	d15e      	bne.n	800907a <tcp_input+0x652>
        && (ackno == pcb->lastack + 1)) {
 8008fbc:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8008fbe:	6839      	ldr	r1, [r7, #0]
 8008fc0:	3201      	adds	r2, #1
 8008fc2:	428a      	cmp	r2, r1
 8008fc4:	d159      	bne.n	800907a <tcp_input+0x652>
      pcb->rcv_nxt = seqno + 1;
 8008fc6:	f8db 3000 	ldr.w	r3, [fp]
      pcb->lastack = ackno;
 8008fca:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rcv_nxt = seqno + 1;
 8008fcc:	1c59      	adds	r1, r3, #1
      pcb->snd_wnd = tcphdr->wnd;
 8008fce:	6832      	ldr	r2, [r6, #0]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008fd0:	3b01      	subs	r3, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008fd2:	8e60      	ldrh	r0, [r4, #50]	; 0x32
      pcb->rcv_nxt = seqno + 1;
 8008fd4:	6261      	str	r1, [r4, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008fd6:	62e1      	str	r1, [r4, #44]	; 0x2c
      pcb->snd_wnd = tcphdr->wnd;
 8008fd8:	89d2      	ldrh	r2, [r2, #14]
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008fda:	6523      	str	r3, [r4, #80]	; 0x50
      pcb->state = ESTABLISHED;
 8008fdc:	2304      	movs	r3, #4
      pcb->snd_wnd = tcphdr->wnd;
 8008fde:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 8008fe2:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008fe6:	18e1      	adds	r1, r4, r3
      pcb->state = ESTABLISHED;
 8008fe8:	7523      	strb	r3, [r4, #20]
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008fea:	f7fe ff5d 	bl	8007ea8 <tcp_eff_send_mss_impl>
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008fee:	f241 121c 	movw	r2, #4380	; 0x111c
 8008ff2:	0043      	lsls	r3, r0, #1
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008ff4:	8660      	strh	r0, [r4, #50]	; 0x32
      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8008ff6:	0080      	lsls	r0, r0, #2
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	bf38      	it	cc
 8008ffc:	4613      	movcc	r3, r2
 8008ffe:	4283      	cmp	r3, r0
 8009000:	bf28      	it	cs
 8009002:	4603      	movcs	r3, r0
 8009004:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8009008:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800900c:	b933      	cbnz	r3, 800901c <tcp_input+0x5f4>
 800900e:	4bad      	ldr	r3, [pc, #692]	; (80092c4 <tcp_input+0x89c>)
 8009010:	f240 321a 	movw	r2, #794	; 0x31a
 8009014:	49ac      	ldr	r1, [pc, #688]	; (80092c8 <tcp_input+0x8a0>)
 8009016:	48ad      	ldr	r0, [pc, #692]	; (80092cc <tcp_input+0x8a4>)
 8009018:	f002 f8ba 	bl	800b190 <iprintf>
      --pcb->snd_queuelen;
 800901c:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
      rseg = pcb->unacked;
 8009020:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
      --pcb->snd_queuelen;
 8009022:	3b01      	subs	r3, #1
 8009024:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rseg == NULL) {
 8009028:	b9fe      	cbnz	r6, 800906a <tcp_input+0x642>
        rseg = pcb->unsent;
 800902a:	6ea6      	ldr	r6, [r4, #104]	; 0x68
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800902c:	b936      	cbnz	r6, 800903c <tcp_input+0x614>
 800902e:	4ba5      	ldr	r3, [pc, #660]	; (80092c4 <tcp_input+0x89c>)
 8009030:	f240 3222 	movw	r2, #802	; 0x322
 8009034:	49a6      	ldr	r1, [pc, #664]	; (80092d0 <tcp_input+0x8a8>)
 8009036:	48a5      	ldr	r0, [pc, #660]	; (80092cc <tcp_input+0x8a4>)
 8009038:	f002 f8aa 	bl	800b190 <iprintf>
        pcb->unsent = rseg->next;
 800903c:	6833      	ldr	r3, [r6, #0]
 800903e:	66a3      	str	r3, [r4, #104]	; 0x68
      tcp_seg_free(rseg);
 8009040:	4630      	mov	r0, r6
 8009042:	f7fe fa1f 	bl	8007484 <tcp_seg_free>
      if (pcb->unacked == NULL) {
 8009046:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009048:	b993      	cbnz	r3, 8009070 <tcp_input+0x648>
        pcb->rtime = -1;
 800904a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800904e:	8623      	strh	r3, [r4, #48]	; 0x30
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8009050:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8009054:	2b00      	cmp	r3, #0
 8009056:	f43f af74 	beq.w	8008f42 <tcp_input+0x51a>
 800905a:	2200      	movs	r2, #0
 800905c:	4621      	mov	r1, r4
 800905e:	6920      	ldr	r0, [r4, #16]
 8009060:	4798      	blx	r3
      if (err == ERR_ABRT) {
 8009062:	300d      	adds	r0, #13
 8009064:	f47f af6d 	bne.w	8008f42 <tcp_input+0x51a>
 8009068:	e610      	b.n	8008c8c <tcp_input+0x264>
        pcb->unacked = rseg->next;
 800906a:	6833      	ldr	r3, [r6, #0]
 800906c:	66e3      	str	r3, [r4, #108]	; 0x6c
 800906e:	e7e7      	b.n	8009040 <tcp_input+0x618>
        pcb->rtime = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	8623      	strh	r3, [r4, #48]	; 0x30
        pcb->nrtx = 0;
 8009074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009078:	e7ea      	b.n	8009050 <tcp_input+0x628>
    else if (flags & TCP_ACK) {
 800907a:	06db      	lsls	r3, r3, #27
 800907c:	f57f af40 	bpl.w	8008f00 <tcp_input+0x4d8>
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8009080:	6833      	ldr	r3, [r6, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8009082:	9a04      	ldr	r2, [sp, #16]
 8009084:	f8db 1000 	ldr.w	r1, [fp]
 8009088:	8810      	ldrh	r0, [r2, #0]
 800908a:	881a      	ldrh	r2, [r3, #0]
 800908c:	4401      	add	r1, r0
 800908e:	9201      	str	r2, [sp, #4]
 8009090:	885b      	ldrh	r3, [r3, #2]
 8009092:	9300      	str	r3, [sp, #0]
 8009094:	4b8f      	ldr	r3, [pc, #572]	; (80092d4 <tcp_input+0x8ac>)
 8009096:	6838      	ldr	r0, [r7, #0]
 8009098:	1d1a      	adds	r2, r3, #4
 800909a:	f000 fcd9 	bl	8009a50 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800909e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 80090a2:	2b05      	cmp	r3, #5
 80090a4:	f63f af2c 	bhi.w	8008f00 <tcp_input+0x4d8>
        pcb->rtime = 0;
 80090a8:	2300      	movs	r3, #0
        tcp_rexmit_rto(pcb);
 80090aa:	4620      	mov	r0, r4
        pcb->rtime = 0;
 80090ac:	8623      	strh	r3, [r4, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 80090ae:	f000 fd29 	bl	8009b04 <tcp_rexmit_rto>
 80090b2:	e725      	b.n	8008f00 <tcp_input+0x4d8>
    if (flags & TCP_ACK) {
 80090b4:	06d8      	lsls	r0, r3, #27
 80090b6:	d557      	bpl.n	8009168 <tcp_input+0x740>
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80090b8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80090ba:	6838      	ldr	r0, [r7, #0]
 80090bc:	43db      	mvns	r3, r3
 80090be:	42c3      	cmn	r3, r0
 80090c0:	d443      	bmi.n	800914a <tcp_input+0x722>
 80090c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80090c4:	1ac3      	subs	r3, r0, r3
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	dc3f      	bgt.n	800914a <tcp_input+0x722>
        pcb->state = ESTABLISHED;
 80090ca:	2304      	movs	r3, #4
 80090cc:	7523      	strb	r3, [r4, #20]
        LWIP_ASSERT("pcb->listener->accept != NULL",
 80090ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80090d0:	b143      	cbz	r3, 80090e4 <tcp_input+0x6bc>
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	b933      	cbnz	r3, 80090e4 <tcp_input+0x6bc>
 80090d6:	4b7b      	ldr	r3, [pc, #492]	; (80092c4 <tcp_input+0x89c>)
 80090d8:	f240 3251 	movw	r2, #849	; 0x351
 80090dc:	497e      	ldr	r1, [pc, #504]	; (80092d8 <tcp_input+0x8b0>)
 80090de:	487b      	ldr	r0, [pc, #492]	; (80092cc <tcp_input+0x8a4>)
 80090e0:	f002 f856 	bl	800b190 <iprintf>
        if (pcb->listener == NULL) {
 80090e4:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80090e6:	b91b      	cbnz	r3, 80090f0 <tcp_input+0x6c8>
            tcp_abort(pcb);
 80090e8:	4620      	mov	r0, r4
 80090ea:	f7fe fe07 	bl	8007cfc <tcp_abort>
            goto aborted;
 80090ee:	e5cd      	b.n	8008c8c <tcp_input+0x264>
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80090f0:	699b      	ldr	r3, [r3, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d0f8      	beq.n	80090e8 <tcp_input+0x6c0>
 80090f6:	2200      	movs	r2, #0
 80090f8:	4621      	mov	r1, r4
 80090fa:	6920      	ldr	r0, [r4, #16]
 80090fc:	4798      	blx	r3
        if (err != ERR_OK) {
 80090fe:	b110      	cbz	r0, 8009106 <tcp_input+0x6de>
          if (err != ERR_ABRT) {
 8009100:	300d      	adds	r0, #13
 8009102:	d1f1      	bne.n	80090e8 <tcp_input+0x6c0>
 8009104:	e5c2      	b.n	8008c8c <tcp_input+0x264>
        tcp_receive(pcb);
 8009106:	4620      	mov	r0, r4
 8009108:	f7fe ff42 	bl	8007f90 <tcp_receive>
        if (recv_acked != 0) {
 800910c:	9b05      	ldr	r3, [sp, #20]
 800910e:	881b      	ldrh	r3, [r3, #0]
 8009110:	b113      	cbz	r3, 8009118 <tcp_input+0x6f0>
          recv_acked--;
 8009112:	3b01      	subs	r3, #1
 8009114:	9a05      	ldr	r2, [sp, #20]
 8009116:	8013      	strh	r3, [r2, #0]
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8009118:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 800911a:	f241 111c 	movw	r1, #4380	; 0x111c
 800911e:	0053      	lsls	r3, r2, #1
 8009120:	0092      	lsls	r2, r2, #2
 8009122:	428b      	cmp	r3, r1
 8009124:	bf38      	it	cc
 8009126:	460b      	movcc	r3, r1
 8009128:	4293      	cmp	r3, r2
 800912a:	bf28      	it	cs
 800912c:	4613      	movcs	r3, r2
 800912e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 8009132:	f898 3000 	ldrb.w	r3, [r8]
 8009136:	069a      	lsls	r2, r3, #26
 8009138:	f57f aee2 	bpl.w	8008f00 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 800913c:	7ea3      	ldrb	r3, [r4, #26]
 800913e:	f043 0302 	orr.w	r3, r3, #2
 8009142:	76a3      	strb	r3, [r4, #26]
      pcb->state = CLOSE_WAIT;
 8009144:	2307      	movs	r3, #7
        pcb->state = CLOSING;
 8009146:	7523      	strb	r3, [r4, #20]
 8009148:	e6da      	b.n	8008f00 <tcp_input+0x4d8>
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800914a:	6833      	ldr	r3, [r6, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800914c:	9a04      	ldr	r2, [sp, #16]
 800914e:	f8db 1000 	ldr.w	r1, [fp]
 8009152:	8816      	ldrh	r6, [r2, #0]
 8009154:	881a      	ldrh	r2, [r3, #0]
 8009156:	4431      	add	r1, r6
 8009158:	9201      	str	r2, [sp, #4]
 800915a:	885b      	ldrh	r3, [r3, #2]
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	4b5d      	ldr	r3, [pc, #372]	; (80092d4 <tcp_input+0x8ac>)
 8009160:	1d1a      	adds	r2, r3, #4
 8009162:	f000 fc75 	bl	8009a50 <tcp_rst>
 8009166:	e6cb      	b.n	8008f00 <tcp_input+0x4d8>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8009168:	2900      	cmp	r1, #0
 800916a:	f43f aec9 	beq.w	8008f00 <tcp_input+0x4d8>
 800916e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009170:	f8db 2000 	ldr.w	r2, [fp]
 8009174:	3b01      	subs	r3, #1
 8009176:	4293      	cmp	r3, r2
 8009178:	f47f aec2 	bne.w	8008f00 <tcp_input+0x4d8>
      tcp_rexmit(pcb);
 800917c:	4620      	mov	r0, r4
 800917e:	f000 fcdd 	bl	8009b3c <tcp_rexmit>
 8009182:	e6bd      	b.n	8008f00 <tcp_input+0x4d8>
    tcp_receive(pcb);
 8009184:	4620      	mov	r0, r4
 8009186:	f7fe ff03 	bl	8007f90 <tcp_receive>
 800918a:	e7d2      	b.n	8009132 <tcp_input+0x70a>
    tcp_receive(pcb);
 800918c:	4620      	mov	r0, r4
 800918e:	f7fe feff 	bl	8007f90 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009192:	f898 3000 	ldrb.w	r3, [r8]
 8009196:	f013 0f20 	tst.w	r3, #32
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800919a:	9b03      	ldr	r3, [sp, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
    if (recv_flags & TF_GOT_FIN) {
 800919e:	d031      	beq.n	8009204 <tcp_input+0x7dc>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80091a0:	f013 0f10 	tst.w	r3, #16
 80091a4:	7ea3      	ldrb	r3, [r4, #26]
 80091a6:	d028      	beq.n	80091fa <tcp_input+0x7d2>
 80091a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80091aa:	683a      	ldr	r2, [r7, #0]
 80091ac:	4291      	cmp	r1, r2
 80091ae:	d124      	bne.n	80091fa <tcp_input+0x7d2>
 80091b0:	6ea2      	ldr	r2, [r4, #104]	; 0x68
 80091b2:	bb12      	cbnz	r2, 80091fa <tcp_input+0x7d2>
        tcp_ack_now(pcb);
 80091b4:	f043 0302 	orr.w	r3, r3, #2
        tcp_pcb_purge(pcb);
 80091b8:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 80091ba:	76a3      	strb	r3, [r4, #26]
        tcp_pcb_purge(pcb);
 80091bc:	f7fe f98e 	bl	80074dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80091c0:	f8d9 3000 	ldr.w	r3, [r9]
 80091c4:	429c      	cmp	r4, r3
 80091c6:	d10a      	bne.n	80091de <tcp_input+0x7b6>
      TCP_RMV_ACTIVE(pcb);
 80091c8:	68e3      	ldr	r3, [r4, #12]
 80091ca:	f8c9 3000 	str.w	r3, [r9]
 80091ce:	e008      	b.n	80091e2 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	4294      	cmp	r4, r2
 80091d4:	d102      	bne.n	80091dc <tcp_input+0x7b4>
      TCP_RMV_ACTIVE(pcb);
 80091d6:	68e2      	ldr	r2, [r4, #12]
 80091d8:	60da      	str	r2, [r3, #12]
 80091da:	e002      	b.n	80091e2 <tcp_input+0x7ba>
        TCP_RMV_ACTIVE(pcb);
 80091dc:	4613      	mov	r3, r2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d1f6      	bne.n	80091d0 <tcp_input+0x7a8>
      TCP_RMV_ACTIVE(pcb);
 80091e2:	2201      	movs	r2, #1
 80091e4:	4b3d      	ldr	r3, [pc, #244]	; (80092dc <tcp_input+0x8b4>)
 80091e6:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80091e8:	230a      	movs	r3, #10
 80091ea:	7523      	strb	r3, [r4, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80091ec:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <tcp_input+0x8b8>)
 80091ee:	681a      	ldr	r2, [r3, #0]
 80091f0:	601c      	str	r4, [r3, #0]
 80091f2:	60e2      	str	r2, [r4, #12]
 80091f4:	f000 fdce 	bl	8009d94 <tcp_timer_needed>
 80091f8:	e682      	b.n	8008f00 <tcp_input+0x4d8>
        tcp_ack_now(pcb);
 80091fa:	f043 0302 	orr.w	r3, r3, #2
 80091fe:	76a3      	strb	r3, [r4, #26]
        pcb->state = CLOSING;
 8009200:	2308      	movs	r3, #8
 8009202:	e7a0      	b.n	8009146 <tcp_input+0x71e>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8009204:	06db      	lsls	r3, r3, #27
 8009206:	f57f ae7b 	bpl.w	8008f00 <tcp_input+0x4d8>
 800920a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	429a      	cmp	r2, r3
 8009210:	f47f ae76 	bne.w	8008f00 <tcp_input+0x4d8>
 8009214:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009216:	2b00      	cmp	r3, #0
 8009218:	f47f ae72 	bne.w	8008f00 <tcp_input+0x4d8>
      pcb->state = FIN_WAIT_2;
 800921c:	2306      	movs	r3, #6
 800921e:	e792      	b.n	8009146 <tcp_input+0x71e>
    tcp_receive(pcb);
 8009220:	4620      	mov	r0, r4
 8009222:	f7fe feb5 	bl	8007f90 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8009226:	f898 3000 	ldrb.w	r3, [r8]
 800922a:	069f      	lsls	r7, r3, #26
 800922c:	f57f ae68 	bpl.w	8008f00 <tcp_input+0x4d8>
      tcp_ack_now(pcb);
 8009230:	7ea3      	ldrb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 8009232:	4620      	mov	r0, r4
      tcp_ack_now(pcb);
 8009234:	f043 0302 	orr.w	r3, r3, #2
 8009238:	76a3      	strb	r3, [r4, #26]
      tcp_pcb_purge(pcb);
 800923a:	f7fe f94f 	bl	80074dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800923e:	f8d9 3000 	ldr.w	r3, [r9]
 8009242:	429c      	cmp	r4, r3
 8009244:	d0c0      	beq.n	80091c8 <tcp_input+0x7a0>
 8009246:	2b00      	cmp	r3, #0
 8009248:	d0cb      	beq.n	80091e2 <tcp_input+0x7ba>
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	4294      	cmp	r4, r2
 800924e:	d0c2      	beq.n	80091d6 <tcp_input+0x7ae>
 8009250:	4613      	mov	r3, r2
 8009252:	e7f8      	b.n	8009246 <tcp_input+0x81e>
    tcp_receive(pcb);
 8009254:	4620      	mov	r0, r4
 8009256:	f7fe fe9b 	bl	8007f90 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800925a:	9b03      	ldr	r3, [sp, #12]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	06de      	lsls	r6, r3, #27
 8009260:	f57f ae4e 	bpl.w	8008f00 <tcp_input+0x4d8>
 8009264:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	429a      	cmp	r2, r3
 800926a:	f47f ae49 	bne.w	8008f00 <tcp_input+0x4d8>
 800926e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009270:	2b00      	cmp	r3, #0
 8009272:	f47f ae45 	bne.w	8008f00 <tcp_input+0x4d8>
      tcp_pcb_purge(pcb);
 8009276:	4620      	mov	r0, r4
 8009278:	f7fe f930 	bl	80074dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800927c:	f8d9 3000 	ldr.w	r3, [r9]
 8009280:	429c      	cmp	r4, r3
 8009282:	d0a1      	beq.n	80091c8 <tcp_input+0x7a0>
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0ac      	beq.n	80091e2 <tcp_input+0x7ba>
 8009288:	68da      	ldr	r2, [r3, #12]
 800928a:	4294      	cmp	r4, r2
 800928c:	d0a3      	beq.n	80091d6 <tcp_input+0x7ae>
 800928e:	4613      	mov	r3, r2
 8009290:	e7f8      	b.n	8009284 <tcp_input+0x85c>
    tcp_receive(pcb);
 8009292:	4620      	mov	r0, r4
 8009294:	f7fe fe7c 	bl	8007f90 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8009298:	9b03      	ldr	r3, [sp, #12]
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	06d8      	lsls	r0, r3, #27
 800929e:	f57f ae2f 	bpl.w	8008f00 <tcp_input+0x4d8>
 80092a2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f47f ae2a 	bne.w	8008f00 <tcp_input+0x4d8>
 80092ac:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f47f ae26 	bne.w	8008f00 <tcp_input+0x4d8>
      recv_flags |= TF_CLOSED;
 80092b4:	f898 3000 	ldrb.w	r3, [r8]
 80092b8:	f043 0310 	orr.w	r3, r3, #16
 80092bc:	f888 3000 	strb.w	r3, [r8]
 80092c0:	e61e      	b.n	8008f00 <tcp_input+0x4d8>
 80092c2:	bf00      	nop
 80092c4:	0800d568 	.word	0x0800d568
 80092c8:	0800d507 	.word	0x0800d507
 80092cc:	0800c106 	.word	0x0800c106
 80092d0:	0800d51d 	.word	0x0800d51d
 80092d4:	20003fb0 	.word	0x20003fb0
 80092d8:	0800d530 	.word	0x0800d530
 80092dc:	200076e8 	.word	0x200076e8
 80092e0:	200076fc 	.word	0x200076fc
        if (recv_acked > 0) {
 80092e4:	9b05      	ldr	r3, [sp, #20]
 80092e6:	881a      	ldrh	r2, [r3, #0]
 80092e8:	b122      	cbz	r2, 80092f4 <tcp_input+0x8cc>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80092ea:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80092ec:	b9eb      	cbnz	r3, 800932a <tcp_input+0x902>
          recv_acked = 0;
 80092ee:	2300      	movs	r3, #0
 80092f0:	9a05      	ldr	r2, [sp, #20]
 80092f2:	8013      	strh	r3, [r2, #0]
        if (tcp_input_delayed_close(pcb)) {
 80092f4:	4620      	mov	r0, r4
 80092f6:	f7ff fb77 	bl	80089e8 <tcp_input_delayed_close>
 80092fa:	2800      	cmp	r0, #0
 80092fc:	f47f acc6 	bne.w	8008c8c <tcp_input+0x264>
        if (recv_data != NULL) {
 8009300:	f8da 3000 	ldr.w	r3, [sl]
 8009304:	b33b      	cbz	r3, 8009356 <tcp_input+0x92e>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8009306:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009308:	b133      	cbz	r3, 8009318 <tcp_input+0x8f0>
 800930a:	4b40      	ldr	r3, [pc, #256]	; (800940c <tcp_input+0x9e4>)
 800930c:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8009310:	493f      	ldr	r1, [pc, #252]	; (8009410 <tcp_input+0x9e8>)
 8009312:	4840      	ldr	r0, [pc, #256]	; (8009414 <tcp_input+0x9ec>)
 8009314:	f001 ff3c 	bl	800b190 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8009318:	7ea3      	ldrb	r3, [r4, #26]
 800931a:	f013 0310 	ands.w	r3, r3, #16
 800931e:	d00a      	beq.n	8009336 <tcp_input+0x90e>
            pbuf_free(recv_data);
 8009320:	f8da 0000 	ldr.w	r0, [sl]
 8009324:	f7fd fd24 	bl	8006d70 <pbuf_free>
 8009328:	e6de      	b.n	80090e8 <tcp_input+0x6c0>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800932a:	4621      	mov	r1, r4
 800932c:	6920      	ldr	r0, [r4, #16]
 800932e:	4798      	blx	r3
            if (err == ERR_ABRT) {
 8009330:	300d      	adds	r0, #13
 8009332:	d1dc      	bne.n	80092ee <tcp_input+0x8c6>
 8009334:	e4aa      	b.n	8008c8c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009336:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
 800933a:	b31e      	cbz	r6, 8009384 <tcp_input+0x95c>
 800933c:	f8da 2000 	ldr.w	r2, [sl]
 8009340:	4621      	mov	r1, r4
 8009342:	6920      	ldr	r0, [r4, #16]
 8009344:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 8009346:	f110 0f0d 	cmn.w	r0, #13
 800934a:	f43f ac9f 	beq.w	8008c8c <tcp_input+0x264>
          if (err != ERR_OK) {
 800934e:	b110      	cbz	r0, 8009356 <tcp_input+0x92e>
            pcb->refused_data = recv_data;
 8009350:	f8da 3000 	ldr.w	r3, [sl]
 8009354:	6763      	str	r3, [r4, #116]	; 0x74
        if (recv_flags & TF_GOT_FIN) {
 8009356:	f898 3000 	ldrb.w	r3, [r8]
 800935a:	069a      	lsls	r2, r3, #26
 800935c:	d505      	bpl.n	800936a <tcp_input+0x942>
          if (pcb->refused_data != NULL) {
 800935e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8009360:	b1c3      	cbz	r3, 8009394 <tcp_input+0x96c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8009362:	7b5a      	ldrb	r2, [r3, #13]
 8009364:	f042 0220 	orr.w	r2, r2, #32
 8009368:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 800936a:	2200      	movs	r2, #0
 800936c:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <tcp_input+0x9f0>)
        if (tcp_input_delayed_close(pcb)) {
 800936e:	4620      	mov	r0, r4
        tcp_input_pcb = NULL;
 8009370:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8009372:	f7ff fb39 	bl	80089e8 <tcp_input_delayed_close>
 8009376:	2800      	cmp	r0, #0
 8009378:	f47f ac88 	bne.w	8008c8c <tcp_input+0x264>
        tcp_output(pcb);
 800937c:	4620      	mov	r0, r4
 800937e:	f000 f9e9 	bl	8009754 <tcp_output>
 8009382:	e483      	b.n	8008c8c <tcp_input+0x264>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8009384:	4633      	mov	r3, r6
 8009386:	f8da 2000 	ldr.w	r2, [sl]
 800938a:	4621      	mov	r1, r4
 800938c:	4630      	mov	r0, r6
 800938e:	f7fe fba7 	bl	8007ae0 <tcp_recv_null>
 8009392:	e7d8      	b.n	8009346 <tcp_input+0x91e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8009394:	8d23      	ldrh	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 8009396:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800939a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
              pcb->rcv_wnd++;
 800939e:	bf1c      	itt	ne
 80093a0:	3301      	addne	r3, #1
 80093a2:	8523      	strhne	r3, [r4, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 80093a4:	2e00      	cmp	r6, #0
 80093a6:	d0e0      	beq.n	800936a <tcp_input+0x942>
 80093a8:	2300      	movs	r3, #0
 80093aa:	4621      	mov	r1, r4
 80093ac:	6920      	ldr	r0, [r4, #16]
 80093ae:	461a      	mov	r2, r3
 80093b0:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 80093b2:	300d      	adds	r0, #13
 80093b4:	d1d9      	bne.n	800936a <tcp_input+0x942>
 80093b6:	e469      	b.n	8008c8c <tcp_input+0x264>
      if (prev != NULL) {
 80093b8:	b13c      	cbz	r4, 80093ca <tcp_input+0x9a2>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80093ba:	f8d9 300c 	ldr.w	r3, [r9, #12]
 80093be:	60e3      	str	r3, [r4, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <tcp_input+0x9f4>)
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80093c2:	f8c9 100c 	str.w	r1, [r9, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80093c6:	f8c3 9000 	str.w	r9, [r3]
  if (flags & TCP_RST) {
 80093ca:	9b03      	ldr	r3, [sp, #12]
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	0759      	lsls	r1, r3, #29
 80093d0:	f53f ace7 	bmi.w	8008da2 <tcp_input+0x37a>
  if (flags & TCP_ACK) {
 80093d4:	06dc      	lsls	r4, r3, #27
 80093d6:	f57f ad19 	bpl.w	8008e0c <tcp_input+0x3e4>
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80093da:	9b04      	ldr	r3, [sp, #16]
 80093dc:	f8db 1000 	ldr.w	r1, [fp]
 80093e0:	881c      	ldrh	r4, [r3, #0]
 80093e2:	8813      	ldrh	r3, [r2, #0]
 80093e4:	e88d 0009 	stmia.w	sp, {r0, r3}
 80093e8:	e4c5      	b.n	8008d76 <tcp_input+0x34e>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80093ea:	2900      	cmp	r1, #0
 80093ec:	f47f ad7e 	bne.w	8008eec <tcp_input+0x4c4>
 80093f0:	4b06      	ldr	r3, [pc, #24]	; (800940c <tcp_input+0x9e4>)
 80093f2:	f240 22e7 	movw	r2, #743	; 0x2e7
 80093f6:	490a      	ldr	r1, [pc, #40]	; (8009420 <tcp_input+0x9f8>)
 80093f8:	4806      	ldr	r0, [pc, #24]	; (8009414 <tcp_input+0x9ec>)
 80093fa:	f001 fec9 	bl	800b190 <iprintf>
 80093fe:	e575      	b.n	8008eec <tcp_input+0x4c4>
      if (prev != NULL) {
 8009400:	f1ba 0f00 	cmp.w	sl, #0
 8009404:	f47f abff 	bne.w	8008c06 <tcp_input+0x1de>
 8009408:	e40e      	b.n	8008c28 <tcp_input+0x200>
 800940a:	bf00      	nop
 800940c:	0800d568 	.word	0x0800d568
 8009410:	0800d54e 	.word	0x0800d54e
 8009414:	0800c106 	.word	0x0800c106
 8009418:	20007700 	.word	0x20007700
 800941c:	200076f4 	.word	0x200076f4
 8009420:	0800d4e7 	.word	0x0800d4e7

08009424 <tcp_trigger_input_pcb_close>:
}

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 8009424:	4a02      	ldr	r2, [pc, #8]	; (8009430 <tcp_trigger_input_pcb_close+0xc>)
 8009426:	7813      	ldrb	r3, [r2, #0]
 8009428:	f043 0310 	orr.w	r3, r3, #16
 800942c:	7013      	strb	r3, [r2, #0]
 800942e:	4770      	bx	lr
 8009430:	20003f5c 	.word	0x20003f5c

08009434 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8009434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009438:	f89d a020 	ldrb.w	sl, [sp, #32]
 800943c:	4680      	mov	r8, r0
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800943e:	2003      	movs	r0, #3
{
 8009440:	460f      	mov	r7, r1
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8009442:	f01a 0f01 	tst.w	sl, #1
{
 8009446:	4616      	mov	r6, r2
 8009448:	4699      	mov	r9, r3
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800944a:	bf14      	ite	ne
 800944c:	2504      	movne	r5, #4
 800944e:	2500      	moveq	r5, #0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009450:	f7fd faec 	bl	8006a2c <memp_malloc>
 8009454:	4604      	mov	r4, r0
 8009456:	b928      	cbnz	r0, 8009464 <tcp_create_segment+0x30>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009458:	4638      	mov	r0, r7
 800945a:	f7fd fc89 	bl	8006d70 <pbuf_free>
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
  return seg;
}
 800945e:	4620      	mov	r0, r4
 8009460:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  seg->next = NULL;
 8009464:	2300      	movs	r3, #0
  seg->flags = optflags;
 8009466:	f880 a00a 	strb.w	sl, [r0, #10]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800946a:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 800946e:	e880 0088 	stmia.w	r0, {r3, r7}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009472:	893b      	ldrh	r3, [r7, #8]
 8009474:	4553      	cmp	r3, sl
 8009476:	d205      	bcs.n	8009484 <tcp_create_segment+0x50>
 8009478:	4b1e      	ldr	r3, [pc, #120]	; (80094f4 <tcp_create_segment+0xc0>)
 800947a:	22ba      	movs	r2, #186	; 0xba
 800947c:	491e      	ldr	r1, [pc, #120]	; (80094f8 <tcp_create_segment+0xc4>)
 800947e:	481f      	ldr	r0, [pc, #124]	; (80094fc <tcp_create_segment+0xc8>)
 8009480:	f001 fe86 	bl	800b190 <iprintf>
  seg->len = p->tot_len - optlen;
 8009484:	893b      	ldrh	r3, [r7, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009486:	4638      	mov	r0, r7
 8009488:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 800948a:	eba3 030a 	sub.w	r3, r3, sl
 800948e:	8123      	strh	r3, [r4, #8]
  if (pbuf_header(p, TCP_HLEN)) {
 8009490:	f7fd fc68 	bl	8006d64 <pbuf_header>
 8009494:	4607      	mov	r7, r0
 8009496:	b120      	cbz	r0, 80094a2 <tcp_create_segment+0x6e>
    tcp_seg_free(seg);
 8009498:	4620      	mov	r0, r4
    return NULL;
 800949a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 800949c:	f7fd fff2 	bl	8007484 <tcp_seg_free>
    return NULL;
 80094a0:	e7dd      	b.n	800945e <tcp_create_segment+0x2a>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80094a2:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094a4:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80094a6:	f8b8 0016 	ldrh.w	r0, [r8, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80094aa:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094ae:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80094b0:	f8c4 a00c 	str.w	sl, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094b4:	ea46 3505 	orr.w	r5, r6, r5, lsl #12
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80094b8:	f7fa fda0 	bl	8003ffc <lwip_htons>
 80094bc:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80094c0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80094c4:	f8b8 0018 	ldrh.w	r0, [r8, #24]
 80094c8:	f7fa fd98 	bl	8003ffc <lwip_htons>
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80094cc:	f8d4 800c 	ldr.w	r8, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80094d0:	f8aa 0002 	strh.w	r0, [sl, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80094d4:	4648      	mov	r0, r9
 80094d6:	f7fa fd94 	bl	8004002 <lwip_htonl>
 80094da:	f8c8 0004 	str.w	r0, [r8, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094de:	b2a8      	uxth	r0, r5
 80094e0:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80094e4:	f7fa fd8a 	bl	8003ffc <lwip_htons>
  seg->tcphdr->urgp = 0;
 80094e8:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 80094ea:	f8a8 000c 	strh.w	r0, [r8, #12]
  seg->tcphdr->urgp = 0;
 80094ee:	749f      	strb	r7, [r3, #18]
 80094f0:	74df      	strb	r7, [r3, #19]
  return seg;
 80094f2:	e7b4      	b.n	800945e <tcp_create_segment+0x2a>
 80094f4:	0800d86b 	.word	0x0800d86b
 80094f8:	0800d6f3 	.word	0x0800d6f3
 80094fc:	0800c106 	.word	0x0800c106

08009500 <tcp_output_alloc_header.constprop.0>:
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009500:	3114      	adds	r1, #20
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8009504:	b289      	uxth	r1, r1
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 8009506:	4605      	mov	r5, r0
 8009508:	4617      	mov	r7, r2
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800950a:	2001      	movs	r0, #1
 800950c:	2200      	movs	r2, #0
 800950e:	f7fd fc99 	bl	8006e44 <pbuf_alloc>
  if (p != NULL) {
 8009512:	4606      	mov	r6, r0
 8009514:	b340      	cbz	r0, 8009568 <tcp_output_alloc_header.constprop.0+0x68>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009516:	8943      	ldrh	r3, [r0, #10]
 8009518:	2b13      	cmp	r3, #19
 800951a:	dc05      	bgt.n	8009528 <tcp_output_alloc_header.constprop.0+0x28>
 800951c:	4b13      	ldr	r3, [pc, #76]	; (800956c <tcp_output_alloc_header.constprop.0+0x6c>)
 800951e:	2273      	movs	r2, #115	; 0x73
 8009520:	4913      	ldr	r1, [pc, #76]	; (8009570 <tcp_output_alloc_header.constprop.0+0x70>)
 8009522:	4814      	ldr	r0, [pc, #80]	; (8009574 <tcp_output_alloc_header.constprop.0+0x74>)
 8009524:	f001 fe34 	bl	800b190 <iprintf>
    tcphdr = (struct tcp_hdr *)p->payload;
 8009528:	6874      	ldr	r4, [r6, #4]
    tcphdr->src = lwip_htons(pcb->local_port);
 800952a:	8ae8      	ldrh	r0, [r5, #22]
 800952c:	f7fa fd66 	bl	8003ffc <lwip_htons>
 8009530:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8009532:	8b28      	ldrh	r0, [r5, #24]
 8009534:	f7fa fd62 	bl	8003ffc <lwip_htons>
    tcphdr->seqno = seqno_be;
 8009538:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 800953a:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800953c:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800953e:	f7fa fd60 	bl	8004002 <lwip_htonl>
 8009542:	60a0      	str	r0, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8009544:	f245 0010 	movw	r0, #20496	; 0x5010
 8009548:	f7fa fd58 	bl	8003ffc <lwip_htons>
 800954c:	81a0      	strh	r0, [r4, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800954e:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
 8009550:	f7fa fd54 	bl	8003ffc <lwip_htons>
    tcphdr->chksum = 0;
 8009554:	2300      	movs	r3, #0
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009556:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    tcphdr->chksum = 0;
 8009558:	7423      	strb	r3, [r4, #16]
 800955a:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 800955c:	74a3      	strb	r3, [r4, #18]
 800955e:	74e3      	strb	r3, [r4, #19]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009560:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009562:	81e0      	strh	r0, [r4, #14]
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009564:	4413      	add	r3, r2
 8009566:	62eb      	str	r3, [r5, #44]	; 0x2c
}
 8009568:	4630      	mov	r0, r6
 800956a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800956c:	0800d86b 	.word	0x0800d86b
 8009570:	0800d83d 	.word	0x0800d83d
 8009574:	0800c106 	.word	0x0800c106

08009578 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8009578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  u8_t optflags = 0;
  u8_t optlen = 0;

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800957c:	f011 0803 	ands.w	r8, r1, #3
{
 8009580:	4604      	mov	r4, r0
 8009582:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8009584:	d106      	bne.n	8009594 <tcp_enqueue_flags+0x1c>
 8009586:	4b40      	ldr	r3, [pc, #256]	; (8009688 <tcp_enqueue_flags+0x110>)
 8009588:	f240 321b 	movw	r2, #795	; 0x31b
 800958c:	493f      	ldr	r1, [pc, #252]	; (800968c <tcp_enqueue_flags+0x114>)
 800958e:	4840      	ldr	r0, [pc, #256]	; (8009690 <tcp_enqueue_flags+0x118>)
 8009590:	f001 fdfe 	bl	800b190 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8009594:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009598:	2b08      	cmp	r3, #8
 800959a:	d90a      	bls.n	80095b2 <tcp_enqueue_flags+0x3a>
 800959c:	07f1      	lsls	r1, r6, #31
 800959e:	d408      	bmi.n	80095b2 <tcp_enqueue_flags+0x3a>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
    pcb->flags |= TF_NAGLEMEMERR;
 80095a0:	7ea3      	ldrb	r3, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
    pcb->flags |= TF_NAGLEMEMERR;
 80095a6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80095aa:	76a3      	strb	r3, [r4, #26]
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
}
 80095ac:	b003      	add	sp, #12
 80095ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80095b2:	f006 0302 	and.w	r3, r6, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095b6:	2200      	movs	r2, #0
  if (flags & TCP_SYN) {
 80095b8:	2b00      	cmp	r3, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095ba:	4610      	mov	r0, r2
 80095bc:	bf15      	itete	ne
 80095be:	2704      	movne	r7, #4
 80095c0:	2700      	moveq	r7, #0
  u8_t optflags = 0;
 80095c2:	f04f 0901 	movne.w	r9, #1
 80095c6:	f04f 0900 	moveq.w	r9, #0
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80095ca:	4639      	mov	r1, r7
 80095cc:	f7fd fc3a 	bl	8006e44 <pbuf_alloc>
 80095d0:	4605      	mov	r5, r0
 80095d2:	2800      	cmp	r0, #0
 80095d4:	d0e4      	beq.n	80095a0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80095d6:	8943      	ldrh	r3, [r0, #10]
 80095d8:	42bb      	cmp	r3, r7
 80095da:	d206      	bcs.n	80095ea <tcp_enqueue_flags+0x72>
 80095dc:	4b2a      	ldr	r3, [pc, #168]	; (8009688 <tcp_enqueue_flags+0x110>)
 80095de:	f240 3241 	movw	r2, #833	; 0x341
 80095e2:	492c      	ldr	r1, [pc, #176]	; (8009694 <tcp_enqueue_flags+0x11c>)
 80095e4:	482a      	ldr	r0, [pc, #168]	; (8009690 <tcp_enqueue_flags+0x118>)
 80095e6:	f001 fdd3 	bl	800b190 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80095ea:	f8cd 9000 	str.w	r9, [sp]
 80095ee:	4629      	mov	r1, r5
 80095f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095f2:	4632      	mov	r2, r6
 80095f4:	4620      	mov	r0, r4
 80095f6:	f7ff ff1d 	bl	8009434 <tcp_create_segment>
 80095fa:	4605      	mov	r5, r0
 80095fc:	2800      	cmp	r0, #0
 80095fe:	d0cf      	beq.n	80095a0 <tcp_enqueue_flags+0x28>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009600:	68c3      	ldr	r3, [r0, #12]
 8009602:	079a      	lsls	r2, r3, #30
 8009604:	d006      	beq.n	8009614 <tcp_enqueue_flags+0x9c>
 8009606:	4b20      	ldr	r3, [pc, #128]	; (8009688 <tcp_enqueue_flags+0x110>)
 8009608:	f240 3249 	movw	r2, #841	; 0x349
 800960c:	4922      	ldr	r1, [pc, #136]	; (8009698 <tcp_enqueue_flags+0x120>)
 800960e:	4820      	ldr	r0, [pc, #128]	; (8009690 <tcp_enqueue_flags+0x118>)
 8009610:	f001 fdbe 	bl	800b190 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009614:	892b      	ldrh	r3, [r5, #8]
 8009616:	b133      	cbz	r3, 8009626 <tcp_enqueue_flags+0xae>
 8009618:	4b1b      	ldr	r3, [pc, #108]	; (8009688 <tcp_enqueue_flags+0x110>)
 800961a:	f240 324a 	movw	r2, #842	; 0x34a
 800961e:	491f      	ldr	r1, [pc, #124]	; (800969c <tcp_enqueue_flags+0x124>)
 8009620:	481b      	ldr	r0, [pc, #108]	; (8009690 <tcp_enqueue_flags+0x118>)
 8009622:	f001 fdb5 	bl	800b190 <iprintf>
  if (pcb->unsent == NULL) {
 8009626:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009628:	bb4b      	cbnz	r3, 800967e <tcp_enqueue_flags+0x106>
    pcb->unsent = seg;
 800962a:	66a5      	str	r5, [r4, #104]	; 0x68
  pcb->unsent_oversize = 0;
 800962c:	2300      	movs	r3, #0
 800962e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009632:	f1b8 0f00 	cmp.w	r8, #0
 8009636:	d002      	beq.n	800963e <tcp_enqueue_flags+0xc6>
    pcb->snd_lbb++;
 8009638:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800963a:	3301      	adds	r3, #1
 800963c:	65a3      	str	r3, [r4, #88]	; 0x58
  if (flags & TCP_FIN) {
 800963e:	07f3      	lsls	r3, r6, #31
    pcb->flags |= TF_FIN;
 8009640:	bf42      	ittt	mi
 8009642:	7ea3      	ldrbmi	r3, [r4, #26]
 8009644:	f043 0320 	orrmi.w	r3, r3, #32
 8009648:	76a3      	strbmi	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800964a:	6868      	ldr	r0, [r5, #4]
 800964c:	f7fd fd46 	bl	80070dc <pbuf_clen>
 8009650:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8009654:	4418      	add	r0, r3
 8009656:	b280      	uxth	r0, r0
 8009658:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
  if (pcb->snd_queuelen != 0) {
 800965c:	2800      	cmp	r0, #0
 800965e:	d0a5      	beq.n	80095ac <tcp_enqueue_flags+0x34>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009660:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8009662:	b948      	cbnz	r0, 8009678 <tcp_enqueue_flags+0x100>
 8009664:	6ea4      	ldr	r4, [r4, #104]	; 0x68
 8009666:	2c00      	cmp	r4, #0
 8009668:	d1a0      	bne.n	80095ac <tcp_enqueue_flags+0x34>
 800966a:	4b07      	ldr	r3, [pc, #28]	; (8009688 <tcp_enqueue_flags+0x110>)
 800966c:	f240 326d 	movw	r2, #877	; 0x36d
 8009670:	490b      	ldr	r1, [pc, #44]	; (80096a0 <tcp_enqueue_flags+0x128>)
 8009672:	4807      	ldr	r0, [pc, #28]	; (8009690 <tcp_enqueue_flags+0x118>)
 8009674:	f001 fd8c 	bl	800b190 <iprintf>
  return ERR_OK;
 8009678:	2000      	movs	r0, #0
 800967a:	e797      	b.n	80095ac <tcp_enqueue_flags+0x34>
 800967c:	4613      	mov	r3, r2
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800967e:	681a      	ldr	r2, [r3, #0]
 8009680:	2a00      	cmp	r2, #0
 8009682:	d1fb      	bne.n	800967c <tcp_enqueue_flags+0x104>
    useg->next = seg;
 8009684:	601d      	str	r5, [r3, #0]
 8009686:	e7d1      	b.n	800962c <tcp_enqueue_flags+0xb4>
 8009688:	0800d86b 	.word	0x0800d86b
 800968c:	0800d708 	.word	0x0800d708
 8009690:	0800c106 	.word	0x0800c106
 8009694:	0800d75d 	.word	0x0800d75d
 8009698:	0800d796 	.word	0x0800d796
 800969c:	0800d7ae 	.word	0x0800d7ae
 80096a0:	0800d7d8 	.word	0x0800d7d8

080096a4 <tcp_send_fin>:
{
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pcb->unsent != NULL) {
 80096a6:	6e84      	ldr	r4, [r0, #104]	; 0x68
{
 80096a8:	4605      	mov	r5, r0
  if (pcb->unsent != NULL) {
 80096aa:	b934      	cbnz	r4, 80096ba <tcp_send_fin+0x16>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80096ac:	4628      	mov	r0, r5
 80096ae:	2101      	movs	r1, #1
}
 80096b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80096b4:	f7ff bf60 	b.w	8009578 <tcp_enqueue_flags>
 80096b8:	461c      	mov	r4, r3
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80096ba:	6823      	ldr	r3, [r4, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d1fb      	bne.n	80096b8 <tcp_send_fin+0x14>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80096c0:	68e3      	ldr	r3, [r4, #12]
 80096c2:	8998      	ldrh	r0, [r3, #12]
 80096c4:	f7fa fc9a 	bl	8003ffc <lwip_htons>
 80096c8:	f010 0707 	ands.w	r7, r0, #7
 80096cc:	d1ee      	bne.n	80096ac <tcp_send_fin+0x8>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80096ce:	68e6      	ldr	r6, [r4, #12]
 80096d0:	2001      	movs	r0, #1
 80096d2:	89b4      	ldrh	r4, [r6, #12]
 80096d4:	f7fa fc92 	bl	8003ffc <lwip_htons>
 80096d8:	4320      	orrs	r0, r4
 80096da:	81b0      	strh	r0, [r6, #12]
}
 80096dc:	4638      	mov	r0, r7
      pcb->flags |= TF_FIN;
 80096de:	7eab      	ldrb	r3, [r5, #26]
 80096e0:	f043 0320 	orr.w	r3, r3, #32
 80096e4:	76ab      	strb	r3, [r5, #26]
}
 80096e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080096e8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80096e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80096ea:	4604      	mov	r4, r0
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80096ec:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80096ee:	f7fa fc88 	bl	8004002 <lwip_htonl>
 80096f2:	2100      	movs	r1, #0
 80096f4:	4602      	mov	r2, r0
 80096f6:	4620      	mov	r0, r4
 80096f8:	f7ff ff02 	bl	8009500 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 80096fc:	4606      	mov	r6, r0
 80096fe:	b940      	cbnz	r0, 8009712 <tcp_send_empty_ack+0x2a>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009700:	7ea3      	ldrb	r3, [r4, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8009702:	f06f 0501 	mvn.w	r5, #1
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8009706:	f043 0303 	orr.w	r3, r3, #3
 800970a:	76a3      	strb	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 800970c:	4628      	mov	r0, r5
 800970e:	b004      	add	sp, #16
 8009710:	bd70      	pop	{r4, r5, r6, pc}
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009712:	1d25      	adds	r5, r4, #4
 8009714:	4628      	mov	r0, r5
 8009716:	f7fc f9dd 	bl	8005ad4 <ip4_route>
  if (netif == NULL) {
 800971a:	b1a0      	cbz	r0, 8009746 <tcp_send_empty_ack+0x5e>
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 800971c:	2206      	movs	r2, #6
 800971e:	9002      	str	r0, [sp, #8]
 8009720:	7aa3      	ldrb	r3, [r4, #10]
 8009722:	4621      	mov	r1, r4
 8009724:	9201      	str	r2, [sp, #4]
 8009726:	4630      	mov	r0, r6
 8009728:	7a62      	ldrb	r2, [r4, #9]
 800972a:	9200      	str	r2, [sp, #0]
 800972c:	462a      	mov	r2, r5
 800972e:	f7fc fb43 	bl	8005db8 <ip4_output_if>
 8009732:	4605      	mov	r5, r0
  pbuf_free(p);
 8009734:	4630      	mov	r0, r6
 8009736:	f7fd fb1b 	bl	8006d70 <pbuf_free>
 800973a:	7ea3      	ldrb	r3, [r4, #26]
  if (err != ERR_OK) {
 800973c:	b135      	cbz	r5, 800974c <tcp_send_empty_ack+0x64>
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 800973e:	f043 0303 	orr.w	r3, r3, #3
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009742:	76a3      	strb	r3, [r4, #26]
 8009744:	e7e2      	b.n	800970c <tcp_send_empty_ack+0x24>
    err = ERR_RTE;
 8009746:	f06f 0503 	mvn.w	r5, #3
 800974a:	e7f3      	b.n	8009734 <tcp_send_empty_ack+0x4c>
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800974c:	f023 0303 	bic.w	r3, r3, #3
 8009750:	e7f7      	b.n	8009742 <tcp_send_empty_ack+0x5a>
	...

08009754 <tcp_output>:
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009754:	7d03      	ldrb	r3, [r0, #20]
 8009756:	2b01      	cmp	r3, #1
{
 8009758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975c:	4604      	mov	r4, r0
 800975e:	b087      	sub	sp, #28
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009760:	d106      	bne.n	8009770 <tcp_output+0x1c>
 8009762:	4ba5      	ldr	r3, [pc, #660]	; (80099f8 <tcp_output+0x2a4>)
 8009764:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8009768:	49a4      	ldr	r1, [pc, #656]	; (80099fc <tcp_output+0x2a8>)
 800976a:	48a5      	ldr	r0, [pc, #660]	; (8009a00 <tcp_output+0x2ac>)
 800976c:	f001 fd10 	bl	800b190 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009770:	4ba4      	ldr	r3, [pc, #656]	; (8009a04 <tcp_output+0x2b0>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	429c      	cmp	r4, r3
 8009776:	d052      	beq.n	800981e <tcp_output+0xca>
    return ERR_OK;
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009778:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 800977c:	f8b4 705c 	ldrh.w	r7, [r4, #92]	; 0x5c

  seg = pcb->unsent;
 8009780:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009782:	429f      	cmp	r7, r3
 8009784:	bf28      	it	cs
 8009786:	461f      	movcs	r7, r3
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 8009788:	7ea3      	ldrb	r3, [r4, #26]
 800978a:	0799      	lsls	r1, r3, #30
 800978c:	d510      	bpl.n	80097b0 <tcp_output+0x5c>
 800978e:	b92d      	cbnz	r5, 800979c <tcp_output+0x48>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
     return tcp_send_empty_ack(pcb);
 8009790:	4620      	mov	r0, r4
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
  return ERR_OK;
}
 8009792:	b007      	add	sp, #28
 8009794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     return tcp_send_empty_ack(pcb);
 8009798:	f7ff bfa6 	b.w	80096e8 <tcp_send_empty_ack>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 800979c:	68eb      	ldr	r3, [r5, #12]
 800979e:	6858      	ldr	r0, [r3, #4]
 80097a0:	f7fa fc2f 	bl	8004002 <lwip_htonl>
 80097a4:	892b      	ldrh	r3, [r5, #8]
 80097a6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80097a8:	1a9b      	subs	r3, r3, r2
 80097aa:	4418      	add	r0, r3
     (seg == NULL ||
 80097ac:	4287      	cmp	r7, r0
 80097ae:	d3ef      	bcc.n	8009790 <tcp_output+0x3c>
  useg = pcb->unacked;
 80097b0:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
  if (useg != NULL) {
 80097b2:	2e00      	cmp	r6, #0
 80097b4:	d136      	bne.n	8009824 <tcp_output+0xd0>
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80097b6:	f104 0804 	add.w	r8, r4, #4
 80097ba:	4640      	mov	r0, r8
 80097bc:	f7fc f98a 	bl	8005ad4 <ip4_route>
  if (netif == NULL) {
 80097c0:	4681      	mov	r9, r0
 80097c2:	2800      	cmp	r0, #0
 80097c4:	f000 813c 	beq.w	8009a40 <tcp_output+0x2ec>
  if (ip_addr_isany(&pcb->local_ip)) {
 80097c8:	b10c      	cbz	r4, 80097ce <tcp_output+0x7a>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	b913      	cbnz	r3, 80097d4 <tcp_output+0x80>
    ip_addr_copy(pcb->local_ip, *local_ip);
 80097ce:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80097d2:	6023      	str	r3, [r4, #0]
  if (seg != NULL &&
 80097d4:	b1d5      	cbz	r5, 800980c <tcp_output+0xb8>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80097d6:	68eb      	ldr	r3, [r5, #12]
 80097d8:	6858      	ldr	r0, [r3, #4]
 80097da:	f7fa fc12 	bl	8004002 <lwip_htonl>
 80097de:	892b      	ldrh	r3, [r5, #8]
 80097e0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	4418      	add	r0, r3
  if (seg != NULL &&
 80097e6:	4287      	cmp	r7, r0
 80097e8:	d26f      	bcs.n	80098ca <tcp_output+0x176>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 80097ea:	2f00      	cmp	r7, #0
 80097ec:	d06d      	beq.n	80098ca <tcp_output+0x176>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80097ee:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
 80097f2:	429f      	cmp	r7, r3
 80097f4:	d169      	bne.n	80098ca <tcp_output+0x176>
 80097f6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d166      	bne.n	80098ca <tcp_output+0x176>
    if (pcb->persist_backoff == 0) {
 80097fc:	f894 3095 	ldrb.w	r3, [r4, #149]	; 0x95
 8009800:	b923      	cbnz	r3, 800980c <tcp_output+0xb8>
      pcb->persist_cnt = 0;
 8009802:	f884 3094 	strb.w	r3, [r4, #148]	; 0x94
      pcb->persist_backoff = 1;
 8009806:	2301      	movs	r3, #1
 8009808:	f884 3095 	strb.w	r3, [r4, #149]	; 0x95
  if (pcb->unsent == NULL) {
 800980c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800980e:	b913      	cbnz	r3, 8009816 <tcp_output+0xc2>
    pcb->unsent_oversize = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  pcb->flags &= ~TF_NAGLEMEMERR;
 8009816:	7ea3      	ldrb	r3, [r4, #26]
 8009818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981c:	76a3      	strb	r3, [r4, #26]
    return ERR_OK;
 800981e:	2000      	movs	r0, #0
 8009820:	e0e6      	b.n	80099f0 <tcp_output+0x29c>
 8009822:	461e      	mov	r6, r3
    for (; useg->next != NULL; useg = useg->next);
 8009824:	6833      	ldr	r3, [r6, #0]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d1fb      	bne.n	8009822 <tcp_output+0xce>
 800982a:	e7c4      	b.n	80097b6 <tcp_output+0x62>
    pcb->unsent = seg->next;
 800982c:	682b      	ldr	r3, [r5, #0]
 800982e:	66a3      	str	r3, [r4, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8009830:	7d23      	ldrb	r3, [r4, #20]
 8009832:	2b02      	cmp	r3, #2
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8009834:	bf1e      	ittt	ne
 8009836:	7ea3      	ldrbne	r3, [r4, #26]
 8009838:	f023 0303 	bicne.w	r3, r3, #3
 800983c:	76a3      	strbne	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800983e:	68eb      	ldr	r3, [r5, #12]
 8009840:	6858      	ldr	r0, [r3, #4]
 8009842:	f7fa fbde 	bl	8004002 <lwip_htonl>
 8009846:	68e9      	ldr	r1, [r5, #12]
 8009848:	4683      	mov	fp, r0
 800984a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 800984e:	8988      	ldrh	r0, [r1, #12]
 8009850:	f7fa fbd4 	bl	8003ffc <lwip_htons>
 8009854:	f010 0003 	ands.w	r0, r0, #3
 8009858:	eb0b 030a 	add.w	r3, fp, sl
    if (TCP_TCPLEN(seg) > 0) {
 800985c:	68ea      	ldr	r2, [r5, #12]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800985e:	bf18      	it	ne
 8009860:	2001      	movne	r0, #1
    if (TCP_TCPLEN(seg) > 0) {
 8009862:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009866:	4418      	add	r0, r3
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009868:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800986a:	1a1b      	subs	r3, r3, r0
 800986c:	2b00      	cmp	r3, #0
      pcb->snd_nxt = snd_nxt;
 800986e:	bfb8      	it	lt
 8009870:	64e0      	strlt	r0, [r4, #76]	; 0x4c
    if (TCP_TCPLEN(seg) > 0) {
 8009872:	8990      	ldrh	r0, [r2, #12]
 8009874:	f7fa fbc2 	bl	8003ffc <lwip_htons>
 8009878:	f010 0003 	ands.w	r0, r0, #3
 800987c:	bf18      	it	ne
 800987e:	2001      	movne	r0, #1
 8009880:	eb10 0f0a 	cmn.w	r0, sl
 8009884:	f000 80d8 	beq.w	8009a38 <tcp_output+0x2e4>
      seg->next = NULL;
 8009888:	2300      	movs	r3, #0
 800988a:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 800988c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800988e:	b913      	cbnz	r3, 8009896 <tcp_output+0x142>
        pcb->unacked = seg;
 8009890:	66e5      	str	r5, [r4, #108]	; 0x6c
          useg->next = seg;
 8009892:	462e      	mov	r6, r5
 8009894:	e016      	b.n	80098c4 <tcp_output+0x170>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009896:	68eb      	ldr	r3, [r5, #12]
 8009898:	6858      	ldr	r0, [r3, #4]
 800989a:	f7fa fbb2 	bl	8004002 <lwip_htonl>
 800989e:	68f2      	ldr	r2, [r6, #12]
 80098a0:	4682      	mov	sl, r0
 80098a2:	6850      	ldr	r0, [r2, #4]
 80098a4:	f7fa fbad 	bl	8004002 <lwip_htonl>
 80098a8:	ebaa 0000 	sub.w	r0, sl, r0
 80098ac:	2800      	cmp	r0, #0
 80098ae:	f280 80c1 	bge.w	8009a34 <tcp_output+0x2e0>
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80098b2:	f104 036c 	add.w	r3, r4, #108	; 0x6c
          while (*cur_seg &&
 80098b6:	681a      	ldr	r2, [r3, #0]
 80098b8:	2a00      	cmp	r2, #0
 80098ba:	f040 80a9 	bne.w	8009a10 <tcp_output+0x2bc>
          seg->next = (*cur_seg);
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 80098c2:	601d      	str	r5, [r3, #0]
    seg = pcb->unsent;
 80098c4:	6ea5      	ldr	r5, [r4, #104]	; 0x68
  while (seg != NULL &&
 80098c6:	2d00      	cmp	r5, #0
 80098c8:	d0a2      	beq.n	8009810 <tcp_output+0xbc>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80098ca:	68eb      	ldr	r3, [r5, #12]
 80098cc:	6858      	ldr	r0, [r3, #4]
 80098ce:	f7fa fb98 	bl	8004002 <lwip_htonl>
 80098d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80098d4:	1ac0      	subs	r0, r0, r3
 80098d6:	892b      	ldrh	r3, [r5, #8]
 80098d8:	4418      	add	r0, r3
  while (seg != NULL &&
 80098da:	4287      	cmp	r7, r0
 80098dc:	d396      	bcc.n	800980c <tcp_output+0xb8>
    LWIP_ASSERT("RST not expected here!",
 80098de:	68eb      	ldr	r3, [r5, #12]
 80098e0:	8998      	ldrh	r0, [r3, #12]
 80098e2:	f7fa fb8b 	bl	8003ffc <lwip_htons>
 80098e6:	0742      	lsls	r2, r0, #29
 80098e8:	d506      	bpl.n	80098f8 <tcp_output+0x1a4>
 80098ea:	4b43      	ldr	r3, [pc, #268]	; (80099f8 <tcp_output+0x2a4>)
 80098ec:	f240 4246 	movw	r2, #1094	; 0x446
 80098f0:	4945      	ldr	r1, [pc, #276]	; (8009a08 <tcp_output+0x2b4>)
 80098f2:	4843      	ldr	r0, [pc, #268]	; (8009a00 <tcp_output+0x2ac>)
 80098f4:	f001 fc4c 	bl	800b190 <iprintf>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80098f8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80098fa:	b19b      	cbz	r3, 8009924 <tcp_output+0x1d0>
 80098fc:	7ea2      	ldrb	r2, [r4, #26]
 80098fe:	f012 0f44 	tst.w	r2, #68	; 0x44
 8009902:	d10f      	bne.n	8009924 <tcp_output+0x1d0>
 8009904:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009906:	b12b      	cbz	r3, 8009914 <tcp_output+0x1c0>
 8009908:	6819      	ldr	r1, [r3, #0]
 800990a:	b959      	cbnz	r1, 8009924 <tcp_output+0x1d0>
 800990c:	8919      	ldrh	r1, [r3, #8]
 800990e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8009910:	4299      	cmp	r1, r3
 8009912:	d207      	bcs.n	8009924 <tcp_output+0x1d0>
 8009914:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8009918:	b123      	cbz	r3, 8009924 <tcp_output+0x1d0>
 800991a:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800991e:	2b08      	cmp	r3, #8
 8009920:	f240 8091 	bls.w	8009a46 <tcp_output+0x2f2>
    if (pcb->state != SYN_SENT) {
 8009924:	7d23      	ldrb	r3, [r4, #20]
 8009926:	2b02      	cmp	r3, #2
 8009928:	d00a      	beq.n	8009940 <tcp_output+0x1ec>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800992a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800992e:	2010      	movs	r0, #16
 8009930:	f8ba b00c 	ldrh.w	fp, [sl, #12]
 8009934:	f7fa fb62 	bl	8003ffc <lwip_htons>
 8009938:	ea4b 0000 	orr.w	r0, fp, r0
 800993c:	f8aa 000c 	strh.w	r0, [sl, #12]
{
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8009940:	686b      	ldr	r3, [r5, #4]
 8009942:	89db      	ldrh	r3, [r3, #14]
 8009944:	2b01      	cmp	r3, #1
 8009946:	f47f af71 	bne.w	800982c <tcp_output+0xd8>
    return ERR_OK;
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800994a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800994e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009950:	f7fa fb57 	bl	8004002 <lwip_htonl>
 8009954:	f8ca 0008 	str.w	r0, [sl, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009958:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 800995a:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 800995e:	f7fa fb4d 	bl	8003ffc <lwip_htons>
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8009962:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8009964:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8009966:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800996a:	4413      	add	r3, r2
 800996c:	62e3      	str	r3, [r4, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800996e:	7aab      	ldrb	r3, [r5, #10]
 8009970:	07db      	lsls	r3, r3, #31
 8009972:	d50c      	bpl.n	800998e <tcp_output+0x23a>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8009974:	f8d5 a00c 	ldr.w	sl, [r5, #12]
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8009978:	4641      	mov	r1, r8
 800997a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800997e:	f7fe fa93 	bl	8007ea8 <tcp_eff_send_mss_impl>
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8009982:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 8009986:	f7fa fb3c 	bl	8004002 <lwip_htonl>
 800998a:	f8ca 0014 	str.w	r0, [sl, #20]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800998e:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 8009992:	2b00      	cmp	r3, #0
    pcb->rtime = 0;
 8009994:	bfbc      	itt	lt
 8009996:	2300      	movlt	r3, #0
 8009998:	8623      	strhlt	r3, [r4, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800999a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800999c:	b93b      	cbnz	r3, 80099ae <tcp_output+0x25a>
    pcb->rttest = tcp_ticks;
 800999e:	4b1b      	ldr	r3, [pc, #108]	; (8009a0c <tcp_output+0x2b8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80099a4:	68eb      	ldr	r3, [r5, #12]
 80099a6:	6858      	ldr	r0, [r3, #4]
 80099a8:	f7fa fb2b 	bl	8004002 <lwip_htonl>
 80099ac:	63a0      	str	r0, [r4, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80099ae:	6868      	ldr	r0, [r5, #4]
 80099b0:	68ea      	ldr	r2, [r5, #12]
 80099b2:	6843      	ldr	r3, [r0, #4]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80099b4:	8941      	ldrh	r1, [r0, #10]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80099b6:	1ad3      	subs	r3, r2, r3
  seg->p->tot_len -= len;

  seg->p->payload = seg->tcphdr;
 80099b8:	6042      	str	r2, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80099ba:	b29b      	uxth	r3, r3
  seg->p->len -= len;
 80099bc:	1ac9      	subs	r1, r1, r3
 80099be:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 80099c0:	8901      	ldrh	r1, [r0, #8]
 80099c2:	1acb      	subs	r3, r1, r3
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80099c4:	4621      	mov	r1, r4
  seg->p->tot_len -= len;
 80099c6:	8103      	strh	r3, [r0, #8]
  seg->tcphdr->chksum = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	7413      	strb	r3, [r2, #16]
 80099cc:	7453      	strb	r3, [r2, #17]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80099ce:	2206      	movs	r2, #6
 80099d0:	7aa3      	ldrb	r3, [r4, #10]
 80099d2:	9201      	str	r2, [sp, #4]
 80099d4:	7a62      	ldrb	r2, [r4, #9]
 80099d6:	f8cd 9008 	str.w	r9, [sp, #8]
 80099da:	9200      	str	r2, [sp, #0]
 80099dc:	4642      	mov	r2, r8
 80099de:	f7fc f9eb 	bl	8005db8 <ip4_output_if>
    if (err != ERR_OK) {
 80099e2:	2800      	cmp	r0, #0
 80099e4:	f43f af22 	beq.w	800982c <tcp_output+0xd8>
      pcb->flags |= TF_NAGLEMEMERR;
 80099e8:	7ea3      	ldrb	r3, [r4, #26]
 80099ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099ee:	76a3      	strb	r3, [r4, #26]
}
 80099f0:	b007      	add	sp, #28
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	bf00      	nop
 80099f8:	0800d86b 	.word	0x0800d86b
 80099fc:	0800d800 	.word	0x0800d800
 8009a00:	0800c106 	.word	0x0800c106
 8009a04:	20007700 	.word	0x20007700
 8009a08:	0800d826 	.word	0x0800d826
 8009a0c:	200076f0 	.word	0x200076f0
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009a10:	68d2      	ldr	r2, [r2, #12]
 8009a12:	9305      	str	r3, [sp, #20]
 8009a14:	6850      	ldr	r0, [r2, #4]
 8009a16:	f7fa faf4 	bl	8004002 <lwip_htonl>
 8009a1a:	68e9      	ldr	r1, [r5, #12]
 8009a1c:	4682      	mov	sl, r0
 8009a1e:	6848      	ldr	r0, [r1, #4]
 8009a20:	f7fa faef 	bl	8004002 <lwip_htonl>
 8009a24:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 8009a28:	9b05      	ldr	r3, [sp, #20]
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f6bf af47 	bge.w	80098be <tcp_output+0x16a>
              cur_seg = &((*cur_seg)->next );
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	e740      	b.n	80098b6 <tcp_output+0x162>
          useg->next = seg;
 8009a34:	6035      	str	r5, [r6, #0]
 8009a36:	e72c      	b.n	8009892 <tcp_output+0x13e>
      tcp_seg_free(seg);
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7fd fd23 	bl	8007484 <tcp_seg_free>
 8009a3e:	e741      	b.n	80098c4 <tcp_output+0x170>
    return ERR_RTE;
 8009a40:	f06f 0003 	mvn.w	r0, #3
 8009a44:	e7d4      	b.n	80099f0 <tcp_output+0x29c>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009a46:	f012 0fa0 	tst.w	r2, #160	; 0xa0
 8009a4a:	f47f af6b 	bne.w	8009924 <tcp_output+0x1d0>
 8009a4e:	e6dd      	b.n	800980c <tcp_output+0xb8>

08009a50 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8009a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a54:	b085      	sub	sp, #20
 8009a56:	4681      	mov	r9, r0
 8009a58:	460e      	mov	r6, r1
 8009a5a:	4690      	mov	r8, r2
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009a5c:	2114      	movs	r1, #20
 8009a5e:	2200      	movs	r2, #0
 8009a60:	2001      	movs	r0, #1
{
 8009a62:	461f      	mov	r7, r3
 8009a64:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 8009a68:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8009a6c:	f7fd f9ea 	bl	8006e44 <pbuf_alloc>
  if (p == NULL) {
 8009a70:	4605      	mov	r5, r0
 8009a72:	2800      	cmp	r0, #0
 8009a74:	d03c      	beq.n	8009af0 <tcp_rst+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8009a76:	8943      	ldrh	r3, [r0, #10]
 8009a78:	2b13      	cmp	r3, #19
 8009a7a:	d806      	bhi.n	8009a8a <tcp_rst+0x3a>
 8009a7c:	4b1e      	ldr	r3, [pc, #120]	; (8009af8 <tcp_rst+0xa8>)
 8009a7e:	f240 524d 	movw	r2, #1357	; 0x54d
 8009a82:	491e      	ldr	r1, [pc, #120]	; (8009afc <tcp_rst+0xac>)
 8009a84:	481e      	ldr	r0, [pc, #120]	; (8009b00 <tcp_rst+0xb0>)
 8009a86:	f001 fb83 	bl	800b190 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8009a8a:	686c      	ldr	r4, [r5, #4]
  tcphdr->src = lwip_htons(local_port);
 8009a8c:	4658      	mov	r0, fp
 8009a8e:	f7fa fab5 	bl	8003ffc <lwip_htons>
 8009a92:	8020      	strh	r0, [r4, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8009a94:	4650      	mov	r0, sl
 8009a96:	f7fa fab1 	bl	8003ffc <lwip_htons>
 8009a9a:	8060      	strh	r0, [r4, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8009a9c:	4648      	mov	r0, r9
 8009a9e:	f7fa fab0 	bl	8004002 <lwip_htonl>
 8009aa2:	6060      	str	r0, [r4, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8009aa4:	4630      	mov	r0, r6
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009aa6:	2600      	movs	r6, #0
  tcphdr->ackno = lwip_htonl(ackno);
 8009aa8:	f7fa faab 	bl	8004002 <lwip_htonl>
 8009aac:	60a0      	str	r0, [r4, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009aae:	f245 0014 	movw	r0, #20500	; 0x5014
 8009ab2:	f7fa faa3 	bl	8003ffc <lwip_htons>
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009ab6:	2308      	movs	r3, #8
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8009ab8:	81a0      	strh	r0, [r4, #12]
  tcphdr->urgp = 0;

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8009aba:	4638      	mov	r0, r7
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009abc:	73a3      	strb	r3, [r4, #14]
 8009abe:	2360      	movs	r3, #96	; 0x60
  tcphdr->chksum = 0;
 8009ac0:	7426      	strb	r6, [r4, #16]
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8009ac2:	73e3      	strb	r3, [r4, #15]
  tcphdr->chksum = 0;
 8009ac4:	7466      	strb	r6, [r4, #17]
  tcphdr->urgp = 0;
 8009ac6:	74a6      	strb	r6, [r4, #18]
 8009ac8:	74e6      	strb	r6, [r4, #19]
  netif = ip_route(local_ip, remote_ip);
 8009aca:	f7fc f803 	bl	8005ad4 <ip4_route>
  if (netif != NULL) {
 8009ace:	b148      	cbz	r0, 8009ae4 <tcp_rst+0x94>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8009ad0:	2306      	movs	r3, #6
 8009ad2:	9002      	str	r0, [sp, #8]
 8009ad4:	9600      	str	r6, [sp, #0]
 8009ad6:	463a      	mov	r2, r7
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	4641      	mov	r1, r8
 8009adc:	23ff      	movs	r3, #255	; 0xff
 8009ade:	4628      	mov	r0, r5
 8009ae0:	f7fc f96a 	bl	8005db8 <ip4_output_if>
  }
  pbuf_free(p);
 8009ae4:	4628      	mov	r0, r5
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8009ae6:	b005      	add	sp, #20
 8009ae8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8009aec:	f7fd b940 	b.w	8006d70 <pbuf_free>
}
 8009af0:	b005      	add	sp, #20
 8009af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af6:	bf00      	nop
 8009af8:	0800d86b 	.word	0x0800d86b
 8009afc:	0800d83d 	.word	0x0800d83d
 8009b00:	0800c106 	.word	0x0800c106

08009b04 <tcp_rexmit_rto>:
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8009b04:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
{
 8009b06:	b410      	push	{r4}
  if (pcb->unacked == NULL) {
 8009b08:	b1aa      	cbz	r2, 8009b36 <tcp_rexmit_rto+0x32>
 8009b0a:	4611      	mov	r1, r2
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8009b0c:	680b      	ldr	r3, [r1, #0]
 8009b0e:	b983      	cbnz	r3, 8009b32 <tcp_rexmit_rto+0x2e>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8009b10:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8009b12:	600c      	str	r4, [r1, #0]
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8009b14:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8009b16:	f890 3042 	ldrb.w	r3, [r0, #66]	; 0x42
  pcb->unsent = pcb->unacked;
 8009b1a:	6682      	str	r2, [r0, #104]	; 0x68
  if (pcb->nrtx < 0xFF) {
 8009b1c:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009b1e:	bf1c      	itt	ne
 8009b20:	3301      	addne	r3, #1
 8009b22:	f880 3042 	strbne.w	r3, [r0, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8009b26:	2300      	movs	r3, #0

  /* Do the actual retransmission */
  tcp_output(pcb);
}
 8009b28:	f85d 4b04 	ldr.w	r4, [sp], #4
  pcb->rttest = 0;
 8009b2c:	6343      	str	r3, [r0, #52]	; 0x34
  tcp_output(pcb);
 8009b2e:	f7ff be11 	b.w	8009754 <tcp_output>
 8009b32:	4619      	mov	r1, r3
 8009b34:	e7ea      	b.n	8009b0c <tcp_rexmit_rto+0x8>
}
 8009b36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b3a:	4770      	bx	lr

08009b3c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8009b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8009b3e:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
{
 8009b40:	4604      	mov	r4, r0
  if (pcb->unacked == NULL) {
 8009b42:	b1ad      	cbz	r5, 8009b70 <tcp_rexmit+0x34>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
  pcb->unacked = seg->next;
 8009b44:	682b      	ldr	r3, [r5, #0]

  cur_seg = &(pcb->unsent);
 8009b46:	f100 0668 	add.w	r6, r0, #104	; 0x68
  pcb->unacked = seg->next;
 8009b4a:	66c3      	str	r3, [r0, #108]	; 0x6c
  while (*cur_seg &&
 8009b4c:	6833      	ldr	r3, [r6, #0]
 8009b4e:	b983      	cbnz	r3, 8009b72 <tcp_rexmit+0x36>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
  }
  seg->next = *cur_seg;
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	602b      	str	r3, [r5, #0]
  *cur_seg = seg;
 8009b54:	6035      	str	r5, [r6, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8009b56:	682b      	ldr	r3, [r5, #0]
 8009b58:	b90b      	cbnz	r3, 8009b5e <tcp_rexmit+0x22>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009b5a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8009b5e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8009b62:	2bff      	cmp	r3, #255	; 0xff
    ++pcb->nrtx;
 8009b64:	bf1c      	itt	ne
 8009b66:	3301      	addne	r3, #1
 8009b68:	f884 3042 	strbne.w	r3, [r4, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	6363      	str	r3, [r4, #52]	; 0x34
 8009b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009b72:	68db      	ldr	r3, [r3, #12]
 8009b74:	6858      	ldr	r0, [r3, #4]
 8009b76:	f7fa fa44 	bl	8004002 <lwip_htonl>
 8009b7a:	68eb      	ldr	r3, [r5, #12]
 8009b7c:	4607      	mov	r7, r0
 8009b7e:	6858      	ldr	r0, [r3, #4]
 8009b80:	f7fa fa3f 	bl	8004002 <lwip_htonl>
 8009b84:	1a38      	subs	r0, r7, r0
  while (*cur_seg &&
 8009b86:	2800      	cmp	r0, #0
 8009b88:	dae2      	bge.n	8009b50 <tcp_rexmit+0x14>
      cur_seg = &((*cur_seg)->next );
 8009b8a:	6836      	ldr	r6, [r6, #0]
 8009b8c:	e7de      	b.n	8009b4c <tcp_rexmit+0x10>

08009b8e <tcp_rexmit_fast>:
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009b8e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
{
 8009b90:	b510      	push	{r4, lr}
 8009b92:	4604      	mov	r4, r0
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8009b94:	b30b      	cbz	r3, 8009bda <tcp_rexmit_fast+0x4c>
 8009b96:	7e83      	ldrb	r3, [r0, #26]
 8009b98:	075b      	lsls	r3, r3, #29
 8009b9a:	d41e      	bmi.n	8009bda <tcp_rexmit_fast+0x4c>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8009b9c:	f7ff ffce 	bl	8009b3c <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009ba0:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
 8009ba4:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	bf38      	it	cc
 8009bac:	085a      	lsrcc	r2, r3, #1

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009bae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009bb0:	bf28      	it	cs
 8009bb2:	0852      	lsrcs	r2, r2, #1
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009bb4:	0059      	lsls	r1, r3, #1
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8009bb6:	f8a4 204a 	strh.w	r2, [r4, #74]	; 0x4a
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8009bba:	428a      	cmp	r2, r1
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009bbc:	440b      	add	r3, r1
      pcb->ssthresh = 2*pcb->mss;
 8009bbe:	bf38      	it	cc
 8009bc0:	f8a4 104a 	strhcc.w	r1, [r4, #74]	; 0x4a
    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8009bc4:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 8009bc8:	4413      	add	r3, r2
 8009bca:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8009bce:	7ea3      	ldrb	r3, [r4, #26]
 8009bd0:	f043 0304 	orr.w	r3, r3, #4
 8009bd4:	76a3      	strb	r3, [r4, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	8623      	strh	r3, [r4, #48]	; 0x30
 8009bda:	bd10      	pop	{r4, pc}

08009bdc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8009bdc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8009bde:	4604      	mov	r4, r0
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8009be0:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8009be2:	3801      	subs	r0, #1
 8009be4:	f7fa fa0d 	bl	8004002 <lwip_htonl>
 8009be8:	2100      	movs	r1, #0
 8009bea:	4602      	mov	r2, r0
 8009bec:	4620      	mov	r0, r4
 8009bee:	f7ff fc87 	bl	8009500 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009bf2:	4605      	mov	r5, r0
 8009bf4:	b1c8      	cbz	r0, 8009c2a <tcp_keepalive+0x4e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009bf6:	1d26      	adds	r6, r4, #4
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7fb ff6b 	bl	8005ad4 <ip4_route>
  if (netif == NULL) {
 8009bfe:	b188      	cbz	r0, 8009c24 <tcp_keepalive+0x48>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8009c00:	2100      	movs	r1, #0
 8009c02:	2206      	movs	r2, #6
 8009c04:	7aa3      	ldrb	r3, [r4, #10]
 8009c06:	9002      	str	r0, [sp, #8]
 8009c08:	4628      	mov	r0, r5
 8009c0a:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009c0e:	4621      	mov	r1, r4
 8009c10:	4632      	mov	r2, r6
 8009c12:	f7fc f8d1 	bl	8005db8 <ip4_output_if>
 8009c16:	4604      	mov	r4, r0
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8009c18:	4628      	mov	r0, r5
 8009c1a:	f7fd f8a9 	bl	8006d70 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009c1e:	4620      	mov	r0, r4
 8009c20:	b004      	add	sp, #16
 8009c22:	bd70      	pop	{r4, r5, r6, pc}
    err = ERR_RTE;
 8009c24:	f06f 0403 	mvn.w	r4, #3
 8009c28:	e7f6      	b.n	8009c18 <tcp_keepalive+0x3c>
    return ERR_MEM;
 8009c2a:	f04f 34ff 	mov.w	r4, #4294967295
 8009c2e:	e7f6      	b.n	8009c1e <tcp_keepalive+0x42>

08009c30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8009c30:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8009c34:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
{
 8009c36:	4606      	mov	r6, r0

  if (seg == NULL) {
 8009c38:	b914      	cbnz	r4, 8009c40 <tcp_zero_window_probe+0x10>
    seg = pcb->unsent;
 8009c3a:	6e84      	ldr	r4, [r0, #104]	; 0x68
  }
  if (seg == NULL) {
 8009c3c:	2c00      	cmp	r4, #0
 8009c3e:	d041      	beq.n	8009cc4 <tcp_zero_window_probe+0x94>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c40:	68e3      	ldr	r3, [r4, #12]
 8009c42:	8998      	ldrh	r0, [r3, #12]
 8009c44:	f7fa f9da 	bl	8003ffc <lwip_htons>
 8009c48:	f010 0501 	ands.w	r5, r0, #1
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009c4c:	68e3      	ldr	r3, [r4, #12]
 8009c4e:	4630      	mov	r0, r6
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c50:	bf18      	it	ne
 8009c52:	8925      	ldrhne	r5, [r4, #8]
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009c54:	685a      	ldr	r2, [r3, #4]
  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8009c56:	bf1c      	itt	ne
 8009c58:	fab5 f585 	clzne	r5, r5
 8009c5c:	096d      	lsrne	r5, r5, #5
  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8009c5e:	f085 0101 	eor.w	r1, r5, #1
 8009c62:	f7ff fc4d 	bl	8009500 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 8009c66:	4607      	mov	r7, r0
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d03d      	beq.n	8009ce8 <tcp_zero_window_probe+0xb8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8009c6c:	f8d0 8004 	ldr.w	r8, [r0, #4]

  if (is_fin) {
 8009c70:	b365      	cbz	r5, 8009ccc <tcp_zero_window_probe+0x9c>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8009c72:	f8b8 500c 	ldrh.w	r5, [r8, #12]
 8009c76:	2011      	movs	r0, #17
 8009c78:	f7fa f9c0 	bl	8003ffc <lwip_htons>
 8009c7c:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 8009c80:	b2ad      	uxth	r5, r5
 8009c82:	4328      	orrs	r0, r5
 8009c84:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009c88:	68e3      	ldr	r3, [r4, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
    pcb->snd_nxt = snd_nxt;
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009c8a:	1d34      	adds	r4, r6, #4
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009c8c:	6858      	ldr	r0, [r3, #4]
 8009c8e:	f7fa f9b8 	bl	8004002 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009c92:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8009c94:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009c96:	1a1b      	subs	r3, r3, r0
 8009c98:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 8009c9a:	bfb8      	it	lt
 8009c9c:	64f0      	strlt	r0, [r6, #76]	; 0x4c
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7fb ff18 	bl	8005ad4 <ip4_route>
  if (netif == NULL) {
 8009ca4:	b1e8      	cbz	r0, 8009ce2 <tcp_zero_window_probe+0xb2>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8009ca6:	2100      	movs	r1, #0
 8009ca8:	2206      	movs	r2, #6
 8009caa:	9002      	str	r0, [sp, #8]
 8009cac:	4638      	mov	r0, r7
 8009cae:	7ab3      	ldrb	r3, [r6, #10]
 8009cb0:	e88d 0006 	stmia.w	sp, {r1, r2}
 8009cb4:	4622      	mov	r2, r4
 8009cb6:	4631      	mov	r1, r6
 8009cb8:	f7fc f87e 	bl	8005db8 <ip4_output_if>
 8009cbc:	4604      	mov	r4, r0
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8009cbe:	4638      	mov	r0, r7
 8009cc0:	f7fd f856 	bl	8006d70 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	b004      	add	sp, #16
 8009cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8009ccc:	6860      	ldr	r0, [r4, #4]
 8009cce:	f108 0114 	add.w	r1, r8, #20
 8009cd2:	8922      	ldrh	r2, [r4, #8]
 8009cd4:	8903      	ldrh	r3, [r0, #8]
 8009cd6:	1a9b      	subs	r3, r3, r2
 8009cd8:	2201      	movs	r2, #1
 8009cda:	b29b      	uxth	r3, r3
 8009cdc:	f7fd faf0 	bl	80072c0 <pbuf_copy_partial>
 8009ce0:	e7d2      	b.n	8009c88 <tcp_zero_window_probe+0x58>
    err = ERR_RTE;
 8009ce2:	f06f 0403 	mvn.w	r4, #3
 8009ce6:	e7ea      	b.n	8009cbe <tcp_zero_window_probe+0x8e>
    return ERR_MEM;
 8009ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8009cec:	e7ea      	b.n	8009cc4 <tcp_zero_window_probe+0x94>
	...

08009cf0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8009cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf4:	4605      	mov	r5, r0
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009cf6:	200a      	movs	r0, #10
{
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	4616      	mov	r6, r2
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8009cfc:	f7fc fe96 	bl	8006a2c <memp_malloc>
  if (timeout == NULL) {
 8009d00:	4604      	mov	r4, r0
 8009d02:	b938      	cbnz	r0, 8009d14 <sys_timeout+0x24>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009d04:	4b1e      	ldr	r3, [pc, #120]	; (8009d80 <sys_timeout+0x90>)
 8009d06:	22d4      	movs	r2, #212	; 0xd4
 8009d08:	491e      	ldr	r1, [pc, #120]	; (8009d84 <sys_timeout+0x94>)
 8009d0a:	481f      	ldr	r0, [pc, #124]	; (8009d88 <sys_timeout+0x98>)
        t->next = timeout;
        break;
      }
    }
  }
}
 8009d0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8009d10:	f001 ba3e 	b.w	800b190 <iprintf>
  now = sys_now();
 8009d14:	f000 fddc 	bl	800a8d0 <sys_now>
  if (next_timeout == NULL) {
 8009d18:	4a1c      	ldr	r2, [pc, #112]	; (8009d8c <sys_timeout+0x9c>)
 8009d1a:	491d      	ldr	r1, [pc, #116]	; (8009d90 <sys_timeout+0xa0>)
 8009d1c:	6813      	ldr	r3, [r2, #0]
 8009d1e:	b95b      	cbnz	r3, 8009d38 <sys_timeout+0x48>
    timeouts_last_time = now;
 8009d20:	6008      	str	r0, [r1, #0]
    diff = 0;
 8009d22:	4618      	mov	r0, r3
  timeout->next = NULL;
 8009d24:	2100      	movs	r1, #0
  timeout->time = msecs + diff;
 8009d26:	4428      	add	r0, r5
  timeout->h = handler;
 8009d28:	60a7      	str	r7, [r4, #8]
  timeout->next = NULL;
 8009d2a:	6021      	str	r1, [r4, #0]
  timeout->arg = arg;
 8009d2c:	60e6      	str	r6, [r4, #12]
  timeout->time = msecs + diff;
 8009d2e:	6060      	str	r0, [r4, #4]
  if (next_timeout == NULL) {
 8009d30:	b92b      	cbnz	r3, 8009d3e <sys_timeout+0x4e>
    next_timeout = timeout;
 8009d32:	6014      	str	r4, [r2, #0]
 8009d34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    diff = now - timeouts_last_time;
 8009d38:	6809      	ldr	r1, [r1, #0]
 8009d3a:	1a40      	subs	r0, r0, r1
 8009d3c:	e7f2      	b.n	8009d24 <sys_timeout+0x34>
  if (next_timeout->time > msecs) {
 8009d3e:	6859      	ldr	r1, [r3, #4]
 8009d40:	428d      	cmp	r5, r1
 8009d42:	d217      	bcs.n	8009d74 <sys_timeout+0x84>
    next_timeout->time -= msecs;
 8009d44:	1b4d      	subs	r5, r1, r5
 8009d46:	605d      	str	r5, [r3, #4]
    timeout->next = next_timeout;
 8009d48:	6023      	str	r3, [r4, #0]
 8009d4a:	e7f2      	b.n	8009d32 <sys_timeout+0x42>
      if (t->next == NULL || t->next->time > timeout->time) {
 8009d4c:	684e      	ldr	r6, [r1, #4]
 8009d4e:	42b2      	cmp	r2, r6
 8009d50:	d312      	bcc.n	8009d78 <sys_timeout+0x88>
 8009d52:	4608      	mov	r0, r1
      timeout->time -= t->time;
 8009d54:	6841      	ldr	r1, [r0, #4]
 8009d56:	6862      	ldr	r2, [r4, #4]
 8009d58:	1a52      	subs	r2, r2, r1
      if (t->next == NULL || t->next->time > timeout->time) {
 8009d5a:	6801      	ldr	r1, [r0, #0]
      timeout->time -= t->time;
 8009d5c:	6062      	str	r2, [r4, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8009d5e:	2900      	cmp	r1, #0
 8009d60:	d1f4      	bne.n	8009d4c <sys_timeout+0x5c>
        } else if (timeout->time > msecs) {
 8009d62:	4295      	cmp	r5, r2
 8009d64:	d202      	bcs.n	8009d6c <sys_timeout+0x7c>
          timeout->time = msecs + next_timeout->time;
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	441d      	add	r5, r3
 8009d6a:	6065      	str	r5, [r4, #4]
        timeout->next = t->next;
 8009d6c:	6021      	str	r1, [r4, #0]
        t->next = timeout;
 8009d6e:	6004      	str	r4, [r0, #0]
        break;
 8009d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d74:	4618      	mov	r0, r3
 8009d76:	e7ed      	b.n	8009d54 <sys_timeout+0x64>
          t->next->time -= timeout->time;
 8009d78:	1ab2      	subs	r2, r6, r2
 8009d7a:	604a      	str	r2, [r1, #4]
 8009d7c:	e7f6      	b.n	8009d6c <sys_timeout+0x7c>
 8009d7e:	bf00      	nop
 8009d80:	0800d8dc 	.word	0x0800d8dc
 8009d84:	0800d910 	.word	0x0800d910
 8009d88:	0800c106 	.word	0x0800c106
 8009d8c:	20003f78 	.word	0x20003f78
 8009d90:	20003f80 	.word	0x20003f80

08009d94 <tcp_timer_needed>:
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8009d94:	4b08      	ldr	r3, [pc, #32]	; (8009db8 <tcp_timer_needed+0x24>)
 8009d96:	681a      	ldr	r2, [r3, #0]
 8009d98:	b962      	cbnz	r2, 8009db4 <tcp_timer_needed+0x20>
 8009d9a:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <tcp_timer_needed+0x28>)
 8009d9c:	6812      	ldr	r2, [r2, #0]
 8009d9e:	b912      	cbnz	r2, 8009da6 <tcp_timer_needed+0x12>
 8009da0:	4a07      	ldr	r2, [pc, #28]	; (8009dc0 <tcp_timer_needed+0x2c>)
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	b132      	cbz	r2, 8009db4 <tcp_timer_needed+0x20>
    tcpip_tcp_timer_active = 1;
 8009da6:	2201      	movs	r2, #1
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009da8:	4906      	ldr	r1, [pc, #24]	; (8009dc4 <tcp_timer_needed+0x30>)
 8009daa:	20fa      	movs	r0, #250	; 0xfa
    tcpip_tcp_timer_active = 1;
 8009dac:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009dae:	2200      	movs	r2, #0
 8009db0:	f7ff bf9e 	b.w	8009cf0 <sys_timeout>
 8009db4:	4770      	bx	lr
 8009db6:	bf00      	nop
 8009db8:	20003f7c 	.word	0x20003f7c
 8009dbc:	200076ec 	.word	0x200076ec
 8009dc0:	200076fc 	.word	0x200076fc
 8009dc4:	08009dc9 	.word	0x08009dc9

08009dc8 <tcpip_tcp_timer>:
{
 8009dc8:	b508      	push	{r3, lr}
  tcp_tmr();
 8009dca:	f7fd ff0f 	bl	8007bec <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8009dce:	4b08      	ldr	r3, [pc, #32]	; (8009df0 <tcpip_tcp_timer+0x28>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	b913      	cbnz	r3, 8009dda <tcpip_tcp_timer+0x12>
 8009dd4:	4b07      	ldr	r3, [pc, #28]	; (8009df4 <tcpip_tcp_timer+0x2c>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	b133      	cbz	r3, 8009de8 <tcpip_tcp_timer+0x20>
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009dda:	2200      	movs	r2, #0
 8009ddc:	4906      	ldr	r1, [pc, #24]	; (8009df8 <tcpip_tcp_timer+0x30>)
 8009dde:	20fa      	movs	r0, #250	; 0xfa
}
 8009de0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8009de4:	f7ff bf84 	b.w	8009cf0 <sys_timeout>
    tcpip_tcp_timer_active = 0;
 8009de8:	4a04      	ldr	r2, [pc, #16]	; (8009dfc <tcpip_tcp_timer+0x34>)
 8009dea:	6013      	str	r3, [r2, #0]
 8009dec:	bd08      	pop	{r3, pc}
 8009dee:	bf00      	nop
 8009df0:	200076ec 	.word	0x200076ec
 8009df4:	200076fc 	.word	0x200076fc
 8009df8:	08009dc9 	.word	0x08009dc9
 8009dfc:	20003f7c 	.word	0x20003f7c

08009e00 <sys_timeouts_init>:
{
 8009e00:	b538      	push	{r3, r4, r5, lr}
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8009e02:	4d11      	ldr	r5, [pc, #68]	; (8009e48 <sys_timeouts_init+0x48>)
 8009e04:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e08:	4c10      	ldr	r4, [pc, #64]	; (8009e4c <sys_timeouts_init+0x4c>)
 8009e0a:	f105 0208 	add.w	r2, r5, #8
 8009e0e:	4621      	mov	r1, r4
 8009e10:	f7ff ff6e 	bl	8009cf0 <sys_timeout>
 8009e14:	f105 0210 	add.w	r2, r5, #16
 8009e18:	4621      	mov	r1, r4
 8009e1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009e1e:	f7ff ff67 	bl	8009cf0 <sys_timeout>
 8009e22:	f105 0218 	add.w	r2, r5, #24
 8009e26:	4621      	mov	r1, r4
 8009e28:	f64e 2060 	movw	r0, #60000	; 0xea60
 8009e2c:	f7ff ff60 	bl	8009cf0 <sys_timeout>
 8009e30:	f105 0220 	add.w	r2, r5, #32
 8009e34:	4621      	mov	r1, r4
 8009e36:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009e3a:	f7ff ff59 	bl	8009cf0 <sys_timeout>
  timeouts_last_time = sys_now();
 8009e3e:	f000 fd47 	bl	800a8d0 <sys_now>
 8009e42:	4b03      	ldr	r3, [pc, #12]	; (8009e50 <sys_timeouts_init+0x50>)
 8009e44:	6018      	str	r0, [r3, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	0800d8b4 	.word	0x0800d8b4
 8009e4c:	08009e55 	.word	0x08009e55
 8009e50:	20003f80 	.word	0x20003f80

08009e54 <cyclic_timer>:
{
 8009e54:	b510      	push	{r4, lr}
 8009e56:	4604      	mov	r4, r0
  cyclic->handler();
 8009e58:	6843      	ldr	r3, [r0, #4]
 8009e5a:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009e5c:	4903      	ldr	r1, [pc, #12]	; (8009e6c <cyclic_timer+0x18>)
 8009e5e:	4622      	mov	r2, r4
 8009e60:	6820      	ldr	r0, [r4, #0]
}
 8009e62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8009e66:	f7ff bf43 	b.w	8009cf0 <sys_timeout>
 8009e6a:	bf00      	nop
 8009e6c:	08009e55 	.word	0x08009e55

08009e70 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009e70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8009e74:	4d24      	ldr	r5, [pc, #144]	; (8009f08 <sys_timeouts_mbox_fetch+0x98>)
{
 8009e76:	4681      	mov	r9, r0
 8009e78:	468a      	mov	sl, r1
  diff = sys_now() - timeouts_last_time;
 8009e7a:	4c24      	ldr	r4, [pc, #144]	; (8009f0c <sys_timeouts_mbox_fetch+0x9c>)
 8009e7c:	462e      	mov	r6, r5
  if (!next_timeout) {
 8009e7e:	682a      	ldr	r2, [r5, #0]
 8009e80:	b932      	cbnz	r2, 8009e90 <sys_timeouts_mbox_fetch+0x20>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009e82:	4651      	mov	r1, sl
 8009e84:	4648      	mov	r0, r9
       before a message could be fetched. */
    sys_check_timeouts();
    /* We try again to fetch a message from the mbox. */
    goto again;
  }
}
 8009e86:	b003      	add	sp, #12
 8009e88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009e8c:	f000 bac4 	b.w	800a418 <sys_arch_mbox_fetch>
  diff = sys_now() - timeouts_last_time;
 8009e90:	f000 fd1e 	bl	800a8d0 <sys_now>
 8009e94:	6822      	ldr	r2, [r4, #0]
  if (diff > next_timeout->time) {
 8009e96:	682b      	ldr	r3, [r5, #0]
  diff = sys_now() - timeouts_last_time;
 8009e98:	1a80      	subs	r0, r0, r2
  if (diff > next_timeout->time) {
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	4290      	cmp	r0, r2
 8009e9e:	d928      	bls.n	8009ef2 <sys_timeouts_mbox_fetch+0x82>
  if (next_timeout) {
 8009ea0:	6833      	ldr	r3, [r6, #0]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d0eb      	beq.n	8009e7e <sys_timeouts_mbox_fetch+0xe>
    now = sys_now();
 8009ea6:	f000 fd13 	bl	800a8d0 <sys_now>
    diff = now - timeouts_last_time;
 8009eaa:	6823      	ldr	r3, [r4, #0]
          LOCK_TCPIP_CORE();
 8009eac:	4f18      	ldr	r7, [pc, #96]	; (8009f10 <sys_timeouts_mbox_fetch+0xa0>)
    diff = now - timeouts_last_time;
 8009eae:	eba0 0b03 	sub.w	fp, r0, r3
      tmptimeout = next_timeout;
 8009eb2:	6831      	ldr	r1, [r6, #0]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8009eb4:	2900      	cmp	r1, #0
 8009eb6:	d0e2      	beq.n	8009e7e <sys_timeouts_mbox_fetch+0xe>
 8009eb8:	684a      	ldr	r2, [r1, #4]
 8009eba:	455a      	cmp	r2, fp
 8009ebc:	d8df      	bhi.n	8009e7e <sys_timeouts_mbox_fetch+0xe>
        timeouts_last_time += tmptimeout->time;
 8009ebe:	6820      	ldr	r0, [r4, #0]
        diff -= tmptimeout->time;
 8009ec0:	ebab 0b02 	sub.w	fp, fp, r2
        handler = tmptimeout->h;
 8009ec4:	f8d1 8008 	ldr.w	r8, [r1, #8]
        timeouts_last_time += tmptimeout->time;
 8009ec8:	4410      	add	r0, r2
        arg = tmptimeout->arg;
 8009eca:	68cb      	ldr	r3, [r1, #12]
        next_timeout = tmptimeout->next;
 8009ecc:	680a      	ldr	r2, [r1, #0]
        timeouts_last_time += tmptimeout->time;
 8009ece:	6020      	str	r0, [r4, #0]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009ed0:	200a      	movs	r0, #10
        next_timeout = tmptimeout->next;
 8009ed2:	6032      	str	r2, [r6, #0]
        arg = tmptimeout->arg;
 8009ed4:	9301      	str	r3, [sp, #4]
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8009ed6:	f7fc fdc5 	bl	8006a64 <memp_free>
        if (handler != NULL) {
 8009eda:	f1b8 0f00 	cmp.w	r8, #0
 8009ede:	d0e8      	beq.n	8009eb2 <sys_timeouts_mbox_fetch+0x42>
          LOCK_TCPIP_CORE();
 8009ee0:	4638      	mov	r0, r7
 8009ee2:	f000 fadc 	bl	800a49e <sys_mutex_lock>
          handler(arg);
 8009ee6:	9801      	ldr	r0, [sp, #4]
 8009ee8:	47c0      	blx	r8
          UNLOCK_TCPIP_CORE();
 8009eea:	4638      	mov	r0, r7
 8009eec:	f000 fadc 	bl	800a4a8 <sys_mutex_unlock>
 8009ef0:	e7df      	b.n	8009eb2 <sys_timeouts_mbox_fetch+0x42>
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8009ef2:	1a12      	subs	r2, r2, r0
 8009ef4:	d0d4      	beq.n	8009ea0 <sys_timeouts_mbox_fetch+0x30>
 8009ef6:	4651      	mov	r1, sl
 8009ef8:	4648      	mov	r0, r9
 8009efa:	f000 fa8d 	bl	800a418 <sys_arch_mbox_fetch>
 8009efe:	3001      	adds	r0, #1
 8009f00:	d0ce      	beq.n	8009ea0 <sys_timeouts_mbox_fetch+0x30>
}
 8009f02:	b003      	add	sp, #12
 8009f04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f08:	20003f78 	.word	0x20003f78
 8009f0c:	20003f80 	.word	0x20003f80
 8009f10:	20003f9c 	.word	0x20003f9c

08009f14 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8009f14:	4770      	bx	lr
	...

08009f18 <udp_input>:
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8009f18:	8943      	ldrh	r3, [r0, #10]
 8009f1a:	2b07      	cmp	r3, #7
{
 8009f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f20:	4605      	mov	r5, r0
 8009f22:	b085      	sub	sp, #20
 8009f24:	4689      	mov	r9, r1
  if (p->len < UDP_HLEN) {
 8009f26:	d805      	bhi.n	8009f34 <udp_input+0x1c>
    if (pbuf_header(p, -UDP_HLEN)) {
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8009f28:	4628      	mov	r0, r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8009f2a:	b005      	add	sp, #20
 8009f2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 8009f30:	f7fc bf1e 	b.w	8006d70 <pbuf_free>
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009f34:	4e3e      	ldr	r6, [pc, #248]	; (800a030 <udp_input+0x118>)
  udphdr = (struct udp_hdr *)p->payload;
 8009f36:	6844      	ldr	r4, [r0, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8009f38:	6831      	ldr	r1, [r6, #0]
 8009f3a:	6970      	ldr	r0, [r6, #20]
 8009f3c:	f7fb ff4d 	bl	8005dda <ip4_addr_isbroadcast_u32>
 8009f40:	4607      	mov	r7, r0
  src = lwip_ntohs(udphdr->src);
 8009f42:	8820      	ldrh	r0, [r4, #0]
 8009f44:	f7fa f85a 	bl	8003ffc <lwip_htons>
 8009f48:	4680      	mov	r8, r0
  dest = lwip_ntohs(udphdr->dest);
 8009f4a:	8860      	ldrh	r0, [r4, #2]
  uncon_pcb = NULL;
 8009f4c:	2400      	movs	r4, #0
  dest = lwip_ntohs(udphdr->dest);
 8009f4e:	f7fa f855 	bl	8003ffc <lwip_htons>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f52:	4a38      	ldr	r2, [pc, #224]	; (800a034 <udp_input+0x11c>)
  dest = lwip_ntohs(udphdr->dest);
 8009f54:	4682      	mov	sl, r0
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009f56:	6971      	ldr	r1, [r6, #20]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f58:	6810      	ldr	r0, [r2, #0]
  prev = NULL;
 8009f5a:	46a4      	mov	ip, r4
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8009f5c:	f8d6 e010 	ldr.w	lr, [r6, #16]
 8009f60:	4693      	mov	fp, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009f62:	4603      	mov	r3, r0
 8009f64:	9603      	str	r6, [sp, #12]
 8009f66:	b92b      	cbnz	r3, 8009f74 <udp_input+0x5c>
  if (pcb != NULL) {
 8009f68:	bb0c      	cbnz	r4, 8009fae <udp_input+0x96>
  if (for_us) {
 8009f6a:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009f6e:	428b      	cmp	r3, r1
 8009f70:	d1da      	bne.n	8009f28 <udp_input+0x10>
 8009f72:	e01c      	b.n	8009fae <udp_input+0x96>
    if ((pcb->local_port == dest) &&
 8009f74:	8a5a      	ldrh	r2, [r3, #18]
 8009f76:	4552      	cmp	r2, sl
 8009f78:	d12b      	bne.n	8009fd2 <udp_input+0xba>
 8009f7a:	681a      	ldr	r2, [r3, #0]
    if (broadcast != 0) {
 8009f7c:	b32f      	cbz	r7, 8009fca <udp_input+0xb2>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8009f7e:	b13a      	cbz	r2, 8009f90 <udp_input+0x78>
 8009f80:	1c4e      	adds	r6, r1, #1
 8009f82:	d005      	beq.n	8009f90 <udp_input+0x78>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8009f84:	404a      	eors	r2, r1
 8009f86:	4616      	mov	r6, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8009f88:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009f8c:	4216      	tst	r6, r2
 8009f8e:	d120      	bne.n	8009fd2 <udp_input+0xba>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8009f90:	7c1a      	ldrb	r2, [r3, #16]
 8009f92:	0752      	lsls	r2, r2, #29
 8009f94:	d402      	bmi.n	8009f9c <udp_input+0x84>
 8009f96:	2c00      	cmp	r4, #0
 8009f98:	bf08      	it	eq
 8009f9a:	461c      	moveq	r4, r3
      if ((pcb->remote_port == src) &&
 8009f9c:	8a9a      	ldrh	r2, [r3, #20]
 8009f9e:	4542      	cmp	r2, r8
 8009fa0:	d117      	bne.n	8009fd2 <udp_input+0xba>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009fa2:	685a      	ldr	r2, [r3, #4]
      if ((pcb->remote_port == src) &&
 8009fa4:	b9c2      	cbnz	r2, 8009fd8 <udp_input+0xc0>
        if (prev != NULL) {
 8009fa6:	f1bc 0f00 	cmp.w	ip, #0
 8009faa:	d118      	bne.n	8009fde <udp_input+0xc6>
 8009fac:	461c      	mov	r4, r3
    if (pbuf_header(p, -UDP_HLEN)) {
 8009fae:	f06f 0107 	mvn.w	r1, #7
 8009fb2:	4628      	mov	r0, r5
 8009fb4:	f7fc fed6 	bl	8006d64 <pbuf_header>
 8009fb8:	b1c0      	cbz	r0, 8009fec <udp_input+0xd4>
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8009fba:	4b1f      	ldr	r3, [pc, #124]	; (800a038 <udp_input+0x120>)
 8009fbc:	f240 1255 	movw	r2, #341	; 0x155
 8009fc0:	491e      	ldr	r1, [pc, #120]	; (800a03c <udp_input+0x124>)
 8009fc2:	481f      	ldr	r0, [pc, #124]	; (800a040 <udp_input+0x128>)
 8009fc4:	f001 f8e4 	bl	800b190 <iprintf>
 8009fc8:	e7ae      	b.n	8009f28 <udp_input+0x10>
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8009fca:	2a00      	cmp	r2, #0
 8009fcc:	d0e0      	beq.n	8009f90 <udp_input+0x78>
 8009fce:	428a      	cmp	r2, r1
 8009fd0:	d0de      	beq.n	8009f90 <udp_input+0x78>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8009fd2:	469c      	mov	ip, r3
 8009fd4:	68db      	ldr	r3, [r3, #12]
 8009fd6:	e7c6      	b.n	8009f66 <udp_input+0x4e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8009fd8:	4572      	cmp	r2, lr
 8009fda:	d1fa      	bne.n	8009fd2 <udp_input+0xba>
 8009fdc:	e7e3      	b.n	8009fa6 <udp_input+0x8e>
          prev->next = pcb->next;
 8009fde:	68da      	ldr	r2, [r3, #12]
          udp_pcbs = pcb;
 8009fe0:	f8cb 3000 	str.w	r3, [fp]
          prev->next = pcb->next;
 8009fe4:	f8cc 200c 	str.w	r2, [ip, #12]
          pcb->next = udp_pcbs;
 8009fe8:	60d8      	str	r0, [r3, #12]
 8009fea:	e7df      	b.n	8009fac <udp_input+0x94>
    if (pcb != NULL) {
 8009fec:	b164      	cbz	r4, 800a008 <udp_input+0xf0>
      if (pcb->recv != NULL) {
 8009fee:	69a6      	ldr	r6, [r4, #24]
 8009ff0:	2e00      	cmp	r6, #0
 8009ff2:	d099      	beq.n	8009f28 <udp_input+0x10>
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8009ff4:	f8cd 8000 	str.w	r8, [sp]
 8009ff8:	462a      	mov	r2, r5
 8009ffa:	4b12      	ldr	r3, [pc, #72]	; (800a044 <udp_input+0x12c>)
 8009ffc:	4621      	mov	r1, r4
 8009ffe:	69e0      	ldr	r0, [r4, #28]
 800a000:	47b0      	blx	r6
}
 800a002:	b005      	add	sp, #20
 800a004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800a008:	2f00      	cmp	r7, #0
 800a00a:	d18d      	bne.n	8009f28 <udp_input+0x10>
 800a00c:	9b03      	ldr	r3, [sp, #12]
 800a00e:	695b      	ldr	r3, [r3, #20]
 800a010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a014:	2be0      	cmp	r3, #224	; 0xe0
 800a016:	d087      	beq.n	8009f28 <udp_input+0x10>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800a018:	9b03      	ldr	r3, [sp, #12]
 800a01a:	4628      	mov	r0, r5
 800a01c:	8999      	ldrh	r1, [r3, #12]
 800a01e:	3108      	adds	r1, #8
 800a020:	b209      	sxth	r1, r1
 800a022:	f7fc fea2 	bl	8006d6a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800a026:	2103      	movs	r1, #3
 800a028:	4628      	mov	r0, r5
 800a02a:	f7fb fd49 	bl	8005ac0 <icmp_dest_unreach>
 800a02e:	e77b      	b.n	8009f28 <udp_input+0x10>
 800a030:	20003fa0 	.word	0x20003fa0
 800a034:	20007704 	.word	0x20007704
 800a038:	0800d94d 	.word	0x0800d94d
 800a03c:	0800d97c 	.word	0x0800d97c
 800a040:	0800c106 	.word	0x0800c106
 800a044:	20003fb0 	.word	0x20003fb0

0800a048 <udp_bind>:
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 800a048:	4b26      	ldr	r3, [pc, #152]	; (800a0e4 <udp_bind+0x9c>)
{
 800a04a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 800a04e:	2900      	cmp	r1, #0
 800a050:	bf08      	it	eq
 800a052:	4619      	moveq	r1, r3
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a054:	2800      	cmp	r0, #0
 800a056:	d040      	beq.n	800a0da <udp_bind+0x92>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a058:	4e23      	ldr	r6, [pc, #140]	; (800a0e8 <udp_bind+0xa0>)
 800a05a:	f8d6 e000 	ldr.w	lr, [r6]
 800a05e:	4675      	mov	r5, lr
 800a060:	b96d      	cbnz	r5, 800a07e <udp_bind+0x36>
      break;
    }
  }

  /* no port specified? */
  if (port == 0) {
 800a062:	b192      	cbz	r2, 800a08a <udp_bind+0x42>
 800a064:	4673      	mov	r3, lr
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a066:	b1fb      	cbz	r3, 800a0a8 <udp_bind+0x60>
      if (pcb != ipcb) {
 800a068:	4283      	cmp	r3, r0
 800a06a:	d006      	beq.n	800a07a <udp_bind+0x32>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800a06c:	8a5c      	ldrh	r4, [r3, #18]
 800a06e:	4294      	cmp	r4, r2
 800a070:	d103      	bne.n	800a07a <udp_bind+0x32>
 800a072:	681f      	ldr	r7, [r3, #0]
 800a074:	680c      	ldr	r4, [r1, #0]
 800a076:	42a7      	cmp	r7, r4
 800a078:	d029      	beq.n	800a0ce <udp_bind+0x86>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	e7f3      	b.n	800a066 <udp_bind+0x1e>
    if (pcb == ipcb) {
 800a07e:	4285      	cmp	r5, r0
 800a080:	d001      	beq.n	800a086 <udp_bind+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a082:	68ed      	ldr	r5, [r5, #12]
 800a084:	e7ec      	b.n	800a060 <udp_bind+0x18>
      rebind = 1;
 800a086:	2501      	movs	r5, #1
 800a088:	e7eb      	b.n	800a062 <udp_bind+0x1a>
 800a08a:	4b18      	ldr	r3, [pc, #96]	; (800a0ec <udp_bind+0xa4>)
  if (port == 0) {
 800a08c:	f44f 4480 	mov.w	r4, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a090:	f64f 7cff 	movw	ip, #65535	; 0xffff
 800a094:	881a      	ldrh	r2, [r3, #0]
 800a096:	4562      	cmp	r2, ip
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a098:	4677      	mov	r7, lr
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a09a:	bf16      	itet	ne
 800a09c:	3201      	addne	r2, #1
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800a09e:	f44f 4240 	moveq.w	r2, #49152	; 0xc000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800a0a2:	b292      	uxthne	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0a4:	b957      	cbnz	r7, 800a0bc <udp_bind+0x74>
 800a0a6:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a0a8:	680b      	ldr	r3, [r1, #0]

  pcb->local_port = port;
 800a0aa:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800a0ac:	6003      	str	r3, [r0, #0]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800a0ae:	b915      	cbnz	r5, 800a0b6 <udp_bind+0x6e>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800a0b0:	f8c0 e00c 	str.w	lr, [r0, #12]
    udp_pcbs = pcb;
 800a0b4:	6030      	str	r0, [r6, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800a0b6:	2000      	movs	r0, #0
 800a0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (pcb->local_port == udp_port) {
 800a0bc:	f8b7 8012 	ldrh.w	r8, [r7, #18]
 800a0c0:	4590      	cmp	r8, r2
 800a0c2:	d108      	bne.n	800a0d6 <udp_bind+0x8e>
 800a0c4:	3c01      	subs	r4, #1
 800a0c6:	b2a4      	uxth	r4, r4
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800a0c8:	2c00      	cmp	r4, #0
 800a0ca:	d1e4      	bne.n	800a096 <udp_bind+0x4e>
 800a0cc:	801a      	strh	r2, [r3, #0]
      return ERR_USE;
 800a0ce:	f06f 0007 	mvn.w	r0, #7
 800a0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800a0d6:	68ff      	ldr	r7, [r7, #12]
 800a0d8:	e7e4      	b.n	800a0a4 <udp_bind+0x5c>
    return ERR_VAL;
 800a0da:	f06f 0005 	mvn.w	r0, #5
}
 800a0de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e2:	bf00      	nop
 800a0e4:	0800c870 	.word	0x0800c870
 800a0e8:	20007704 	.word	0x20007704
 800a0ec:	2000000c 	.word	0x2000000c

0800a0f0 <udp_sendto_if_src>:
{
 800a0f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a0f4:	460e      	mov	r6, r1
 800a0f6:	b085      	sub	sp, #20
 800a0f8:	4690      	mov	r8, r2
 800a0fa:	4699      	mov	r9, r3
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 800a0fc:	4607      	mov	r7, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d050      	beq.n	800a1a4 <udp_sendto_if_src+0xb4>
 800a102:	2a00      	cmp	r2, #0
 800a104:	d04e      	beq.n	800a1a4 <udp_sendto_if_src+0xb4>
  if (pcb->local_port == 0) {
 800a106:	8a42      	ldrh	r2, [r0, #18]
 800a108:	2a00      	cmp	r2, #0
 800a10a:	d033      	beq.n	800a174 <udp_sendto_if_src+0x84>
  if (pbuf_header(p, UDP_HLEN)) {
 800a10c:	2108      	movs	r1, #8
 800a10e:	4630      	mov	r0, r6
 800a110:	f7fc fe28 	bl	8006d64 <pbuf_header>
 800a114:	2800      	cmp	r0, #0
 800a116:	d137      	bne.n	800a188 <udp_sendto_if_src+0x98>
 800a118:	4634      	mov	r4, r6
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800a11a:	8963      	ldrh	r3, [r4, #10]
 800a11c:	2b07      	cmp	r3, #7
 800a11e:	d806      	bhi.n	800a12e <udp_sendto_if_src+0x3e>
 800a120:	4b23      	ldr	r3, [pc, #140]	; (800a1b0 <udp_sendto_if_src+0xc0>)
 800a122:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800a126:	4923      	ldr	r1, [pc, #140]	; (800a1b4 <udp_sendto_if_src+0xc4>)
 800a128:	4823      	ldr	r0, [pc, #140]	; (800a1b8 <udp_sendto_if_src+0xc8>)
 800a12a:	f001 f831 	bl	800b190 <iprintf>
  udphdr = (struct udp_hdr *)q->payload;
 800a12e:	6865      	ldr	r5, [r4, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 800a130:	8a78      	ldrh	r0, [r7, #18]
 800a132:	f7f9 ff63 	bl	8003ffc <lwip_htons>
 800a136:	8028      	strh	r0, [r5, #0]
  udphdr->dest = lwip_htons(dst_port);
 800a138:	4648      	mov	r0, r9
 800a13a:	f7f9 ff5f 	bl	8003ffc <lwip_htons>
  udphdr->chksum = 0x0000;
 800a13e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 800a140:	8068      	strh	r0, [r5, #2]
  udphdr->chksum = 0x0000;
 800a142:	71ab      	strb	r3, [r5, #6]
 800a144:	71eb      	strb	r3, [r5, #7]
    udphdr->len = lwip_htons(q->tot_len);
 800a146:	8920      	ldrh	r0, [r4, #8]
 800a148:	f7f9 ff58 	bl	8003ffc <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a14c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    udphdr->len = lwip_htons(q->tot_len);
 800a14e:	80a8      	strh	r0, [r5, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a150:	4620      	mov	r0, r4
 800a152:	7abb      	ldrb	r3, [r7, #10]
 800a154:	9202      	str	r2, [sp, #8]
 800a156:	2211      	movs	r2, #17
 800a158:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a15a:	9201      	str	r2, [sp, #4]
 800a15c:	7a7a      	ldrb	r2, [r7, #9]
 800a15e:	9200      	str	r2, [sp, #0]
 800a160:	4642      	mov	r2, r8
 800a162:	f7fb fdb1 	bl	8005cc8 <ip4_output_if_src>
  if (q != p) {
 800a166:	42b4      	cmp	r4, r6
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800a168:	4605      	mov	r5, r0
  if (q != p) {
 800a16a:	d009      	beq.n	800a180 <udp_sendto_if_src+0x90>
    pbuf_free(q);
 800a16c:	4620      	mov	r0, r4
 800a16e:	f7fc fdff 	bl	8006d70 <pbuf_free>
 800a172:	e005      	b.n	800a180 <udp_sendto_if_src+0x90>
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a174:	4601      	mov	r1, r0
 800a176:	f7ff ff67 	bl	800a048 <udp_bind>
    if (err != ERR_OK) {
 800a17a:	4605      	mov	r5, r0
 800a17c:	2800      	cmp	r0, #0
 800a17e:	d0c5      	beq.n	800a10c <udp_sendto_if_src+0x1c>
}
 800a180:	4628      	mov	r0, r5
 800a182:	b005      	add	sp, #20
 800a184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800a188:	2200      	movs	r2, #0
 800a18a:	2108      	movs	r1, #8
 800a18c:	2001      	movs	r0, #1
 800a18e:	f7fc fe59 	bl	8006e44 <pbuf_alloc>
    if (q == NULL) {
 800a192:	4604      	mov	r4, r0
 800a194:	b148      	cbz	r0, 800a1aa <udp_sendto_if_src+0xba>
    if (p->tot_len != 0) {
 800a196:	8933      	ldrh	r3, [r6, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d0be      	beq.n	800a11a <udp_sendto_if_src+0x2a>
      pbuf_chain(q, p);
 800a19c:	4631      	mov	r1, r6
 800a19e:	f7fc fffb 	bl	8007198 <pbuf_chain>
 800a1a2:	e7ba      	b.n	800a11a <udp_sendto_if_src+0x2a>
    return ERR_VAL;
 800a1a4:	f06f 0505 	mvn.w	r5, #5
 800a1a8:	e7ea      	b.n	800a180 <udp_sendto_if_src+0x90>
      return ERR_MEM;
 800a1aa:	f04f 35ff 	mov.w	r5, #4294967295
 800a1ae:	e7e7      	b.n	800a180 <udp_sendto_if_src+0x90>
 800a1b0:	0800d94d 	.word	0x0800d94d
 800a1b4:	0800d990 	.word	0x0800d990
 800a1b8:	0800c106 	.word	0x0800c106

0800a1bc <udp_sendto_if>:
{
 800a1bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a1be:	9c06      	ldr	r4, [sp, #24]
  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 800a1c0:	b190      	cbz	r0, 800a1e8 <udp_sendto_if+0x2c>
 800a1c2:	b18a      	cbz	r2, 800a1e8 <udp_sendto_if+0x2c>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a1c4:	6805      	ldr	r5, [r0, #0]
 800a1c6:	b11d      	cbz	r5, 800a1d0 <udp_sendto_if+0x14>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800a1c8:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a1cc:	2ee0      	cmp	r6, #224	; 0xe0
 800a1ce:	d106      	bne.n	800a1de <udp_sendto_if+0x22>
    src_ip = netif_ip_addr4(netif);
 800a1d0:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800a1d2:	e88d 0030 	stmia.w	sp, {r4, r5}
 800a1d6:	f7ff ff8b 	bl	800a0f0 <udp_sendto_if_src>
}
 800a1da:	b002      	add	sp, #8
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800a1de:	6866      	ldr	r6, [r4, #4]
 800a1e0:	42b5      	cmp	r5, r6
 800a1e2:	d104      	bne.n	800a1ee <udp_sendto_if+0x32>
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800a1e4:	4605      	mov	r5, r0
 800a1e6:	e7f4      	b.n	800a1d2 <udp_sendto_if+0x16>
    return ERR_VAL;
 800a1e8:	f06f 0005 	mvn.w	r0, #5
 800a1ec:	e7f5      	b.n	800a1da <udp_sendto_if+0x1e>
      return ERR_RTE;
 800a1ee:	f06f 0003 	mvn.w	r0, #3
 800a1f2:	e7f2      	b.n	800a1da <udp_sendto_if+0x1e>

0800a1f4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	460d      	mov	r5, r1
 800a1f8:	4616      	mov	r6, r2
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 800a1fa:	4604      	mov	r4, r0
 800a1fc:	b1d0      	cbz	r0, 800a234 <udp_connect+0x40>
 800a1fe:	b1c9      	cbz	r1, 800a234 <udp_connect+0x40>
    return ERR_VAL;
  }

  if (pcb->local_port == 0) {
 800a200:	8a42      	ldrh	r2, [r0, #18]
 800a202:	b16a      	cbz	r2, 800a220 <udp_connect+0x2c>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a204:	682b      	ldr	r3, [r5, #0]
  pcb->remote_port = port;
 800a206:	82a6      	strh	r6, [r4, #20]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800a208:	6063      	str	r3, [r4, #4]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800a20a:	7c23      	ldrb	r3, [r4, #16]
 800a20c:	f043 0304 	orr.w	r3, r3, #4
 800a210:	7423      	strb	r3, [r4, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a212:	4b0b      	ldr	r3, [pc, #44]	; (800a240 <udp_connect+0x4c>)
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4610      	mov	r0, r2
 800a218:	b940      	cbnz	r0, 800a22c <udp_connect+0x38>
      /* already on the list, just return */
      return ERR_OK;
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800a21a:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 800a21c:	601c      	str	r4, [r3, #0]
  return ERR_OK;
 800a21e:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800a220:	4601      	mov	r1, r0
 800a222:	f7ff ff11 	bl	800a048 <udp_bind>
    if (err != ERR_OK) {
 800a226:	2800      	cmp	r0, #0
 800a228:	d0ec      	beq.n	800a204 <udp_connect+0x10>
 800a22a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb == ipcb) {
 800a22c:	42a0      	cmp	r0, r4
 800a22e:	d004      	beq.n	800a23a <udp_connect+0x46>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800a230:	68c0      	ldr	r0, [r0, #12]
 800a232:	e7f1      	b.n	800a218 <udp_connect+0x24>
    return ERR_VAL;
 800a234:	f06f 0005 	mvn.w	r0, #5
 800a238:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 800a23a:	2000      	movs	r0, #0
}
 800a23c:	bd70      	pop	{r4, r5, r6, pc}
 800a23e:	bf00      	nop
 800a240:	20007704 	.word	0x20007704

0800a244 <udp_recv>:
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  /* remember recv() callback and user data */
  pcb->recv = recv;
 800a244:	6181      	str	r1, [r0, #24]
  pcb->recv_arg = recv_arg;
 800a246:	61c2      	str	r2, [r0, #28]
 800a248:	4770      	bx	lr
	...

0800a24c <udp_remove>:
{
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800a24c:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <udp_remove+0x2c>)
{
 800a24e:	4601      	mov	r1, r0
  if (udp_pcbs == pcb) {
 800a250:	6813      	ldr	r3, [r2, #0]
 800a252:	4283      	cmp	r3, r0
 800a254:	d104      	bne.n	800a260 <udp_remove+0x14>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800a256:	68c3      	ldr	r3, [r0, #12]
 800a258:	6013      	str	r3, [r2, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800a25a:	2000      	movs	r0, #0
 800a25c:	f7fc bc02 	b.w	8006a64 <memp_free>
{
 800a260:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0f9      	beq.n	800a25a <udp_remove+0xe>
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800a266:	68db      	ldr	r3, [r3, #12]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d0f6      	beq.n	800a25a <udp_remove+0xe>
 800a26c:	4299      	cmp	r1, r3
 800a26e:	d1f7      	bne.n	800a260 <udp_remove+0x14>
        pcb2->next = pcb->next;
 800a270:	68cb      	ldr	r3, [r1, #12]
 800a272:	60d3      	str	r3, [r2, #12]
        break;
 800a274:	e7f1      	b.n	800a25a <udp_remove+0xe>
 800a276:	bf00      	nop
 800a278:	20007704 	.word	0x20007704

0800a27c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800a27c:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800a27e:	2000      	movs	r0, #0
 800a280:	f7fc fbd4 	bl	8006a2c <memp_malloc>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800a284:	4604      	mov	r4, r0
 800a286:	b128      	cbz	r0, 800a294 <udp_new+0x18>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800a288:	2220      	movs	r2, #32
 800a28a:	2100      	movs	r1, #0
 800a28c:	f000 ff78 	bl	800b180 <memset>
    pcb->ttl = UDP_TTL;
 800a290:	23ff      	movs	r3, #255	; 0xff
 800a292:	72a3      	strb	r3, [r4, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 800a294:	4620      	mov	r0, r4
 800a296:	bd10      	pop	{r4, pc}

0800a298 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800a298:	b510      	push	{r4, lr}
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800a29a:	b138      	cbz	r0, 800a2ac <udp_netif_ip_addr_changed+0x14>
 800a29c:	6803      	ldr	r3, [r0, #0]
 800a29e:	b12b      	cbz	r3, 800a2ac <udp_netif_ip_addr_changed+0x14>
 800a2a0:	b121      	cbz	r1, 800a2ac <udp_netif_ip_addr_changed+0x14>
 800a2a2:	680b      	ldr	r3, [r1, #0]
 800a2a4:	b113      	cbz	r3, 800a2ac <udp_netif_ip_addr_changed+0x14>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a2a6:	4b06      	ldr	r3, [pc, #24]	; (800a2c0 <udp_netif_ip_addr_changed+0x28>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	b903      	cbnz	r3, 800a2ae <udp_netif_ip_addr_changed+0x16>
 800a2ac:	bd10      	pop	{r4, pc}
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800a2ae:	681c      	ldr	r4, [r3, #0]
 800a2b0:	6802      	ldr	r2, [r0, #0]
 800a2b2:	4294      	cmp	r4, r2
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800a2b4:	bf04      	itt	eq
 800a2b6:	680a      	ldreq	r2, [r1, #0]
 800a2b8:	601a      	streq	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	e7f5      	b.n	800a2aa <udp_netif_ip_addr_changed+0x12>
 800a2be:	bf00      	nop
 800a2c0:	20007704 	.word	0x20007704

0800a2c4 <ethernet_input>:
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 800a2c4:	8943      	ldrh	r3, [r0, #10]
 800a2c6:	2b0e      	cmp	r3, #14
{
 800a2c8:	b570      	push	{r4, r5, r6, lr}
 800a2ca:	4604      	mov	r4, r0
 800a2cc:	460d      	mov	r5, r1
  if (p->len <= SIZEOF_ETH_HDR) {
 800a2ce:	d914      	bls.n	800a2fa <ethernet_input+0x36>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800a2d0:	6840      	ldr	r0, [r0, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800a2d2:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 800a2d4:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 800a2d6:	07d9      	lsls	r1, r3, #31
 800a2d8:	d50a      	bpl.n	800a2f0 <ethernet_input+0x2c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d111      	bne.n	800a302 <ethernet_input+0x3e>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800a2de:	7843      	ldrb	r3, [r0, #1]
 800a2e0:	b933      	cbnz	r3, 800a2f0 <ethernet_input+0x2c>
 800a2e2:	7883      	ldrb	r3, [r0, #2]
 800a2e4:	2b5e      	cmp	r3, #94	; 0x5e
 800a2e6:	d103      	bne.n	800a2f0 <ethernet_input+0x2c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800a2e8:	7b63      	ldrb	r3, [r4, #13]
 800a2ea:	f043 0310 	orr.w	r3, r3, #16
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800a2ee:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 800a2f0:	2e08      	cmp	r6, #8
 800a2f2:	d010      	beq.n	800a316 <ethernet_input+0x52>
 800a2f4:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 800a2f8:	d01e      	beq.n	800a338 <ethernet_input+0x74>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f7fc fd38 	bl	8006d70 <pbuf_free>
  return ERR_OK;
 800a300:	e018      	b.n	800a334 <ethernet_input+0x70>
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800a302:	2206      	movs	r2, #6
 800a304:	4914      	ldr	r1, [pc, #80]	; (800a358 <ethernet_input+0x94>)
 800a306:	f000 ff21 	bl	800b14c <memcmp>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d1f0      	bne.n	800a2f0 <ethernet_input+0x2c>
      p->flags |= PBUF_FLAG_LLBCAST;
 800a30e:	7b63      	ldrb	r3, [r4, #13]
 800a310:	f043 0308 	orr.w	r3, r3, #8
 800a314:	e7eb      	b.n	800a2ee <ethernet_input+0x2a>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a316:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a31a:	071a      	lsls	r2, r3, #28
 800a31c:	d5ed      	bpl.n	800a2fa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a31e:	f06f 010d 	mvn.w	r1, #13
 800a322:	4620      	mov	r0, r4
 800a324:	f7fc fd1e 	bl	8006d64 <pbuf_header>
 800a328:	2800      	cmp	r0, #0
 800a32a:	d1e6      	bne.n	800a2fa <ethernet_input+0x36>
        ip4_input(p, netif);
 800a32c:	4629      	mov	r1, r5
 800a32e:	4620      	mov	r0, r4
 800a330:	f7fb fbfc 	bl	8005b2c <ip4_input>
}
 800a334:	2000      	movs	r0, #0
 800a336:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800a338:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800a33c:	071b      	lsls	r3, r3, #28
 800a33e:	d5dc      	bpl.n	800a2fa <ethernet_input+0x36>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 800a340:	f06f 010d 	mvn.w	r1, #13
 800a344:	4620      	mov	r0, r4
 800a346:	f7fc fd0d 	bl	8006d64 <pbuf_header>
 800a34a:	2800      	cmp	r0, #0
 800a34c:	d1d5      	bne.n	800a2fa <ethernet_input+0x36>
        etharp_input(p, netif);
 800a34e:	4629      	mov	r1, r5
 800a350:	4620      	mov	r0, r4
 800a352:	f7fb f855 	bl	8005400 <etharp_input>
      break;
 800a356:	e7ed      	b.n	800a334 <ethernet_input+0x70>
 800a358:	0800d9be 	.word	0x0800d9be

0800a35c <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 800a35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a360:	460d      	mov	r5, r1
 800a362:	4604      	mov	r4, r0
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800a364:	f8bd 0018 	ldrh.w	r0, [sp, #24]
{
 800a368:	4616      	mov	r6, r2
 800a36a:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 800a36c:	f7f9 fe46 	bl	8003ffc <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a370:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 800a372:	4680      	mov	r8, r0
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 800a374:	4628      	mov	r0, r5
 800a376:	f7fc fcf5 	bl	8006d64 <pbuf_header>
 800a37a:	b9e0      	cbnz	r0, 800a3b6 <ethernet_output+0x5a>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 800a37c:	6869      	ldr	r1, [r5, #4]
  ethhdr->type = eth_type_be;
 800a37e:	f8a1 800c 	strh.w	r8, [r1, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	600b      	str	r3, [r1, #0]
 800a386:	88bb      	ldrh	r3, [r7, #4]
 800a388:	808b      	strh	r3, [r1, #4]
  ETHADDR16_COPY(&ethhdr->src,  src);
 800a38a:	6833      	ldr	r3, [r6, #0]
 800a38c:	f8c1 3006 	str.w	r3, [r1, #6]
 800a390:	88b3      	ldrh	r3, [r6, #4]
 800a392:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800a394:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a398:	2b06      	cmp	r3, #6
 800a39a:	d006      	beq.n	800a3aa <ethernet_output+0x4e>
 800a39c:	4b08      	ldr	r3, [pc, #32]	; (800a3c0 <ethernet_output+0x64>)
 800a39e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a3a2:	4908      	ldr	r1, [pc, #32]	; (800a3c4 <ethernet_output+0x68>)
 800a3a4:	4808      	ldr	r0, [pc, #32]	; (800a3c8 <ethernet_output+0x6c>)
 800a3a6:	f000 fef3 	bl	800b190 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800a3aa:	69a3      	ldr	r3, [r4, #24]
 800a3ac:	4629      	mov	r1, r5
 800a3ae:	4620      	mov	r0, r4
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 800a3b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 800a3b4:	4718      	bx	r3
}
 800a3b6:	f06f 0001 	mvn.w	r0, #1
 800a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3be:	bf00      	nop
 800a3c0:	0800d9c4 	.word	0x0800d9c4
 800a3c4:	0800d9f9 	.word	0x0800d9f9
 800a3c8:	0800c106 	.word	0x0800c106

0800a3cc <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 800a3cc:	b513      	push	{r0, r1, r4, lr}
  osMessageQDef(QUEUE, size, void *);
 800a3ce:	2304      	movs	r3, #4
{
 800a3d0:	4604      	mov	r4, r0
  osMessageQDef(QUEUE, size, void *);
 800a3d2:	9100      	str	r1, [sp, #0]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800a3d4:	4668      	mov	r0, sp
 800a3d6:	2100      	movs	r1, #0
  osMessageQDef(QUEUE, size, void *);
 800a3d8:	9301      	str	r3, [sp, #4]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 800a3da:	f7f8 f9bd 	bl	8002758 <osMessageCreate>
 800a3de:	6020      	str	r0, [r4, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 800a3e0:	fab0 f080 	clz	r0, r0
 800a3e4:	0940      	lsrs	r0, r0, #5
  return ERR_MEM;
 
 return ERR_OK;
}
 800a3e6:	4240      	negs	r0, r0
 800a3e8:	b002      	add	sp, #8
 800a3ea:	bd10      	pop	{r4, pc}

0800a3ec <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 800a3ec:	b538      	push	{r3, r4, r5, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 800a3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f6:	4629      	mov	r1, r5
 800a3f8:	6820      	ldr	r0, [r4, #0]
 800a3fa:	f7f8 f9b1 	bl	8002760 <osMessagePut>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	d1f7      	bne.n	800a3f2 <sys_mbox_post+0x6>
}
 800a402:	bd38      	pop	{r3, r4, r5, pc}

0800a404 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 800a404:	b508      	push	{r3, lr}
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 800a406:	2200      	movs	r2, #0
 800a408:	6800      	ldr	r0, [r0, #0]
 800a40a:	f7f8 f9a9 	bl	8002760 <osMessagePut>
 800a40e:	3000      	adds	r0, #0
 800a410:	bf18      	it	ne
 800a412:	2001      	movne	r0, #1
#endif /* SYS_STATS */
			
   }

   return result;
}
 800a414:	4240      	negs	r0, r0
 800a416:	bd08      	pop	{r3, pc}

0800a418 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 800a418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a41a:	4617      	mov	r7, r2
 800a41c:	b085      	sub	sp, #20
 800a41e:	4606      	mov	r6, r0
 800a420:	460d      	mov	r5, r1
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 800a422:	f7f8 f8e4 	bl	80025ee <osKernelSysTick>
 800a426:	4604      	mov	r4, r0
  
  if(timeout != 0)
 800a428:	b177      	cbz	r7, 800a448 <sys_arch_mbox_fetch+0x30>
  { 
    event = osMessageGet (*mbox, timeout);
 800a42a:	463a      	mov	r2, r7
 800a42c:	6831      	ldr	r1, [r6, #0]
 800a42e:	a801      	add	r0, sp, #4
 800a430:	f7f8 f9be 	bl	80027b0 <osMessageGet>
    
    if(event.status == osEventMessage)
 800a434:	9b01      	ldr	r3, [sp, #4]
 800a436:	2b10      	cmp	r3, #16
 800a438:	d10d      	bne.n	800a456 <sys_arch_mbox_fetch+0x3e>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
 800a43a:	9b02      	ldr	r3, [sp, #8]
 800a43c:	602b      	str	r3, [r5, #0]
    return (osKernelSysTick() - starttime);
 800a43e:	f7f8 f8d6 	bl	80025ee <osKernelSysTick>
 800a442:	1b00      	subs	r0, r0, r4
  }
}
 800a444:	b005      	add	sp, #20
 800a446:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 800a448:	f04f 32ff 	mov.w	r2, #4294967295
 800a44c:	6831      	ldr	r1, [r6, #0]
 800a44e:	a801      	add	r0, sp, #4
 800a450:	f7f8 f9ae 	bl	80027b0 <osMessageGet>
 800a454:	e7f1      	b.n	800a43a <sys_arch_mbox_fetch+0x22>
      return SYS_ARCH_TIMEOUT;
 800a456:	f04f 30ff 	mov.w	r0, #4294967295
 800a45a:	e7f3      	b.n	800a444 <sys_arch_mbox_fetch+0x2c>

0800a45c <sys_mbox_valid>:
 800a45c:	6800      	ldr	r0, [r0, #0]
 800a45e:	3000      	adds	r0, #0
 800a460:	bf18      	it	ne
 800a462:	2001      	movne	r0, #1
 800a464:	4770      	bx	lr
	...

0800a468 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 800a468:	b508      	push	{r3, lr}
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 800a46a:	4803      	ldr	r0, [pc, #12]	; (800a478 <sys_init+0x10>)
 800a46c:	f7f8 f8e6 	bl	800263c <osMutexCreate>
 800a470:	4b02      	ldr	r3, [pc, #8]	; (800a47c <sys_init+0x14>)
 800a472:	6018      	str	r0, [r3, #0]
 800a474:	bd08      	pop	{r3, pc}
 800a476:	bf00      	nop
 800a478:	0800da30 	.word	0x0800da30
 800a47c:	2000770c 	.word	0x2000770c

0800a480 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800a480:	b513      	push	{r0, r1, r4, lr}
  
  osMutexDef(MUTEX);
 800a482:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 800a484:	4604      	mov	r4, r0
  osMutexDef(MUTEX);
 800a486:	a802      	add	r0, sp, #8
 800a488:	f840 3d04 	str.w	r3, [r0, #-4]!
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 800a48c:	f7f8 f8d6 	bl	800263c <osMutexCreate>
 800a490:	6020      	str	r0, [r4, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 800a492:	fab0 f080 	clz	r0, r0
 800a496:	0940      	lsrs	r0, r0, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 800a498:	4240      	negs	r0, r0
 800a49a:	b002      	add	sp, #8
 800a49c:	bd10      	pop	{r4, pc}

0800a49e <sys_mutex_lock>:
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
  osMutexWait (*mutex, osWaitForever);
 800a49e:	f04f 31ff 	mov.w	r1, #4294967295
 800a4a2:	6800      	ldr	r0, [r0, #0]
 800a4a4:	f7f8 b8ce 	b.w	8002644 <osMutexWait>

0800a4a8 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 800a4a8:	6800      	ldr	r0, [r0, #0]
 800a4aa:	f7f8 b953 	b.w	8002754 <osMutexRelease>

0800a4ae <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 800a4ae:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800a4b0:	9102      	str	r1, [sp, #8]
 800a4b2:	9908      	ldr	r1, [sp, #32]
 800a4b4:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 800a4b6:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 800a4b8:	f8ad 100c 	strh.w	r1, [sp, #12]
 800a4bc:	2100      	movs	r1, #0
 800a4be:	9305      	str	r3, [sp, #20]
 800a4c0:	9104      	str	r1, [sp, #16]
  return osThreadCreate(&os_thread_def, arg);
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	f7f8 f89a 	bl	80025fc <osThreadCreate>
}
 800a4c8:	b007      	add	sp, #28
 800a4ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800a4d0 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 800a4d0:	b508      	push	{r3, lr}
  osMutexWait(lwip_sys_mutex, osWaitForever);
 800a4d2:	4b04      	ldr	r3, [pc, #16]	; (800a4e4 <sys_arch_protect+0x14>)
 800a4d4:	f04f 31ff 	mov.w	r1, #4294967295
 800a4d8:	6818      	ldr	r0, [r3, #0]
 800a4da:	f7f8 f8b3 	bl	8002644 <osMutexWait>
  return (sys_prot_t)1;
}
 800a4de:	2001      	movs	r0, #1
 800a4e0:	bd08      	pop	{r3, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2000770c 	.word	0x2000770c

0800a4e8 <sys_arch_unprotect>:
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <sys_arch_unprotect+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	f7f8 b932 	b.w	8002754 <osMutexRelease>
 800a4f0:	2000770c 	.word	0x2000770c

0800a4f4 <debug_init>:
	
}

void debug_init(UART_HandleTypeDef* handler)
{
	pUart = handler;
 800a4f4:	4b01      	ldr	r3, [pc, #4]	; (800a4fc <debug_init+0x8>)
 800a4f6:	6018      	str	r0, [r3, #0]
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20003f84 	.word	0x20003f84

0800a500 <debug_chr>:
{
	#if USE_HAL
	HAL_UART_Transmit(pUart,
	(uint8_t*)&chr, 1, 1000);
	#else
	while(__HAL_UART_GET_FLAG(pUart, UART_FLAG_TXE) == RESET) { ; }
 800a500:	4b03      	ldr	r3, [pc, #12]	; (800a510 <debug_chr+0x10>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	69da      	ldr	r2, [r3, #28]
 800a508:	0612      	lsls	r2, r2, #24
 800a50a:	d5fc      	bpl.n	800a506 <debug_chr+0x6>
	pUart->Instance->TDR = (uint16_t)chr;
 800a50c:	6298      	str	r0, [r3, #40]	; 0x28
 800a50e:	4770      	bx	lr
 800a510:	20003f84 	.word	0x20003f84

0800a514 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800a514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a518:	4a25      	ldr	r2, [pc, #148]	; (800a5b0 <low_level_output+0x9c>)
  uint32_t framelength = 0;
  uint32_t bufferoffset = 0;
  uint32_t byteslefttocopy = 0;
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;
 800a51a:	f04f 0800 	mov.w	r8, #0
{
 800a51e:	460c      	mov	r4, r1
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a520:	f240 5bf4 	movw	fp, #1524	; 0x5f4
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a524:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
  uint32_t framelength = 0;
 800a526:	4647      	mov	r7, r8
 800a528:	9200      	str	r2, [sp, #0]
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800a52a:	68ab      	ldr	r3, [r5, #8]
  for(q = p; q != NULL; q = q->next)
 800a52c:	b92c      	cbnz	r4, 800a53a <low_level_output+0x26>
      bufferoffset = bufferoffset + byteslefttocopy;
      framelength = framelength + byteslefttocopy;
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 800a52e:	4639      	mov	r1, r7
 800a530:	481f      	ldr	r0, [pc, #124]	; (800a5b0 <low_level_output+0x9c>)
 800a532:	f7f6 f9f9 	bl	8000928 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800a536:	4620      	mov	r0, r4
 800a538:	e004      	b.n	800a544 <low_level_output+0x30>
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a53a:	682a      	ldr	r2, [r5, #0]
 800a53c:	2a00      	cmp	r2, #0
 800a53e:	da11      	bge.n	800a564 <low_level_output+0x50>
        errval = ERR_USE;
 800a540:	f06f 0007 	mvn.w	r0, #7
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800a544:	9b00      	ldr	r3, [sp, #0]
 800a546:	f241 0214 	movw	r2, #4116	; 0x1014
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	5899      	ldr	r1, [r3, r2]
 800a54e:	0689      	lsls	r1, r1, #26
 800a550:	d505      	bpl.n	800a55e <low_level_output+0x4a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800a552:	2120      	movs	r1, #32
 800a554:	5099      	str	r1, [r3, r2]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800a556:	2100      	movs	r1, #0
 800a558:	f241 0204 	movw	r2, #4100	; 0x1004
 800a55c:	5099      	str	r1, [r3, r2]
  }
  return errval;
}
 800a55e:	b003      	add	sp, #12
 800a560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      byteslefttocopy = q->len;
 800a564:	f8b4 900a 	ldrh.w	r9, [r4, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a568:	4646      	mov	r6, r8
      payloadoffset = 0;
 800a56a:	f04f 0a00 	mov.w	sl, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800a56e:	eb06 0809 	add.w	r8, r6, r9
 800a572:	1998      	adds	r0, r3, r6
 800a574:	6861      	ldr	r1, [r4, #4]
 800a576:	45d8      	cmp	r8, fp
 800a578:	d808      	bhi.n	800a58c <low_level_output+0x78>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a57a:	464a      	mov	r2, r9
 800a57c:	4451      	add	r1, sl
 800a57e:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 800a580:	444f      	add	r7, r9
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800a582:	f000 fdf2 	bl	800b16a <memcpy>
  for(q = p; q != NULL; q = q->next)
 800a586:	6824      	ldr	r4, [r4, #0]
 800a588:	9b01      	ldr	r3, [sp, #4]
 800a58a:	e7cf      	b.n	800a52c <low_level_output+0x18>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800a58c:	ebab 0606 	sub.w	r6, fp, r6
 800a590:	4451      	add	r1, sl
 800a592:	4632      	mov	r2, r6
 800a594:	f000 fde9 	bl	800b16a <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800a598:	68ed      	ldr	r5, [r5, #12]
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800a59a:	682b      	ldr	r3, [r5, #0]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	dbcf      	blt.n	800a540 <low_level_output+0x2c>
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800a5a0:	44b2      	add	sl, r6
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800a5a2:	4437      	add	r7, r6
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800a5a4:	68ab      	ldr	r3, [r5, #8]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800a5a6:	f2a8 59f4 	subw	r9, r8, #1524	; 0x5f4
        bufferoffset = 0;
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	e7df      	b.n	800a56e <low_level_output+0x5a>
 800a5ae:	bf00      	nop
 800a5b0:	20008fe0 	.word	0x20008fe0

0800a5b4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 800a5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4682      	mov	sl, r0
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 800a5ba:	4c37      	ldr	r4, [pc, #220]	; (800a698 <ethernetif_input+0xe4>)
 800a5bc:	f04f 31ff 	mov.w	r1, #4294967295
 800a5c0:	6820      	ldr	r0, [r4, #0]
 800a5c2:	f7f8 f87b 	bl	80026bc <osSemaphoreWait>
 800a5c6:	2800      	cmp	r0, #0
 800a5c8:	d1f8      	bne.n	800a5bc <ethernetif_input+0x8>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800a5ca:	4c34      	ldr	r4, [pc, #208]	; (800a69c <ethernetif_input+0xe8>)
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	f7f6 fa1d 	bl	8000a0c <HAL_ETH_GetReceivedFrame_IT>
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	2800      	cmp	r0, #0
 800a5d6:	d1f0      	bne.n	800a5ba <ethernetif_input+0x6>
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a5d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
  len = heth.RxFrameInfos.length;
 800a5da:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800a5dc:	9301      	str	r3, [sp, #4]
  if (len > 0)
 800a5de:	bb01      	cbnz	r1, 800a622 <ethernetif_input+0x6e>
  struct pbuf *p = NULL;
 800a5e0:	2700      	movs	r7, #0
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a5e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800a5e8:	4282      	cmp	r2, r0
 800a5ea:	d14d      	bne.n	800a688 <ethernetif_input+0xd4>
    heth.RxFrameInfos.SegCount =0;  
 800a5ec:	2300      	movs	r3, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a5ee:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;  
 800a5f2:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800a5f4:	6823      	ldr	r3, [r4, #0]
 800a5f6:	5899      	ldr	r1, [r3, r2]
 800a5f8:	0609      	lsls	r1, r1, #24
 800a5fa:	d505      	bpl.n	800a608 <ethernetif_input+0x54>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800a5fc:	2180      	movs	r1, #128	; 0x80
 800a5fe:	5099      	str	r1, [r3, r2]
    heth.Instance->DMARPDR = 0;
 800a600:	f241 0208 	movw	r2, #4104	; 0x1008
 800a604:	2100      	movs	r1, #0
 800a606:	5099      	str	r1, [r3, r2]
    {
      do
      {   
        p = low_level_input( netif );
        if   (p != NULL)
 800a608:	2f00      	cmp	r7, #0
 800a60a:	d0d6      	beq.n	800a5ba <ethernetif_input+0x6>
        {
          if (netif->input( p, netif) != ERR_OK )
 800a60c:	f8da 3010 	ldr.w	r3, [sl, #16]
 800a610:	4651      	mov	r1, sl
 800a612:	4638      	mov	r0, r7
 800a614:	4798      	blx	r3
 800a616:	2800      	cmp	r0, #0
 800a618:	d0d7      	beq.n	800a5ca <ethernetif_input+0x16>
          {
            pbuf_free(p);
 800a61a:	4638      	mov	r0, r7
 800a61c:	f7fc fba8 	bl	8006d70 <pbuf_free>
 800a620:	e7d3      	b.n	800a5ca <ethernetif_input+0x16>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800a622:	2203      	movs	r2, #3
 800a624:	2004      	movs	r0, #4
 800a626:	f7fc fc0d 	bl	8006e44 <pbuf_alloc>
  if (p != NULL)
 800a62a:	4607      	mov	r7, r0
 800a62c:	2800      	cmp	r0, #0
 800a62e:	d0d7      	beq.n	800a5e0 <ethernetif_input+0x2c>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800a630:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 800a634:	4680      	mov	r8, r0
      byteslefttocopy = q->len;
 800a636:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800a63a:	462e      	mov	r6, r5
      payloadoffset = 0;
 800a63c:	f04f 0900 	mov.w	r9, #0
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800a640:	f240 53f4 	movw	r3, #1524	; 0x5f4
 800a644:	18b5      	adds	r5, r6, r2
 800a646:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a64a:	429d      	cmp	r5, r3
 800a64c:	9b01      	ldr	r3, [sp, #4]
 800a64e:	eb03 0106 	add.w	r1, r3, r6
 800a652:	d808      	bhi.n	800a666 <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800a654:	4448      	add	r0, r9
 800a656:	f000 fd88 	bl	800b16a <memcpy>
    for(q = p; q != NULL; q = q->next)
 800a65a:	f8d8 8000 	ldr.w	r8, [r8]
 800a65e:	f1b8 0f00 	cmp.w	r8, #0
 800a662:	d1e8      	bne.n	800a636 <ethernetif_input+0x82>
 800a664:	e7bd      	b.n	800a5e2 <ethernetif_input+0x2e>
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a666:	f5c6 66be 	rsb	r6, r6, #1520	; 0x5f0
 800a66a:	4448      	add	r0, r9
 800a66c:	3604      	adds	r6, #4
 800a66e:	4632      	mov	r2, r6
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800a670:	44b1      	add	r9, r6
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800a672:	f000 fd7a 	bl	800b16a <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a676:	f8db b00c 	ldr.w	fp, [fp, #12]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800a67a:	f2a5 52f4 	subw	r2, r5, #1524	; 0x5f4
        bufferoffset = 0;
 800a67e:	2600      	movs	r6, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800a680:	f8db 3008 	ldr.w	r3, [fp, #8]
 800a684:	9301      	str	r3, [sp, #4]
 800a686:	e7db      	b.n	800a640 <ethernetif_input+0x8c>
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a688:	6819      	ldr	r1, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800a68a:	3201      	adds	r2, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800a68c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 800a690:	6019      	str	r1, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800a692:	68db      	ldr	r3, [r3, #12]
 800a694:	e7a8      	b.n	800a5e8 <ethernetif_input+0x34>
 800a696:	bf00      	nop
 800a698:	20003f88 	.word	0x20003f88
 800a69c:	20008fe0 	.word	0x20008fe0

0800a6a0 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 800a6a0:	6802      	ldr	r2, [r0, #0]
 800a6a2:	4b2d      	ldr	r3, [pc, #180]	; (800a758 <HAL_ETH_MspInit+0xb8>)
 800a6a4:	429a      	cmp	r2, r3
{
 800a6a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6a8:	b089      	sub	sp, #36	; 0x24
  if(ethHandle->Instance==ETH)
 800a6aa:	d152      	bne.n	800a752 <HAL_ETH_MspInit+0xb2>
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6ac:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b0:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6b2:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6b4:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6b8:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6ba:	a903      	add	r1, sp, #12
 800a6bc:	4827      	ldr	r0, [pc, #156]	; (800a75c <HAL_ETH_MspInit+0xbc>)
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6be:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800a6c2:	631a      	str	r2, [r3, #48]	; 0x30
 800a6c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6c6:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 800a6ca:	9200      	str	r2, [sp, #0]
 800a6cc:	9a00      	ldr	r2, [sp, #0]
 800a6ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6d0:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800a6d4:	631a      	str	r2, [r3, #48]	; 0x30
 800a6d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6d8:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800a6dc:	9201      	str	r2, [sp, #4]
 800a6de:	9a01      	ldr	r2, [sp, #4]
 800a6e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6e2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800a6e6:	631a      	str	r2, [r3, #48]	; 0x30
 800a6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6ea:	9704      	str	r7, [sp, #16]
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6f0:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6f2:	9606      	str	r6, [sp, #24]
    __HAL_RCC_ETH_CLK_ENABLE();
 800a6f4:	9302      	str	r3, [sp, #8]
 800a6f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a6f8:	2332      	movs	r3, #50	; 0x32
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a6fa:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800a6fc:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6fe:	f7f6 fbad 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a702:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a704:	a903      	add	r1, sp, #12
 800a706:	4816      	ldr	r0, [pc, #88]	; (800a760 <HAL_ETH_MspInit+0xc0>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800a708:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a70a:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a70c:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a70e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a710:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a712:	f7f6 fba3 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a71a:	a903      	add	r1, sp, #12
 800a71c:	4811      	ldr	r0, [pc, #68]	; (800a764 <HAL_ETH_MspInit+0xc4>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800a71e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a720:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a722:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a724:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a726:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800a728:	f7f6 fb98 	bl	8000e5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a72c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a730:	a903      	add	r1, sp, #12
 800a732:	480d      	ldr	r0, [pc, #52]	; (800a768 <HAL_ETH_MspInit+0xc8>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800a734:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a736:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a738:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a73a:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800a73c:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800a73e:	f7f6 fb8d 	bl	8000e5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800a742:	203d      	movs	r0, #61	; 0x3d
 800a744:	4622      	mov	r2, r4
 800a746:	2105      	movs	r1, #5
 800a748:	f7f5 ff7c 	bl	8000644 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800a74c:	203d      	movs	r0, #61	; 0x3d
 800a74e:	f7f5 ffb1 	bl	80006b4 <HAL_NVIC_EnableIRQ>
}
 800a752:	b009      	add	sp, #36	; 0x24
 800a754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a756:	bf00      	nop
 800a758:	40028000 	.word	0x40028000
 800a75c:	40020800 	.word	0x40020800
 800a760:	40020000 	.word	0x40020000
 800a764:	40020400 	.word	0x40020400
 800a768:	40021800 	.word	0x40021800

0800a76c <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 800a76c:	4b01      	ldr	r3, [pc, #4]	; (800a774 <HAL_ETH_RxCpltCallback+0x8>)
 800a76e:	6818      	ldr	r0, [r3, #0]
 800a770:	f7f7 bfcc 	b.w	800270c <osSemaphoreRelease>
 800a774:	20003f88 	.word	0x20003f88

0800a778 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800a778:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a77a:	4604      	mov	r4, r0
{
 800a77c:	b08b      	sub	sp, #44	; 0x2c
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800a77e:	b930      	cbnz	r0, 800a78e <ethernetif_init+0x16>
 800a780:	4b46      	ldr	r3, [pc, #280]	; (800a89c <ethernetif_init+0x124>)
 800a782:	f240 2247 	movw	r2, #583	; 0x247
 800a786:	4946      	ldr	r1, [pc, #280]	; (800a8a0 <ethernetif_init+0x128>)
 800a788:	4846      	ldr	r0, [pc, #280]	; (800a8a4 <ethernetif_init+0x12c>)
 800a78a:	f000 fd01 	bl	800b190 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800a78e:	2373      	movs	r3, #115	; 0x73
  MACAddr[1] = 0x80;
 800a790:	2180      	movs	r1, #128	; 0x80
  heth.Instance = ETH;
 800a792:	4d45      	ldr	r5, [pc, #276]	; (800a8a8 <ethernetif_init+0x130>)
  netif->name[0] = IFNAME0;
 800a794:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  netif->name[1] = IFNAME1;
 800a798:	2374      	movs	r3, #116	; 0x74
  heth.Instance = ETH;
 800a79a:	4a44      	ldr	r2, [pc, #272]	; (800a8ac <ethernetif_init+0x134>)
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a79c:	4628      	mov	r0, r5
  netif->name[1] = IFNAME1;
 800a79e:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800a7a2:	4b43      	ldr	r3, [pc, #268]	; (800a8b0 <ethernetif_init+0x138>)
  MACAddr[1] = 0x80;
 800a7a4:	f88d 100d 	strb.w	r1, [sp, #13]
  MACAddr[2] = 0xE1;
 800a7a8:	21e1      	movs	r1, #225	; 0xe1
  netif->output = etharp_output;
 800a7aa:	6163      	str	r3, [r4, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800a7ac:	4b41      	ldr	r3, [pc, #260]	; (800a8b4 <ethernetif_init+0x13c>)
  heth.Instance = ETH;
 800a7ae:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a7b0:	2201      	movs	r2, #1
  netif->linkoutput = low_level_output;
 800a7b2:	61a3      	str	r3, [r4, #24]
  uint32_t regvalue = 0;
 800a7b4:	2300      	movs	r3, #0
  MACAddr[2] = 0xE1;
 800a7b6:	f88d 100e 	strb.w	r1, [sp, #14]
  heth.Init.MACAddr = &MACAddr[0];
 800a7ba:	a903      	add	r1, sp, #12
  uint32_t regvalue = 0;
 800a7bc:	9301      	str	r3, [sp, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800a7be:	822b      	strh	r3, [r5, #16]
  MACAddr[0] = 0x00;
 800a7c0:	f88d 300c 	strb.w	r3, [sp, #12]
  MACAddr[3] = 0x00;
 800a7c4:	f88d 300f 	strb.w	r3, [sp, #15]
  MACAddr[4] = 0x00;
 800a7c8:	f88d 3010 	strb.w	r3, [sp, #16]
  MACAddr[5] = 0x00;
 800a7cc:	f88d 3011 	strb.w	r3, [sp, #17]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800a7d0:	61eb      	str	r3, [r5, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a7d2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800a7d6:	606a      	str	r2, [r5, #4]
  heth.Init.MACAddr = &MACAddr[0];
 800a7d8:	6169      	str	r1, [r5, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800a7da:	61aa      	str	r2, [r5, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800a7dc:	622b      	str	r3, [r5, #32]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 800a7de:	f7f6 fa05 	bl	8000bec <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 800a7e2:	b928      	cbnz	r0, 800a7f0 <ethernetif_init+0x78>
    netif->flags |= NETIF_FLAG_LINK_UP;
 800a7e4:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800a7e8:	f043 0304 	orr.w	r3, r3, #4
 800a7ec:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a7f0:	2304      	movs	r3, #4
 800a7f2:	4a31      	ldr	r2, [pc, #196]	; (800a8b8 <ethernetif_init+0x140>)
 800a7f4:	4931      	ldr	r1, [pc, #196]	; (800a8bc <ethernetif_init+0x144>)
  osSemaphoreDef(SEM);
 800a7f6:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800a7f8:	482b      	ldr	r0, [pc, #172]	; (800a8a8 <ethernetif_init+0x130>)
 800a7fa:	f7f6 f81b 	bl	8000834 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800a7fe:	2304      	movs	r3, #4
 800a800:	4a2f      	ldr	r2, [pc, #188]	; (800a8c0 <ethernetif_init+0x148>)
 800a802:	4930      	ldr	r1, [pc, #192]	; (800a8c4 <ethernetif_init+0x14c>)
 800a804:	4828      	ldr	r0, [pc, #160]	; (800a8a8 <ethernetif_init+0x130>)
 800a806:	f7f6 f852 	bl	80008ae <HAL_ETH_DMARxDescListInit>
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a80a:	2306      	movs	r3, #6
  osSemaphoreDef(SEM);
 800a80c:	a80a      	add	r0, sp, #40	; 0x28
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a80e:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800a810:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a814:	696b      	ldr	r3, [r5, #20]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a816:	ad05      	add	r5, sp, #20
 800a818:	4e2b      	ldr	r6, [pc, #172]	; (800a8c8 <ethernetif_init+0x150>)
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800a81a:	781a      	ldrb	r2, [r3, #0]
 800a81c:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800a820:	785a      	ldrb	r2, [r3, #1]
 800a822:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800a826:	789a      	ldrb	r2, [r3, #2]
 800a828:	f884 202b 	strb.w	r2, [r4, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a82c:	78da      	ldrb	r2, [r3, #3]
  osSemaphoreDef(SEM);
 800a82e:	f840 7d20 	str.w	r7, [r0, #-32]!
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800a832:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800a836:	791a      	ldrb	r2, [r3, #4]
 800a838:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800a83c:	795b      	ldrb	r3, [r3, #5]
 800a83e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
  netif->mtu = 1500;
 800a842:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800a846:	84e3      	strh	r3, [r4, #38]	; 0x26
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800a848:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800a84c:	f043 030a 	orr.w	r3, r3, #10
 800a850:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 800a854:	f7f7 ff1e 	bl	8002694 <osSemaphoreCreate>
 800a858:	4b1c      	ldr	r3, [pc, #112]	; (800a8cc <ethernetif_init+0x154>)
 800a85a:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a85c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800a85e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a860:	6833      	ldr	r3, [r6, #0]
  osThreadCreate (osThread(EthIf), netif);
 800a862:	4621      	mov	r1, r4
 800a864:	a805      	add	r0, sp, #20
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800a866:	602b      	str	r3, [r5, #0]
  osThreadCreate (osThread(EthIf), netif);
 800a868:	f7f7 fec8 	bl	80025fc <osThreadCreate>
  HAL_ETH_Start(&heth);
 800a86c:	480e      	ldr	r0, [pc, #56]	; (800a8a8 <ethernetif_init+0x130>)
 800a86e:	f7f6 fab7 	bl	8000de0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800a872:	aa01      	add	r2, sp, #4
 800a874:	210b      	movs	r1, #11
 800a876:	480c      	ldr	r0, [pc, #48]	; (800a8a8 <ethernetif_init+0x130>)
 800a878:	f7f6 f947 	bl	8000b0a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800a87c:	9a01      	ldr	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a87e:	210b      	movs	r1, #11
 800a880:	4809      	ldr	r0, [pc, #36]	; (800a8a8 <ethernetif_init+0x130>)
  regvalue |= (PHY_ISFR_INT4);
 800a882:	f042 020b 	orr.w	r2, r2, #11
 800a886:	9201      	str	r2, [sp, #4]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800a888:	f7f6 f979 	bl	8000b7e <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800a88c:	aa01      	add	r2, sp, #4
 800a88e:	210b      	movs	r1, #11
 800a890:	4805      	ldr	r0, [pc, #20]	; (800a8a8 <ethernetif_init+0x130>)
 800a892:	f7f6 f93a 	bl	8000b0a <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 800a896:	4638      	mov	r0, r7
 800a898:	b00b      	add	sp, #44	; 0x2c
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	0800da34 	.word	0x0800da34
 800a8a0:	0800c139 	.word	0x0800c139
 800a8a4:	0800c106 	.word	0x0800c106
 800a8a8:	20008fe0 	.word	0x20008fe0
 800a8ac:	40028000 	.word	0x40028000
 800a8b0:	080057d5 	.word	0x080057d5
 800a8b4:	0800a515 	.word	0x0800a515
 800a8b8:	20009028 	.word	0x20009028
 800a8bc:	20007710 	.word	0x20007710
 800a8c0:	20007790 	.word	0x20007790
 800a8c4:	20008f60 	.word	0x20008f60
 800a8c8:	0800c01c 	.word	0x0800c01c
 800a8cc:	20003f88 	.word	0x20003f88

0800a8d0 <sys_now>:
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
  return HAL_GetTick();
 800a8d0:	f7f5 be8e 	b.w	80005f0 <HAL_GetTick>

0800a8d4 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800a8d4:	2100      	movs	r1, #0
{
 800a8d6:	b530      	push	{r4, r5, lr}
  tcpip_init( NULL, NULL );
 800a8d8:	4608      	mov	r0, r1
{
 800a8da:	b085      	sub	sp, #20
  tcpip_init( NULL, NULL );
 800a8dc:	f7f9 fb4e 	bl	8003f7c <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a8e0:	4d11      	ldr	r5, [pc, #68]	; (800a928 <MX_LWIP_Init+0x54>)
  ipaddr.addr = 0;
 800a8e2:	2000      	movs	r0, #0
  gw.addr = 0;
 800a8e4:	4b11      	ldr	r3, [pc, #68]	; (800a92c <MX_LWIP_Init+0x58>)
  ipaddr.addr = 0;
 800a8e6:	4912      	ldr	r1, [pc, #72]	; (800a930 <MX_LWIP_Init+0x5c>)
  netmask.addr = 0;
 800a8e8:	4a12      	ldr	r2, [pc, #72]	; (800a934 <MX_LWIP_Init+0x60>)
  gw.addr = 0;
 800a8ea:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 800a8ec:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 800a8ee:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800a8f0:	4c11      	ldr	r4, [pc, #68]	; (800a938 <MX_LWIP_Init+0x64>)
 800a8f2:	9502      	str	r5, [sp, #8]
 800a8f4:	4d11      	ldr	r5, [pc, #68]	; (800a93c <MX_LWIP_Init+0x68>)
 800a8f6:	e88d 0021 	stmia.w	sp, {r0, r5}
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f7fc f914 	bl	8006b28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800a900:	4620      	mov	r0, r4
 800a902:	f7fc f94f 	bl	8006ba4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800a906:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800a90a:	4620      	mov	r0, r4
  if (netif_is_link_up(&gnetif))
 800a90c:	075b      	lsls	r3, r3, #29
 800a90e:	d507      	bpl.n	800a920 <MX_LWIP_Init+0x4c>
    netif_set_up(&gnetif);
 800a910:	f7fc f94e 	bl	8006bb0 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800a914:	4808      	ldr	r0, [pc, #32]	; (800a938 <MX_LWIP_Init+0x64>)

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800a916:	b005      	add	sp, #20
 800a918:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  dhcp_start(&gnetif);
 800a91c:	f7fa baa8 	b.w	8004e70 <dhcp_start>
    netif_set_down(&gnetif);
 800a920:	f7fc f955 	bl	8006bce <netif_set_down>
 800a924:	e7f6      	b.n	800a914 <MX_LWIP_Init+0x40>
 800a926:	bf00      	nop
 800a928:	08003f01 	.word	0x08003f01
 800a92c:	2000a834 	.word	0x2000a834
 800a930:	2000a82c 	.word	0x2000a82c
 800a934:	2000a830 	.word	0x2000a830
 800a938:	2000a7f8 	.word	0x2000a7f8
 800a93c:	0800a779 	.word	0x0800a779

0800a940 <StartDefaultTask>:
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800a940:	4c0c      	ldr	r4, [pc, #48]	; (800a974 <StartDefaultTask+0x34>)
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
	xprintf("XDD");
 800a942:	4d0d      	ldr	r5, [pc, #52]	; (800a978 <StartDefaultTask+0x38>)
{
 800a944:	b508      	push	{r3, lr}
  MX_LWIP_Init();
 800a946:	f7ff ffc5 	bl	800a8d4 <MX_LWIP_Init>
    osDelay(400);
 800a94a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800a94e:	f7f7 fe6d 	bl	800262c <osDelay>
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800a952:	4620      	mov	r0, r4
 800a954:	2101      	movs	r1, #1
 800a956:	f7f6 fb70 	bl	800103a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800a95a:	4620      	mov	r0, r4
 800a95c:	2180      	movs	r1, #128	; 0x80
 800a95e:	f7f6 fb6c 	bl	800103a <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800a962:	4620      	mov	r0, r4
 800a964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a968:	f7f6 fb67 	bl	800103a <HAL_GPIO_TogglePin>
	xprintf("XDD");
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 fb3b 	bl	800afe8 <xprintf>
 800a972:	e7ea      	b.n	800a94a <StartDefaultTask+0xa>
 800a974:	40020400 	.word	0x40020400
 800a978:	0800da4e 	.word	0x0800da4e

0800a97c <SystemClock_Config>:
  __HAL_RCC_PWR_CLK_ENABLE();
 800a97c:	4b2c      	ldr	r3, [pc, #176]	; (800aa30 <SystemClock_Config+0xb4>)
 800a97e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a980:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800a984:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800a986:	641a      	str	r2, [r3, #64]	; 0x40
{
 800a988:	b0b4      	sub	sp, #208	; 0xd0
  __HAL_RCC_PWR_CLK_ENABLE();
 800a98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a98c:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a98e:	4a29      	ldr	r2, [pc, #164]	; (800aa34 <SystemClock_Config+0xb8>)
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a990:	2604      	movs	r6, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800a992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a996:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 800a998:	9300      	str	r3, [sp, #0]
 800a99a:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a99c:	6813      	ldr	r3, [r2, #0]
 800a99e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a9a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a9a6:	6013      	str	r3, [r2, #0]
 800a9a8:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a9aa:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a9ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a9b0:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a9b2:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800a9b4:	9301      	str	r3, [sp, #4]
 800a9b6:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	9307      	str	r3, [sp, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800a9bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800a9c0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a9c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a9c6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 72;
 800a9c8:	2348      	movs	r3, #72	; 0x48
 800a9ca:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800a9cc:	2303      	movs	r3, #3
 800a9ce:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a9d0:	f7f6 fbbe 	bl	8001150 <HAL_RCC_OscConfig>
 800a9d4:	b100      	cbz	r0, 800a9d8 <SystemClock_Config+0x5c>
 800a9d6:	e7fe      	b.n	800a9d6 <SystemClock_Config+0x5a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9d8:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a9da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a9de:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a9e0:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a9e2:	9006      	str	r0, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a9e4:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a9e6:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a9e8:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a9ea:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a9ec:	f7f6 fd72 	bl	80014d4 <HAL_RCC_ClockConfig>
 800a9f0:	b100      	cbz	r0, 800a9f4 <SystemClock_Config+0x78>
 800a9f2:	e7fe      	b.n	800a9f2 <SystemClock_Config+0x76>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800a9f4:	4b10      	ldr	r3, [pc, #64]	; (800aa38 <SystemClock_Config+0xbc>)
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a9f6:	9026      	str	r0, [sp, #152]	; 0x98
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800a9f8:	9032      	str	r0, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a9fa:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 800a9fc:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a9fe:	f7f6 fe4b 	bl	8001698 <HAL_RCCEx_PeriphCLKConfig>
 800aa02:	4604      	mov	r4, r0
 800aa04:	b100      	cbz	r0, 800aa08 <SystemClock_Config+0x8c>
 800aa06:	e7fe      	b.n	800aa06 <SystemClock_Config+0x8a>
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800aa08:	f7f6 fe02 	bl	8001610 <HAL_RCC_GetHCLKFreq>
 800aa0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aa10:	fbb0 f0f3 	udiv	r0, r0, r3
 800aa14:	f7f5 fe5a 	bl	80006cc <HAL_SYSTICK_Config>
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800aa18:	4630      	mov	r0, r6
 800aa1a:	f7f5 fe6d 	bl	80006f8 <HAL_SYSTICK_CLKSourceConfig>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800aa1e:	4622      	mov	r2, r4
 800aa20:	4629      	mov	r1, r5
 800aa22:	f04f 30ff 	mov.w	r0, #4294967295
 800aa26:	f7f5 fe0d 	bl	8000644 <HAL_NVIC_SetPriority>
}
 800aa2a:	b034      	add	sp, #208	; 0xd0
 800aa2c:	bd70      	pop	{r4, r5, r6, pc}
 800aa2e:	bf00      	nop
 800aa30:	40023800 	.word	0x40023800
 800aa34:	40007000 	.word	0x40007000
 800aa38:	00200100 	.word	0x00200100

0800aa3c <main>:
{
 800aa3c:	b500      	push	{lr}
 800aa3e:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa40:	2400      	movs	r4, #0
  HAL_Init();
 800aa42:	f7f5 fdbd 	bl	80005c0 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aa46:	2601      	movs	r6, #1
  SystemClock_Config();
 800aa48:	f7ff ff98 	bl	800a97c <SystemClock_Config>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa4c:	4b61      	ldr	r3, [pc, #388]	; (800abd4 <main+0x198>)
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800aa4e:	f244 0181 	movw	r1, #16513	; 0x4081
 800aa52:	4861      	ldr	r0, [pc, #388]	; (800abd8 <main+0x19c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  huart3.Instance = USART3;
 800aa56:	4d61      	ldr	r5, [pc, #388]	; (800abdc <main+0x1a0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa58:	f042 0204 	orr.w	r2, r2, #4
 800aa5c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa60:	f002 0204 	and.w	r2, r2, #4
 800aa64:	9201      	str	r2, [sp, #4]
 800aa66:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800aa68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa6a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa6e:	631a      	str	r2, [r3, #48]	; 0x30
 800aa70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa72:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800aa76:	9202      	str	r2, [sp, #8]
 800aa78:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa7c:	f042 0201 	orr.w	r2, r2, #1
 800aa80:	631a      	str	r2, [r3, #48]	; 0x30
 800aa82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa84:	f002 0201 	and.w	r2, r2, #1
 800aa88:	9203      	str	r2, [sp, #12]
 800aa8a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800aa8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa8e:	f042 0202 	orr.w	r2, r2, #2
 800aa92:	631a      	str	r2, [r3, #48]	; 0x30
 800aa94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa96:	f002 0202 	and.w	r2, r2, #2
 800aa9a:	9204      	str	r2, [sp, #16]
 800aa9c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800aa9e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaa0:	f042 0208 	orr.w	r2, r2, #8
 800aaa4:	631a      	str	r2, [r3, #48]	; 0x30
 800aaa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aaa8:	f002 0208 	and.w	r2, r2, #8
 800aaac:	9205      	str	r2, [sp, #20]
 800aaae:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aab0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aab2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aab6:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800aab8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800aaba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aabc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac0:	9306      	str	r3, [sp, #24]
 800aac2:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800aac4:	f7f6 fab4 	bl	8001030 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800aac8:	2200      	movs	r2, #0
 800aaca:	2140      	movs	r1, #64	; 0x40
 800aacc:	4844      	ldr	r0, [pc, #272]	; (800abe0 <main+0x1a4>)
 800aace:	f7f6 faaf 	bl	8001030 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800aad2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800aad6:	a907      	add	r1, sp, #28
 800aad8:	4842      	ldr	r0, [pc, #264]	; (800abe4 <main+0x1a8>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800aada:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800aadc:	4b42      	ldr	r3, [pc, #264]	; (800abe8 <main+0x1ac>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aade:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800aae0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800aae2:	f7f6 f9bb 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800aae6:	f244 0381 	movw	r3, #16513	; 0x4081
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaea:	a907      	add	r1, sp, #28
 800aaec:	483a      	ldr	r0, [pc, #232]	; (800abd8 <main+0x19c>)
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800aaee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800aaf0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aaf2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aaf4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaf6:	f7f6 f9b1 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800aafa:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800aafc:	a907      	add	r1, sp, #28
 800aafe:	4838      	ldr	r0, [pc, #224]	; (800abe0 <main+0x1a4>)
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800ab00:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800ab02:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab04:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ab06:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800ab08:	f7f6 f9a8 	bl	8000e5c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800ab0c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ab0e:	4834      	ldr	r0, [pc, #208]	; (800abe0 <main+0x1a4>)
 800ab10:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ab12:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800ab14:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab16:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800ab18:	f7f6 f9a0 	bl	8000e5c <HAL_GPIO_Init>
  huart3.Init.BaudRate = 115200;
 800ab1c:	4b33      	ldr	r3, [pc, #204]	; (800abec <main+0x1b0>)
 800ab1e:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ab22:	4628      	mov	r0, r5
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ab24:	60ac      	str	r4, [r5, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ab26:	60ec      	str	r4, [r5, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800ab28:	612c      	str	r4, [r5, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ab2a:	61ac      	str	r4, [r5, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800ab2c:	61ec      	str	r4, [r5, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800ab2e:	622c      	str	r4, [r5, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800ab30:	626c      	str	r4, [r5, #36]	; 0x24
  huart3.Init.BaudRate = 115200;
 800ab32:	e885 4008 	stmia.w	r5, {r3, lr}
  huart3.Init.Mode = UART_MODE_TX_RX;
 800ab36:	230c      	movs	r3, #12
 800ab38:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800ab3a:	f7f7 fbc2 	bl	80022c2 <HAL_UART_Init>
 800ab3e:	b100      	cbz	r0, 800ab42 <main+0x106>
 800ab40:	e7fe      	b.n	800ab40 <main+0x104>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ab42:	4b2b      	ldr	r3, [pc, #172]	; (800abf0 <main+0x1b4>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab44:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800ab48:	2406      	movs	r4, #6
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ab4a:	6118      	str	r0, [r3, #16]
  hpcd_USB_OTG_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800ab4c:	6158      	str	r0, [r3, #20]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ab4e:	6218      	str	r0, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab50:	6258      	str	r0, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab52:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab54:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ab56:	61de      	str	r6, [r3, #28]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ab58:	62de      	str	r6, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800ab5a:	e883 0014 	stmia.w	r3, {r2, r4}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ab5e:	2202      	movs	r2, #2
 800ab60:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ab62:	619a      	str	r2, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab64:	f7f6 fa6d 	bl	8001042 <HAL_PCD_Init>
 800ab68:	b100      	cbz	r0, 800ab6c <main+0x130>
 800ab6a:	e7fe      	b.n	800ab6a <main+0x12e>
  hspi1.Instance = SPI1;
 800ab6c:	4b21      	ldr	r3, [pc, #132]	; (800abf4 <main+0x1b8>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab6e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800ab72:	4921      	ldr	r1, [pc, #132]	; (800abf8 <main+0x1bc>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800ab74:	6098      	str	r0, [r3, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800ab76:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800ab78:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ab7a:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800ab7c:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800ab7e:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ab80:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800ab82:	6318      	str	r0, [r3, #48]	; 0x30
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab84:	4618      	mov	r0, r3
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800ab86:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800ab8a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800ab8e:	60da      	str	r2, [r3, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800ab90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab94:	619a      	str	r2, [r3, #24]
  hspi1.Init.CRCPolynomial = 7;
 800ab96:	2207      	movs	r2, #7
 800ab98:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800ab9a:	2208      	movs	r2, #8
 800ab9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800ab9e:	f7f7 f805 	bl	8001bac <HAL_SPI_Init>
 800aba2:	4606      	mov	r6, r0
 800aba4:	b100      	cbz	r0, 800aba8 <main+0x16c>
 800aba6:	e7fe      	b.n	800aba6 <main+0x16a>
  debug_init(&huart3);
 800aba8:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800abaa:	4d14      	ldr	r5, [pc, #80]	; (800abfc <main+0x1c0>)
  debug_init(&huart3);
 800abac:	f7ff fca2 	bl	800a4f4 <debug_init>
  xprintf("dziala!!!\n");
 800abb0:	4813      	ldr	r0, [pc, #76]	; (800ac00 <main+0x1c4>)
 800abb2:	f000 fa19 	bl	800afe8 <xprintf>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800abb6:	ac07      	add	r4, sp, #28
 800abb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abbc:	682b      	ldr	r3, [r5, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800abbe:	4631      	mov	r1, r6
 800abc0:	a807      	add	r0, sp, #28
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800abc2:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800abc4:	f7f7 fd1a 	bl	80025fc <osThreadCreate>
 800abc8:	4b0e      	ldr	r3, [pc, #56]	; (800ac04 <main+0x1c8>)
 800abca:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800abcc:	f7f7 fd0a 	bl	80025e4 <osKernelStart>
 800abd0:	e7fe      	b.n	800abd0 <main+0x194>
 800abd2:	bf00      	nop
 800abd4:	40023800 	.word	0x40023800
 800abd8:	40020400 	.word	0x40020400
 800abdc:	2000a83c 	.word	0x2000a83c
 800abe0:	40021800 	.word	0x40021800
 800abe4:	40020800 	.word	0x40020800
 800abe8:	10110000 	.word	0x10110000
 800abec:	40004800 	.word	0x40004800
 800abf0:	2000a8ac 	.word	0x2000a8ac
 800abf4:	2000acac 	.word	0x2000acac
 800abf8:	40013000 	.word	0x40013000
 800abfc:	0800c030 	.word	0x0800c030
 800ac00:	0800da52 	.word	0x0800da52
 800ac04:	2000a838 	.word	0x2000a838

0800ac08 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800ac08:	6802      	ldr	r2, [r0, #0]
 800ac0a:	4b03      	ldr	r3, [pc, #12]	; (800ac18 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d101      	bne.n	800ac14 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 800ac10:	f7f5 bce2 	b.w	80005d8 <HAL_IncTick>
 800ac14:	4770      	bx	lr
 800ac16:	bf00      	nop
 800ac18:	40010000 	.word	0x40010000

0800ac1c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800ac1c:	4b21      	ldr	r3, [pc, #132]	; (800aca4 <HAL_MspInit+0x88>)
{
 800ac1e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac22:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 800ac24:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800ac28:	641a      	str	r2, [r3, #64]	; 0x40
 800ac2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ac2c:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800ac30:	9200      	str	r2, [sp, #0]
 800ac32:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ac34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ac3a:	645a      	str	r2, [r3, #68]	; 0x44
 800ac3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ac42:	9301      	str	r3, [sp, #4]
 800ac44:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800ac46:	f7f5 fceb 	bl	8000620 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f06f 000b 	mvn.w	r0, #11
 800ac50:	4611      	mov	r1, r2
 800ac52:	f7f5 fcf7 	bl	8000644 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 800ac56:	2200      	movs	r2, #0
 800ac58:	f06f 000a 	mvn.w	r0, #10
 800ac5c:	4611      	mov	r1, r2
 800ac5e:	f7f5 fcf1 	bl	8000644 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 800ac62:	2200      	movs	r2, #0
 800ac64:	f06f 0009 	mvn.w	r0, #9
 800ac68:	4611      	mov	r1, r2
 800ac6a:	f7f5 fceb 	bl	8000644 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f06f 0004 	mvn.w	r0, #4
 800ac74:	4611      	mov	r1, r2
 800ac76:	f7f5 fce5 	bl	8000644 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	f06f 0003 	mvn.w	r0, #3
 800ac80:	4611      	mov	r1, r2
 800ac82:	f7f5 fcdf 	bl	8000644 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800ac86:	2200      	movs	r2, #0
 800ac88:	210f      	movs	r1, #15
 800ac8a:	f06f 0001 	mvn.w	r0, #1
 800ac8e:	f7f5 fcd9 	bl	8000644 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 800ac92:	2200      	movs	r2, #0
 800ac94:	210f      	movs	r1, #15
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	f7f5 fcd3 	bl	8000644 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ac9e:	b003      	add	sp, #12
 800aca0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aca4:	40023800 	.word	0x40023800

0800aca8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 800aca8:	6802      	ldr	r2, [r0, #0]
 800acaa:	4b15      	ldr	r3, [pc, #84]	; (800ad00 <HAL_SPI_MspInit+0x58>)
 800acac:	429a      	cmp	r2, r3
{
 800acae:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acb0:	b087      	sub	sp, #28
  if(hspi->Instance==SPI1)
 800acb2:	d122      	bne.n	800acfa <HAL_SPI_MspInit+0x52>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acb4:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acb8:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acba:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acbc:	2503      	movs	r5, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800acc0:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800acc2:	a901      	add	r1, sp, #4
 800acc4:	480f      	ldr	r0, [pc, #60]	; (800ad04 <HAL_SPI_MspInit+0x5c>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800acca:	645a      	str	r2, [r3, #68]	; 0x44
 800accc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acce:	9702      	str	r7, [sp, #8]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acd0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acd4:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acd6:	9504      	str	r5, [sp, #16]
    __HAL_RCC_SPI1_CLK_ENABLE();
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800acdc:	2360      	movs	r3, #96	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800acde:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ace0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ace2:	f7f6 f8bb 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800ace6:	2320      	movs	r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ace8:	a901      	add	r1, sp, #4
 800acea:	4807      	ldr	r0, [pc, #28]	; (800ad08 <HAL_SPI_MspInit+0x60>)
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800acec:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800acee:	9702      	str	r7, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800acf0:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800acf2:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800acf4:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800acf6:	f7f6 f8b1 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800acfa:	b007      	add	sp, #28
 800acfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acfe:	bf00      	nop
 800ad00:	40013000 	.word	0x40013000
 800ad04:	40020000 	.word	0x40020000
 800ad08:	40020400 	.word	0x40020400

0800ad0c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ad0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART3)
 800ad0e:	6802      	ldr	r2, [r0, #0]
 800ad10:	4b0f      	ldr	r3, [pc, #60]	; (800ad50 <HAL_UART_MspInit+0x44>)
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d119      	bne.n	800ad4a <HAL_UART_MspInit+0x3e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800ad16:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ad1a:	a901      	add	r1, sp, #4
 800ad1c:	480d      	ldr	r0, [pc, #52]	; (800ad54 <HAL_UART_MspInit+0x48>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800ad1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad20:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800ad24:	641a      	str	r2, [r3, #64]	; 0x40
 800ad26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad2c:	9300      	str	r3, [sp, #0]
 800ad2e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800ad30:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad34:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad36:	2302      	movs	r3, #2
 800ad38:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad3e:	2303      	movs	r3, #3
 800ad40:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ad42:	2307      	movs	r3, #7
 800ad44:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ad46:	f7f6 f889 	bl	8000e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800ad4a:	b007      	add	sp, #28
 800ad4c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ad50:	40004800 	.word	0x40004800
 800ad54:	40020c00 	.word	0x40020c00

0800ad58 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hpcd->Instance==USB_OTG_FS)
 800ad58:	6803      	ldr	r3, [r0, #0]
 800ad5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 800ad5e:	b510      	push	{r4, lr}
 800ad60:	b088      	sub	sp, #32
  if(hpcd->Instance==USB_OTG_FS)
 800ad62:	d12a      	bne.n	800adba <HAL_PCD_MspInit+0x62>
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ad64:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad68:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad6a:	a903      	add	r1, sp, #12
 800ad6c:	4814      	ldr	r0, [pc, #80]	; (800adc0 <HAL_PCD_MspInit+0x68>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800ad6e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad70:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad72:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ad74:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ad76:	2303      	movs	r3, #3
 800ad78:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ad7a:	230a      	movs	r3, #10
 800ad7c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ad7e:	f7f6 f86d 	bl	8000e5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ad82:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ad86:	a903      	add	r1, sp, #12
 800ad88:	480d      	ldr	r0, [pc, #52]	; (800adc0 <HAL_PCD_MspInit+0x68>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800ad8a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ad8c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ad8e:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800ad90:	f7f6 f864 	bl	8000e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ad94:	4b0b      	ldr	r3, [pc, #44]	; (800adc4 <HAL_PCD_MspInit+0x6c>)
 800ad96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ad9c:	635a      	str	r2, [r3, #52]	; 0x34
 800ad9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ada0:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800ada4:	9201      	str	r2, [sp, #4]
 800ada6:	9a01      	ldr	r2, [sp, #4]
 800ada8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800adaa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800adae:	645a      	str	r2, [r3, #68]	; 0x44
 800adb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800adb6:	9302      	str	r3, [sp, #8]
 800adb8:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800adba:	b008      	add	sp, #32
 800adbc:	bd10      	pop	{r4, pc}
 800adbe:	bf00      	nop
 800adc0:	40020000 	.word	0x40020000
 800adc4:	40023800 	.word	0x40023800

0800adc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800adc8:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800adca:	4601      	mov	r1, r0
{
 800adcc:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800adce:	2200      	movs	r2, #0
 800add0:	2019      	movs	r0, #25
 800add2:	f7f5 fc37 	bl	8000644 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800add6:	2019      	movs	r0, #25
 800add8:	f7f5 fc6c 	bl	80006b4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800addc:	4b14      	ldr	r3, [pc, #80]	; (800ae30 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800adde:	a901      	add	r1, sp, #4
 800ade0:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ade2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800ade4:	4c13      	ldr	r4, [pc, #76]	; (800ae34 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM1_CLK_ENABLE();
 800ade6:	f042 0201 	orr.w	r2, r2, #1
 800adea:	645a      	str	r2, [r3, #68]	; 0x44
 800adec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800adf6:	f7f6 fc31 	bl	800165c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800adfa:	f7f6 fc1f 	bl	800163c <HAL_RCC_GetPCLK2Freq>
  htim1.Instance = TIM1;
 800adfe:	4b0e      	ldr	r3, [pc, #56]	; (800ae38 <HAL_InitTick+0x70>)
 800ae00:	6023      	str	r3, [r4, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800ae02:	f240 33e7 	movw	r3, #999	; 0x3e7
 800ae06:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800ae08:	4b0c      	ldr	r3, [pc, #48]	; (800ae3c <HAL_InitTick+0x74>)
 800ae0a:	fbb0 f0f3 	udiv	r0, r0, r3
 800ae0e:	3801      	subs	r0, #1
  htim1.Init.Prescaler = uwPrescalerValue;
  htim1.Init.ClockDivision = 0;
 800ae10:	2300      	movs	r3, #0
  htim1.Init.Prescaler = uwPrescalerValue;
 800ae12:	6060      	str	r0, [r4, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800ae14:	4620      	mov	r0, r4
  htim1.Init.ClockDivision = 0;
 800ae16:	6123      	str	r3, [r4, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae18:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800ae1a:	f7f7 f845 	bl	8001ea8 <HAL_TIM_Base_Init>
 800ae1e:	b920      	cbnz	r0, 800ae2a <HAL_InitTick+0x62>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800ae20:	4620      	mov	r0, r4
 800ae22:	f7f6 ff19 	bl	8001c58 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 800ae26:	b008      	add	sp, #32
 800ae28:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 800ae2a:	2001      	movs	r0, #1
 800ae2c:	e7fb      	b.n	800ae26 <HAL_InitTick+0x5e>
 800ae2e:	bf00      	nop
 800ae30:	40023800 	.word	0x40023800
 800ae34:	2000ad10 	.word	0x2000ad10
 800ae38:	40010000 	.word	0x40010000
 800ae3c:	000f4240 	.word	0x000f4240

0800ae40 <NMI_Handler>:
 800ae40:	4770      	bx	lr

0800ae42 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800ae42:	e7fe      	b.n	800ae42 <HardFault_Handler>

0800ae44 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800ae44:	e7fe      	b.n	800ae44 <MemManage_Handler>

0800ae46 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800ae46:	e7fe      	b.n	800ae46 <BusFault_Handler>

0800ae48 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 800ae48:	e7fe      	b.n	800ae48 <UsageFault_Handler>

0800ae4a <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 800ae4a:	4770      	bx	lr

0800ae4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 800ae4c:	f7f7 bcea 	b.w	8002824 <osSystickHandler>

0800ae50 <TIM1_UP_TIM10_IRQHandler>:
void TIM1_UP_TIM10_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800ae50:	4801      	ldr	r0, [pc, #4]	; (800ae58 <TIM1_UP_TIM10_IRQHandler+0x8>)
 800ae52:	f7f6 bf10 	b.w	8001c76 <HAL_TIM_IRQHandler>
 800ae56:	bf00      	nop
 800ae58:	2000ad10 	.word	0x2000ad10

0800ae5c <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ae5c:	4801      	ldr	r0, [pc, #4]	; (800ae64 <ETH_IRQHandler+0x8>)
 800ae5e:	f7f5 be1c 	b.w	8000a9a <HAL_ETH_IRQHandler>
 800ae62:	bf00      	nop
 800ae64:	20008fe0 	.word	0x20008fe0

0800ae68 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 800ae68:	4b0b      	ldr	r3, [pc, #44]	; (800ae98 <_sbrk+0x30>)
{
 800ae6a:	4602      	mov	r2, r0
	if (heap_end == 0)
 800ae6c:	6819      	ldr	r1, [r3, #0]
 800ae6e:	b909      	cbnz	r1, 800ae74 <_sbrk+0xc>
		heap_end = &end;
 800ae70:	490a      	ldr	r1, [pc, #40]	; (800ae9c <_sbrk+0x34>)
 800ae72:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800ae74:	490a      	ldr	r1, [pc, #40]	; (800aea0 <_sbrk+0x38>)
	prev_heap_end = heap_end;
 800ae76:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800ae78:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 800ae7a:	4402      	add	r2, r0
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 800ae7c:	6809      	ldr	r1, [r1, #0]
	min_stack_ptr -= MAX_STACK_SIZE;
 800ae7e:	f5a1 5100 	sub.w	r1, r1, #8192	; 0x2000
	if (heap_end + incr > min_stack_ptr)
 800ae82:	428a      	cmp	r2, r1
	{
		errno = ENOMEM;
 800ae84:	bf83      	ittte	hi
 800ae86:	220c      	movhi	r2, #12
 800ae88:	4b06      	ldrhi	r3, [pc, #24]	; (800aea4 <_sbrk+0x3c>)
		return (caddr_t) -1;
 800ae8a:	f04f 30ff 	movhi.w	r0, #4294967295
	}

	heap_end += incr;
 800ae8e:	601a      	strls	r2, [r3, #0]
		errno = ENOMEM;
 800ae90:	bf88      	it	hi
 800ae92:	601a      	strhi	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 800ae94:	4770      	bx	lr
 800ae96:	bf00      	nop
 800ae98:	20003f8c 	.word	0x20003f8c
 800ae9c:	2000ad50 	.word	0x2000ad50
 800aea0:	e000ed08 	.word	0xe000ed08
 800aea4:	20007708 	.word	0x20007708

0800aea8 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 800aea8:	b570      	push	{r4, r5, r6, lr}
 800aeaa:	460e      	mov	r6, r1
 800aeac:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aeae:	460c      	mov	r4, r1
 800aeb0:	1ba3      	subs	r3, r4, r6
 800aeb2:	429d      	cmp	r5, r3
 800aeb4:	dc01      	bgt.n	800aeba <_write+0x12>
	{
	   __io_putchar( *ptr++ );
	}
	return len;
}
 800aeb6:	4628      	mov	r0, r5
 800aeb8:	bd70      	pop	{r4, r5, r6, pc}
	   __io_putchar( *ptr++ );
 800aeba:	f814 0b01 	ldrb.w	r0, [r4], #1
 800aebe:	f3af 8000 	nop.w
 800aec2:	e7f5      	b.n	800aeb0 <_write+0x8>

0800aec4 <_close>:

int _close(int file)
{
	return -1;
}
 800aec4:	f04f 30ff 	mov.w	r0, #4294967295
 800aec8:	4770      	bx	lr

0800aeca <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800aeca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 800aece:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800aed0:	604b      	str	r3, [r1, #4]
}
 800aed2:	4770      	bx	lr

0800aed4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800aed4:	2001      	movs	r0, #1
 800aed6:	4770      	bx	lr

0800aed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 800aed8:	2000      	movs	r0, #0
 800aeda:	4770      	bx	lr

0800aedc <_read>:

int _read(int file, char *ptr, int len)
{
 800aedc:	b570      	push	{r4, r5, r6, lr}
 800aede:	460e      	mov	r6, r1
 800aee0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800aee2:	460c      	mov	r4, r1
 800aee4:	1ba3      	subs	r3, r4, r6
 800aee6:	429d      	cmp	r5, r3
 800aee8:	dc01      	bgt.n	800aeee <_read+0x12>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 800aeea:	4628      	mov	r0, r5
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 800aeee:	f3af 8000 	nop.w
 800aef2:	f804 0b01 	strb.w	r0, [r4], #1
 800aef6:	e7f5      	b.n	800aee4 <_read+0x8>

0800aef8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aef8:	490f      	ldr	r1, [pc, #60]	; (800af38 <SystemInit+0x40>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800aefa:	2000      	movs	r0, #0
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aefc:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800af00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 800af08:	4b0c      	ldr	r3, [pc, #48]	; (800af3c <SystemInit+0x44>)
 800af0a:	681a      	ldr	r2, [r3, #0]
 800af0c:	f042 0201 	orr.w	r2, r2, #1
 800af10:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800af12:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800af1a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800af1e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800af20:	4a07      	ldr	r2, [pc, #28]	; (800af40 <SystemInit+0x48>)
 800af22:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800af2a:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800af2c:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800af2e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800af32:	608b      	str	r3, [r1, #8]
 800af34:	4770      	bx	lr
 800af36:	bf00      	nop
 800af38:	e000ed00 	.word	0xe000ed00
 800af3c:	40023800 	.word	0x40023800
 800af40:	24003010 	.word	0x24003010

0800af44 <xputs>:




void xputs (const char* str)
{
 800af44:	b510      	push	{r4, lr}
 800af46:	1e44      	subs	r4, r0, #1
	while (*str)
 800af48:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 800af4c:	b900      	cbnz	r0, 800af50 <xputs+0xc>
		xputc(*str++);
}
 800af4e:	bd10      	pop	{r4, pc}
	debug_chr(c);
 800af50:	f7ff fad6 	bl	800a500 <debug_chr>
 800af54:	e7f8      	b.n	800af48 <xputs+0x4>

0800af56 <xitoa>:
	uint8_t c, r, sgn = 0, pad = ' ';
	uint8_t s[20], i = 0;
	uint32_t v;


	if (radix < 0) {
 800af56:	2900      	cmp	r1, #0
{
 800af58:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af5a:	b087      	sub	sp, #28
	if (radix < 0) {
 800af5c:	da39      	bge.n	800afd2 <xitoa+0x7c>
		radix = -radix;
		if (val < 0) {
 800af5e:	2800      	cmp	r0, #0
		radix = -radix;
 800af60:	f1c1 0100 	rsb	r1, r1, #0
		if (val < 0) {
 800af64:	da35      	bge.n	800afd2 <xitoa+0x7c>
			val = -val;
 800af66:	4240      	negs	r0, r0
			sgn = '-';
 800af68:	272d      	movs	r7, #45	; 0x2d
		}
	}
	v = val;
	r = radix;
	if (len < 0) {
 800af6a:	2a00      	cmp	r2, #0
		len = -len;
 800af6c:	bfba      	itte	lt
 800af6e:	4252      	neglt	r2, r2
		pad = '0';
 800af70:	2630      	movlt	r6, #48	; 0x30
	uint8_t c, r, sgn = 0, pad = ' ';
 800af72:	2620      	movge	r6, #32
	}
	if (len > 20) return;
 800af74:	2a14      	cmp	r2, #20
 800af76:	dc2a      	bgt.n	800afce <xitoa+0x78>
	v = val;
 800af78:	2500      	movs	r5, #0
	do {
		c = (uint8_t)(v % r);
 800af7a:	b2c9      	uxtb	r1, r1
		if (c >= 10) c += 7;
		c += '0';
		s[i++] = c;
 800af7c:	1c6b      	adds	r3, r5, #1
		c = (uint8_t)(v % r);
 800af7e:	fbb0 fef1 	udiv	lr, r0, r1
 800af82:	fb01 001e 	mls	r0, r1, lr, r0
		s[i++] = c;
 800af86:	b2db      	uxtb	r3, r3
		c = (uint8_t)(v % r);
 800af88:	b2c4      	uxtb	r4, r0
		if (c >= 10) c += 7;
 800af8a:	2809      	cmp	r0, #9
		s[i++] = c;
 800af8c:	a806      	add	r0, sp, #24
		if (c >= 10) c += 7;
 800af8e:	bf88      	it	hi
 800af90:	3407      	addhi	r4, #7
		s[i++] = c;
 800af92:	4428      	add	r0, r5
		if (c >= 10) c += 7;
 800af94:	bf88      	it	hi
 800af96:	b2e4      	uxtbhi	r4, r4
		c += '0';
 800af98:	3430      	adds	r4, #48	; 0x30
		s[i++] = c;
 800af9a:	f800 4c14 	strb.w	r4, [r0, #-20]
		v /= r;
 800af9e:	4670      	mov	r0, lr
	} while (v);
 800afa0:	b9c8      	cbnz	r0, 800afd6 <xitoa+0x80>
	if (sgn) s[i++] = sgn;
 800afa2:	b12f      	cbz	r7, 800afb0 <xitoa+0x5a>
 800afa4:	a906      	add	r1, sp, #24
 800afa6:	3502      	adds	r5, #2
 800afa8:	440b      	add	r3, r1
 800afaa:	f803 7c14 	strb.w	r7, [r3, #-20]
 800afae:	b2eb      	uxtb	r3, r5
	while (i < len)
 800afb0:	429a      	cmp	r2, r3
 800afb2:	4619      	mov	r1, r3
 800afb4:	dc11      	bgt.n	800afda <xitoa+0x84>
 800afb6:	3b01      	subs	r3, #1
 800afb8:	aa01      	add	r2, sp, #4
 800afba:	f10d 0503 	add.w	r5, sp, #3
 800afbe:	fa52 f483 	uxtab	r4, r2, r3
	debug_chr(c);
 800afc2:	f814 0901 	ldrb.w	r0, [r4], #-1
 800afc6:	f7ff fa9b 	bl	800a500 <debug_chr>
		s[i++] = pad;
	do
		xputc(s[--i]);
	while (i);
 800afca:	42a5      	cmp	r5, r4
 800afcc:	d1f9      	bne.n	800afc2 <xitoa+0x6c>
}
 800afce:	b007      	add	sp, #28
 800afd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t c, r, sgn = 0, pad = ' ';
 800afd2:	2700      	movs	r7, #0
 800afd4:	e7c9      	b.n	800af6a <xitoa+0x14>
		s[i++] = c;
 800afd6:	461d      	mov	r5, r3
 800afd8:	e7d0      	b.n	800af7c <xitoa+0x26>
		s[i++] = pad;
 800afda:	a806      	add	r0, sp, #24
 800afdc:	3301      	adds	r3, #1
 800afde:	4401      	add	r1, r0
 800afe0:	b2db      	uxtb	r3, r3
 800afe2:	f801 6c14 	strb.w	r6, [r1, #-20]
 800afe6:	e7e3      	b.n	800afb0 <xitoa+0x5a>

0800afe8 <xprintf>:

void xprintf (const char* str, ...)
{
 800afe8:	b40f      	push	{r0, r1, r2, r3}
 800afea:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afec:	ab06      	add	r3, sp, #24
		d = *str++; w = r = s = l = 0;
		if (d == '0') {
			d = *str++; s = 1;
		}
		while ((d >= '0')&&(d <= '9')) {
			w += w * 10 + (d - '0');
 800afee:	250a      	movs	r5, #10
{
 800aff0:	f853 4b04 	ldr.w	r4, [r3], #4
	va_start(arp, str);
 800aff4:	9301      	str	r3, [sp, #4]
	while ((d = *str++) != 0) {
 800aff6:	7820      	ldrb	r0, [r4, #0]
 800aff8:	b920      	cbnz	r0, 800b004 <xprintf+0x1c>
				xitoa((long)va_arg(arp, int), r, w);
		}
	}

	va_end(arp);
}
 800affa:	b003      	add	sp, #12
 800affc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b000:	b004      	add	sp, #16
 800b002:	4770      	bx	lr
		if (d != '%') {
 800b004:	2825      	cmp	r0, #37	; 0x25
 800b006:	d003      	beq.n	800b010 <xprintf+0x28>
	while ((d = *str++) != 0) {
 800b008:	3401      	adds	r4, #1
	debug_chr(c);
 800b00a:	f7ff fa79 	bl	800a500 <debug_chr>
			continue;
 800b00e:	e7f2      	b.n	800aff6 <xprintf+0xe>
		d = *str++; w = r = s = l = 0;
 800b010:	7863      	ldrb	r3, [r4, #1]
 800b012:	2200      	movs	r2, #0
		if (d == '0') {
 800b014:	2b30      	cmp	r3, #48	; 0x30
			d = *str++; s = 1;
 800b016:	bf0d      	iteet	eq
 800b018:	78a3      	ldrbeq	r3, [r4, #2]
		d = *str++; w = r = s = l = 0;
 800b01a:	3402      	addne	r4, #2
 800b01c:	2000      	movne	r0, #0
			d = *str++; s = 1;
 800b01e:	3403      	addeq	r4, #3
 800b020:	bf08      	it	eq
 800b022:	2001      	moveq	r0, #1
		while ((d >= '0')&&(d <= '9')) {
 800b024:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800b028:	2909      	cmp	r1, #9
 800b02a:	d912      	bls.n	800b052 <xprintf+0x6a>
		if (s) w = -w;
 800b02c:	b100      	cbz	r0, 800b030 <xprintf+0x48>
 800b02e:	4252      	negs	r2, r2
		if (d == 'l') {
 800b030:	2b6c      	cmp	r3, #108	; 0x6c
			d = *str++;
 800b032:	bf03      	ittte	eq
 800b034:	7823      	ldrbeq	r3, [r4, #0]
			l = 1;
 800b036:	2101      	moveq	r1, #1
			d = *str++;
 800b038:	3401      	addeq	r4, #1
		d = *str++; w = r = s = l = 0;
 800b03a:	2100      	movne	r1, #0
		if (!d) break;
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0dc      	beq.n	800affa <xprintf+0x12>
		if (d == 's') {
 800b040:	2b73      	cmp	r3, #115	; 0x73
 800b042:	d10c      	bne.n	800b05e <xprintf+0x76>
			xputs(va_arg(arp, char*));
 800b044:	9b01      	ldr	r3, [sp, #4]
 800b046:	1d1a      	adds	r2, r3, #4
 800b048:	6818      	ldr	r0, [r3, #0]
 800b04a:	9201      	str	r2, [sp, #4]
 800b04c:	f7ff ff7a 	bl	800af44 <xputs>
			continue;
 800b050:	e7d1      	b.n	800aff6 <xprintf+0xe>
			w += w * 10 + (d - '0');
 800b052:	fb05 1102 	mla	r1, r5, r2, r1
			d = *str++;
 800b056:	f814 3b01 	ldrb.w	r3, [r4], #1
			w += w * 10 + (d - '0');
 800b05a:	440a      	add	r2, r1
 800b05c:	e7e2      	b.n	800b024 <xprintf+0x3c>
		if (d == 'c') {
 800b05e:	2b63      	cmp	r3, #99	; 0x63
 800b060:	d104      	bne.n	800b06c <xprintf+0x84>
			xputc((char)va_arg(arp, int));
 800b062:	9b01      	ldr	r3, [sp, #4]
 800b064:	1d1a      	adds	r2, r3, #4
	debug_chr(c);
 800b066:	7818      	ldrb	r0, [r3, #0]
			xputc((char)va_arg(arp, int));
 800b068:	9201      	str	r2, [sp, #4]
 800b06a:	e7ce      	b.n	800b00a <xprintf+0x22>
		if (d == 'u') r = 10;
 800b06c:	2b75      	cmp	r3, #117	; 0x75
 800b06e:	d011      	beq.n	800b094 <xprintf+0xac>
		if (d == 'd') r = -10;
 800b070:	2b64      	cmp	r3, #100	; 0x64
 800b072:	d011      	beq.n	800b098 <xprintf+0xb0>
		if (d == 'X' || d == 'x') r = 16; // 'x' added by mthomas in increase compatibility
 800b074:	2b58      	cmp	r3, #88	; 0x58
 800b076:	d00b      	beq.n	800b090 <xprintf+0xa8>
 800b078:	2b78      	cmp	r3, #120	; 0x78
 800b07a:	d009      	beq.n	800b090 <xprintf+0xa8>
		if (d == 'b') r = 2;
 800b07c:	2b62      	cmp	r3, #98	; 0x62
 800b07e:	d1bc      	bne.n	800affa <xprintf+0x12>
 800b080:	2102      	movs	r1, #2
 800b082:	e00d      	b.n	800b0a0 <xprintf+0xb8>
				xitoa((long)va_arg(arp, int), r, w);
 800b084:	9b01      	ldr	r3, [sp, #4]
 800b086:	1d19      	adds	r1, r3, #4
 800b088:	9101      	str	r1, [sp, #4]
 800b08a:	f06f 0109 	mvn.w	r1, #9
 800b08e:	e00a      	b.n	800b0a6 <xprintf+0xbe>
		if (l) {
 800b090:	2110      	movs	r1, #16
 800b092:	e005      	b.n	800b0a0 <xprintf+0xb8>
		if (d == 'u') r = 10;
 800b094:	210a      	movs	r1, #10
 800b096:	e003      	b.n	800b0a0 <xprintf+0xb8>
		if (l) {
 800b098:	2900      	cmp	r1, #0
 800b09a:	d0f3      	beq.n	800b084 <xprintf+0x9c>
		if (d == 'd') r = -10;
 800b09c:	f06f 0109 	mvn.w	r1, #9
				xitoa((unsigned long)va_arg(arp, int), r, w);
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	1d18      	adds	r0, r3, #4
 800b0a4:	9001      	str	r0, [sp, #4]
				xitoa((long)va_arg(arp, int), r, w);
 800b0a6:	6818      	ldr	r0, [r3, #0]
 800b0a8:	f7ff ff55 	bl	800af56 <xitoa>
 800b0ac:	e7a3      	b.n	800aff6 <xprintf+0xe>
	...

0800b0b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800b0b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b0e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b0b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b0b6:	e003      	b.n	800b0c0 <LoopCopyDataInit>

0800b0b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b0b8:	4b0c      	ldr	r3, [pc, #48]	; (800b0ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b0ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b0bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b0be:	3104      	adds	r1, #4

0800b0c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b0c0:	480b      	ldr	r0, [pc, #44]	; (800b0f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b0c2:	4b0c      	ldr	r3, [pc, #48]	; (800b0f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b0c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b0c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b0c8:	d3f6      	bcc.n	800b0b8 <CopyDataInit>
  ldr  r2, =_sbss
 800b0ca:	4a0b      	ldr	r2, [pc, #44]	; (800b0f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b0cc:	e002      	b.n	800b0d4 <LoopFillZerobss>

0800b0ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b0ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b0d0:	f842 3b04 	str.w	r3, [r2], #4

0800b0d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b0d4:	4b09      	ldr	r3, [pc, #36]	; (800b0fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b0d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b0d8:	d3f9      	bcc.n	800b0ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800b0da:	f7ff ff0d 	bl	800aef8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b0de:	f000 f811 	bl	800b104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b0e2:	f7ff fcab 	bl	800aa3c <main>
  bx  lr    
 800b0e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b0e8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 800b0ec:	0800db2c 	.word	0x0800db2c
  ldr  r0, =_sdata
 800b0f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b0f4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 800b0f8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 800b0fc:	2000ad50 	.word	0x2000ad50

0800b100 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b100:	e7fe      	b.n	800b100 <ADC_IRQHandler>
	...

0800b104 <__libc_init_array>:
 800b104:	b570      	push	{r4, r5, r6, lr}
 800b106:	4e0d      	ldr	r6, [pc, #52]	; (800b13c <__libc_init_array+0x38>)
 800b108:	4c0d      	ldr	r4, [pc, #52]	; (800b140 <__libc_init_array+0x3c>)
 800b10a:	1ba4      	subs	r4, r4, r6
 800b10c:	10a4      	asrs	r4, r4, #2
 800b10e:	2500      	movs	r5, #0
 800b110:	42a5      	cmp	r5, r4
 800b112:	d109      	bne.n	800b128 <__libc_init_array+0x24>
 800b114:	4e0b      	ldr	r6, [pc, #44]	; (800b144 <__libc_init_array+0x40>)
 800b116:	4c0c      	ldr	r4, [pc, #48]	; (800b148 <__libc_init_array+0x44>)
 800b118:	f000 ff74 	bl	800c004 <_init>
 800b11c:	1ba4      	subs	r4, r4, r6
 800b11e:	10a4      	asrs	r4, r4, #2
 800b120:	2500      	movs	r5, #0
 800b122:	42a5      	cmp	r5, r4
 800b124:	d105      	bne.n	800b132 <__libc_init_array+0x2e>
 800b126:	bd70      	pop	{r4, r5, r6, pc}
 800b128:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b12c:	4798      	blx	r3
 800b12e:	3501      	adds	r5, #1
 800b130:	e7ee      	b.n	800b110 <__libc_init_array+0xc>
 800b132:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b136:	4798      	blx	r3
 800b138:	3501      	adds	r5, #1
 800b13a:	e7f2      	b.n	800b122 <__libc_init_array+0x1e>
 800b13c:	0800db24 	.word	0x0800db24
 800b140:	0800db24 	.word	0x0800db24
 800b144:	0800db24 	.word	0x0800db24
 800b148:	0800db28 	.word	0x0800db28

0800b14c <memcmp>:
 800b14c:	b510      	push	{r4, lr}
 800b14e:	3901      	subs	r1, #1
 800b150:	4402      	add	r2, r0
 800b152:	4290      	cmp	r0, r2
 800b154:	d101      	bne.n	800b15a <memcmp+0xe>
 800b156:	2000      	movs	r0, #0
 800b158:	bd10      	pop	{r4, pc}
 800b15a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b15e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b162:	42a3      	cmp	r3, r4
 800b164:	d0f5      	beq.n	800b152 <memcmp+0x6>
 800b166:	1b18      	subs	r0, r3, r4
 800b168:	bd10      	pop	{r4, pc}

0800b16a <memcpy>:
 800b16a:	b510      	push	{r4, lr}
 800b16c:	1e43      	subs	r3, r0, #1
 800b16e:	440a      	add	r2, r1
 800b170:	4291      	cmp	r1, r2
 800b172:	d100      	bne.n	800b176 <memcpy+0xc>
 800b174:	bd10      	pop	{r4, pc}
 800b176:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b17a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b17e:	e7f7      	b.n	800b170 <memcpy+0x6>

0800b180 <memset>:
 800b180:	4402      	add	r2, r0
 800b182:	4603      	mov	r3, r0
 800b184:	4293      	cmp	r3, r2
 800b186:	d100      	bne.n	800b18a <memset+0xa>
 800b188:	4770      	bx	lr
 800b18a:	f803 1b01 	strb.w	r1, [r3], #1
 800b18e:	e7f9      	b.n	800b184 <memset+0x4>

0800b190 <iprintf>:
 800b190:	b40f      	push	{r0, r1, r2, r3}
 800b192:	4b0a      	ldr	r3, [pc, #40]	; (800b1bc <iprintf+0x2c>)
 800b194:	b513      	push	{r0, r1, r4, lr}
 800b196:	681c      	ldr	r4, [r3, #0]
 800b198:	b124      	cbz	r4, 800b1a4 <iprintf+0x14>
 800b19a:	69a3      	ldr	r3, [r4, #24]
 800b19c:	b913      	cbnz	r3, 800b1a4 <iprintf+0x14>
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 f888 	bl	800b2b4 <__sinit>
 800b1a4:	ab05      	add	r3, sp, #20
 800b1a6:	9a04      	ldr	r2, [sp, #16]
 800b1a8:	68a1      	ldr	r1, [r4, #8]
 800b1aa:	9301      	str	r3, [sp, #4]
 800b1ac:	4620      	mov	r0, r4
 800b1ae:	f000 f9e9 	bl	800b584 <_vfiprintf_r>
 800b1b2:	b002      	add	sp, #8
 800b1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1b8:	b004      	add	sp, #16
 800b1ba:	4770      	bx	lr
 800b1bc:	20000014 	.word	0x20000014

0800b1c0 <rand>:
 800b1c0:	4b19      	ldr	r3, [pc, #100]	; (800b228 <rand+0x68>)
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	681c      	ldr	r4, [r3, #0]
 800b1c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b1c8:	b9d3      	cbnz	r3, 800b200 <rand+0x40>
 800b1ca:	2018      	movs	r0, #24
 800b1cc:	f000 f8fc 	bl	800b3c8 <malloc>
 800b1d0:	f243 330e 	movw	r3, #13070	; 0x330e
 800b1d4:	63a0      	str	r0, [r4, #56]	; 0x38
 800b1d6:	8003      	strh	r3, [r0, #0]
 800b1d8:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 800b1dc:	8043      	strh	r3, [r0, #2]
 800b1de:	f241 2334 	movw	r3, #4660	; 0x1234
 800b1e2:	8083      	strh	r3, [r0, #4]
 800b1e4:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800b1e8:	80c3      	strh	r3, [r0, #6]
 800b1ea:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 800b1ee:	8103      	strh	r3, [r0, #8]
 800b1f0:	2305      	movs	r3, #5
 800b1f2:	8143      	strh	r3, [r0, #10]
 800b1f4:	230b      	movs	r3, #11
 800b1f6:	8183      	strh	r3, [r0, #12]
 800b1f8:	2201      	movs	r2, #1
 800b1fa:	2300      	movs	r3, #0
 800b1fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800b200:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b202:	480a      	ldr	r0, [pc, #40]	; (800b22c <rand+0x6c>)
 800b204:	690a      	ldr	r2, [r1, #16]
 800b206:	694b      	ldr	r3, [r1, #20]
 800b208:	4c09      	ldr	r4, [pc, #36]	; (800b230 <rand+0x70>)
 800b20a:	4350      	muls	r0, r2
 800b20c:	fb04 0003 	mla	r0, r4, r3, r0
 800b210:	fba2 2304 	umull	r2, r3, r2, r4
 800b214:	3201      	adds	r2, #1
 800b216:	4403      	add	r3, r0
 800b218:	f143 0300 	adc.w	r3, r3, #0
 800b21c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800b220:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800b224:	bd10      	pop	{r4, pc}
 800b226:	bf00      	nop
 800b228:	20000014 	.word	0x20000014
 800b22c:	5851f42d 	.word	0x5851f42d
 800b230:	4c957f2d 	.word	0x4c957f2d

0800b234 <_cleanup_r>:
 800b234:	4901      	ldr	r1, [pc, #4]	; (800b23c <_cleanup_r+0x8>)
 800b236:	f000 b8a9 	b.w	800b38c <_fwalk_reent>
 800b23a:	bf00      	nop
 800b23c:	0800be59 	.word	0x0800be59

0800b240 <std.isra.0>:
 800b240:	2300      	movs	r3, #0
 800b242:	b510      	push	{r4, lr}
 800b244:	4604      	mov	r4, r0
 800b246:	6003      	str	r3, [r0, #0]
 800b248:	6043      	str	r3, [r0, #4]
 800b24a:	6083      	str	r3, [r0, #8]
 800b24c:	8181      	strh	r1, [r0, #12]
 800b24e:	6643      	str	r3, [r0, #100]	; 0x64
 800b250:	81c2      	strh	r2, [r0, #14]
 800b252:	6103      	str	r3, [r0, #16]
 800b254:	6143      	str	r3, [r0, #20]
 800b256:	6183      	str	r3, [r0, #24]
 800b258:	4619      	mov	r1, r3
 800b25a:	2208      	movs	r2, #8
 800b25c:	305c      	adds	r0, #92	; 0x5c
 800b25e:	f7ff ff8f 	bl	800b180 <memset>
 800b262:	4b05      	ldr	r3, [pc, #20]	; (800b278 <std.isra.0+0x38>)
 800b264:	6263      	str	r3, [r4, #36]	; 0x24
 800b266:	4b05      	ldr	r3, [pc, #20]	; (800b27c <std.isra.0+0x3c>)
 800b268:	62a3      	str	r3, [r4, #40]	; 0x28
 800b26a:	4b05      	ldr	r3, [pc, #20]	; (800b280 <std.isra.0+0x40>)
 800b26c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b26e:	4b05      	ldr	r3, [pc, #20]	; (800b284 <std.isra.0+0x44>)
 800b270:	6224      	str	r4, [r4, #32]
 800b272:	6323      	str	r3, [r4, #48]	; 0x30
 800b274:	bd10      	pop	{r4, pc}
 800b276:	bf00      	nop
 800b278:	0800bafd 	.word	0x0800bafd
 800b27c:	0800bb1f 	.word	0x0800bb1f
 800b280:	0800bb57 	.word	0x0800bb57
 800b284:	0800bb7b 	.word	0x0800bb7b

0800b288 <__sfmoreglue>:
 800b288:	b570      	push	{r4, r5, r6, lr}
 800b28a:	1e4a      	subs	r2, r1, #1
 800b28c:	2568      	movs	r5, #104	; 0x68
 800b28e:	4355      	muls	r5, r2
 800b290:	460e      	mov	r6, r1
 800b292:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b296:	f000 f8ed 	bl	800b474 <_malloc_r>
 800b29a:	4604      	mov	r4, r0
 800b29c:	b140      	cbz	r0, 800b2b0 <__sfmoreglue+0x28>
 800b29e:	2100      	movs	r1, #0
 800b2a0:	e880 0042 	stmia.w	r0, {r1, r6}
 800b2a4:	300c      	adds	r0, #12
 800b2a6:	60a0      	str	r0, [r4, #8]
 800b2a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b2ac:	f7ff ff68 	bl	800b180 <memset>
 800b2b0:	4620      	mov	r0, r4
 800b2b2:	bd70      	pop	{r4, r5, r6, pc}

0800b2b4 <__sinit>:
 800b2b4:	6983      	ldr	r3, [r0, #24]
 800b2b6:	b510      	push	{r4, lr}
 800b2b8:	4604      	mov	r4, r0
 800b2ba:	bb33      	cbnz	r3, 800b30a <__sinit+0x56>
 800b2bc:	6483      	str	r3, [r0, #72]	; 0x48
 800b2be:	64c3      	str	r3, [r0, #76]	; 0x4c
 800b2c0:	6503      	str	r3, [r0, #80]	; 0x50
 800b2c2:	4b12      	ldr	r3, [pc, #72]	; (800b30c <__sinit+0x58>)
 800b2c4:	4a12      	ldr	r2, [pc, #72]	; (800b310 <__sinit+0x5c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	6282      	str	r2, [r0, #40]	; 0x28
 800b2ca:	4298      	cmp	r0, r3
 800b2cc:	bf04      	itt	eq
 800b2ce:	2301      	moveq	r3, #1
 800b2d0:	6183      	streq	r3, [r0, #24]
 800b2d2:	f000 f81f 	bl	800b314 <__sfp>
 800b2d6:	6060      	str	r0, [r4, #4]
 800b2d8:	4620      	mov	r0, r4
 800b2da:	f000 f81b 	bl	800b314 <__sfp>
 800b2de:	60a0      	str	r0, [r4, #8]
 800b2e0:	4620      	mov	r0, r4
 800b2e2:	f000 f817 	bl	800b314 <__sfp>
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	60e0      	str	r0, [r4, #12]
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	6860      	ldr	r0, [r4, #4]
 800b2ee:	f7ff ffa7 	bl	800b240 <std.isra.0>
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	2109      	movs	r1, #9
 800b2f6:	68a0      	ldr	r0, [r4, #8]
 800b2f8:	f7ff ffa2 	bl	800b240 <std.isra.0>
 800b2fc:	2202      	movs	r2, #2
 800b2fe:	2112      	movs	r1, #18
 800b300:	68e0      	ldr	r0, [r4, #12]
 800b302:	f7ff ff9d 	bl	800b240 <std.isra.0>
 800b306:	2301      	movs	r3, #1
 800b308:	61a3      	str	r3, [r4, #24]
 800b30a:	bd10      	pop	{r4, pc}
 800b30c:	0800dae4 	.word	0x0800dae4
 800b310:	0800b235 	.word	0x0800b235

0800b314 <__sfp>:
 800b314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b316:	4b1c      	ldr	r3, [pc, #112]	; (800b388 <__sfp+0x74>)
 800b318:	681e      	ldr	r6, [r3, #0]
 800b31a:	69b3      	ldr	r3, [r6, #24]
 800b31c:	4607      	mov	r7, r0
 800b31e:	b913      	cbnz	r3, 800b326 <__sfp+0x12>
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff ffc7 	bl	800b2b4 <__sinit>
 800b326:	3648      	adds	r6, #72	; 0x48
 800b328:	68b4      	ldr	r4, [r6, #8]
 800b32a:	6873      	ldr	r3, [r6, #4]
 800b32c:	3b01      	subs	r3, #1
 800b32e:	d503      	bpl.n	800b338 <__sfp+0x24>
 800b330:	6833      	ldr	r3, [r6, #0]
 800b332:	b133      	cbz	r3, 800b342 <__sfp+0x2e>
 800b334:	6836      	ldr	r6, [r6, #0]
 800b336:	e7f7      	b.n	800b328 <__sfp+0x14>
 800b338:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b33c:	b16d      	cbz	r5, 800b35a <__sfp+0x46>
 800b33e:	3468      	adds	r4, #104	; 0x68
 800b340:	e7f4      	b.n	800b32c <__sfp+0x18>
 800b342:	2104      	movs	r1, #4
 800b344:	4638      	mov	r0, r7
 800b346:	f7ff ff9f 	bl	800b288 <__sfmoreglue>
 800b34a:	6030      	str	r0, [r6, #0]
 800b34c:	2800      	cmp	r0, #0
 800b34e:	d1f1      	bne.n	800b334 <__sfp+0x20>
 800b350:	230c      	movs	r3, #12
 800b352:	603b      	str	r3, [r7, #0]
 800b354:	4604      	mov	r4, r0
 800b356:	4620      	mov	r0, r4
 800b358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b35a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b35e:	81e3      	strh	r3, [r4, #14]
 800b360:	2301      	movs	r3, #1
 800b362:	81a3      	strh	r3, [r4, #12]
 800b364:	6665      	str	r5, [r4, #100]	; 0x64
 800b366:	6025      	str	r5, [r4, #0]
 800b368:	60a5      	str	r5, [r4, #8]
 800b36a:	6065      	str	r5, [r4, #4]
 800b36c:	6125      	str	r5, [r4, #16]
 800b36e:	6165      	str	r5, [r4, #20]
 800b370:	61a5      	str	r5, [r4, #24]
 800b372:	2208      	movs	r2, #8
 800b374:	4629      	mov	r1, r5
 800b376:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b37a:	f7ff ff01 	bl	800b180 <memset>
 800b37e:	6365      	str	r5, [r4, #52]	; 0x34
 800b380:	63a5      	str	r5, [r4, #56]	; 0x38
 800b382:	64a5      	str	r5, [r4, #72]	; 0x48
 800b384:	64e5      	str	r5, [r4, #76]	; 0x4c
 800b386:	e7e6      	b.n	800b356 <__sfp+0x42>
 800b388:	0800dae4 	.word	0x0800dae4

0800b38c <_fwalk_reent>:
 800b38c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b390:	4680      	mov	r8, r0
 800b392:	4689      	mov	r9, r1
 800b394:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b398:	2600      	movs	r6, #0
 800b39a:	b914      	cbnz	r4, 800b3a2 <_fwalk_reent+0x16>
 800b39c:	4630      	mov	r0, r6
 800b39e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3a2:	68a5      	ldr	r5, [r4, #8]
 800b3a4:	6867      	ldr	r7, [r4, #4]
 800b3a6:	3f01      	subs	r7, #1
 800b3a8:	d501      	bpl.n	800b3ae <_fwalk_reent+0x22>
 800b3aa:	6824      	ldr	r4, [r4, #0]
 800b3ac:	e7f5      	b.n	800b39a <_fwalk_reent+0xe>
 800b3ae:	89ab      	ldrh	r3, [r5, #12]
 800b3b0:	2b01      	cmp	r3, #1
 800b3b2:	d907      	bls.n	800b3c4 <_fwalk_reent+0x38>
 800b3b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	d003      	beq.n	800b3c4 <_fwalk_reent+0x38>
 800b3bc:	4629      	mov	r1, r5
 800b3be:	4640      	mov	r0, r8
 800b3c0:	47c8      	blx	r9
 800b3c2:	4306      	orrs	r6, r0
 800b3c4:	3568      	adds	r5, #104	; 0x68
 800b3c6:	e7ee      	b.n	800b3a6 <_fwalk_reent+0x1a>

0800b3c8 <malloc>:
 800b3c8:	4b02      	ldr	r3, [pc, #8]	; (800b3d4 <malloc+0xc>)
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f000 b851 	b.w	800b474 <_malloc_r>
 800b3d2:	bf00      	nop
 800b3d4:	20000014 	.word	0x20000014

0800b3d8 <_free_r>:
 800b3d8:	b538      	push	{r3, r4, r5, lr}
 800b3da:	4605      	mov	r5, r0
 800b3dc:	2900      	cmp	r1, #0
 800b3de:	d045      	beq.n	800b46c <_free_r+0x94>
 800b3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3e4:	1f0c      	subs	r4, r1, #4
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	bfb8      	it	lt
 800b3ea:	18e4      	addlt	r4, r4, r3
 800b3ec:	f000 fdd4 	bl	800bf98 <__malloc_lock>
 800b3f0:	4a1f      	ldr	r2, [pc, #124]	; (800b470 <_free_r+0x98>)
 800b3f2:	6813      	ldr	r3, [r2, #0]
 800b3f4:	4610      	mov	r0, r2
 800b3f6:	b933      	cbnz	r3, 800b406 <_free_r+0x2e>
 800b3f8:	6063      	str	r3, [r4, #4]
 800b3fa:	6014      	str	r4, [r2, #0]
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b402:	f000 bdca 	b.w	800bf9a <__malloc_unlock>
 800b406:	42a3      	cmp	r3, r4
 800b408:	d90c      	bls.n	800b424 <_free_r+0x4c>
 800b40a:	6821      	ldr	r1, [r4, #0]
 800b40c:	1862      	adds	r2, r4, r1
 800b40e:	4293      	cmp	r3, r2
 800b410:	bf04      	itt	eq
 800b412:	681a      	ldreq	r2, [r3, #0]
 800b414:	685b      	ldreq	r3, [r3, #4]
 800b416:	6063      	str	r3, [r4, #4]
 800b418:	bf04      	itt	eq
 800b41a:	1852      	addeq	r2, r2, r1
 800b41c:	6022      	streq	r2, [r4, #0]
 800b41e:	6004      	str	r4, [r0, #0]
 800b420:	e7ec      	b.n	800b3fc <_free_r+0x24>
 800b422:	4613      	mov	r3, r2
 800b424:	685a      	ldr	r2, [r3, #4]
 800b426:	b10a      	cbz	r2, 800b42c <_free_r+0x54>
 800b428:	42a2      	cmp	r2, r4
 800b42a:	d9fa      	bls.n	800b422 <_free_r+0x4a>
 800b42c:	6819      	ldr	r1, [r3, #0]
 800b42e:	1858      	adds	r0, r3, r1
 800b430:	42a0      	cmp	r0, r4
 800b432:	d10b      	bne.n	800b44c <_free_r+0x74>
 800b434:	6820      	ldr	r0, [r4, #0]
 800b436:	4401      	add	r1, r0
 800b438:	1858      	adds	r0, r3, r1
 800b43a:	4282      	cmp	r2, r0
 800b43c:	6019      	str	r1, [r3, #0]
 800b43e:	d1dd      	bne.n	800b3fc <_free_r+0x24>
 800b440:	6810      	ldr	r0, [r2, #0]
 800b442:	6852      	ldr	r2, [r2, #4]
 800b444:	605a      	str	r2, [r3, #4]
 800b446:	4401      	add	r1, r0
 800b448:	6019      	str	r1, [r3, #0]
 800b44a:	e7d7      	b.n	800b3fc <_free_r+0x24>
 800b44c:	d902      	bls.n	800b454 <_free_r+0x7c>
 800b44e:	230c      	movs	r3, #12
 800b450:	602b      	str	r3, [r5, #0]
 800b452:	e7d3      	b.n	800b3fc <_free_r+0x24>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	1821      	adds	r1, r4, r0
 800b458:	428a      	cmp	r2, r1
 800b45a:	bf04      	itt	eq
 800b45c:	6811      	ldreq	r1, [r2, #0]
 800b45e:	6852      	ldreq	r2, [r2, #4]
 800b460:	6062      	str	r2, [r4, #4]
 800b462:	bf04      	itt	eq
 800b464:	1809      	addeq	r1, r1, r0
 800b466:	6021      	streq	r1, [r4, #0]
 800b468:	605c      	str	r4, [r3, #4]
 800b46a:	e7c7      	b.n	800b3fc <_free_r+0x24>
 800b46c:	bd38      	pop	{r3, r4, r5, pc}
 800b46e:	bf00      	nop
 800b470:	20003f90 	.word	0x20003f90

0800b474 <_malloc_r>:
 800b474:	b570      	push	{r4, r5, r6, lr}
 800b476:	1ccd      	adds	r5, r1, #3
 800b478:	f025 0503 	bic.w	r5, r5, #3
 800b47c:	3508      	adds	r5, #8
 800b47e:	2d0c      	cmp	r5, #12
 800b480:	bf38      	it	cc
 800b482:	250c      	movcc	r5, #12
 800b484:	2d00      	cmp	r5, #0
 800b486:	4606      	mov	r6, r0
 800b488:	db01      	blt.n	800b48e <_malloc_r+0x1a>
 800b48a:	42a9      	cmp	r1, r5
 800b48c:	d903      	bls.n	800b496 <_malloc_r+0x22>
 800b48e:	230c      	movs	r3, #12
 800b490:	6033      	str	r3, [r6, #0]
 800b492:	2000      	movs	r0, #0
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	f000 fd7f 	bl	800bf98 <__malloc_lock>
 800b49a:	4a23      	ldr	r2, [pc, #140]	; (800b528 <_malloc_r+0xb4>)
 800b49c:	6814      	ldr	r4, [r2, #0]
 800b49e:	4621      	mov	r1, r4
 800b4a0:	b991      	cbnz	r1, 800b4c8 <_malloc_r+0x54>
 800b4a2:	4c22      	ldr	r4, [pc, #136]	; (800b52c <_malloc_r+0xb8>)
 800b4a4:	6823      	ldr	r3, [r4, #0]
 800b4a6:	b91b      	cbnz	r3, 800b4b0 <_malloc_r+0x3c>
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f000 fb17 	bl	800badc <_sbrk_r>
 800b4ae:	6020      	str	r0, [r4, #0]
 800b4b0:	4629      	mov	r1, r5
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	f000 fb12 	bl	800badc <_sbrk_r>
 800b4b8:	1c43      	adds	r3, r0, #1
 800b4ba:	d126      	bne.n	800b50a <_malloc_r+0x96>
 800b4bc:	230c      	movs	r3, #12
 800b4be:	6033      	str	r3, [r6, #0]
 800b4c0:	4630      	mov	r0, r6
 800b4c2:	f000 fd6a 	bl	800bf9a <__malloc_unlock>
 800b4c6:	e7e4      	b.n	800b492 <_malloc_r+0x1e>
 800b4c8:	680b      	ldr	r3, [r1, #0]
 800b4ca:	1b5b      	subs	r3, r3, r5
 800b4cc:	d41a      	bmi.n	800b504 <_malloc_r+0x90>
 800b4ce:	2b0b      	cmp	r3, #11
 800b4d0:	d90f      	bls.n	800b4f2 <_malloc_r+0x7e>
 800b4d2:	600b      	str	r3, [r1, #0]
 800b4d4:	50cd      	str	r5, [r1, r3]
 800b4d6:	18cc      	adds	r4, r1, r3
 800b4d8:	4630      	mov	r0, r6
 800b4da:	f000 fd5e 	bl	800bf9a <__malloc_unlock>
 800b4de:	f104 000b 	add.w	r0, r4, #11
 800b4e2:	1d23      	adds	r3, r4, #4
 800b4e4:	f020 0007 	bic.w	r0, r0, #7
 800b4e8:	1ac3      	subs	r3, r0, r3
 800b4ea:	d01b      	beq.n	800b524 <_malloc_r+0xb0>
 800b4ec:	425a      	negs	r2, r3
 800b4ee:	50e2      	str	r2, [r4, r3]
 800b4f0:	bd70      	pop	{r4, r5, r6, pc}
 800b4f2:	428c      	cmp	r4, r1
 800b4f4:	bf0d      	iteet	eq
 800b4f6:	6863      	ldreq	r3, [r4, #4]
 800b4f8:	684b      	ldrne	r3, [r1, #4]
 800b4fa:	6063      	strne	r3, [r4, #4]
 800b4fc:	6013      	streq	r3, [r2, #0]
 800b4fe:	bf18      	it	ne
 800b500:	460c      	movne	r4, r1
 800b502:	e7e9      	b.n	800b4d8 <_malloc_r+0x64>
 800b504:	460c      	mov	r4, r1
 800b506:	6849      	ldr	r1, [r1, #4]
 800b508:	e7ca      	b.n	800b4a0 <_malloc_r+0x2c>
 800b50a:	1cc4      	adds	r4, r0, #3
 800b50c:	f024 0403 	bic.w	r4, r4, #3
 800b510:	42a0      	cmp	r0, r4
 800b512:	d005      	beq.n	800b520 <_malloc_r+0xac>
 800b514:	1a21      	subs	r1, r4, r0
 800b516:	4630      	mov	r0, r6
 800b518:	f000 fae0 	bl	800badc <_sbrk_r>
 800b51c:	3001      	adds	r0, #1
 800b51e:	d0cd      	beq.n	800b4bc <_malloc_r+0x48>
 800b520:	6025      	str	r5, [r4, #0]
 800b522:	e7d9      	b.n	800b4d8 <_malloc_r+0x64>
 800b524:	bd70      	pop	{r4, r5, r6, pc}
 800b526:	bf00      	nop
 800b528:	20003f90 	.word	0x20003f90
 800b52c:	20003f94 	.word	0x20003f94

0800b530 <__sfputc_r>:
 800b530:	6893      	ldr	r3, [r2, #8]
 800b532:	3b01      	subs	r3, #1
 800b534:	2b00      	cmp	r3, #0
 800b536:	b410      	push	{r4}
 800b538:	6093      	str	r3, [r2, #8]
 800b53a:	da09      	bge.n	800b550 <__sfputc_r+0x20>
 800b53c:	6994      	ldr	r4, [r2, #24]
 800b53e:	42a3      	cmp	r3, r4
 800b540:	db02      	blt.n	800b548 <__sfputc_r+0x18>
 800b542:	b2cb      	uxtb	r3, r1
 800b544:	2b0a      	cmp	r3, #10
 800b546:	d103      	bne.n	800b550 <__sfputc_r+0x20>
 800b548:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b54c:	f000 bb1a 	b.w	800bb84 <__swbuf_r>
 800b550:	6813      	ldr	r3, [r2, #0]
 800b552:	1c58      	adds	r0, r3, #1
 800b554:	6010      	str	r0, [r2, #0]
 800b556:	7019      	strb	r1, [r3, #0]
 800b558:	b2c8      	uxtb	r0, r1
 800b55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <__sfputs_r>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	4606      	mov	r6, r0
 800b564:	460f      	mov	r7, r1
 800b566:	4614      	mov	r4, r2
 800b568:	18d5      	adds	r5, r2, r3
 800b56a:	42ac      	cmp	r4, r5
 800b56c:	d101      	bne.n	800b572 <__sfputs_r+0x12>
 800b56e:	2000      	movs	r0, #0
 800b570:	e007      	b.n	800b582 <__sfputs_r+0x22>
 800b572:	463a      	mov	r2, r7
 800b574:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b578:	4630      	mov	r0, r6
 800b57a:	f7ff ffd9 	bl	800b530 <__sfputc_r>
 800b57e:	1c43      	adds	r3, r0, #1
 800b580:	d1f3      	bne.n	800b56a <__sfputs_r+0xa>
 800b582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b584 <_vfiprintf_r>:
 800b584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b588:	b09d      	sub	sp, #116	; 0x74
 800b58a:	460c      	mov	r4, r1
 800b58c:	4617      	mov	r7, r2
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	4606      	mov	r6, r0
 800b592:	b118      	cbz	r0, 800b59c <_vfiprintf_r+0x18>
 800b594:	6983      	ldr	r3, [r0, #24]
 800b596:	b90b      	cbnz	r3, 800b59c <_vfiprintf_r+0x18>
 800b598:	f7ff fe8c 	bl	800b2b4 <__sinit>
 800b59c:	4b7c      	ldr	r3, [pc, #496]	; (800b790 <_vfiprintf_r+0x20c>)
 800b59e:	429c      	cmp	r4, r3
 800b5a0:	d157      	bne.n	800b652 <_vfiprintf_r+0xce>
 800b5a2:	6874      	ldr	r4, [r6, #4]
 800b5a4:	89a3      	ldrh	r3, [r4, #12]
 800b5a6:	0718      	lsls	r0, r3, #28
 800b5a8:	d55d      	bpl.n	800b666 <_vfiprintf_r+0xe2>
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d05a      	beq.n	800b666 <_vfiprintf_r+0xe2>
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b5b4:	2320      	movs	r3, #32
 800b5b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b5ba:	2330      	movs	r3, #48	; 0x30
 800b5bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b5c0:	f04f 0b01 	mov.w	fp, #1
 800b5c4:	46b8      	mov	r8, r7
 800b5c6:	4645      	mov	r5, r8
 800b5c8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d155      	bne.n	800b67c <_vfiprintf_r+0xf8>
 800b5d0:	ebb8 0a07 	subs.w	sl, r8, r7
 800b5d4:	d00b      	beq.n	800b5ee <_vfiprintf_r+0x6a>
 800b5d6:	4653      	mov	r3, sl
 800b5d8:	463a      	mov	r2, r7
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4630      	mov	r0, r6
 800b5de:	f7ff ffbf 	bl	800b560 <__sfputs_r>
 800b5e2:	3001      	adds	r0, #1
 800b5e4:	f000 80c4 	beq.w	800b770 <_vfiprintf_r+0x1ec>
 800b5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5ea:	4453      	add	r3, sl
 800b5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800b5ee:	f898 3000 	ldrb.w	r3, [r8]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 80bc 	beq.w	800b770 <_vfiprintf_r+0x1ec>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b5fe:	9304      	str	r3, [sp, #16]
 800b600:	9307      	str	r3, [sp, #28]
 800b602:	9205      	str	r2, [sp, #20]
 800b604:	9306      	str	r3, [sp, #24]
 800b606:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b60a:	931a      	str	r3, [sp, #104]	; 0x68
 800b60c:	2205      	movs	r2, #5
 800b60e:	7829      	ldrb	r1, [r5, #0]
 800b610:	4860      	ldr	r0, [pc, #384]	; (800b794 <_vfiprintf_r+0x210>)
 800b612:	f7f4 fdfd 	bl	8000210 <memchr>
 800b616:	f105 0801 	add.w	r8, r5, #1
 800b61a:	9b04      	ldr	r3, [sp, #16]
 800b61c:	2800      	cmp	r0, #0
 800b61e:	d131      	bne.n	800b684 <_vfiprintf_r+0x100>
 800b620:	06d9      	lsls	r1, r3, #27
 800b622:	bf44      	itt	mi
 800b624:	2220      	movmi	r2, #32
 800b626:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b62a:	071a      	lsls	r2, r3, #28
 800b62c:	bf44      	itt	mi
 800b62e:	222b      	movmi	r2, #43	; 0x2b
 800b630:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b634:	782a      	ldrb	r2, [r5, #0]
 800b636:	2a2a      	cmp	r2, #42	; 0x2a
 800b638:	d02c      	beq.n	800b694 <_vfiprintf_r+0x110>
 800b63a:	9a07      	ldr	r2, [sp, #28]
 800b63c:	2100      	movs	r1, #0
 800b63e:	200a      	movs	r0, #10
 800b640:	46a8      	mov	r8, r5
 800b642:	3501      	adds	r5, #1
 800b644:	f898 3000 	ldrb.w	r3, [r8]
 800b648:	3b30      	subs	r3, #48	; 0x30
 800b64a:	2b09      	cmp	r3, #9
 800b64c:	d96d      	bls.n	800b72a <_vfiprintf_r+0x1a6>
 800b64e:	b371      	cbz	r1, 800b6ae <_vfiprintf_r+0x12a>
 800b650:	e026      	b.n	800b6a0 <_vfiprintf_r+0x11c>
 800b652:	4b51      	ldr	r3, [pc, #324]	; (800b798 <_vfiprintf_r+0x214>)
 800b654:	429c      	cmp	r4, r3
 800b656:	d101      	bne.n	800b65c <_vfiprintf_r+0xd8>
 800b658:	68b4      	ldr	r4, [r6, #8]
 800b65a:	e7a3      	b.n	800b5a4 <_vfiprintf_r+0x20>
 800b65c:	4b4f      	ldr	r3, [pc, #316]	; (800b79c <_vfiprintf_r+0x218>)
 800b65e:	429c      	cmp	r4, r3
 800b660:	bf08      	it	eq
 800b662:	68f4      	ldreq	r4, [r6, #12]
 800b664:	e79e      	b.n	800b5a4 <_vfiprintf_r+0x20>
 800b666:	4621      	mov	r1, r4
 800b668:	4630      	mov	r0, r6
 800b66a:	f000 faef 	bl	800bc4c <__swsetup_r>
 800b66e:	2800      	cmp	r0, #0
 800b670:	d09e      	beq.n	800b5b0 <_vfiprintf_r+0x2c>
 800b672:	f04f 30ff 	mov.w	r0, #4294967295
 800b676:	b01d      	add	sp, #116	; 0x74
 800b678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b67c:	2b25      	cmp	r3, #37	; 0x25
 800b67e:	d0a7      	beq.n	800b5d0 <_vfiprintf_r+0x4c>
 800b680:	46a8      	mov	r8, r5
 800b682:	e7a0      	b.n	800b5c6 <_vfiprintf_r+0x42>
 800b684:	4a43      	ldr	r2, [pc, #268]	; (800b794 <_vfiprintf_r+0x210>)
 800b686:	1a80      	subs	r0, r0, r2
 800b688:	fa0b f000 	lsl.w	r0, fp, r0
 800b68c:	4318      	orrs	r0, r3
 800b68e:	9004      	str	r0, [sp, #16]
 800b690:	4645      	mov	r5, r8
 800b692:	e7bb      	b.n	800b60c <_vfiprintf_r+0x88>
 800b694:	9a03      	ldr	r2, [sp, #12]
 800b696:	1d11      	adds	r1, r2, #4
 800b698:	6812      	ldr	r2, [r2, #0]
 800b69a:	9103      	str	r1, [sp, #12]
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	db01      	blt.n	800b6a4 <_vfiprintf_r+0x120>
 800b6a0:	9207      	str	r2, [sp, #28]
 800b6a2:	e004      	b.n	800b6ae <_vfiprintf_r+0x12a>
 800b6a4:	4252      	negs	r2, r2
 800b6a6:	f043 0302 	orr.w	r3, r3, #2
 800b6aa:	9207      	str	r2, [sp, #28]
 800b6ac:	9304      	str	r3, [sp, #16]
 800b6ae:	f898 3000 	ldrb.w	r3, [r8]
 800b6b2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6b4:	d110      	bne.n	800b6d8 <_vfiprintf_r+0x154>
 800b6b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b6ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b6bc:	f108 0101 	add.w	r1, r8, #1
 800b6c0:	d137      	bne.n	800b732 <_vfiprintf_r+0x1ae>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	1d1a      	adds	r2, r3, #4
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	9203      	str	r2, [sp, #12]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	bfb8      	it	lt
 800b6ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6d2:	f108 0802 	add.w	r8, r8, #2
 800b6d6:	9305      	str	r3, [sp, #20]
 800b6d8:	4d31      	ldr	r5, [pc, #196]	; (800b7a0 <_vfiprintf_r+0x21c>)
 800b6da:	f898 1000 	ldrb.w	r1, [r8]
 800b6de:	2203      	movs	r2, #3
 800b6e0:	4628      	mov	r0, r5
 800b6e2:	f7f4 fd95 	bl	8000210 <memchr>
 800b6e6:	b140      	cbz	r0, 800b6fa <_vfiprintf_r+0x176>
 800b6e8:	2340      	movs	r3, #64	; 0x40
 800b6ea:	1b40      	subs	r0, r0, r5
 800b6ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b6f0:	9b04      	ldr	r3, [sp, #16]
 800b6f2:	4303      	orrs	r3, r0
 800b6f4:	9304      	str	r3, [sp, #16]
 800b6f6:	f108 0801 	add.w	r8, r8, #1
 800b6fa:	f898 1000 	ldrb.w	r1, [r8]
 800b6fe:	4829      	ldr	r0, [pc, #164]	; (800b7a4 <_vfiprintf_r+0x220>)
 800b700:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b704:	2206      	movs	r2, #6
 800b706:	f108 0701 	add.w	r7, r8, #1
 800b70a:	f7f4 fd81 	bl	8000210 <memchr>
 800b70e:	2800      	cmp	r0, #0
 800b710:	d034      	beq.n	800b77c <_vfiprintf_r+0x1f8>
 800b712:	4b25      	ldr	r3, [pc, #148]	; (800b7a8 <_vfiprintf_r+0x224>)
 800b714:	bb03      	cbnz	r3, 800b758 <_vfiprintf_r+0x1d4>
 800b716:	9b03      	ldr	r3, [sp, #12]
 800b718:	3307      	adds	r3, #7
 800b71a:	f023 0307 	bic.w	r3, r3, #7
 800b71e:	3308      	adds	r3, #8
 800b720:	9303      	str	r3, [sp, #12]
 800b722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b724:	444b      	add	r3, r9
 800b726:	9309      	str	r3, [sp, #36]	; 0x24
 800b728:	e74c      	b.n	800b5c4 <_vfiprintf_r+0x40>
 800b72a:	fb00 3202 	mla	r2, r0, r2, r3
 800b72e:	2101      	movs	r1, #1
 800b730:	e786      	b.n	800b640 <_vfiprintf_r+0xbc>
 800b732:	2300      	movs	r3, #0
 800b734:	9305      	str	r3, [sp, #20]
 800b736:	4618      	mov	r0, r3
 800b738:	250a      	movs	r5, #10
 800b73a:	4688      	mov	r8, r1
 800b73c:	3101      	adds	r1, #1
 800b73e:	f898 2000 	ldrb.w	r2, [r8]
 800b742:	3a30      	subs	r2, #48	; 0x30
 800b744:	2a09      	cmp	r2, #9
 800b746:	d903      	bls.n	800b750 <_vfiprintf_r+0x1cc>
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d0c5      	beq.n	800b6d8 <_vfiprintf_r+0x154>
 800b74c:	9005      	str	r0, [sp, #20]
 800b74e:	e7c3      	b.n	800b6d8 <_vfiprintf_r+0x154>
 800b750:	fb05 2000 	mla	r0, r5, r0, r2
 800b754:	2301      	movs	r3, #1
 800b756:	e7f0      	b.n	800b73a <_vfiprintf_r+0x1b6>
 800b758:	ab03      	add	r3, sp, #12
 800b75a:	9300      	str	r3, [sp, #0]
 800b75c:	4622      	mov	r2, r4
 800b75e:	4b13      	ldr	r3, [pc, #76]	; (800b7ac <_vfiprintf_r+0x228>)
 800b760:	a904      	add	r1, sp, #16
 800b762:	4630      	mov	r0, r6
 800b764:	f3af 8000 	nop.w
 800b768:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b76c:	4681      	mov	r9, r0
 800b76e:	d1d8      	bne.n	800b722 <_vfiprintf_r+0x19e>
 800b770:	89a3      	ldrh	r3, [r4, #12]
 800b772:	065b      	lsls	r3, r3, #25
 800b774:	f53f af7d 	bmi.w	800b672 <_vfiprintf_r+0xee>
 800b778:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b77a:	e77c      	b.n	800b676 <_vfiprintf_r+0xf2>
 800b77c:	ab03      	add	r3, sp, #12
 800b77e:	9300      	str	r3, [sp, #0]
 800b780:	4622      	mov	r2, r4
 800b782:	4b0a      	ldr	r3, [pc, #40]	; (800b7ac <_vfiprintf_r+0x228>)
 800b784:	a904      	add	r1, sp, #16
 800b786:	4630      	mov	r0, r6
 800b788:	f000 f888 	bl	800b89c <_printf_i>
 800b78c:	e7ec      	b.n	800b768 <_vfiprintf_r+0x1e4>
 800b78e:	bf00      	nop
 800b790:	0800daa4 	.word	0x0800daa4
 800b794:	0800dae8 	.word	0x0800dae8
 800b798:	0800dac4 	.word	0x0800dac4
 800b79c:	0800da84 	.word	0x0800da84
 800b7a0:	0800daee 	.word	0x0800daee
 800b7a4:	0800daf2 	.word	0x0800daf2
 800b7a8:	00000000 	.word	0x00000000
 800b7ac:	0800b561 	.word	0x0800b561

0800b7b0 <_printf_common>:
 800b7b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7b4:	4691      	mov	r9, r2
 800b7b6:	461f      	mov	r7, r3
 800b7b8:	688a      	ldr	r2, [r1, #8]
 800b7ba:	690b      	ldr	r3, [r1, #16]
 800b7bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	bfb8      	it	lt
 800b7c4:	4613      	movlt	r3, r2
 800b7c6:	f8c9 3000 	str.w	r3, [r9]
 800b7ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b7ce:	4606      	mov	r6, r0
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	b112      	cbz	r2, 800b7da <_printf_common+0x2a>
 800b7d4:	3301      	adds	r3, #1
 800b7d6:	f8c9 3000 	str.w	r3, [r9]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	0699      	lsls	r1, r3, #26
 800b7de:	bf42      	ittt	mi
 800b7e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b7e4:	3302      	addmi	r3, #2
 800b7e6:	f8c9 3000 	strmi.w	r3, [r9]
 800b7ea:	6825      	ldr	r5, [r4, #0]
 800b7ec:	f015 0506 	ands.w	r5, r5, #6
 800b7f0:	d107      	bne.n	800b802 <_printf_common+0x52>
 800b7f2:	f104 0a19 	add.w	sl, r4, #25
 800b7f6:	68e3      	ldr	r3, [r4, #12]
 800b7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800b7fc:	1a9b      	subs	r3, r3, r2
 800b7fe:	429d      	cmp	r5, r3
 800b800:	db29      	blt.n	800b856 <_printf_common+0xa6>
 800b802:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b806:	6822      	ldr	r2, [r4, #0]
 800b808:	3300      	adds	r3, #0
 800b80a:	bf18      	it	ne
 800b80c:	2301      	movne	r3, #1
 800b80e:	0692      	lsls	r2, r2, #26
 800b810:	d42e      	bmi.n	800b870 <_printf_common+0xc0>
 800b812:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b816:	4639      	mov	r1, r7
 800b818:	4630      	mov	r0, r6
 800b81a:	47c0      	blx	r8
 800b81c:	3001      	adds	r0, #1
 800b81e:	d021      	beq.n	800b864 <_printf_common+0xb4>
 800b820:	6823      	ldr	r3, [r4, #0]
 800b822:	68e5      	ldr	r5, [r4, #12]
 800b824:	f8d9 2000 	ldr.w	r2, [r9]
 800b828:	f003 0306 	and.w	r3, r3, #6
 800b82c:	2b04      	cmp	r3, #4
 800b82e:	bf08      	it	eq
 800b830:	1aad      	subeq	r5, r5, r2
 800b832:	68a3      	ldr	r3, [r4, #8]
 800b834:	6922      	ldr	r2, [r4, #16]
 800b836:	bf0c      	ite	eq
 800b838:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b83c:	2500      	movne	r5, #0
 800b83e:	4293      	cmp	r3, r2
 800b840:	bfc4      	itt	gt
 800b842:	1a9b      	subgt	r3, r3, r2
 800b844:	18ed      	addgt	r5, r5, r3
 800b846:	f04f 0900 	mov.w	r9, #0
 800b84a:	341a      	adds	r4, #26
 800b84c:	454d      	cmp	r5, r9
 800b84e:	d11b      	bne.n	800b888 <_printf_common+0xd8>
 800b850:	2000      	movs	r0, #0
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	2301      	movs	r3, #1
 800b858:	4652      	mov	r2, sl
 800b85a:	4639      	mov	r1, r7
 800b85c:	4630      	mov	r0, r6
 800b85e:	47c0      	blx	r8
 800b860:	3001      	adds	r0, #1
 800b862:	d103      	bne.n	800b86c <_printf_common+0xbc>
 800b864:	f04f 30ff 	mov.w	r0, #4294967295
 800b868:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b86c:	3501      	adds	r5, #1
 800b86e:	e7c2      	b.n	800b7f6 <_printf_common+0x46>
 800b870:	18e1      	adds	r1, r4, r3
 800b872:	1c5a      	adds	r2, r3, #1
 800b874:	2030      	movs	r0, #48	; 0x30
 800b876:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b87a:	4422      	add	r2, r4
 800b87c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b880:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b884:	3302      	adds	r3, #2
 800b886:	e7c4      	b.n	800b812 <_printf_common+0x62>
 800b888:	2301      	movs	r3, #1
 800b88a:	4622      	mov	r2, r4
 800b88c:	4639      	mov	r1, r7
 800b88e:	4630      	mov	r0, r6
 800b890:	47c0      	blx	r8
 800b892:	3001      	adds	r0, #1
 800b894:	d0e6      	beq.n	800b864 <_printf_common+0xb4>
 800b896:	f109 0901 	add.w	r9, r9, #1
 800b89a:	e7d7      	b.n	800b84c <_printf_common+0x9c>

0800b89c <_printf_i>:
 800b89c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b8a0:	4617      	mov	r7, r2
 800b8a2:	7e0a      	ldrb	r2, [r1, #24]
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	2a6e      	cmp	r2, #110	; 0x6e
 800b8a8:	4698      	mov	r8, r3
 800b8aa:	4606      	mov	r6, r0
 800b8ac:	460c      	mov	r4, r1
 800b8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8b0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800b8b4:	f000 80bc 	beq.w	800ba30 <_printf_i+0x194>
 800b8b8:	d81a      	bhi.n	800b8f0 <_printf_i+0x54>
 800b8ba:	2a63      	cmp	r2, #99	; 0x63
 800b8bc:	d02e      	beq.n	800b91c <_printf_i+0x80>
 800b8be:	d80a      	bhi.n	800b8d6 <_printf_i+0x3a>
 800b8c0:	2a00      	cmp	r2, #0
 800b8c2:	f000 80c8 	beq.w	800ba56 <_printf_i+0x1ba>
 800b8c6:	2a58      	cmp	r2, #88	; 0x58
 800b8c8:	f000 808a 	beq.w	800b9e0 <_printf_i+0x144>
 800b8cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b8d0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800b8d4:	e02a      	b.n	800b92c <_printf_i+0x90>
 800b8d6:	2a64      	cmp	r2, #100	; 0x64
 800b8d8:	d001      	beq.n	800b8de <_printf_i+0x42>
 800b8da:	2a69      	cmp	r2, #105	; 0x69
 800b8dc:	d1f6      	bne.n	800b8cc <_printf_i+0x30>
 800b8de:	6821      	ldr	r1, [r4, #0]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b8e6:	d023      	beq.n	800b930 <_printf_i+0x94>
 800b8e8:	1d11      	adds	r1, r2, #4
 800b8ea:	6019      	str	r1, [r3, #0]
 800b8ec:	6813      	ldr	r3, [r2, #0]
 800b8ee:	e027      	b.n	800b940 <_printf_i+0xa4>
 800b8f0:	2a73      	cmp	r2, #115	; 0x73
 800b8f2:	f000 80b4 	beq.w	800ba5e <_printf_i+0x1c2>
 800b8f6:	d808      	bhi.n	800b90a <_printf_i+0x6e>
 800b8f8:	2a6f      	cmp	r2, #111	; 0x6f
 800b8fa:	d02a      	beq.n	800b952 <_printf_i+0xb6>
 800b8fc:	2a70      	cmp	r2, #112	; 0x70
 800b8fe:	d1e5      	bne.n	800b8cc <_printf_i+0x30>
 800b900:	680a      	ldr	r2, [r1, #0]
 800b902:	f042 0220 	orr.w	r2, r2, #32
 800b906:	600a      	str	r2, [r1, #0]
 800b908:	e003      	b.n	800b912 <_printf_i+0x76>
 800b90a:	2a75      	cmp	r2, #117	; 0x75
 800b90c:	d021      	beq.n	800b952 <_printf_i+0xb6>
 800b90e:	2a78      	cmp	r2, #120	; 0x78
 800b910:	d1dc      	bne.n	800b8cc <_printf_i+0x30>
 800b912:	2278      	movs	r2, #120	; 0x78
 800b914:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800b918:	496e      	ldr	r1, [pc, #440]	; (800bad4 <_printf_i+0x238>)
 800b91a:	e064      	b.n	800b9e6 <_printf_i+0x14a>
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800b922:	1d11      	adds	r1, r2, #4
 800b924:	6019      	str	r1, [r3, #0]
 800b926:	6813      	ldr	r3, [r2, #0]
 800b928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b92c:	2301      	movs	r3, #1
 800b92e:	e0a3      	b.n	800ba78 <_printf_i+0x1dc>
 800b930:	f011 0f40 	tst.w	r1, #64	; 0x40
 800b934:	f102 0104 	add.w	r1, r2, #4
 800b938:	6019      	str	r1, [r3, #0]
 800b93a:	d0d7      	beq.n	800b8ec <_printf_i+0x50>
 800b93c:	f9b2 3000 	ldrsh.w	r3, [r2]
 800b940:	2b00      	cmp	r3, #0
 800b942:	da03      	bge.n	800b94c <_printf_i+0xb0>
 800b944:	222d      	movs	r2, #45	; 0x2d
 800b946:	425b      	negs	r3, r3
 800b948:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b94c:	4962      	ldr	r1, [pc, #392]	; (800bad8 <_printf_i+0x23c>)
 800b94e:	220a      	movs	r2, #10
 800b950:	e017      	b.n	800b982 <_printf_i+0xe6>
 800b952:	6820      	ldr	r0, [r4, #0]
 800b954:	6819      	ldr	r1, [r3, #0]
 800b956:	f010 0f80 	tst.w	r0, #128	; 0x80
 800b95a:	d003      	beq.n	800b964 <_printf_i+0xc8>
 800b95c:	1d08      	adds	r0, r1, #4
 800b95e:	6018      	str	r0, [r3, #0]
 800b960:	680b      	ldr	r3, [r1, #0]
 800b962:	e006      	b.n	800b972 <_printf_i+0xd6>
 800b964:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b968:	f101 0004 	add.w	r0, r1, #4
 800b96c:	6018      	str	r0, [r3, #0]
 800b96e:	d0f7      	beq.n	800b960 <_printf_i+0xc4>
 800b970:	880b      	ldrh	r3, [r1, #0]
 800b972:	4959      	ldr	r1, [pc, #356]	; (800bad8 <_printf_i+0x23c>)
 800b974:	2a6f      	cmp	r2, #111	; 0x6f
 800b976:	bf14      	ite	ne
 800b978:	220a      	movne	r2, #10
 800b97a:	2208      	moveq	r2, #8
 800b97c:	2000      	movs	r0, #0
 800b97e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800b982:	6865      	ldr	r5, [r4, #4]
 800b984:	60a5      	str	r5, [r4, #8]
 800b986:	2d00      	cmp	r5, #0
 800b988:	f2c0 809c 	blt.w	800bac4 <_printf_i+0x228>
 800b98c:	6820      	ldr	r0, [r4, #0]
 800b98e:	f020 0004 	bic.w	r0, r0, #4
 800b992:	6020      	str	r0, [r4, #0]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d13f      	bne.n	800ba18 <_printf_i+0x17c>
 800b998:	2d00      	cmp	r5, #0
 800b99a:	f040 8095 	bne.w	800bac8 <_printf_i+0x22c>
 800b99e:	4675      	mov	r5, lr
 800b9a0:	2a08      	cmp	r2, #8
 800b9a2:	d10b      	bne.n	800b9bc <_printf_i+0x120>
 800b9a4:	6823      	ldr	r3, [r4, #0]
 800b9a6:	07da      	lsls	r2, r3, #31
 800b9a8:	d508      	bpl.n	800b9bc <_printf_i+0x120>
 800b9aa:	6923      	ldr	r3, [r4, #16]
 800b9ac:	6862      	ldr	r2, [r4, #4]
 800b9ae:	429a      	cmp	r2, r3
 800b9b0:	bfde      	ittt	le
 800b9b2:	2330      	movle	r3, #48	; 0x30
 800b9b4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b9b8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b9bc:	ebae 0305 	sub.w	r3, lr, r5
 800b9c0:	6123      	str	r3, [r4, #16]
 800b9c2:	f8cd 8000 	str.w	r8, [sp]
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	aa03      	add	r2, sp, #12
 800b9ca:	4621      	mov	r1, r4
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f7ff feef 	bl	800b7b0 <_printf_common>
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	d155      	bne.n	800ba82 <_printf_i+0x1e6>
 800b9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9da:	b005      	add	sp, #20
 800b9dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9e0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800b9e4:	493c      	ldr	r1, [pc, #240]	; (800bad8 <_printf_i+0x23c>)
 800b9e6:	6822      	ldr	r2, [r4, #0]
 800b9e8:	6818      	ldr	r0, [r3, #0]
 800b9ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 800b9ee:	f100 0504 	add.w	r5, r0, #4
 800b9f2:	601d      	str	r5, [r3, #0]
 800b9f4:	d001      	beq.n	800b9fa <_printf_i+0x15e>
 800b9f6:	6803      	ldr	r3, [r0, #0]
 800b9f8:	e002      	b.n	800ba00 <_printf_i+0x164>
 800b9fa:	0655      	lsls	r5, r2, #25
 800b9fc:	d5fb      	bpl.n	800b9f6 <_printf_i+0x15a>
 800b9fe:	8803      	ldrh	r3, [r0, #0]
 800ba00:	07d0      	lsls	r0, r2, #31
 800ba02:	bf44      	itt	mi
 800ba04:	f042 0220 	orrmi.w	r2, r2, #32
 800ba08:	6022      	strmi	r2, [r4, #0]
 800ba0a:	b91b      	cbnz	r3, 800ba14 <_printf_i+0x178>
 800ba0c:	6822      	ldr	r2, [r4, #0]
 800ba0e:	f022 0220 	bic.w	r2, r2, #32
 800ba12:	6022      	str	r2, [r4, #0]
 800ba14:	2210      	movs	r2, #16
 800ba16:	e7b1      	b.n	800b97c <_printf_i+0xe0>
 800ba18:	4675      	mov	r5, lr
 800ba1a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ba1e:	fb02 3310 	mls	r3, r2, r0, r3
 800ba22:	5ccb      	ldrb	r3, [r1, r3]
 800ba24:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ba28:	4603      	mov	r3, r0
 800ba2a:	2800      	cmp	r0, #0
 800ba2c:	d1f5      	bne.n	800ba1a <_printf_i+0x17e>
 800ba2e:	e7b7      	b.n	800b9a0 <_printf_i+0x104>
 800ba30:	6808      	ldr	r0, [r1, #0]
 800ba32:	681a      	ldr	r2, [r3, #0]
 800ba34:	6949      	ldr	r1, [r1, #20]
 800ba36:	f010 0f80 	tst.w	r0, #128	; 0x80
 800ba3a:	d004      	beq.n	800ba46 <_printf_i+0x1aa>
 800ba3c:	1d10      	adds	r0, r2, #4
 800ba3e:	6018      	str	r0, [r3, #0]
 800ba40:	6813      	ldr	r3, [r2, #0]
 800ba42:	6019      	str	r1, [r3, #0]
 800ba44:	e007      	b.n	800ba56 <_printf_i+0x1ba>
 800ba46:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ba4a:	f102 0004 	add.w	r0, r2, #4
 800ba4e:	6018      	str	r0, [r3, #0]
 800ba50:	6813      	ldr	r3, [r2, #0]
 800ba52:	d0f6      	beq.n	800ba42 <_printf_i+0x1a6>
 800ba54:	8019      	strh	r1, [r3, #0]
 800ba56:	2300      	movs	r3, #0
 800ba58:	6123      	str	r3, [r4, #16]
 800ba5a:	4675      	mov	r5, lr
 800ba5c:	e7b1      	b.n	800b9c2 <_printf_i+0x126>
 800ba5e:	681a      	ldr	r2, [r3, #0]
 800ba60:	1d11      	adds	r1, r2, #4
 800ba62:	6019      	str	r1, [r3, #0]
 800ba64:	6815      	ldr	r5, [r2, #0]
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	2100      	movs	r1, #0
 800ba6a:	4628      	mov	r0, r5
 800ba6c:	f7f4 fbd0 	bl	8000210 <memchr>
 800ba70:	b108      	cbz	r0, 800ba76 <_printf_i+0x1da>
 800ba72:	1b40      	subs	r0, r0, r5
 800ba74:	6060      	str	r0, [r4, #4]
 800ba76:	6863      	ldr	r3, [r4, #4]
 800ba78:	6123      	str	r3, [r4, #16]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba80:	e79f      	b.n	800b9c2 <_printf_i+0x126>
 800ba82:	6923      	ldr	r3, [r4, #16]
 800ba84:	462a      	mov	r2, r5
 800ba86:	4639      	mov	r1, r7
 800ba88:	4630      	mov	r0, r6
 800ba8a:	47c0      	blx	r8
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d0a2      	beq.n	800b9d6 <_printf_i+0x13a>
 800ba90:	6823      	ldr	r3, [r4, #0]
 800ba92:	079b      	lsls	r3, r3, #30
 800ba94:	d507      	bpl.n	800baa6 <_printf_i+0x20a>
 800ba96:	2500      	movs	r5, #0
 800ba98:	f104 0919 	add.w	r9, r4, #25
 800ba9c:	68e3      	ldr	r3, [r4, #12]
 800ba9e:	9a03      	ldr	r2, [sp, #12]
 800baa0:	1a9b      	subs	r3, r3, r2
 800baa2:	429d      	cmp	r5, r3
 800baa4:	db05      	blt.n	800bab2 <_printf_i+0x216>
 800baa6:	68e0      	ldr	r0, [r4, #12]
 800baa8:	9b03      	ldr	r3, [sp, #12]
 800baaa:	4298      	cmp	r0, r3
 800baac:	bfb8      	it	lt
 800baae:	4618      	movlt	r0, r3
 800bab0:	e793      	b.n	800b9da <_printf_i+0x13e>
 800bab2:	2301      	movs	r3, #1
 800bab4:	464a      	mov	r2, r9
 800bab6:	4639      	mov	r1, r7
 800bab8:	4630      	mov	r0, r6
 800baba:	47c0      	blx	r8
 800babc:	3001      	adds	r0, #1
 800babe:	d08a      	beq.n	800b9d6 <_printf_i+0x13a>
 800bac0:	3501      	adds	r5, #1
 800bac2:	e7eb      	b.n	800ba9c <_printf_i+0x200>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d1a7      	bne.n	800ba18 <_printf_i+0x17c>
 800bac8:	780b      	ldrb	r3, [r1, #0]
 800baca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bace:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bad2:	e765      	b.n	800b9a0 <_printf_i+0x104>
 800bad4:	0800db0a 	.word	0x0800db0a
 800bad8:	0800daf9 	.word	0x0800daf9

0800badc <_sbrk_r>:
 800badc:	b538      	push	{r3, r4, r5, lr}
 800bade:	4c06      	ldr	r4, [pc, #24]	; (800baf8 <_sbrk_r+0x1c>)
 800bae0:	2300      	movs	r3, #0
 800bae2:	4605      	mov	r5, r0
 800bae4:	4608      	mov	r0, r1
 800bae6:	6023      	str	r3, [r4, #0]
 800bae8:	f7ff f9be 	bl	800ae68 <_sbrk>
 800baec:	1c43      	adds	r3, r0, #1
 800baee:	d102      	bne.n	800baf6 <_sbrk_r+0x1a>
 800baf0:	6823      	ldr	r3, [r4, #0]
 800baf2:	b103      	cbz	r3, 800baf6 <_sbrk_r+0x1a>
 800baf4:	602b      	str	r3, [r5, #0]
 800baf6:	bd38      	pop	{r3, r4, r5, pc}
 800baf8:	20007708 	.word	0x20007708

0800bafc <__sread>:
 800bafc:	b510      	push	{r4, lr}
 800bafe:	460c      	mov	r4, r1
 800bb00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb04:	f000 fa4a 	bl	800bf9c <_read_r>
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	bfab      	itete	ge
 800bb0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bb0e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb10:	181b      	addge	r3, r3, r0
 800bb12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bb16:	bfac      	ite	ge
 800bb18:	6563      	strge	r3, [r4, #84]	; 0x54
 800bb1a:	81a3      	strhlt	r3, [r4, #12]
 800bb1c:	bd10      	pop	{r4, pc}

0800bb1e <__swrite>:
 800bb1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb22:	461f      	mov	r7, r3
 800bb24:	898b      	ldrh	r3, [r1, #12]
 800bb26:	05db      	lsls	r3, r3, #23
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	4616      	mov	r6, r2
 800bb2e:	d505      	bpl.n	800bb3c <__swrite+0x1e>
 800bb30:	2302      	movs	r3, #2
 800bb32:	2200      	movs	r2, #0
 800bb34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb38:	f000 f9b8 	bl	800beac <_lseek_r>
 800bb3c:	89a3      	ldrh	r3, [r4, #12]
 800bb3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb46:	81a3      	strh	r3, [r4, #12]
 800bb48:	4632      	mov	r2, r6
 800bb4a:	463b      	mov	r3, r7
 800bb4c:	4628      	mov	r0, r5
 800bb4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb52:	f000 b869 	b.w	800bc28 <_write_r>

0800bb56 <__sseek>:
 800bb56:	b510      	push	{r4, lr}
 800bb58:	460c      	mov	r4, r1
 800bb5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb5e:	f000 f9a5 	bl	800beac <_lseek_r>
 800bb62:	1c43      	adds	r3, r0, #1
 800bb64:	89a3      	ldrh	r3, [r4, #12]
 800bb66:	bf15      	itete	ne
 800bb68:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb72:	81a3      	strheq	r3, [r4, #12]
 800bb74:	bf18      	it	ne
 800bb76:	81a3      	strhne	r3, [r4, #12]
 800bb78:	bd10      	pop	{r4, pc}

0800bb7a <__sclose>:
 800bb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7e:	f000 b8d3 	b.w	800bd28 <_close_r>
	...

0800bb84 <__swbuf_r>:
 800bb84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb86:	460e      	mov	r6, r1
 800bb88:	4614      	mov	r4, r2
 800bb8a:	4605      	mov	r5, r0
 800bb8c:	b118      	cbz	r0, 800bb96 <__swbuf_r+0x12>
 800bb8e:	6983      	ldr	r3, [r0, #24]
 800bb90:	b90b      	cbnz	r3, 800bb96 <__swbuf_r+0x12>
 800bb92:	f7ff fb8f 	bl	800b2b4 <__sinit>
 800bb96:	4b21      	ldr	r3, [pc, #132]	; (800bc1c <__swbuf_r+0x98>)
 800bb98:	429c      	cmp	r4, r3
 800bb9a:	d12a      	bne.n	800bbf2 <__swbuf_r+0x6e>
 800bb9c:	686c      	ldr	r4, [r5, #4]
 800bb9e:	69a3      	ldr	r3, [r4, #24]
 800bba0:	60a3      	str	r3, [r4, #8]
 800bba2:	89a3      	ldrh	r3, [r4, #12]
 800bba4:	071a      	lsls	r2, r3, #28
 800bba6:	d52e      	bpl.n	800bc06 <__swbuf_r+0x82>
 800bba8:	6923      	ldr	r3, [r4, #16]
 800bbaa:	b363      	cbz	r3, 800bc06 <__swbuf_r+0x82>
 800bbac:	6923      	ldr	r3, [r4, #16]
 800bbae:	6820      	ldr	r0, [r4, #0]
 800bbb0:	1ac0      	subs	r0, r0, r3
 800bbb2:	6963      	ldr	r3, [r4, #20]
 800bbb4:	b2f6      	uxtb	r6, r6
 800bbb6:	4298      	cmp	r0, r3
 800bbb8:	4637      	mov	r7, r6
 800bbba:	db04      	blt.n	800bbc6 <__swbuf_r+0x42>
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	4628      	mov	r0, r5
 800bbc0:	f000 f94a 	bl	800be58 <_fflush_r>
 800bbc4:	bb28      	cbnz	r0, 800bc12 <__swbuf_r+0x8e>
 800bbc6:	68a3      	ldr	r3, [r4, #8]
 800bbc8:	3b01      	subs	r3, #1
 800bbca:	60a3      	str	r3, [r4, #8]
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	1c5a      	adds	r2, r3, #1
 800bbd0:	6022      	str	r2, [r4, #0]
 800bbd2:	701e      	strb	r6, [r3, #0]
 800bbd4:	6963      	ldr	r3, [r4, #20]
 800bbd6:	3001      	adds	r0, #1
 800bbd8:	4298      	cmp	r0, r3
 800bbda:	d004      	beq.n	800bbe6 <__swbuf_r+0x62>
 800bbdc:	89a3      	ldrh	r3, [r4, #12]
 800bbde:	07db      	lsls	r3, r3, #31
 800bbe0:	d519      	bpl.n	800bc16 <__swbuf_r+0x92>
 800bbe2:	2e0a      	cmp	r6, #10
 800bbe4:	d117      	bne.n	800bc16 <__swbuf_r+0x92>
 800bbe6:	4621      	mov	r1, r4
 800bbe8:	4628      	mov	r0, r5
 800bbea:	f000 f935 	bl	800be58 <_fflush_r>
 800bbee:	b190      	cbz	r0, 800bc16 <__swbuf_r+0x92>
 800bbf0:	e00f      	b.n	800bc12 <__swbuf_r+0x8e>
 800bbf2:	4b0b      	ldr	r3, [pc, #44]	; (800bc20 <__swbuf_r+0x9c>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	d101      	bne.n	800bbfc <__swbuf_r+0x78>
 800bbf8:	68ac      	ldr	r4, [r5, #8]
 800bbfa:	e7d0      	b.n	800bb9e <__swbuf_r+0x1a>
 800bbfc:	4b09      	ldr	r3, [pc, #36]	; (800bc24 <__swbuf_r+0xa0>)
 800bbfe:	429c      	cmp	r4, r3
 800bc00:	bf08      	it	eq
 800bc02:	68ec      	ldreq	r4, [r5, #12]
 800bc04:	e7cb      	b.n	800bb9e <__swbuf_r+0x1a>
 800bc06:	4621      	mov	r1, r4
 800bc08:	4628      	mov	r0, r5
 800bc0a:	f000 f81f 	bl	800bc4c <__swsetup_r>
 800bc0e:	2800      	cmp	r0, #0
 800bc10:	d0cc      	beq.n	800bbac <__swbuf_r+0x28>
 800bc12:	f04f 37ff 	mov.w	r7, #4294967295
 800bc16:	4638      	mov	r0, r7
 800bc18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc1a:	bf00      	nop
 800bc1c:	0800daa4 	.word	0x0800daa4
 800bc20:	0800dac4 	.word	0x0800dac4
 800bc24:	0800da84 	.word	0x0800da84

0800bc28 <_write_r>:
 800bc28:	b538      	push	{r3, r4, r5, lr}
 800bc2a:	4c07      	ldr	r4, [pc, #28]	; (800bc48 <_write_r+0x20>)
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	4608      	mov	r0, r1
 800bc30:	4611      	mov	r1, r2
 800bc32:	2200      	movs	r2, #0
 800bc34:	6022      	str	r2, [r4, #0]
 800bc36:	461a      	mov	r2, r3
 800bc38:	f7ff f936 	bl	800aea8 <_write>
 800bc3c:	1c43      	adds	r3, r0, #1
 800bc3e:	d102      	bne.n	800bc46 <_write_r+0x1e>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	b103      	cbz	r3, 800bc46 <_write_r+0x1e>
 800bc44:	602b      	str	r3, [r5, #0]
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	20007708 	.word	0x20007708

0800bc4c <__swsetup_r>:
 800bc4c:	4b32      	ldr	r3, [pc, #200]	; (800bd18 <__swsetup_r+0xcc>)
 800bc4e:	b570      	push	{r4, r5, r6, lr}
 800bc50:	681d      	ldr	r5, [r3, #0]
 800bc52:	4606      	mov	r6, r0
 800bc54:	460c      	mov	r4, r1
 800bc56:	b125      	cbz	r5, 800bc62 <__swsetup_r+0x16>
 800bc58:	69ab      	ldr	r3, [r5, #24]
 800bc5a:	b913      	cbnz	r3, 800bc62 <__swsetup_r+0x16>
 800bc5c:	4628      	mov	r0, r5
 800bc5e:	f7ff fb29 	bl	800b2b4 <__sinit>
 800bc62:	4b2e      	ldr	r3, [pc, #184]	; (800bd1c <__swsetup_r+0xd0>)
 800bc64:	429c      	cmp	r4, r3
 800bc66:	d10f      	bne.n	800bc88 <__swsetup_r+0x3c>
 800bc68:	686c      	ldr	r4, [r5, #4]
 800bc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc6e:	b29a      	uxth	r2, r3
 800bc70:	0715      	lsls	r5, r2, #28
 800bc72:	d42c      	bmi.n	800bcce <__swsetup_r+0x82>
 800bc74:	06d0      	lsls	r0, r2, #27
 800bc76:	d411      	bmi.n	800bc9c <__swsetup_r+0x50>
 800bc78:	2209      	movs	r2, #9
 800bc7a:	6032      	str	r2, [r6, #0]
 800bc7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc80:	81a3      	strh	r3, [r4, #12]
 800bc82:	f04f 30ff 	mov.w	r0, #4294967295
 800bc86:	bd70      	pop	{r4, r5, r6, pc}
 800bc88:	4b25      	ldr	r3, [pc, #148]	; (800bd20 <__swsetup_r+0xd4>)
 800bc8a:	429c      	cmp	r4, r3
 800bc8c:	d101      	bne.n	800bc92 <__swsetup_r+0x46>
 800bc8e:	68ac      	ldr	r4, [r5, #8]
 800bc90:	e7eb      	b.n	800bc6a <__swsetup_r+0x1e>
 800bc92:	4b24      	ldr	r3, [pc, #144]	; (800bd24 <__swsetup_r+0xd8>)
 800bc94:	429c      	cmp	r4, r3
 800bc96:	bf08      	it	eq
 800bc98:	68ec      	ldreq	r4, [r5, #12]
 800bc9a:	e7e6      	b.n	800bc6a <__swsetup_r+0x1e>
 800bc9c:	0751      	lsls	r1, r2, #29
 800bc9e:	d512      	bpl.n	800bcc6 <__swsetup_r+0x7a>
 800bca0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bca2:	b141      	cbz	r1, 800bcb6 <__swsetup_r+0x6a>
 800bca4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bca8:	4299      	cmp	r1, r3
 800bcaa:	d002      	beq.n	800bcb2 <__swsetup_r+0x66>
 800bcac:	4630      	mov	r0, r6
 800bcae:	f7ff fb93 	bl	800b3d8 <_free_r>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	6363      	str	r3, [r4, #52]	; 0x34
 800bcb6:	89a3      	ldrh	r3, [r4, #12]
 800bcb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bcbc:	81a3      	strh	r3, [r4, #12]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	6063      	str	r3, [r4, #4]
 800bcc2:	6923      	ldr	r3, [r4, #16]
 800bcc4:	6023      	str	r3, [r4, #0]
 800bcc6:	89a3      	ldrh	r3, [r4, #12]
 800bcc8:	f043 0308 	orr.w	r3, r3, #8
 800bccc:	81a3      	strh	r3, [r4, #12]
 800bcce:	6923      	ldr	r3, [r4, #16]
 800bcd0:	b94b      	cbnz	r3, 800bce6 <__swsetup_r+0x9a>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bcd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bcdc:	d003      	beq.n	800bce6 <__swsetup_r+0x9a>
 800bcde:	4621      	mov	r1, r4
 800bce0:	4630      	mov	r0, r6
 800bce2:	f000 f919 	bl	800bf18 <__smakebuf_r>
 800bce6:	89a2      	ldrh	r2, [r4, #12]
 800bce8:	f012 0301 	ands.w	r3, r2, #1
 800bcec:	d00c      	beq.n	800bd08 <__swsetup_r+0xbc>
 800bcee:	2300      	movs	r3, #0
 800bcf0:	60a3      	str	r3, [r4, #8]
 800bcf2:	6963      	ldr	r3, [r4, #20]
 800bcf4:	425b      	negs	r3, r3
 800bcf6:	61a3      	str	r3, [r4, #24]
 800bcf8:	6923      	ldr	r3, [r4, #16]
 800bcfa:	b953      	cbnz	r3, 800bd12 <__swsetup_r+0xc6>
 800bcfc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd00:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd04:	d1ba      	bne.n	800bc7c <__swsetup_r+0x30>
 800bd06:	bd70      	pop	{r4, r5, r6, pc}
 800bd08:	0792      	lsls	r2, r2, #30
 800bd0a:	bf58      	it	pl
 800bd0c:	6963      	ldrpl	r3, [r4, #20]
 800bd0e:	60a3      	str	r3, [r4, #8]
 800bd10:	e7f2      	b.n	800bcf8 <__swsetup_r+0xac>
 800bd12:	2000      	movs	r0, #0
 800bd14:	e7f7      	b.n	800bd06 <__swsetup_r+0xba>
 800bd16:	bf00      	nop
 800bd18:	20000014 	.word	0x20000014
 800bd1c:	0800daa4 	.word	0x0800daa4
 800bd20:	0800dac4 	.word	0x0800dac4
 800bd24:	0800da84 	.word	0x0800da84

0800bd28 <_close_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	4c06      	ldr	r4, [pc, #24]	; (800bd44 <_close_r+0x1c>)
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	4605      	mov	r5, r0
 800bd30:	4608      	mov	r0, r1
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	f7ff f8c6 	bl	800aec4 <_close>
 800bd38:	1c43      	adds	r3, r0, #1
 800bd3a:	d102      	bne.n	800bd42 <_close_r+0x1a>
 800bd3c:	6823      	ldr	r3, [r4, #0]
 800bd3e:	b103      	cbz	r3, 800bd42 <_close_r+0x1a>
 800bd40:	602b      	str	r3, [r5, #0]
 800bd42:	bd38      	pop	{r3, r4, r5, pc}
 800bd44:	20007708 	.word	0x20007708

0800bd48 <__sflush_r>:
 800bd48:	898a      	ldrh	r2, [r1, #12]
 800bd4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd4e:	4605      	mov	r5, r0
 800bd50:	0710      	lsls	r0, r2, #28
 800bd52:	460c      	mov	r4, r1
 800bd54:	d45a      	bmi.n	800be0c <__sflush_r+0xc4>
 800bd56:	684b      	ldr	r3, [r1, #4]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	dc05      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	dc02      	bgt.n	800bd68 <__sflush_r+0x20>
 800bd62:	2000      	movs	r0, #0
 800bd64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd6a:	2e00      	cmp	r6, #0
 800bd6c:	d0f9      	beq.n	800bd62 <__sflush_r+0x1a>
 800bd6e:	2300      	movs	r3, #0
 800bd70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd74:	682f      	ldr	r7, [r5, #0]
 800bd76:	602b      	str	r3, [r5, #0]
 800bd78:	d033      	beq.n	800bde2 <__sflush_r+0x9a>
 800bd7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	075a      	lsls	r2, r3, #29
 800bd80:	d505      	bpl.n	800bd8e <__sflush_r+0x46>
 800bd82:	6863      	ldr	r3, [r4, #4]
 800bd84:	1ac0      	subs	r0, r0, r3
 800bd86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd88:	b10b      	cbz	r3, 800bd8e <__sflush_r+0x46>
 800bd8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd8c:	1ac0      	subs	r0, r0, r3
 800bd8e:	2300      	movs	r3, #0
 800bd90:	4602      	mov	r2, r0
 800bd92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd94:	6a21      	ldr	r1, [r4, #32]
 800bd96:	4628      	mov	r0, r5
 800bd98:	47b0      	blx	r6
 800bd9a:	1c43      	adds	r3, r0, #1
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	d106      	bne.n	800bdae <__sflush_r+0x66>
 800bda0:	6829      	ldr	r1, [r5, #0]
 800bda2:	291d      	cmp	r1, #29
 800bda4:	d84b      	bhi.n	800be3e <__sflush_r+0xf6>
 800bda6:	4a2b      	ldr	r2, [pc, #172]	; (800be54 <__sflush_r+0x10c>)
 800bda8:	40ca      	lsrs	r2, r1
 800bdaa:	07d6      	lsls	r6, r2, #31
 800bdac:	d547      	bpl.n	800be3e <__sflush_r+0xf6>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	6062      	str	r2, [r4, #4]
 800bdb2:	04d9      	lsls	r1, r3, #19
 800bdb4:	6922      	ldr	r2, [r4, #16]
 800bdb6:	6022      	str	r2, [r4, #0]
 800bdb8:	d504      	bpl.n	800bdc4 <__sflush_r+0x7c>
 800bdba:	1c42      	adds	r2, r0, #1
 800bdbc:	d101      	bne.n	800bdc2 <__sflush_r+0x7a>
 800bdbe:	682b      	ldr	r3, [r5, #0]
 800bdc0:	b903      	cbnz	r3, 800bdc4 <__sflush_r+0x7c>
 800bdc2:	6560      	str	r0, [r4, #84]	; 0x54
 800bdc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bdc6:	602f      	str	r7, [r5, #0]
 800bdc8:	2900      	cmp	r1, #0
 800bdca:	d0ca      	beq.n	800bd62 <__sflush_r+0x1a>
 800bdcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdd0:	4299      	cmp	r1, r3
 800bdd2:	d002      	beq.n	800bdda <__sflush_r+0x92>
 800bdd4:	4628      	mov	r0, r5
 800bdd6:	f7ff faff 	bl	800b3d8 <_free_r>
 800bdda:	2000      	movs	r0, #0
 800bddc:	6360      	str	r0, [r4, #52]	; 0x34
 800bdde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde2:	6a21      	ldr	r1, [r4, #32]
 800bde4:	2301      	movs	r3, #1
 800bde6:	4628      	mov	r0, r5
 800bde8:	47b0      	blx	r6
 800bdea:	1c41      	adds	r1, r0, #1
 800bdec:	d1c6      	bne.n	800bd7c <__sflush_r+0x34>
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d0c3      	beq.n	800bd7c <__sflush_r+0x34>
 800bdf4:	2b1d      	cmp	r3, #29
 800bdf6:	d001      	beq.n	800bdfc <__sflush_r+0xb4>
 800bdf8:	2b16      	cmp	r3, #22
 800bdfa:	d101      	bne.n	800be00 <__sflush_r+0xb8>
 800bdfc:	602f      	str	r7, [r5, #0]
 800bdfe:	e7b0      	b.n	800bd62 <__sflush_r+0x1a>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be06:	81a3      	strh	r3, [r4, #12]
 800be08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be0c:	690f      	ldr	r7, [r1, #16]
 800be0e:	2f00      	cmp	r7, #0
 800be10:	d0a7      	beq.n	800bd62 <__sflush_r+0x1a>
 800be12:	0793      	lsls	r3, r2, #30
 800be14:	680e      	ldr	r6, [r1, #0]
 800be16:	bf08      	it	eq
 800be18:	694b      	ldreq	r3, [r1, #20]
 800be1a:	600f      	str	r7, [r1, #0]
 800be1c:	bf18      	it	ne
 800be1e:	2300      	movne	r3, #0
 800be20:	eba6 0807 	sub.w	r8, r6, r7
 800be24:	608b      	str	r3, [r1, #8]
 800be26:	f1b8 0f00 	cmp.w	r8, #0
 800be2a:	dd9a      	ble.n	800bd62 <__sflush_r+0x1a>
 800be2c:	4643      	mov	r3, r8
 800be2e:	463a      	mov	r2, r7
 800be30:	6a21      	ldr	r1, [r4, #32]
 800be32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be34:	4628      	mov	r0, r5
 800be36:	47b0      	blx	r6
 800be38:	2800      	cmp	r0, #0
 800be3a:	dc07      	bgt.n	800be4c <__sflush_r+0x104>
 800be3c:	89a3      	ldrh	r3, [r4, #12]
 800be3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be42:	81a3      	strh	r3, [r4, #12]
 800be44:	f04f 30ff 	mov.w	r0, #4294967295
 800be48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be4c:	4407      	add	r7, r0
 800be4e:	eba8 0800 	sub.w	r8, r8, r0
 800be52:	e7e8      	b.n	800be26 <__sflush_r+0xde>
 800be54:	20400001 	.word	0x20400001

0800be58 <_fflush_r>:
 800be58:	b538      	push	{r3, r4, r5, lr}
 800be5a:	690b      	ldr	r3, [r1, #16]
 800be5c:	4605      	mov	r5, r0
 800be5e:	460c      	mov	r4, r1
 800be60:	b1db      	cbz	r3, 800be9a <_fflush_r+0x42>
 800be62:	b118      	cbz	r0, 800be6c <_fflush_r+0x14>
 800be64:	6983      	ldr	r3, [r0, #24]
 800be66:	b90b      	cbnz	r3, 800be6c <_fflush_r+0x14>
 800be68:	f7ff fa24 	bl	800b2b4 <__sinit>
 800be6c:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <_fflush_r+0x48>)
 800be6e:	429c      	cmp	r4, r3
 800be70:	d109      	bne.n	800be86 <_fflush_r+0x2e>
 800be72:	686c      	ldr	r4, [r5, #4]
 800be74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be78:	b17b      	cbz	r3, 800be9a <_fflush_r+0x42>
 800be7a:	4621      	mov	r1, r4
 800be7c:	4628      	mov	r0, r5
 800be7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be82:	f7ff bf61 	b.w	800bd48 <__sflush_r>
 800be86:	4b07      	ldr	r3, [pc, #28]	; (800bea4 <_fflush_r+0x4c>)
 800be88:	429c      	cmp	r4, r3
 800be8a:	d101      	bne.n	800be90 <_fflush_r+0x38>
 800be8c:	68ac      	ldr	r4, [r5, #8]
 800be8e:	e7f1      	b.n	800be74 <_fflush_r+0x1c>
 800be90:	4b05      	ldr	r3, [pc, #20]	; (800bea8 <_fflush_r+0x50>)
 800be92:	429c      	cmp	r4, r3
 800be94:	bf08      	it	eq
 800be96:	68ec      	ldreq	r4, [r5, #12]
 800be98:	e7ec      	b.n	800be74 <_fflush_r+0x1c>
 800be9a:	2000      	movs	r0, #0
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	0800daa4 	.word	0x0800daa4
 800bea4:	0800dac4 	.word	0x0800dac4
 800bea8:	0800da84 	.word	0x0800da84

0800beac <_lseek_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	4c07      	ldr	r4, [pc, #28]	; (800becc <_lseek_r+0x20>)
 800beb0:	4605      	mov	r5, r0
 800beb2:	4608      	mov	r0, r1
 800beb4:	4611      	mov	r1, r2
 800beb6:	2200      	movs	r2, #0
 800beb8:	6022      	str	r2, [r4, #0]
 800beba:	461a      	mov	r2, r3
 800bebc:	f7ff f80c 	bl	800aed8 <_lseek>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_lseek_r+0x1e>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	b103      	cbz	r3, 800beca <_lseek_r+0x1e>
 800bec8:	602b      	str	r3, [r5, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	20007708 	.word	0x20007708

0800bed0 <__swhatbuf_r>:
 800bed0:	b570      	push	{r4, r5, r6, lr}
 800bed2:	460e      	mov	r6, r1
 800bed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bed8:	2900      	cmp	r1, #0
 800beda:	b090      	sub	sp, #64	; 0x40
 800bedc:	4614      	mov	r4, r2
 800bede:	461d      	mov	r5, r3
 800bee0:	da07      	bge.n	800bef2 <__swhatbuf_r+0x22>
 800bee2:	2300      	movs	r3, #0
 800bee4:	602b      	str	r3, [r5, #0]
 800bee6:	89b3      	ldrh	r3, [r6, #12]
 800bee8:	061a      	lsls	r2, r3, #24
 800beea:	d410      	bmi.n	800bf0e <__swhatbuf_r+0x3e>
 800beec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bef0:	e00e      	b.n	800bf10 <__swhatbuf_r+0x40>
 800bef2:	aa01      	add	r2, sp, #4
 800bef4:	f000 f864 	bl	800bfc0 <_fstat_r>
 800bef8:	2800      	cmp	r0, #0
 800befa:	dbf2      	blt.n	800bee2 <__swhatbuf_r+0x12>
 800befc:	9a02      	ldr	r2, [sp, #8]
 800befe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf02:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf06:	425a      	negs	r2, r3
 800bf08:	415a      	adcs	r2, r3
 800bf0a:	602a      	str	r2, [r5, #0]
 800bf0c:	e7ee      	b.n	800beec <__swhatbuf_r+0x1c>
 800bf0e:	2340      	movs	r3, #64	; 0x40
 800bf10:	2000      	movs	r0, #0
 800bf12:	6023      	str	r3, [r4, #0]
 800bf14:	b010      	add	sp, #64	; 0x40
 800bf16:	bd70      	pop	{r4, r5, r6, pc}

0800bf18 <__smakebuf_r>:
 800bf18:	898b      	ldrh	r3, [r1, #12]
 800bf1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf1c:	079d      	lsls	r5, r3, #30
 800bf1e:	4606      	mov	r6, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	d507      	bpl.n	800bf34 <__smakebuf_r+0x1c>
 800bf24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf28:	6023      	str	r3, [r4, #0]
 800bf2a:	6123      	str	r3, [r4, #16]
 800bf2c:	2301      	movs	r3, #1
 800bf2e:	6163      	str	r3, [r4, #20]
 800bf30:	b002      	add	sp, #8
 800bf32:	bd70      	pop	{r4, r5, r6, pc}
 800bf34:	ab01      	add	r3, sp, #4
 800bf36:	466a      	mov	r2, sp
 800bf38:	f7ff ffca 	bl	800bed0 <__swhatbuf_r>
 800bf3c:	9900      	ldr	r1, [sp, #0]
 800bf3e:	4605      	mov	r5, r0
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff fa97 	bl	800b474 <_malloc_r>
 800bf46:	b948      	cbnz	r0, 800bf5c <__smakebuf_r+0x44>
 800bf48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf4c:	059a      	lsls	r2, r3, #22
 800bf4e:	d4ef      	bmi.n	800bf30 <__smakebuf_r+0x18>
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	f043 0302 	orr.w	r3, r3, #2
 800bf58:	81a3      	strh	r3, [r4, #12]
 800bf5a:	e7e3      	b.n	800bf24 <__smakebuf_r+0xc>
 800bf5c:	4b0d      	ldr	r3, [pc, #52]	; (800bf94 <__smakebuf_r+0x7c>)
 800bf5e:	62b3      	str	r3, [r6, #40]	; 0x28
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	6020      	str	r0, [r4, #0]
 800bf64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf68:	81a3      	strh	r3, [r4, #12]
 800bf6a:	9b00      	ldr	r3, [sp, #0]
 800bf6c:	6163      	str	r3, [r4, #20]
 800bf6e:	9b01      	ldr	r3, [sp, #4]
 800bf70:	6120      	str	r0, [r4, #16]
 800bf72:	b15b      	cbz	r3, 800bf8c <__smakebuf_r+0x74>
 800bf74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf78:	4630      	mov	r0, r6
 800bf7a:	f000 f833 	bl	800bfe4 <_isatty_r>
 800bf7e:	b128      	cbz	r0, 800bf8c <__smakebuf_r+0x74>
 800bf80:	89a3      	ldrh	r3, [r4, #12]
 800bf82:	f023 0303 	bic.w	r3, r3, #3
 800bf86:	f043 0301 	orr.w	r3, r3, #1
 800bf8a:	81a3      	strh	r3, [r4, #12]
 800bf8c:	89a3      	ldrh	r3, [r4, #12]
 800bf8e:	431d      	orrs	r5, r3
 800bf90:	81a5      	strh	r5, [r4, #12]
 800bf92:	e7cd      	b.n	800bf30 <__smakebuf_r+0x18>
 800bf94:	0800b235 	.word	0x0800b235

0800bf98 <__malloc_lock>:
 800bf98:	4770      	bx	lr

0800bf9a <__malloc_unlock>:
 800bf9a:	4770      	bx	lr

0800bf9c <_read_r>:
 800bf9c:	b538      	push	{r3, r4, r5, lr}
 800bf9e:	4c07      	ldr	r4, [pc, #28]	; (800bfbc <_read_r+0x20>)
 800bfa0:	4605      	mov	r5, r0
 800bfa2:	4608      	mov	r0, r1
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	2200      	movs	r2, #0
 800bfa8:	6022      	str	r2, [r4, #0]
 800bfaa:	461a      	mov	r2, r3
 800bfac:	f7fe ff96 	bl	800aedc <_read>
 800bfb0:	1c43      	adds	r3, r0, #1
 800bfb2:	d102      	bne.n	800bfba <_read_r+0x1e>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	b103      	cbz	r3, 800bfba <_read_r+0x1e>
 800bfb8:	602b      	str	r3, [r5, #0]
 800bfba:	bd38      	pop	{r3, r4, r5, pc}
 800bfbc:	20007708 	.word	0x20007708

0800bfc0 <_fstat_r>:
 800bfc0:	b538      	push	{r3, r4, r5, lr}
 800bfc2:	4c07      	ldr	r4, [pc, #28]	; (800bfe0 <_fstat_r+0x20>)
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	4605      	mov	r5, r0
 800bfc8:	4608      	mov	r0, r1
 800bfca:	4611      	mov	r1, r2
 800bfcc:	6023      	str	r3, [r4, #0]
 800bfce:	f7fe ff7c 	bl	800aeca <_fstat>
 800bfd2:	1c43      	adds	r3, r0, #1
 800bfd4:	d102      	bne.n	800bfdc <_fstat_r+0x1c>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	b103      	cbz	r3, 800bfdc <_fstat_r+0x1c>
 800bfda:	602b      	str	r3, [r5, #0]
 800bfdc:	bd38      	pop	{r3, r4, r5, pc}
 800bfde:	bf00      	nop
 800bfe0:	20007708 	.word	0x20007708

0800bfe4 <_isatty_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4c06      	ldr	r4, [pc, #24]	; (800c000 <_isatty_r+0x1c>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4605      	mov	r5, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	f7fe ff70 	bl	800aed4 <_isatty>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_isatty_r+0x1a>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_isatty_r+0x1a>
 800bffc:	602b      	str	r3, [r5, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20007708 	.word	0x20007708

0800c004 <_init>:
 800c004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c006:	bf00      	nop
 800c008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00a:	bc08      	pop	{r3}
 800c00c:	469e      	mov	lr, r3
 800c00e:	4770      	bx	lr

0800c010 <_fini>:
 800c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c012:	bf00      	nop
 800c014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c016:	bc08      	pop	{r3}
 800c018:	469e      	mov	lr, r3
 800c01a:	4770      	bx	lr
